---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRUitqdnIvOFFUVHVWbDM3S3U5bWhlakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek14V2hjTk1qY3dOakV4TVRreQpOek14V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRFFLd1NiY3JhT2hmSXJiNGNZMWJCbEk1ZWRZeElCRHJ3QjJ3L1pRS3NJTmlsRjVrV3gKNjFDOFlsamZZMjEycWhCZHpDb2VXOTJSdThzZURVNXEyamY1YVhKUSt3SC9KWXptSiszbVpSazFSWWQzalBMKwp5OS91VFpSSlJmaWJqUkFkeFhnTHkvV2FVaUp3bEF5Q3JFd0cwMVpUdzVMUDBNNGN5bEtXSnVwTjlQYWY3VThqClJqbS8zWWN6eG4xL2d4aVY1RmJiRlJ6NjVkdDFSMy9vdnlQOW5rNmZTaDVpVHlwQlRMREZYamdPNUJsOHp5T1gKSGVWaExrcjM4UUhBYU83OFJITUpWYXorb0tFZWNVakd1N2dGbG5ybDFPd0p3MHRyTGx6QWMyQm90NDFSdHlnVApXb3ZkOERxRzJuODBWUVlkQlJXVHVFZDRGS29rVFNQdmw0c0xBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVHdjcvVERNbUpmK3ZaOFRrWnY5YXgxQWl5d1l3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFIMTdjR1RQU05YdzYrNTV1ZnBOaEJtSTJQTGZlQmhvaVBZVlhXL2dDRFJzR01NeXZ1STB5ejl5CkpVRys1bS94cHJUZWJsR0k2TVJSaVU1T1A2Rjk3U3Q4TFJVeTFXR1dYdlYxaGRldkVVaTRQMkliTHczT2hNQy8KUkVKZEJEblFrcm1XdDluT2NScWo3anRYTjlFMjIvNTJXb3RwSWdPN0ZiRmJqbzB2MjNjZGdhTmNDY0UrTG5ZUgpGUkJ0QzZKdnJQZlpJbnl4dFVnaDRiN25MTmVqNXFCZDhBQW9CWUg4c0NJWGlYUDdzSDRHNlQxV2ovSW9XVGFKCkVLbVZPWUdqYXYwMmt1dUdQRGVuQk1IalQrZVZxd1pTWlBRbElpQ1RpaEdLczc4SUY2UTlRejIramtPSzRoTWoKaEp0TUd0bG4rMUhYRENRb1hwbFRWcXdIR05hdHNEUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMENzRW0zSzJqb1h5SzIrSEdOV3daU09YbldNU0FRNjhBZHNQMlVDckNEWXBSZVpGCnNldFF2R0pZMzJOdGRxb1FYY3dxSGx2ZGtidkxIZzFPYXRvMytXbHlVUHNCL3lXTTVpZnQ1bVVaTlVXSGQ0enkKL3N2ZjdrMlVTVVg0bTQwUUhjVjRDOHYxbWxJaWNKUU1ncXhNQnROV1U4T1N6OURPSE1wU2xpYnFUZlQybisxUApJMFk1djkySE04WjlmNE1ZbGVSVzJ4VWMrdVhiZFVkLzZMOGovWjVPbjBvZVlrOHFRVXl3eFY0NER1UVpmTThqCmx4M2xZUzVLOS9FQndHanUvRVJ6Q1ZXcy9xQ2hIbkZJeHJ1NEJaWjY1ZFRzQ2NOTGF5NWN3SE5nYUxlTlViY28KRTFxTDNmQTZodHAvTkZVR0hRVVZrN2hIZUJTcUpFMGo3NWVMQ3dJREFRQUJBb0lCQVFDc0tUZTVQQ2toUEVRcAppaVpuOHFyZEtvK0V1ZCsxQWpPWk1Vd3RPQjk3UGhmcVdHU0JuZ1Q2bURlNklLZnlRUG9pS08wWWlJOTVySjl5CjdqeFJnTUpVUXRJcGlUNkFmdFRGc0hZL1dwTjdqRkphSERjSFpTT0JHYVl1NTNDUmJSdk1FM21TQUEvU25tVWYKU0VJRWZHeXdKRzY3L2Y1WVl1OWp2aXlKUkF2NWhjWEV4YVpKN3kvZGNyRUIrOXRJYlArZjRPQmRPcmtUSDhUeQprcWIxUzE2QytseExjeFNxNllsaWVtemJkeHpOZHRucmtNcGZqMWtsSzFHNnJlT3Awb1liUVRncGNKNE9yUmMzCjNqUWEwLzlRaDQ4ZFdxNTVYOFh1Z3RNTU52QjVNT2lpdnpvTTgvcEN0TzNqWTdwMkJTMmhtUDhWY2hJaDhETDkKeHpkWnFqQXBBb0dCQU9BeU9UcWdTQkliakFvd01tWXJqNlNhZ2VyQVZNSUNqZytheDd5UzNOUklvbzdGVE9ISQpjSVd2K0cza2E2RkkyUXB0UnQ5anRUaDRwd1hGTUVuTHBXanloY2hDaDg5bU1RcEFUZ2ZOWklWR0pybkZHNkM5CnpuRkdhbU0vcFMyV0VGRDZoNEI5TTl5ZU9pUnJVRUIzWDBzb1FqTGxpSWJ3Ykt4SllyMkt2TmVuQW9HQkFPMnkKdWNrUTNwcm5JbHo3cUl1K09JUE9IWVkvSndIUHpOSmJEbEhWWHJtYnAxaGpDaFFVd3JrTUdDdnZJYVBLNmhiZwpJd0hDS3UrSDRFMW5BdnVmR0IyZnpFMEhOd1pBUTJQM1o1VjUxRGc0TGhTZW1nbDlHRlRBTTM3SDliNEhKM09RCnZRNjhHZ0I2c1hXbW4rNEhxdldvRmxYMDNQaWk0MjJlaitZZVE1MzlBb0dCQUtoK1ZuQnZJWHNxWk5jTFhmVlgKYTc5RHQ3d2NEQmM3SUZVdCtFc0svUmcxOXFYaU5tUEI1bjh5dnp5bjNSUDcwZEo2U2pkOWtpYjgxbG9KMXI2LwpaSE01UWI0OThoKzNKOGdTaUJKcEZORHM1aEhieDJYSkFLdzFSYU9ObzdCZEJhbzJmenZiM094RHBtTFVuQjIzCkdWRTgwbk81K2grZjlheU9BcjE4MVd3bEFvR0FNUjZZNCtMM2pWMHNMYmpYbUtFamZxRk9XcHFjVGZTS0tBSW4KRUdRZVlnNjNZejE4TExBcG1TSFZzT2FHdGhsTmpKS2V5Vk05bWlnakF2dkJrd3ZLYVB6SHREZEVlS2M1QmVSdgpaR1U3cEs1L1gwVnpJWGpYV1ZRcWtBMTBTK09nbEhJWmozenhocDNVSkRMZG84dXoyWFgxdjZlTkxsaEMxVGxLCkZVeTF2bVVDZ1lCelBpcHpIenk3SHlnbXltL3JmZ1RVenN3TjEyY0hSdlFtUk9XMVVLbFdmTk9xeDJiZ3NFekEKbDBZM09ySnNlRUd1eFNYVzJQeS9uTTNaYS83b1dDQWloZGJPcnJDY3ZrTXZQOGd2ZlBIczNLL2xjaU1saXFUNQpYdUVpYk1hdVFVTUNHdUY3eGFXU3ArVGhrNFA1TmRIVE5HcjNBNFh5SEs1WEtFYnpaMmZ4U3c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRUitqdnIvOFFUVHVWbDM3S3U5bWhlakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek14V2hjTk1qY3dOakV4TVRreQpOek14V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRFFLd1NiY3JhT2hmSXJiNGNZMWJCbEk1ZWRZeElCRHJ3QjJ3L1pRS3NJTmlsRjVrV3gKNjFDOFlsamZZMjEycWhCZHpDb2VXOTJSdThzZURVNXEyamY1YVhKUSt3SC9KWXptSiszbVpSazFSWWQzalBMKwp5OS91VFpSSlJmaWJqUkFkeFhnTHkvV2FVaUp3bEF5Q3JFd0cwMVpUdzVMUDBNNGN5bEtXSnVwTjlQYWY3VThqClJqbS8zWWN6eG4xL2d4aVY1RmJiRlJ6NjVkdDFSMy9vdnlQOW5rNmZTaDVpVHlwQlRMREZYamdPNUJsOHp5T1gKSGVWaExrcjM4UUhBYU83OFJITUpWYXorb0tFZWNVakd1N2dGbG5ybDFPd0p3MHRyTGx6QWMyQm90NDFSdHlnVApXb3ZkOERxRzJuODBWUVlkQlJXVHVFZDRGS29rVFNQdmw0c0xBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVHdjcvVERNbUpmK3ZaOFRrWnY5YXgxQWl5d1l3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFIMTdjR1RQU05YdzYrNTV1ZnBOaEJtSTJQTGZlQmhvaVBZVlhXL2dDRFJzR01NeXZ1STB5ejl5CkpVRys1bS94cHJUZWJsR0k2TVJSaVU1T1A2Rjk3U3Q4TFJVeTFXR1dYdlYxaGRldkVVaTRQMkliTHczT2hNQy8KUkVKZEJEblFrcm1XdDluT2NScWo3anRYTjlFMjIvNTJXb3RwSWdPN0ZiRmJqbzB2MjNjZGdhTmNDY0UrTG5ZUgpGUkJ0QzZKdnJQZlpJbnl4dFVnaDRiN25MTmVqNXFCZDhBQW9CWUg4c0NJWGlYUDdzSDRHNlQxV2ovSW9XVGFKCkVLbVZPWUdqYXYwMmt1dUdQRGVuQk1IalQrZVZxd1pTWlBRbElpQ1RpaEdLczc4SUY2UTlRejIramtPSzRoTWoKaEp0TUd0bG4rMUhYRENRb1hwbFRWcXdIR05hdHNEUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLVENDQWhHZ0F3SUJBZ0lSQVB3MEVXaHBxbUJIRmlOTUJiKzJUL2t3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN6TVZvWERUSTNNRFl4TVRFNQpNamN6TVZvd0ZERVNNQkFHQTFVRUF4TUpZV1J0YVc0dFl6RXdNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFydGhIWWdtYmkvb0hXaG5jb2l0UTd0b083akI3WmxJdVB6Tk5hbjBvdGFkL2VWZ0EKQzJ0dDlXWE1YcjFxalFyOFJlTTR2WDN4UG1zbEpHeW9SbENxeVhLbDUrZ2pESG1wdzJFQTM4WVcrcXNwOVZyZQpjTkR3aUJmY2U4V2d2MEs5OSszeTE1d1Z2UG8zRUtYOE56MTY2TDlqWmFIM3FXRW92UTJQQXVTUFNkaHZnbWx6Ck5SdEdKSmN5VTBGdXRPMEgySjYwM1VuN0t3ZmhZREZPZ3JZSGdiSFJvbkZqaDBTVnpWUVlSUTlUdEJJYktqU3UKcHUyb1ZjSkY2aVJEd2xWV3k5VmhTdDdMYVlMOGJLLy8yWmJvMWVIV1pGb3cxbVhSa21vMWx0cFhFM1YwUHlTbQpYdGZJZVhOc2tieVFBOTArMEgyM2hWSGVaYXZjcXVXRWpaQ2VEUUlEQVFBQm8zWXdkREFPQmdOVkhROEJBZjhFCkJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUMKTUFBd0h3WURWUjBqQkJnd0ZvQVVHdjcvVERNbUpmK3ZaOFRrWnY5YXgxQWl5d1l3RkFZRFZSMFJCQTB3QzRJSgpiRzlqWVd4b2IzTjBNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFUdUcwbjFVV3piWXo4S3dYdzJ4MFNkOXpHCjlVVnI1d2pubndWM0NhYS82TTY0WGJYZDhJMVBjdW53OU9ISVFLdHBuWHhHbEFxY0dOcUtPaVJONHR0RVZudnkKVVJKcHpvdHlQYnVVRlZOcEYzeFAxR2RqbDVpaDZ1OVorZVp6ZW8rT2FwY2hteG4wYTVSSmw0STNwVGlKY3pCdApmMjlXTmJtek9lVm1HVTVOSUNTRUVHb0J6MFNJci9Rb2FBZVpXN09EUTdzUkFuazVHdVVQem9QeFBJQ1NtaGVXClF6QXRqbUpGQThaVVZTOHNiMTk3RkZVbnRGTS9POUNCSDhiMFRGczU3WXVXN1dKTkNJT3NSYlVla0c1Y1lXSUIKSE1IUHdvWVJnNi9tRDhPMis3bENGck9tbVJST3pSMXdRSEdGQmpRYlowMm0zblBZNklLZ09DczdCcXVFCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBcnRoSFlnbWJpL29IV2huY29pdFE3dG9PN2pCN1psSXVQek5OYW4wb3RhZC9lVmdBCkMydHQ5V1hNWHIxcWpRcjhSZU00dlgzeFBtc2xKR3lvUmxDcXlYS2w1K2dqREhtcHcyRUEzOFlXK3FzcDlWcmUKY05Ed2lCZmNlOFdndjBLOTkrM3kxNXdWdlBvM0VLWDhOejE2Nkw5alphSDNxV0VvdlEyUEF1U1BTZGh2Z21segpOUnRHSkpjeVUwRnV0TzBIMko2MDNVbjdLd2ZoWURGT2dyWUhnYkhSb25GamgwU1Z6VlFZUlE5VHRCSWJLalN1CnB1Mm9WY0pGNmlSRHdsVld5OVZoU3Q3TGFZTDhiSy8vMlpibzFlSFdaRm93MW1YUmttbzFsdHBYRTNWMFB5U20KWHRmSWVYTnNrYnlRQTkwKzBIMjNoVkhlWmF2Y3F1V0VqWkNlRFFJREFRQUJBb0lCQURLMkIvNG5TellPRHBQVApiR3FjcFp5aElqTnpYRmNRL3RqVnlGNWFiclJCSUhmUlRqSUJ0cUsySTlCV245REludUttUkk2eE9JY2lER1BFCklBcEUyMFFTUEl4R2grUFdaYWFGTy91ck9INzdwZS9EcTBDTldUWWZ0Wk13ZnE3NmJKNjhKUExrRW1uOUtIdHIKcVB0Y21ZbG4rU3hCRGRQU21qNDY4SCttU3VqZm9xbTA1Ykdmc0JsVC9kdEQ3UXFCbHNmbHJUUFM3V2FMdGdkcQpUaytFOUVzR3VSWGpyUmJIUDBZVEppd3BYQjhTYTZLRDZ0RU1BTGQ5bGlMZEpHeVhCa0x6TThsczNFeWxoWmNUCjV4eTA4MExoaE5Ybm9rdktPZXZBN2l2RlJvUUlObDlCMVhnckp2bnRiNXJnUHJjOVVrVi8wK0tKSkNmRmZOVEkKOXl4bW53RUNnWUVBekFqT1BXNFJ0RWowcitUM2E5TDUzbXNaMFZxVlVxcVo3eTlXQXRDNFFHSjVSWVNNcnQrRwppQlRUMHVXSGZqS0NBOXVNdHdHTmIzRjlsVW80UUU5aTFVb093VHd0L1kxVVp4ekgxK0daUk03Slk4dndrR1RMCkozYzQ1c1BhS1p3OXIyWnJBNERvNEIyaXNOSWx5RG5GQUxmdFZaNmNpeGUvQXdLNm5IcTFVWDhDZ1lFQTIyQksKMTA1S243NUY5K0hFUy9SSTZLZFJVWDlCa2kzR1Y2VEk1dTRSalNmb1ZKRUIrTkwvUTlnbEs0WWIrblRlWW5JMwp1K09QWS9FNGNHYzBVY0Z5UUlLNTBoaVlLVkNGWlJhc3RLeWZlUXBEY1B5cGhDc3Z0SldveFN2emJ0bElPSzI3Cmd3NHh1SE9zMVg2Nm8wVm9ScTF3SmZheHlaaGFyKzNvWUFjLy9uTUNnWUVBZ2w4T0NVcVBuWGNRZ21QM2hMb20KVnV4d2JzbEdxSy9COUlkMm1nM3I3WmYraldFSTA2U1lQZE94Rmd6NzZyTXpTR3U5R2lLdjBRbmZpTWtIOEcvSgpZeWdURFgzNmxRejlaWFdLYkhNR2tHVGhZaGNwKzltcnhlZjBQOS9kUXNGRzJSREVTRlRTZUlIM05xelEzNE9xClVhODB3NFM1MmxhdUFxcDN1d3pkVnRrQ2dZRUFwRTRwbjdxK3Y0Z21KWE5OcjBtbWRjSWpjTE9zSzh6bStldXMKb1BGNzZjb1RBNHViKzM0a3UrNmVZRXZRbHJTRGZ4NW15ZTIxRHJpemVkU0NaaDFKOGpFMjlibC85YW1lVDBrOQpUeERmWEN1b3VXNHpsSTgzNnJ3UXJLU3ZiYjJGanhYb0ZFOUVSQTgzU3F2aEk3b3ZVSWhFTDlybDY4U1ZYNkVECll6RHE2Q3NDZ1lBaXI5WHdYY2JUaEdNbG90VFJsWi82RkNob25mL25oVmJ6Mm5KVGIzZGdWRjR2VnRmTUNaS3AKWFlSMnZUazZ4WW9uSWtQS0dJWTFTUGd2eHpCOGtyeTFqV3RRS0R1cHQ4d1QyWE5qMlR0Tmh2VnovdWo1djlkUgpXQVlwOCtaa0V6SW1vY1BQd1Avb0tLMjZGd2dCNkNMUDJrYzRpdzVJd3VxNHFrU1BOV1Q2NHc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRUitqdnIvOFFUVHVWbDM3S3U5bWhlakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek14V2hjTk1qY3dOakV4TVRreQpOek14V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRFFLd1NiY3JhT2hmSXJiNGNZMWJCbEk1ZWRZeElCRHJ3QjJ3L1pRS3NJTmlsRjVrV3gKNjFDOFlsamZZMjEycWhCZHpDb2VXOTJSdThzZURVNXEyamY1YVhKUSt3SC9KWXptSiszbVpSazFSWWQzalBMKwp5OS91VFpSSlJmaWJqUkFkeFhnTHkvV2FVaUp3bEF5Q3JFd0cwMVpUdzVMUDBNNGN5bEtXSnVwTjlQYWY3VThqClJqbS8zWWN6eG4xL2d4aVY1RmJiRlJ6NjVkdDFSMy9vdnlQOW5rNmZTaDVpVHlwQlRMREZYamdPNUJsOHp5T1gKSGVWaExrcjM4UUhBYU83OFJITUpWYXorb0tFZWNVakd1N2dGbG5ybDFPd0p3MHRyTGx6QWMyQm90NDFSdHlnVApXb3ZkOERxRzJuODBWUVlkQlJXVHVFZDRGS29rVFNQdmw0c0xBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVHdjcvVERNbUpmK3ZaOFRrWnY5YXgxQWl5d1l3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFIMTdjR1RQU05YdzYrNTV1ZnBOaEJtSTJQTGZlQmhvaVBZVlhXL2dDRFJzR01NeXZ1STB5ejl5CkpVRys1bS94cHJUZWJsR0k2TVJSaVU1T1A2Rjk3U3Q4TFJVeTFXR1dYdlYxaGRldkVVaTRQMkliTHczT2hNQy8KUkVKZEJEblFrcm1XdDluT2NScWo3anRYTjlFMjIvNTJXb3RwSWdPN0ZiRmJqbzB2MjNjZGdhTmNDY0UrTG5ZUgpGUkJ0QzZKdnJQZlpJbnl4dFVnaDRiN25MTmVqNXFCZDhBQW9CWUg4c0NJWGlYUDdzSDRHNlQxV2ovSW9XVGFKCkVLbVZPWUdqYXYwMmt1dUdQRGVuQk1IalQrZVZxd1pTWlBRbElpQ1RpaEdLczc4SUY2UTlRejIramtPSzRoTWoKaEp0TUd0bG4rMUhYRENRb1hwbFRWcXdIR05hdHNEUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lSQU5nYS9GUVBYRUJnaGNDSXZ0a29OcjR3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN6TVZvWERUSTNNRFl4TVRFNQpNamN6TVZvd0VURVBNQTBHQTFVRUF4TUdjbVZ0YjNSbE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBCk1JSUJDZ0tDQVFFQXhJby8wZnJZNys4ZE9Xd3d5bTN2KzBiUHdic1FKZkpzY1p1dHc2eDNSZURUMnBENVQ1dVEKLzM1bDVRQUY4THhBL1BFVXpGYmVsWFlIYk0xN1dhSndvUlF3bnRoN09uczRTU01udmxINzZYNzArcm9CVVgrYwpQRlpvRTlxdFNDTzZ1a1NvaHIxT3lBWE9NMnJFeXJVRGJVY2dWdDRCclFZQ3RxSWx3NThPTFY3dTloNE9pTVdTCjhNU2l5UmNCKy9iVlN1dzJLdUdKNXJqNG80NUhkVlNidUkzMnEyMEVYNEszK0x6eEJ4cWNacWdxZ2EyeWZPR3kKV1NCeE5MZ0cxUHhwUHBvWGVYK3BqTkdwekVtV0tCQmRqYjVPa3dUUGM3eUJQQTlRRFdManN4UjNZR3JsVzFFcgpkTE1RMGVreXg1MzkxMXpQZk1mb3FMZ2N4dGtBanByREZ3SURBUUFCbzJBd1hqQU9CZ05WSFE4QkFmOEVCQU1DCkJhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXcKSHdZRFZSMGpCQmd3Rm9BVUd2Ny9URE1tSmYrdlo4VGtadjlheDFBaXl3WXdEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUY0TmdubE4rUmltM1NZRXdyU1lFc01DaGQ0MERLSU5makdIM3JUWGlzam1jM3BWaHEzd25uSk9ycTVKCkFkY3Q4R0Y3K3VuRE9rcHBqbnRkWE9OMGJyOGpGWG1CYkhldXVHUXpBUHdhVkhKMG9tanhib3djSEZoYzJFNkgKeDAyMzdxNEVOVnc1MzNtVE5XM1JxUlAvMGpnV0huWmxJVDBWYnkrR0V3RElUNitpUmM3bCtWVS8weUZObWdBMwp0enVwMXdkd05KRGdSL2lGbUpvdDl2a3VYVlQvR2xvaUtVQStGeUpxVFNqeE10eTEvTjVmSEx2MGprR3hqcU1tCithZ0kwREp2aHY4dmN1WFBtVXc1Z25DcTltRkhlZksyb2ptQlgzdmhkVXVjZ3N5R0J5UkRSUEZ4VnA3eWZyZFQKMEV0d3JCMzhDdjF5cTNMQTNDWnRkRU5hMkZ3PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeElvLzBmclk3KzhkT1d3d3ltM3YrMGJQd2JzUUpmSnNjWnV0dzZ4M1JlRFQycEQ1ClQ1dVEvMzVsNVFBRjhMeEEvUEVVekZiZWxYWUhiTTE3V2FKd29SUXdudGg3T25zNFNTTW52bEg3Nlg3MCtyb0IKVVgrY1BGWm9FOXF0U0NPNnVrU29ocjFPeUFYT00yckV5clVEYlVjZ1Z0NEJyUVlDdHFJbHc1OE9MVjd1OWg0TwppTVdTOE1TaXlSY0IrL2JWU3V3Mkt1R0o1cmo0bzQ1SGRWU2J1STMycTIwRVg0SzMrTHp4QnhxY1pxZ3FnYTJ5CmZPR3lXU0J4TkxnRzFQeHBQcG9YZVgrcGpOR3B6RW1XS0JCZGpiNU9rd1RQYzd5QlBBOVFEV0xqc3hSM1lHcmwKVzFFcmRMTVEwZWt5eDUzOTExelBmTWZvcUxnY3h0a0FqcHJERndJREFRQUJBb0lCQUJ2ejhibkNyS0lMWnlPbwpvSlBaNlB6YkNHZHNYSktaRlJWZlorcGhtQ0VuSmRwN0xncEZmT3pwcEVKYXEzMmV1THVBNmsxWnVaU1dVZDRHCnA1bUxBZXZXL0VkTFVOTnpmUURoOENBZ2R1eXhzdFFLS20vVjczbWhiSElPY3dERW5DVXI2TEFwTXBBK1N5S0MKOS9SQXBIa2hXWmNoUWluQ3BoWWxuNnRmN3R0QzJtKzlXS1FOdkZLNG5iUzVKOUF2ei83SjR6a2dBZHRJL3ZyQQpxTnVuUGFwMEFmaCtxbGlaUXc3WHBwaHB2dTBvcE5FVWNac2Z2ODZRb1o0MElUVlJ1dHh2d01EaldKemZMM0dICjZ0T3l1TDhjSEloTVA1b3VMTVcwWUJoMXRWUDFSYzUwMVo5MjVrK3Y3MVpFcVoreW9PSlNPQ2RSUmVJZTlWRGIKY1RXWnJka0NnWUVBMktuQkNmb3p5N1NuYUpwYW9VbHl6cTFqQmdmUnVHQWVTMVc2SjFUVlVHUEszZDZMRjg4MApIeUpUck1QSFViRTl3djFWVmZuZVE5N3NyNXdFQ3BIMjVPSmpna3lOKzJiQWpZSWVmcFhYcGp2T2NvalFCRHg0CnhTWDVsbE10RnlvSml6NzdwSDBSVnVNTGdtSmZOWHlwWUVYYTlPTGRYYlpiMTJaUHNrR2wrdE1DZ1lFQTZEa3kKNTFuTWtmZklnNDh5UGYvekQ3Q1NmNUNqNk5YZk1jMHFaMENaMkJISXhUMElFNyt4MWtZSlVlSkJVZ3RkY1E0TAovWDdHS01wVkpnTTMvMmh1TGtEWFltQWJ2aUNVVkRkS1FUNzE0Y0lHWS9yTjhNMnlIZ2QvT1RsTG82MUFtRjdHCkEwR2FWVTdoYzUvWmg5Zlg1aE8zSDJuWFNNenVIL21hekpVNEpDMENnWUVBbkxkTTloYVFXSXczZXlZSzRCYnMKZ0NwU01nNTkxOHRPbmxkSDZ5TWxtSnhXSk4zUDVrenQrb2N0MXcxVm92VjlJd2x6TEZrc09CT0xTQXFsc2ErYQowandlbGlVaG5mTFkzSUo5NURvbVhndHNiTlFoQXE5cSs4OVlGUy9jc2FDcWZwbjBFeXFUM0RFbUpnMVpxS3FmCktRL2VMTHZjT3Vpb3pja25aRnl2M2hrQ2dZQW5TdTViQ08yOVVSRERlZXBGWlZacU5EVkZrbUs1bGQ2VEhhVHMKSFprcVh5LzZkNjR6TVQ5VkF6cTJlVE1XUDhnS3hoYXZTTkVjdThlV2kvcmdvM25wSjUyS0Ryc0MrNTQ5ZGJHQgp3cloyQVk5MVFVMnhUZ3l5V2hCanpWY0lGZHVWTEl3U3B2b0hMemFraXNxUzJxbTBTMmV6MEFQV1ZKNkNHSWpoCnp1blY3UUtCZ0I0MVlCTEFGeFhQOVJXdkcycEplQ2QzV1Rub3NDU2czWll6YUZ5WmVIS3B5MjR5bmJFU2JuOTUKMG54c1lWSWpjLy84SW1Gcnp3eEhDQldGUkpBTFdGYjRQN0cvaW8xRHJaOVc1ZnJxT2I5aHkvS04yUEJzSTg1Mwo2Lzc3N3JYTmVCaTNneE8yeW0xSGNNSTZQeGxjMWFVOEQ5SkNBUlJSTmxxcjJ4OHVGaWVvCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRUitqdnIvOFFUVHVWbDM3S3U5bWhlakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek14V2hjTk1qY3dOakV4TVRreQpOek14V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRFFLd1NiY3JhT2hmSXJiNGNZMWJCbEk1ZWRZeElCRHJ3QjJ3L1pRS3NJTmlsRjVrV3gKNjFDOFlsamZZMjEycWhCZHpDb2VXOTJSdThzZURVNXEyamY1YVhKUSt3SC9KWXptSiszbVpSazFSWWQzalBMKwp5OS91VFpSSlJmaWJqUkFkeFhnTHkvV2FVaUp3bEF5Q3JFd0cwMVpUdzVMUDBNNGN5bEtXSnVwTjlQYWY3VThqClJqbS8zWWN6eG4xL2d4aVY1RmJiRlJ6NjVkdDFSMy9vdnlQOW5rNmZTaDVpVHlwQlRMREZYamdPNUJsOHp5T1gKSGVWaExrcjM4UUhBYU83OFJITUpWYXorb0tFZWNVakd1N2dGbG5ybDFPd0p3MHRyTGx6QWMyQm90NDFSdHlnVApXb3ZkOERxRzJuODBWUVlkQlJXVHVFZDRGS29rVFNQdmw0c0xBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVHdjcvVERNbUpmK3ZaOFRrWnY5YXgxQWl5d1l3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFIMTdjR1RQU05YdzYrNTV1ZnBOaEJtSTJQTGZlQmhvaVBZVlhXL2dDRFJzR01NeXZ1STB5ejl5CkpVRys1bS94cHJUZWJsR0k2TVJSaVU1T1A2Rjk3U3Q4TFJVeTFXR1dYdlYxaGRldkVVaTRQMkliTHczT2hNQy8KUkVKZEJEblFrcm1XdDluT2NScWo3anRYTjlFMjIvNTJXb3RwSWdPN0ZiRmJqbzB2MjNjZGdhTmNDY0UrTG5ZUgpGUkJ0QzZKdnJQZlpJbnl4dFVnaDRiN25MTmVqNXFCZDhBQW9CWUg4c0NJWGlYUDdzSDRHNlQxV2ovSW9XVGFKCkVLbVZPWUdqYXYwMmt1dUdQRGVuQk1IalQrZVZxd1pTWlBRbElpQ1RpaEdLczc4SUY2UTlRejIramtPSzRoTWoKaEp0TUd0bG4rMUhYRENRb1hwbFRWcXdIR05hdHNEUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURwekNDQW8rZ0F3SUJBZ0lRVTR3QjFPdXZxUHA4aVJLNFAxUjVEREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek14V2hjTk1qY3dOakV4TVRreQpOek14V2pBcU1TZ3dKZ1lEVlFRREV4OWpiSFZ6ZEdWeWJXVnphQzFoY0dselpYSjJaWEl1WTJsc2FYVnRMbWx2Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBcEZtSTUwQjJQWWs2R2tmR1RHeS8KM01FNWxFUGIxVXMwK2xnSHgyaWVCb1VFY1YrYi9qZms1Y0R2amRjeEZ4cGgvRW42VTdicDNxT2t1YTVwNXArUApqSHVqQzZid1QwQ0RSM0RpUmJPY0dPckZUOUljNGp3K1pkQVpPbHV5MDBhMjhzVFFSaUdmNzVyTlA0S1liQnowCmhJemwzT1dvSWgwSmUybVc3b203WlZONzRuWG5kRUFvYzJXc05uejBXK2V6VElGVHBaY25xY0loK28xNzVRWkUKaWVZNEUybDRVN2daOXR0SjUzYUpCZjFDNXROek1yblhuUURqS1o2dFB2NUxqVElZV2xueXVRTWlMdmRUazU2RworRVlJYktOL21JekFTL0lKdUdUVjV3TENzSU83Ynh1WTl0Unk2TFB1a0lDbzR6RzVrUnJNanBYOS9zYndnSmNmCmZRSURBUUFCbzRIZU1JSGJNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0QKQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JRYS92OU1NeVlsLzY5bgp4T1JtLzFySFVDTExCakI3QmdOVkhSRUVkREJ5Z2g5amJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXVZMmxzCmFYVnRMbWx2Z2hBcUxtMWxjMmd1WTJsc2FYVnRMbWx2Z2lWamJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXUKYTNWaVpTMXplWE4wWlcwdWMzWmpod1IvQUFBQmh4QUFBQUFBQUFBQUFBQUFBQUFBQUFBQk1BMEdDU3FHU0liMwpEUUVCQ3dVQUE0SUJBUUE2Mk9EN3NsbXhTeWZvSkx1WnZYckxmNFpqVG1iZ25FektQKzBhU1ZpNWVwd2xSSWRlClVkdEd2MWlRMlhGWEhNMTlSYlQ5WWZ2NE1rWXQ5cDJkNjdkM2RoT1VrN0FmdXRxUWk5b1pXQXkrNis2YVV0VUgKS1hrczhqTlFRMFJaSENIUGVKNDVwQjBjcms3VWZ2N1lmWEZ6Y1ZqQTdtUGdvRDdtc2hsVVBSUm1WZHdvdWtsWApvMWJDckdvSVhIYWZ1enhaSy9BdWZBa2VFZnVKaWlBTEkvdS9Ed0pXMXFkcm0zQXNFUzMrb2svZnVEd0IweVNKCnVXbHFLWmIvenBaYkJwMndPcDFycUNMU1RYQk42WnRIcFJsYmRBSXFYbWZBZ1BPdlhCTWJHSjQ0bmFIMkFoL0oKbnYrUkpLYUFxTkFBejFTd0tWeGx4NnZOUlJXQVNEdkRUYWxyCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcEZtSTUwQjJQWWs2R2tmR1RHeS8zTUU1bEVQYjFVczArbGdIeDJpZUJvVUVjVitiCi9qZms1Y0R2amRjeEZ4cGgvRW42VTdicDNxT2t1YTVwNXArUGpIdWpDNmJ3VDBDRFIzRGlSYk9jR09yRlQ5SWMKNGp3K1pkQVpPbHV5MDBhMjhzVFFSaUdmNzVyTlA0S1liQnowaEl6bDNPV29JaDBKZTJtVzdvbTdaVk43NG5YbgpkRUFvYzJXc05uejBXK2V6VElGVHBaY25xY0loK28xNzVRWkVpZVk0RTJsNFU3Z1o5dHRKNTNhSkJmMUM1dE56Ck1yblhuUURqS1o2dFB2NUxqVElZV2xueXVRTWlMdmRUazU2RytFWUliS04vbUl6QVMvSUp1R1RWNXdMQ3NJTzcKYnh1WTl0Unk2TFB1a0lDbzR6RzVrUnJNanBYOS9zYndnSmNmZlFJREFRQUJBb0lCQUhCakNjdVp1VUc3WlpBegpKTmQrUm5XZmJOQ0cxdjIwd0RXeG5TQXYybUI2OWQ3UmtzcjFUZ0lQUGNHeE5sQ21LZnRzVzFLRDhzbmMvZmc3CjNROW9iYkdUbXB1TlBTZjA1ZEVrMEpiNWkvVStGay9QVHhFbVFVVStXUUlmVXRwSHNUT3lndnB5WS94bHo1VnUKcU96Rm9EQkVhYXYxSUZTenBwaE9USGd5bDROaHlyYlNyM3NYSzlwUFFFMmtTTURQN3VvcTl4Z1JONjhxWE5FVQpGNVpZQXNydkwxYlNraVRNY1g5NDBvTTQ0cGgwajBGMVNUaUVKV0RGMHhxa0VIdHBsUCtNL0V3eW5LQ0ZOVTJRCnZYZjFmcUJ3bGpsS0twSWtMMko0N25ocytQOFllMTQ5eTZBS0gzcWl5SklwQXI1UTlYbWRZakw0bkd4a2JzblEKejU4OUZjRUNnWUVBMWw1UCtLeU9TWGM3bHBBSGJtOERJaEkyMHBCemRWYXNYVE96ejRhYnUrZUFCYzNMYW5RRApkT0trTEsrb0J5YmNJM3VUdkdWWmFFWkFjcDAyWlF5OU1XNHp3NE9nODNUQ3JOYmNiaHRWaHVHekhVN0xlWUs1CjMwUmJZeGZzSk9vOStwcFYxTC9mWVFoZmJEWVdDK0FoaHBsT25vWGo1NGRoaVIyNTBTcUVUa2NDZ1lFQXhFUjEKeHRwTk5GY2huWkxmeDdPSnVLY3R0UkhOUE1tRndHcHhuWURJaHllOERNUHFhUFFZVW1PVVU1OEUyc3JNY2pCMApra0dsdVoyY2FGSDI0elR3VGtHSG9iM2VncTBTaTFyUCt1WHhmeStlOGRMT09Pd25nTUJ2V0dKWkp0RzJkc3dZCnBCRzZLakhrOThXZU9SdU8waXBXMWpoOExSeG5aRUZMSUZkZk1oc0NnWUJHcCtWU0FJWVJmdVE4RnhMcitsa2QKQk1YZkYwK0c4RjkxaE5JU1o3cXk3M1hKOCsvRkVhSUdCNkczUE5wMEtRSE1EREpBbVdNanRHd1BtdlBQMEtnWApQOHg5OThlNEZ0Y0hvdllhc0pXN0ZHODJETCtTT0YxTlVybVFhdFVod2JkVi8wS2xFZXp0alpYdUU5R21ibVIrCmVjOW8vcGFFdktHUVVTVHE1VW1naHdLQmdRQ3FuSUJ0YmhNeTdwTXdNUjhLc0UyR0VQMndxMXJuL3A2Z1YyZVEKYlFUa1NHdzJCSkRlejJIZExPY2hrZGhjZ1hJYnlYZHNORmpsODlhazhLdFhjd3Q2VzRpVjEwRjRBdzlkeUlHSApMeUF4V2FvbnVRSy9oTG9LT0Q0U2JOdm0zT0pxZnB6azh1d01CZmR1VTRGcFQwVmwrSnduK0U0cHdNazM0M0oxCkdMNk9CUUtCZ0g0a3VXbmRRTmZCWU9aeFBJU295MklsZ1ppSmRqcSs2aG9kOEhqMDJKdnliWFRablF2L0VaYVQKSWZnQjlTVVVTSzlCV1Z0dy9Lc2hEaGxTSmtjWWMyNWhFZ2JpZm9uZ0krODRXSVpRMmgyL3ZoejU4aVlFcUZlZQpxNjhmdE05SlBJVVdCTVVwZVhrRUhHV3N6aWZmM1luaVpicXd1RXE0TlpBcTU1eWpBN1BvCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRUitqdnIvOFFUVHVWbDM3S3U5bWhlakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek14V2hjTk1qY3dOakV4TVRreQpOek14V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRFFLd1NiY3JhT2hmSXJiNGNZMWJCbEk1ZWRZeElCRHJ3QjJ3L1pRS3NJTmlsRjVrV3gKNjFDOFlsamZZMjEycWhCZHpDb2VXOTJSdThzZURVNXEyamY1YVhKUSt3SC9KWXptSiszbVpSazFSWWQzalBMKwp5OS91VFpSSlJmaWJqUkFkeFhnTHkvV2FVaUp3bEF5Q3JFd0cwMVpUdzVMUDBNNGN5bEtXSnVwTjlQYWY3VThqClJqbS8zWWN6eG4xL2d4aVY1RmJiRlJ6NjVkdDFSMy9vdnlQOW5rNmZTaDVpVHlwQlRMREZYamdPNUJsOHp5T1gKSGVWaExrcjM4UUhBYU83OFJITUpWYXorb0tFZWNVakd1N2dGbG5ybDFPd0p3MHRyTGx6QWMyQm90NDFSdHlnVApXb3ZkOERxRzJuODBWUVlkQlJXVHVFZDRGS29rVFNQdmw0c0xBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVHdjcvVERNbUpmK3ZaOFRrWnY5YXgxQWl5d1l3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFIMTdjR1RQU05YdzYrNTV1ZnBOaEJtSTJQTGZlQmhvaVBZVlhXL2dDRFJzR01NeXZ1STB5ejl5CkpVRys1bS94cHJUZWJsR0k2TVJSaVU1T1A2Rjk3U3Q4TFJVeTFXR1dYdlYxaGRldkVVaTRQMkliTHczT2hNQy8KUkVKZEJEblFrcm1XdDluT2NScWo3anRYTjlFMjIvNTJXb3RwSWdPN0ZiRmJqbzB2MjNjZGdhTmNDY0UrTG5ZUgpGUkJ0QzZKdnJQZlpJbnl4dFVnaDRiN25MTmVqNXFCZDhBQW9CWUg4c0NJWGlYUDdzSDRHNlQxV2ovSW9XVGFKCkVLbVZPWUdqYXYwMmt1dUdQRGVuQk1IalQrZVZxd1pTWlBRbElpQ1RpaEdLczc4SUY2UTlRejIramtPSzRoTWoKaEp0TUd0bG4rMUhYRENRb1hwbFRWcXdIR05hdHNEUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTVENDQWpHZ0F3SUJBZ0lSQU8xVm9IbnpwV2tCZUszdmR5cHJTN2d3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN6TVZvWERUSTNNRFl4TVRFNQpNamN6TVZvd0l6RWhNQjhHQTFVRUF3d1lLaTVvZFdKaWJHVXRjbVZzWVhrdVkybHNhWFZ0TG1sdk1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXo1YUhWcHZrZkpMMW4xUXppSmVhMGlYcm1QcFUKVTlYd2huMjZCc1NXZnNYUERDT3lsY0p6THlicnFMWGQ4TFFaeXlMUG1NQ0xRWWFrWHpYV011bGRNQ1l2OFRvdAoxd0xtazBFU2MyemRpcDNuNEwxM3lDcm9wM2xReFpFaHNRTjF2UVc5dCtJZXIwTlpWV2RKNm5LN3ZObGtEdnFoCndSY0J4bkRzTUhsaUlsRzV3Y1dBaHYvZDcyZlBCUVdxOG9rT3dvMVRoU0czWHAzVXcvWmdKcy9VNytXN3VicHgKMC9ZYWhyL05NSm0vcUZWYjFpcEIyemJabEFJN29pZlZ6U0I0ZmJjZFhJeEdIY2tZSitwQzBNcTdGZ0wxMmFhYQpyQWlSVnp2dCt0bUZQWkdLYUZqNENKRm1aMDlZRTg5bWVGRW1WTUhBeFJ2VlErQmlVSDVPenI1UmV3SURBUUFCCm80R0dNSUdETUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUIKQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCUWEvdjlNTXlZbC82OW54T1JtLzFySApVQ0xMQmpBakJnTlZIUkVFSERBYWdoZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d0RRWUpLb1pJCmh2Y05BUUVMQlFBRGdnRUJBRDl6Y0h5OVhGK0JOcGFONTZ4ZVJlb3JiVkVEakZXTUpkYlFsU2Ixd1NnM1E4RW8KMG0zZ3RKMGlkd0w4MjVzY3BoSTY1dmhkV1hiVjh1czIyOUFCTlNzbFIvTCtOMlpsTFk2T1RJeFI5alBrbkJmRgpWenVSRHRaTG54VHdmSFFsOHRvZ2h3M29jVzY3c3JxeGtydUQzd2ZmWHJrSXNoa3dSVVdQUk44NEFVdWhnV3o2CmUvMEE0dUNWajZ0U1pPNFcwTDRDemErdDA0bDVLeHg5cEZndnhBa1NTbjg5SlpUbkpZa3AxTWtCalA2UHNycHEKckkyb0dTWTNwTGx6aFhCMHJZd1ZWMnJJYldqY2YrWkV2eDVkMlhVNk12REIzMWVHWTNobFV5dWFXbThORitNNQpBTWdrUTlHOEJSRGpSN0xqSXVwNHBWUXlwTThDeG9QanlMZlNjMFE9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBejVhSFZwdmtmSkwxbjFRemlKZWEwaVhybVBwVVU5WHdobjI2QnNTV2ZzWFBEQ095CmxjSnpMeWJycUxYZDhMUVp5eUxQbU1DTFFZYWtYelhXTXVsZE1DWXY4VG90MXdMbWswRVNjMnpkaXAzbjRMMTMKeUNyb3AzbFF4WkVoc1FOMXZRVzl0K0llcjBOWlZXZEo2bks3dk5sa0R2cWh3UmNCeG5Ec01IbGlJbEc1d2NXQQpodi9kNzJmUEJRV3E4b2tPd28xVGhTRzNYcDNVdy9aZ0pzL1U3K1c3dWJweDAvWWFoci9OTUptL3FGVmIxaXBCCjJ6YlpsQUk3b2lmVnpTQjRmYmNkWEl4R0hja1lKK3BDME1xN0ZnTDEyYWFhckFpUlZ6dnQrdG1GUFpHS2FGajQKQ0pGbVowOVlFODltZUZFbVZNSEF4UnZWUStCaVVINU96cjVSZXdJREFRQUJBb0lCQVFDTmRxSlNGamgxNEZ3OApNTkJSbENid2NPRUZ4Z256ZThiR2tDVldlVitwa3JtUEowQ0xLQkVBb0FCV1gyR1lwOU13Q0UvNlk3UkNlalBICm9sT1BMRkxSL2lRTHVyOEVXRGl6UHRRSkRyWkd3V2NFVTNtdVVmZHNNWk1tbjhtYTdLV3VvNXZ2Rk13ZVdjSW0KSGhaVUM4MytXeE1CMWpDbStqdStkTE93TVBmOE5BVWNQK1FBbEZNTmRZRkpKLzZsVTJmQVNadU9adWVib1F3agpmbWNZaHBEWXpJWFdwYktYZVVrYW42bXBTTzZFRXdxeExzTFc0cHVySE9pcmV6MlFaYldPL3cyZW10OW9NcGN2CjhGUVBoTGh1UlNjak4zeFVJK2dtOFI5WFBtUDVGdWFYNGd4Sk82ZWxaczZJMEc3WUlPMU1kY256ZDc4WCtZSkoKRjhGZk1VbUpBb0dCQU9EUHZCT2JkU1FFU2QvbHZUK2UwVFYyaXZubDQ1L2Uya05yT1FZeHVOZUVpOGlBZ2dzWQpOcWc2MFBEUHAxSmhUN3hSQVJoSWVzaGNmRk9OUE8yQ0hlTWluWmc5WVZWMkJ1Zms0c1Z4ckRSQzNpMzB3WlA3ClErQlZ1eTRQeXAyb1J0ZitJelN3a2JFcStVVzYwTXZVc2pJQ1R2eDRnYVZUcFlsbFJqVElWdEEzQW9HQkFPeGoKR0o2bmtiTFVQNTMvaG81WHArSnlja1ovOHRMc1dyQjhZbUZMZXRMQTRobXQweU1kN1cwREhUblhKUVR1UjlSeQo1VlExMlgrT0c4RnZFUDhxZ2Zlc2pJVGRvc2svTmhtcHVObjVXbk0wTm9OMmFVQWE1WEZibXBDMzNkd2ExU0pNCjUyd0FxTjRtb0ZORmI5bExEbFpvTTNXZWpqRks4cWx4UHdYNWV2N2RBb0dBT0VjSW1BZjBuUjJOdU1UMFNUYmkKdkhWK2VPeDV2UTIycWVYdmtvTmorRit2OW5ObEdvM25NTm40Y0RBcmZNM3JmZ0x4T1RqN3M2aWpYdThlYjM2QgpLTmtEaHBibkJOUFZDcndib0wzQ0ZCc2hMM1B6K2EyTzRsdlR6Y1lhUExsaGNyU2w3NHk4REJQcjd1N0RVaU5lCnNISXZmN2hURENZU2JJQ3p3SWJlWktVQ2dZQXBnRlJvTmw4OEdFdDYvOHV0M2ZIWnJlSW1Rbnh0VDVXMGVvSUQKTnU4L1pTSE5CRm1YUnIvU2JjT0p6aDN2dWEzZXZMVktqWkc3OVVVbU5zdXpJTkZrbkdTblJ3bzNidU9lcWMrTQpaVnpkOFFMSkhkYm9yRkF3RUxjWVJVK3NQd0hBWGVRYmNCbzF0bTViY0V0c3lPS2hoUFhUNXB4c1J3NUhkVnh0ClBobTcrUUtCZ1FDa083RlhCR0oxc09rQTQ4TDN0dWhJOEMzOCtlNlBWR1g5ekMvd0ZCczM3dzd2UXcxbURxWEEKTDBTMGRkQkx5UnY4MUdQM2hVZGJQcUlROGhqeis0Z0I3ZFZTcmliMi85cjRYWjYxVXgvQ1JuWWZPS3lDRXdQSgpONWQ2aFMrMlNCK3YyOHlsQVN3TGdnRnpaMGRvM0xOZmRlR2U1emozREJlU2dmc3RsNm1EL1E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRUitqdnIvOFFUVHVWbDM3S3U5bWhlakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek14V2hjTk1qY3dOakV4TVRreQpOek14V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRFFLd1NiY3JhT2hmSXJiNGNZMWJCbEk1ZWRZeElCRHJ3QjJ3L1pRS3NJTmlsRjVrV3gKNjFDOFlsamZZMjEycWhCZHpDb2VXOTJSdThzZURVNXEyamY1YVhKUSt3SC9KWXptSiszbVpSazFSWWQzalBMKwp5OS91VFpSSlJmaWJqUkFkeFhnTHkvV2FVaUp3bEF5Q3JFd0cwMVpUdzVMUDBNNGN5bEtXSnVwTjlQYWY3VThqClJqbS8zWWN6eG4xL2d4aVY1RmJiRlJ6NjVkdDFSMy9vdnlQOW5rNmZTaDVpVHlwQlRMREZYamdPNUJsOHp5T1gKSGVWaExrcjM4UUhBYU83OFJITUpWYXorb0tFZWNVakd1N2dGbG5ybDFPd0p3MHRyTGx6QWMyQm90NDFSdHlnVApXb3ZkOERxRzJuODBWUVlkQlJXVHVFZDRGS29rVFNQdmw0c0xBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVHdjcvVERNbUpmK3ZaOFRrWnY5YXgxQWl5d1l3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFIMTdjR1RQU05YdzYrNTV1ZnBOaEJtSTJQTGZlQmhvaVBZVlhXL2dDRFJzR01NeXZ1STB5ejl5CkpVRys1bS94cHJUZWJsR0k2TVJSaVU1T1A2Rjk3U3Q4TFJVeTFXR1dYdlYxaGRldkVVaTRQMkliTHczT2hNQy8KUkVKZEJEblFrcm1XdDluT2NScWo3anRYTjlFMjIvNTJXb3RwSWdPN0ZiRmJqbzB2MjNjZGdhTmNDY0UrTG5ZUgpGUkJ0QzZKdnJQZlpJbnl4dFVnaDRiN25MTmVqNXFCZDhBQW9CWUg4c0NJWGlYUDdzSDRHNlQxV2ovSW9XVGFKCkVLbVZPWUdqYXYwMmt1dUdQRGVuQk1IalQrZVZxd1pTWlBRbElpQ1RpaEdLczc4SUY2UTlRejIramtPSzRoTWoKaEp0TUd0bG4rMUhYRENRb1hwbFRWcXdIR05hdHNEUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUakNDQWphZ0F3SUJBZ0lRT281Y0hISjdiZWs5QmVvWkF6RmdpakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek14V2hjTk1qY3dOakV4TVRreQpOek14V2pBbU1TUXdJZ1lEVlFRRERCc3FMbU14TUM1b2RXSmliR1V0WjNKd1l5NWphV3hwZFcwdWFXOHdnZ0VpCk1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRFhpM2dmRkw2dHAySmlUaVQwOGpxUVZNakYKZGpzMytidkt1dEx0T0FwOTlVbTRLaGlYWkZ5WUREOW96R2tJYktzMDlVa0RjRXFZUVVzV0xOdUhvaWZhZXlDcwptL1g4WjVURXk2OXJsTHMyVG9GdFpWSWtRZ2JmdllVcy9TZGNWblNmUFhrMktWOFliY044Z1dnSjRpMWVNV2syCk1QNTBBS2wzb24vUVZJT2FKRWpEbEpsZ2twdUZ1aU1XVjd3TFZRLzRxMmNtbkM5a25BSitZSGxlV0lFWVRXMG4KMkNBQWViSGJaUHZyVzI2bVloOXdKNE0wM0Y5K1ZiSVpaZlI5dk5BdUdQN2NLK2FEb0IycjVKV0ZJM0FydUlCSApMSU9lOFpsNWt4QzE1QVNHRHJaZDBvRDZBVG5iclZ2VUNsZ3dqY01FK1RuWkhHY1d3Q0FLR3Jhb1RYSlRBZ01CCkFBR2pnWWt3Z1lZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGQnIrLzB3ekppWC9yMmZFNUdiLwpXc2RRSXNzR01DWUdBMVVkRVFRZk1CMkNHeW91WXpFd0xtaDFZbUpzWlMxbmNuQmpMbU5wYkdsMWJTNXBiekFOCkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQUZjS3hoVnpDamdHeHFLckdRTDhWQWFlSDhpSkNLSUg2b2RsWFpGaWMKdUZOaVNhNVkwaTZzV0V1NzdaZktiV3BpcUp6cThoWjdWWUluLzM4VVpwcnRBQzMxRlJRNjRwZEFPcjlvYXJZdwo2bncweDByNkNLaVJIT0FvNkRnV3ZkRG5JL0tORmY0Tkp3cHVzZDQ5ZytjSVdXbndUR2hnMTlaZjI4cndGWVYrCm5tL0QzUExielIxdlFFcFdiVTVNVHJIUjJ2SkxuNzBONzlobWt0eXhSOGZKV1VtVFJxRDJUa2hoMXRsRkVKUncKUnllaU5NS0NJUXFZaFMyNzJPUU1TOWp6eHIwcnZTV25ncXhuN1NPMnZXOTJTejh1Vk5iT1hPckZ6cXVIVktFRQp2aDlCNEpsVFJBb0FhNDk2UzE5WGxuOCs3UXV4VWdVR3FJYTlOaDc2MFJXaVFnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMTR0NEh4UytyYWRpWWs0azlQSTZrRlRJeFhZN04vbTd5cnJTN1RnS2ZmVkp1Q29ZCmwyUmNtQXcvYU14cENHeXJOUFZKQTNCS21FRkxGaXpiaDZJbjJuc2dySnYxL0dlVXhNdXZhNVM3Tms2QmJXVlMKSkVJRzM3MkZMUDBuWEZaMG56MTVOaWxmR0czRGZJRm9DZUl0WGpGcE5qRCtkQUNwZDZKLzBGU0RtaVJJdzVTWgpZSktiaGJvakZsZThDMVVQK0t0bkpwd3ZaSndDZm1CNVhsaUJHRTF0SjlnZ0FIbXgyMlQ3NjF0dXBtSWZjQ2VECk5OeGZmbFd5R1dYMGZielFMaGorM0N2bWc2QWRxK1NWaFNOd0s3aUFSeXlEbnZHWmVaTVF0ZVFFaGc2MlhkS0EKK2dFNTI2MWIxQXBZTUkzREJQazUyUnhuRnNBZ0NocTJxRTF5VXdJREFRQUJBb0lCQVFDSW9saWJHME5rUVY4VQpnZ1RiWVZIT2ZIQm8rL0crSWdqeEVrenpJenREYldJMTVEbUNmcFJUcmkvajl1Lzk3eVQ0aFNTcmtWczMrT3ZvCk9yZE8yM1A0QTJWTEJmS0E5Z2hRViszemZHelFtQ05qZlg3OGpQNWVobjBOYjh5cnRBSnBqMFp2RnZxNU9adGEKS1k0UjlkWmNoMlh5ZkV4UXJMckFvN255RGlEK2JDZXRBY3l6UGVJaDFzdEVSY3VEaUtsblJIUEM2bk5kZDV0eQpoQzFCekhJbVUycjZlTEdwRGZHOFNLS0c5NGFuTHZBWWpwZGhQcG0vUHJNZ1B2S1pMT29Sd1hKNDhFQXJxSkpGCjhFWGcwVzV0YlBSS3pwN0cwMWJTRXNaZE44Sy9aR3BIc0ZRV1pXMVFJZDd0UWFEQ2ZJcHJzL2dYT3NXRjFkeVQKK1h2czNvTUJBb0dCQVBaWjFOQ29meHhLOUthL25SWi9ObnFWanZEQlN3NFVtVUFuUW4vbEVXVGxwTi9NbGhXMwpyTk9uUkhYWnNoQ1lZb01OWmVVYXo0NGs1UXU4T01xLzF1TzhhcnVuNjNadlVvT2t0eFlHUXVKdm9oTzYraStkCks1M0xGVnZkc0czYS9Dc1hzOTZLWEs5Y2hlZW5OQ2RYdEVwTVg5aGtFcFdvM2NMTWF6M1I4R1JEQW9HQkFOLzgKdm4zbmUreXJ3VGIxZFpVc0tWbGttbktCVkNYWkw3Wmx0aHRhZE9JQ205TlNkZUFUUkJtOXBzUmlEWFNLeU13QwppVklXS3dTNjhtOUJtMFo3TTc1b296NUNlMWRPM1JHdWJWMFVXYTVzL29FYkkreHpDNDVPcGNoRWhOU1hOZnAyCmcyeURUWTdaa2ZFQU9DZ0wvTHp5WXFNektPVXhrcTlvY0NBMkZXQ3hBb0dCQUtHWUNXWVpzTTl4UjR2OTB1QkgKOEFkM0JUMWR2WXJ0N2h6TDQrNGE1MDhFNkNLNWc1V1pWeSs2MzhoaVZWQlhkUDg4RWFPMzgzL3RLYVdLQU1MVwpGZkpxektSdG9LR2Vva1NpRGtyUExwNXoxYUFWblRrUVl1VHRxd1FJcGt0WlF1Sk5lUG80VGxYbFhoeTNiQm1HCmlVZlhVMk9ST1RPY2dtTGVUbFpOMk44YkFvR0FUbkdOcFRwMHhDWkN2S1NxVVZ2dC8waWtib1dzbXJTOWFQdW0KRTE1U29QU1k3aUZxOXRiSWV0dFlsRjVpcC9ZUzdKL1d4OURMc0JSbzQxM3VxM2hxWHJ6MnJzOUpzd0lEbWpXawpSM3poQzUxUVpKYkV0Z0owZ1pvNXBUR1o4M29oaFY0TUdPekROTXd0dUdHRFNVTXBlR0xLK0t6cUhacUc3TGQrCnpVa2pvNEVDZ1lFQTE4T0VvK0VZMk5yeTU4RHAySkdOVlYwMmUyYVVNaTcwK29JaXRpcEZjN1p1K1paUVpISmkKbWVQQzk0YTU1VmpUT2RyQWl0UHMzU3U4d05YWWtCc0VoRmtISHQvNFBPMldjNFBVOE5peTJDSDhjajdTdkdqNApXZWJUYTh4TGZwcTBDRllHUXFUK2J6dGRVMmdWYVczaUZLNkkydlp1TVpURUxFSlFmdTVyYm5zPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  skip-cnp-status-startup-clean: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  policy-cidr-match-mode: ""
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"
  # If you want metrics enabled in cilium-operator, set the port for
  # which the Cilium Operator will have their metrics exposed.
  # NOTE that this will open the port on the nodes where Cilium operator pod
  # is scheduled.
  operator-prometheus-serve-addr: ":9963"
  enable-metrics: "true"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: c10
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "110"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  # Default case
  routing-mode: "tunnel"
  tunnel-protocol: "vxlan"
  service-no-backend-response: "reject"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-masquerade-to-route-source: "false"
  enable-wireguard: "true"
  wireguard-persistent-keepalive: "0s"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-local-redirect-policy: "false"

  kube-proxy-replacement: "false"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  enable-host-port: "false"
  enable-external-ips: "false"
  enable-node-port: "false"
  enable-health-check-nodeport: "true"
  enable-health-check-loadbalancer-ip: "false"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  bpf-lb-acceleration: "disabled"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  hubble-export-file-max-size-mb: "10"
  hubble-export-file-max-backups: "5"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  ipam-cilium-node-update-rate: "15s"
  cluster-pool-ipv4-cidr: "10.10.0.0/17"
  cluster-pool-ipv4-mask-size: "24"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "true"
  bgp-secrets-namespace: "kube-system"
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"

  k8s-client-qps: "5"
  k8s-client-burst: "10"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  # default DNS proxy to transparent mode in non-chaining modes
  dnsproxy-enable-transparent-mode: "true"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-xff-num-trusted-hops-ingress: "0"
  proxy-xff-num-trusted-hops-egress: "0"
  proxy-connect-timeout: "2"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"
  proxy-idle-timeout-seconds: "60"

  external-envoy-proxy: "false"
  max-connected-clusters: "255"

# Extra config allows adding arbitrary properties to the cilium config.
# By putting it at the end of the ConfigMap, it's also possible to override existing properties.
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: c10
    peer-service: "hubble-peer.kube-system.svc.cluster.local:443"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-hubble-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-hubble-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n\n        # Liveness probe\n        location /healthz {\n            access_log off;\n            add_header Content-Type text/plain;\n            return 200 'ok';\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumbgpnodeconfigs
  - ciliumbgpadvertisements
  - ciliumbgppeerconfigs
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  - ciliumbgpnodeconfigs/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumbgppeerconfigs
  - ciliumbgpadvertisements
  - ciliumbgpnodeconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumbgpclusterconfigs.cilium.io
  - ciliumbgppeerconfigs.cilium.io
  - ciliumbgpadvertisements.cilium.io
  - ciliumbgpnodeconfigs.cilium.io
  - ciliumbgpnodeconfigoverrides.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  - ciliumbgpclusterconfigs
  - ciliumbgpnodeconfigoverrides
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumendpoints
  - ciliumidentities
  verbs:
  - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumexternalworkloads/status
  - ciliumnodes
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumendpoints/status
  verbs:
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumexternalworkloads
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-bgp-control-plane-secrets
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: etcd-metrics
    port: 9963
    protocol: TCP
    targetPort: etcd-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: NodePort
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
    nodePort: 32379
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-agent: "unconfined"
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: "unconfined"
        container.apparmor.security.beta.kubernetes.io/mount-cgroup: "unconfined"
        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: "unconfined"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
          initialDelaySeconds: 5
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.memory
              divisor: '1'
        lifecycle:
          postStart:
            exec:
              command:
              - "bash"
              - "-c"
              - |
                    set -o errexit
                    set -o pipefail
                    set -o nounset
                    
                    # When running in AWS ENI mode, it's likely that 'aws-node' has
                    # had a chance to install SNAT iptables rules. These can result
                    # in dropped traffic, so we should attempt to remove them.
                    # We do it using a 'postStart' hook since this may need to run
                    # for nodes which might have already been init'ed but may still
                    # have dangling rules. This is safe because there are no
                    # dependencies on anything that is part of the startup script
                    # itself, and can be safely run multiple times per node (e.g. in
                    # case of a restart).
                    if [[ "$(iptables-save | grep -E -c 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN')" != "0" ]];
                    then
                        echo 'Deleting iptables rules created by the AWS CNI VPC plugin'
                        iptables-save | grep -E -v 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN' | iptables-restore
                    fi
                    echo 'Done!'
                    
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - CHOWN
              - KILL
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
              - DAC_OVERRIDE
              - FOWNER
              - SETGID
              - SETUID
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Unprivileged containers need to mount /proc/sys/net from the host
        # to have write access
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        # Unprivileged containers need to mount /proc/sys/kernel from the host
        # to have write access
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Unprivileged containers can't set mount propagation to bidirectional
          # in this case we will mount the bpf fs from an init container that
          # is privileged and set the mount propagation from host to container
          # in Cilium.
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-dbg
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      # Mount the bpf fs if it is not mounted. We will perform this task
      # from a privileged container because the mount propagation bidirectional
      # only works from privileged containers.
      - name: mount-bpf-fs
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        args:
        - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
        command:
        - /bin/bash
        - -c
        - --
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        - name: WRITE_CNI_CONF_WHEN_READY
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: write-cni-conf-when-ready
              optional: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
            drop:
              - ALL
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
      - name: host-proc-sys-net
        hostPath:
          path: /proc/sys/net
          type: Directory
      - name: host-proc-sys-kernel
        hostPath:
          path: /proc/sys/kernel
          type: Directory
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              - key: ca.crt
                path: client-ca.crt
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/port: "9963"
        prometheus.io/scrape: "true"
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.15.6@sha256:5789f0935eef96ad571e4f5565a8800d3a8fbb05265cf6909300cd82fd513c3d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        ports:
        - name: prometheus
          containerPort: 9963
          hostPort: 9963
          protocol: TCP
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      initContainers:
      - name: etcd-init
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - etcdinit
        # These need to match the equivalent arguments to etcd in the main container.
        - --etcd-cluster-name=clustermesh-apiserver
        - --etcd-initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --etcd-data-dir=/var/run/etcd
        env:
          # The Cilium cluster name (specified via the `CILIUM_CLUSTER_NAME` environment variable) and the etcd cluster
          # name (specified via the `--etcd-cluster-name` argument) are very different concepts. The Cilium cluster name
          # is the name of the overall Cilium cluster, and is used to set the admin account username. The etcd cluster
          # name is a concept that's only relevant for etcd itself. The etcd cluster name must be the same for both this
          # command and the actual invocation of etcd in the main containers of this Pod, but it's otherwise not
          # relevant to Cilium.
        - name: CILIUM_CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        # The clustermesh-apiserver container image includes an etcd binary.
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --auto-compaction-retention=1
        - --listen-metrics-urls=http://[$(HOSTNAME_IP)]:9963
        - --metrics=basic
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        - name: etcd-metrics
          containerPort: 9963
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - clustermesh
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt
        - etcd.config=/var/lib/cilium/etcd-config.yaml
        - --max-connected-clusters=255
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        - --controller-group-metrics=all
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: IDENTITY_ALLOCATION_MODE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: identity-allocation-mode
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        ports:
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir: {}
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "clustermesh-apiserver"
      serviceAccountName: "clustermesh-apiserver"
      terminationGracePeriodSeconds: 30
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: clustermesh-apiserver
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.15.6@sha256:a0863dd70d081b273b87b9b7ce7e2d3f99171c2f5e202cd57bc6691e51283e0c"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 3
          livenessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 3
          startupProbe:
            # give the relay one minute to start up
            grpc:
              port: 4222
            timeoutSeconds: 3
            failureThreshold: 20
            periodSeconds: 3
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          - name: tls
            mountPath: /var/lib/hubble-relay/tls
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Always
      priorityClassName: 
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 1001
        runAsGroup: 1001
        runAsUser: 1001
      priorityClassName: 
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.13.0@sha256:7d663dc16538dd6e29061abd1047013a645e6e69c115e008bee9ea9fef9a6666"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
        readinessProbe:
          httpGet:
            path: /
            port: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.13.0@sha256:1e7657d997c5a48253bb8dc91ecee75b63018d16ff5e5797e5af367336bc8803"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
