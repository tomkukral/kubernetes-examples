---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU5RUUZiYVBTYjFYeE5vbjFMRE9LM0l3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN6T1ZvWERUSTNNRFl4TVRFNQpNamN6T1Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUE4Z2NRZEhRWEt0WDh5ekJ6N0F0THhxRENwRnYxWGR0UGFFejNsdFBxY2JwYUJSTWcKcmtJZTl6UHZCcHFVRjlidnc5WkdReVp4RDZGK0ZLdlBCRCtYRm1pbHR3YUprTmNvanVtVmJ5ZWZFK0V3VjNibgpQWElNd1dGK2hXaXFWT2djWXQ1Z29rUXlCdDM4TnRMQjMvMC9lNE1US0E5dnlBaERhZzFDUUc2U25peWhldXNaClFnWkxNMnhRVzhMdldyWG8vRW93a0ZHN2QyZTk3S0duSWNqK0k2bFpJdUpxUXJmejRucWhuQ001UUw5Z3ZNVmYKRG1LK1p2WnFhMjVGcjYvcVA2MDRZNkJWL3hoVUY2cGdSOHFCTHQwY05YUkUraTlFZXNobi80WE5nVHRFMEFlRwovenBwU3FFdHE2SjJPM2VhYmFkbWtUR283MTljVE5kZUFqMVJzUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGRHFob1RZUFZ6NnhmaGhNRE1NL0V0Tk8xaDNyTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQUZYWGo5TFJBSzcvc1RLWWxXVGlDSjNCK3BYeENIbm45VzlhWmNMdzZLdFVsSFlyNUZpRG9ZCnh3c2pQUHJLZFQvV0dCMXJzbnkwSlp5QXE0bUZzVG82Ykd2UzJjUWpKMDNkSEtFSUZ4Y2hGQlNGSzA2bk5hczEKbVhtRzAyM3ViT1BRRkZ2bk9iclVPT0hXbjJXZTFHVEdsNzIyZmY1c3BIOGpMUUlaSGlWRlpqWUFZR01PS3dhKwp1bmJGNDM5U3BCa3M1d3dTWFBFSHZScU1VeVVYd2QyTEdtY1V5RlplWWJveVhrM2UzNXJqK1hZUG1tUERES0pqCk0xcE5SeXhkTXM1OXJvMVp0SHhFZGh6YjJkbXhnclFxbWNkNFVYNmwxeXhYRUpabmNGMHBkZlRReFhUZXNYNVEKU3VHNzBwZ2tCYXN2SWlSUEJ5dThqWi9oN204Sjh5OVEKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBOGdjUWRIUVhLdFg4eXpCejdBdEx4cURDcEZ2MVhkdFBhRXozbHRQcWNicGFCUk1nCnJrSWU5elB2QnBxVUY5YnZ3OVpHUXlaeEQ2RitGS3ZQQkQrWEZtaWx0d2FKa05jb2p1bVZieWVmRStFd1YzYm4KUFhJTXdXRitoV2lxVk9nY1l0NWdva1F5QnQzOE50TEIzLzAvZTRNVEtBOXZ5QWhEYWcxQ1FHNlNuaXloZXVzWgpRZ1pMTTJ4UVc4THZXclhvL0Vvd2tGRzdkMmU5N0tHbkljaitJNmxaSXVKcVFyZno0bnFobkNNNVFMOWd2TVZmCkRtSytadlpxYTI1RnI2L3FQNjA0WTZCVi94aFVGNnBnUjhxQkx0MGNOWFJFK2k5RWVzaG4vNFhOZ1R0RTBBZUcKL3pwcFNxRXRxNkoyTzNlYWJhZG1rVEdvNzE5Y1ROZGVBajFSc1FJREFRQUJBb0lCQUg3WXpQcjd6UmlhUm4rSAp5WG14QWVuOFg0Y2MyeUJ4ek5CeFptSWFkd2xjRGNvVEdGRzhQZFo1MVpDMGUyRnpPUDUrMHh4bWpXTVAxTENvCnl6c0N5UURwbjlDcEVIaGxDOUM3QTZMYU5UbUtFSGdHelhNYXp5eWJHR0I3VnFwaGJGODFCWmlGL1dJei9mZ04KeGFiTFovWW40R1ppa01kWjdWc3J6OGxOS25MVEZHYjNHVnBBMjF6dzZ0Ym40Z3VZb1o0bXhpVEh0ZWJ0V1QyTApITmJoczk1bi8yU2hHc1JQUGFEU0pacHBNTDRQQnBpdHJGS0JBL0FzVEVsVThGVWRKOU55eXJYVmV3YTBpaFQ5CmN1RE9HaVR0eFU5OTRsYXJHTGdTUWE2R2lUVmtEK1k2Qk82bSs0eG5uZnFQSUo5cGdVaGVJODFYbGZ3aHpPRWsKek42VkN3RUNnWUVBL2VMalVOaEdIaDV4cVNjN2pES1NSSExVeWJVdGU0bkNuK01sN2ZEcTV6QmtLTjlCVnp4LwpmeldyNEU4aFBHbzM3VVM3Z2FScFNza0d2SC9tejVjRUlCUGk0b2FDMXRzMWdqT1JBNnhmZEVUSWlPMDBWR1dECjM2WWMxd1BZWWF3OUpKMkNHRnYwT3RldjZDS1ZiUkRPWUJ6U0ZzNWRKVFdabzNYMTduQTV4bGtDZ1lFQTlBcm0KMW5IWDNYQjR1MXdaZmNpQ3RLeXhyak5mYi9kbU5qR0UxQWwrL3orZkFBMThhTkJzZm5QOGxySFFGbnQ3d25sbwpiRGJzNllROGNYSzRRSUlNRTc1cktHVWVVekgxOUNKWjRJSzU0ZTZWSzNjMTRScWJQWFJpSjZaU2xhRXk2Z0xPCmtZc1JLSXo1bWZLNlh5L0YzMWdGdWM3WllRYXBFSTQrcktHSUt4a0NnWUFMUWZaR2JYQ2VnVWNVOHhKbTR3OHQKVGRJMXAzeit6MXI3Ny95TWtuUTRFQ05BMUxWM0FzMjhmRXJFeFgxNXlsUDBoMm14RS9NL1I2NnV5UlVZKzE5SgpkTmhJcHlKQ0dMSkV0YmltYXd4SWdZeEsxZ25OL0RwZXZtVGsrOXlxYUJMRi90MzM2b3ZuMkF5S3hJM1Bxa0VjCmJlcTY3Q2VoTU1GQlNFZkJiT1NDOFFLQmdFbUZmMFhieGt6UU5ZODhqL0YxRnV1WG0yLy95aURSUjluTDBWaVEKQTlLaU9DU3I2MjhvVzRjOUtqdThGaFN2M3ZrWDJuMi9qbUJMbG1vWFJhc3Bncm53QkJpSFhqdHlNY2I3RWxpeApDWThuY1lsR3dOU3dUMVNVVzMzV2ZjcldaYUJhZUNFZzVHcHpEajl6QVBMc1VaQ1gxQ0hHVDNjTHFxTnlOeStLCitwc0JBb0dCQVBOQUlKU09GM0dKMTFWTC9FRDBmZTBFWFVnaVRWTms5WExqRjdkTWNUMmpOUnRDbWROUjBuekwKRFB4L21kT1FRdk1pRjNFM1lxY1B6MTcvQXB3WVVaNTFzMFBNa3RFSTZwc2U0akhkQjZDNXVpUzNYd3Fyb1l5SworajArYktKUjlKVTN0SE4zM2dadEpRbHo0T0VyVjlIa3dkL20xQ1JIVHpCZ3JZM0ZFSWV4Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU5RUUZiYVBTYjFYeE5vbjFMRE9LM0l3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN6T1ZvWERUSTNNRFl4TVRFNQpNamN6T1Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUE4Z2NRZEhRWEt0WDh5ekJ6N0F0THhxRENwRnYxWGR0UGFFejNsdFBxY2JwYUJSTWcKcmtJZTl6UHZCcHFVRjlidnc5WkdReVp4RDZGK0ZLdlBCRCtYRm1pbHR3YUprTmNvanVtVmJ5ZWZFK0V3VjNibgpQWElNd1dGK2hXaXFWT2djWXQ1Z29rUXlCdDM4TnRMQjMvMC9lNE1US0E5dnlBaERhZzFDUUc2U25peWhldXNaClFnWkxNMnhRVzhMdldyWG8vRW93a0ZHN2QyZTk3S0duSWNqK0k2bFpJdUpxUXJmejRucWhuQ001UUw5Z3ZNVmYKRG1LK1p2WnFhMjVGcjYvcVA2MDRZNkJWL3hoVUY2cGdSOHFCTHQwY05YUkUraTlFZXNobi80WE5nVHRFMEFlRwovenBwU3FFdHE2SjJPM2VhYmFkbWtUR283MTljVE5kZUFqMVJzUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGRHFob1RZUFZ6NnhmaGhNRE1NL0V0Tk8xaDNyTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQUZYWGo5TFJBSzcvc1RLWWxXVGlDSjNCK3BYeENIbm45VzlhWmNMdzZLdFVsSFlyNUZpRG9ZCnh3c2pQUHJLZFQvV0dCMXJzbnkwSlp5QXE0bUZzVG82Ykd2UzJjUWpKMDNkSEtFSUZ4Y2hGQlNGSzA2bk5hczEKbVhtRzAyM3ViT1BRRkZ2bk9iclVPT0hXbjJXZTFHVEdsNzIyZmY1c3BIOGpMUUlaSGlWRlpqWUFZR01PS3dhKwp1bmJGNDM5U3BCa3M1d3dTWFBFSHZScU1VeVVYd2QyTEdtY1V5RlplWWJveVhrM2UzNXJqK1hZUG1tUERES0pqCk0xcE5SeXhkTXM1OXJvMVp0SHhFZGh6YjJkbXhnclFxbWNkNFVYNmwxeXhYRUpabmNGMHBkZlRReFhUZXNYNVEKU3VHNzBwZ2tCYXN2SWlSUEJ5dThqWi9oN204Sjh5OVEKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLVENDQWhHZ0F3SUJBZ0lSQVAwblhqeXRRNlZYQ3grcUtkaEcrcEl3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamMwTUZvWERUSTNNRFl4TVRFNQpNamMwTUZvd0ZERVNNQkFHQTFVRUF4TUpZV1J0YVc0dFl6RTNNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUE5SEZNVGloVTdlSWtJZHZXOWdrdi9vOTNjYnl6b1dYWHhOY0hqZ2t4VFJmMFhKeXUKbDdnVkJOWUJNN3VUK1RXVkxZOVY4NTA3eXpPb2dadzZrM0E2TjJZeWdudk1xMkJOdzJHdG9ZdlpSZlN4eHcwTgpBMkt2bW5SM1lnQ3htd0hja1FTaHcrbDJLTDFvMTJCRFN3RWlsVVNFSHlpK1dPRi9FakFJSlZmR1c5anFyTXRBCnpZN2RoeDIxQ1pZQnhqZHFvS20yV0diR0VZYVZ4Q29oVlFwZWdVaEYzSVcxY1JBcy9JSDkrWkt6TmJFb2NleUMKa1hUWUE0b0QxNkUyUVUyaEE4TmcvcDNSbnZLdFRqMFU3ZmVySENjQW5SRlE5MUl3REx0R2xlMVBzRk1wMXJ1MgpDaVFad2pzaWJlaFdQKzZMWGxJSmhSeDRaa3ZPcmpmNUg4WU1OUUlEQVFBQm8zWXdkREFPQmdOVkhROEJBZjhFCkJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUMKTUFBd0h3WURWUjBqQkJnd0ZvQVVPcUdoTmc5WFByRitHRXdNd3o4UzAwN1dIZXN3RkFZRFZSMFJCQTB3QzRJSgpiRzlqWVd4b2IzTjBNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNYSElERHdTZHIrdDNPSTNCbEZzN2J6T0FoClEzM1oyaXk4Yy9MK08zQmR5S24weDNKTkcwemxCd1FFbzM3VlFNY0V6M3o1R20ybmlGVG9mOEpVT1dxblBrV3AKV21xUTVXbEtzWDE4dFNYSDFWRU9uOWtqWnV1M05JTGZ1Mk9oY1ovS2hiVk03dmlxSndFdGg5WTJleTdLTWF5YwpsT0Z1dU9ES0tKekQzNGVOMEhaLzFldGhOMkdmQmV3MEZFSXUzWGNGQURiZER1OEdjcmJMZnM0K0hTLzBhemZ1Cm05bjJRcTJheUdzMlpqQW5RdzlubjNaMmtMdmEzSW9pNDBnU3BpVEtnWEdZM2pXcVFGK2lDTkFiRDZzUlZ3cEcKdmxuQk52c25zbGVFWnhTUG9xVDhLZnZTbzN4YTlWOGxIQzB5dW1oRElReE40emR0RTN5c0hXRDRhRVNECi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBOUhGTVRpaFU3ZUlrSWR2Vzlna3YvbzkzY2J5em9XWFh4TmNIamdreFRSZjBYSnl1Cmw3Z1ZCTllCTTd1VCtUV1ZMWTlWODUwN3l6T29nWnc2azNBNk4yWXlnbnZNcTJCTncyR3RvWXZaUmZTeHh3ME4KQTJLdm1uUjNZZ0N4bXdIY2tRU2h3K2wyS0wxbzEyQkRTd0VpbFVTRUh5aStXT0YvRWpBSUpWZkdXOWpxck10QQp6WTdkaHgyMUNaWUJ4amRxb0ttMldHYkdFWWFWeENvaFZRcGVnVWhGM0lXMWNSQXMvSUg5K1pLek5iRW9jZXlDCmtYVFlBNG9EMTZFMlFVMmhBOE5nL3AzUm52S3RUajBVN2ZlckhDY0FuUkZROTFJd0RMdEdsZTFQc0ZNcDFydTIKQ2lRWndqc2liZWhXUCs2TFhsSUpoUng0Wmt2T3JqZjVIOFlNTlFJREFRQUJBb0lCQUFpRDVkK1hJaFpEV1hUZwpmcVdGZm1tRXYrbHpaR0tMOUs5RHVseWxUMVZiTDBVR3BFSmV4RVN0Mjg3Y2l2UVVmTVRnaUdMN0tEa1U3SnJQClFXOGZhcmZCVktNZEF1MDVacHdXekFDanFZYjVWalFUN1U4ZjRmUWtlSUF1ZkFGbFdEU3BENldPZlhJLzN1WVoKMFY1TWhOTGtWeUhxdm03RU5EUUMvbFdtc0I5RTVzSWE4TGQ5eXluM1RJWGpWWVZIZ3doY1RuMTdMM0ZteGhycwo1b1BGMEF4Rk5sbGZzMjl0amYxelJodDdpNlJqbWNJSHBUbDdYYm5VdFVIV3ZRQURLdU9lVFRxalBRMVQrRkxiClR4UmtvckNSK2RVYVBSNlRwQkRzTklnbzljdG93ZC83b0dzU2kyOWRlRkJWbXZvY1A2NmU0MjY3Z09GWmlFb3AKVEZvbnFVVUNnWUVBK0xGMFBoUlFGT1hWYm8veEVjLzBlVHhLV1NWZVpBamZtYnNILzhkR3dqajlWd2R2NGUwaApGL3d4Q25mYkQwZkV0RXBwVk1BdEdIZURBWTZrUGtMT2gxQTVhcmNOeXIxNVpDSm9iVHpHbng5V2Y4a0RseFcxCnRkdDlVZVRVRCtxM2lmYzVuaVE4Z0YwMTIvbUhyVkVwTmREb0xFOXplenNIaWdRRHFXOURhZ01DZ1lFQSs1L2YKZnlTY2tOQ005VVVSNG95ZzRDTk1HQWwzdlZ0RkpjaHVqbmpDTEVDR3ZoblJPTjZKNUJ4UjVkcVExQXEyOHlGcAplTkgvdkVYbFB6bG04OStIYU1kNkt4bmZPa2xPZlhIWHpVcEpDTFp1clkrSVEwUGQ1QmhSYW9DMnpTRmlFWDQ3CmhFQ2Y0Nk1LZUNiS1hkWGFHaUx2YUtJMlVmVkl5MEpObUlaMWQyY0NnWUVBdG5mVkZ6dG1Lbjhib3p4L254Y2EKZzkxbG01VGNkYjlBK0JXUFgrOEJqcjJydTdBY09nTDNkaGEya0x5eUFMc2lxem14b05wRC9DQ3NBWGQ4TUtacAp6RVJqYkZZVkMzMEwxUm1kenhCNWx3U3lQWjNxUVc5UFhMaEhjYy9ZZkRrMkkwYytnamFLSVpEQ1ZMejMvSVdCCkhCaEVVVWFXTDROM0c1K29aQ2ZicWFzQ2dZQkVzK1FzTE96cXhXYVhXV0tHdnVyMkIrMHc2dlRjcU56NmNmMXQKdlI4WFFnOElQTGhabExtRnBRM2Zlb3ZzdVhnMmJqc0VHQ0tCWDN3MmhRL05LbzBvV0w3TW9lWEhYbGlsKzcxMgplZi95OXd6Rkt0bUR0RFlUbjJncmNqVjNVTlFiL3FGMWZNZXJPY3NULzFObHg0d2pjc0ozaVVMWG9lZGNTQ0F6CnN4TERwUUtCZ0QyTjFjajdiZDR1N0puVzV5R0cvM3NSME5aSk1jU0JSWjJ2b2ZRc0lHVXJBaVdLYlI5bXJWMEsKQTFTTEczd3BaM2JyQk1jZTJOSUt2eCtjTUcwTHVYNjNINVNCcU5TUGEwQnQxR0M0WWxyVmVwNTlZQ203R3RFcwpkc0U4eExxTDFuZldrWlJkUWtsYmpPZld0VFBFMm1BZ2d4dytaL2pTOE03TWVNTUdIY0k3Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU5RUUZiYVBTYjFYeE5vbjFMRE9LM0l3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN6T1ZvWERUSTNNRFl4TVRFNQpNamN6T1Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUE4Z2NRZEhRWEt0WDh5ekJ6N0F0THhxRENwRnYxWGR0UGFFejNsdFBxY2JwYUJSTWcKcmtJZTl6UHZCcHFVRjlidnc5WkdReVp4RDZGK0ZLdlBCRCtYRm1pbHR3YUprTmNvanVtVmJ5ZWZFK0V3VjNibgpQWElNd1dGK2hXaXFWT2djWXQ1Z29rUXlCdDM4TnRMQjMvMC9lNE1US0E5dnlBaERhZzFDUUc2U25peWhldXNaClFnWkxNMnhRVzhMdldyWG8vRW93a0ZHN2QyZTk3S0duSWNqK0k2bFpJdUpxUXJmejRucWhuQ001UUw5Z3ZNVmYKRG1LK1p2WnFhMjVGcjYvcVA2MDRZNkJWL3hoVUY2cGdSOHFCTHQwY05YUkUraTlFZXNobi80WE5nVHRFMEFlRwovenBwU3FFdHE2SjJPM2VhYmFkbWtUR283MTljVE5kZUFqMVJzUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGRHFob1RZUFZ6NnhmaGhNRE1NL0V0Tk8xaDNyTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQUZYWGo5TFJBSzcvc1RLWWxXVGlDSjNCK3BYeENIbm45VzlhWmNMdzZLdFVsSFlyNUZpRG9ZCnh3c2pQUHJLZFQvV0dCMXJzbnkwSlp5QXE0bUZzVG82Ykd2UzJjUWpKMDNkSEtFSUZ4Y2hGQlNGSzA2bk5hczEKbVhtRzAyM3ViT1BRRkZ2bk9iclVPT0hXbjJXZTFHVEdsNzIyZmY1c3BIOGpMUUlaSGlWRlpqWUFZR01PS3dhKwp1bmJGNDM5U3BCa3M1d3dTWFBFSHZScU1VeVVYd2QyTEdtY1V5RlplWWJveVhrM2UzNXJqK1hZUG1tUERES0pqCk0xcE5SeXhkTXM1OXJvMVp0SHhFZGh6YjJkbXhnclFxbWNkNFVYNmwxeXhYRUpabmNGMHBkZlRReFhUZXNYNVEKU3VHNzBwZ2tCYXN2SWlSUEJ5dThqWi9oN204Sjh5OVEKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lRYnpkTnE2MlJOTHlkcnRWMEZVbVBCakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOelF3V2hjTk1qY3dOakV4TVRreQpOelF3V2pBUk1ROHdEUVlEVlFRREV3WnlaVzF2ZEdVd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3CmdnRUtBb0lCQVFDZDhzRHErMDYvcmU0elB3N1p3a2xhRis2eElxeFhWd3ZPZkVsNTMrVDhqMVJFVVdiQTlHVHAKbEVkdUl0TXNGNG40OE5MV1lEYzdIMi9lU0NhSE1pd05UVk5tMFhyeHhPRUhNZG5PMmFtbjlCQnpoZSs0OWRyaApEdXNPblZ4STdkMUY4WWhGTXZ1cG9XQmxGODc1NjF3WDZmaTlFVjQvdU1UeUxoayt4SlIzekVrUXVaS0xTNlhDClRKRzRpOFlkR09ySUVuWG4vQlY1UUNUYlptaW54NDV6cTNWL3RvalBHeTV3S2JNQlBIbGk4eTlqMjZYNEJSR0EKMmZ0UCtiUjkyUm54R091VzlQZzZZbW5Pb3VTR1A3RElpVnIwWnI4U1lEdExiWlg5S1lPQjhSZktlRWE1NFdDaQpmTWhjMGM5YmZ2Q3V4OHZuZVJjSC9maitpT0xPWkhRUEFnTUJBQUdqWURCZU1BNEdBMVVkRHdFQi93UUVBd0lGCm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWYKQmdOVkhTTUVHREFXZ0JRNm9hRTJEMWMrc1g0WVRBekRQeExUVHRZZDZ6QU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBNy9DbHlva0tadlI2aDBoUHdDYzl4YVh4cTZPWGhmNFZvbG9mVUlLdjRNSFhDOFZHSDdKbFlldSt0Q3N6CmVoMEdPNmtXRWQzRW51NjBBbzRUT1hyQ2VpNDR2UnNWdVlWWkRrVVdEN2Q5RVpncUg0QkJEeC85eFJZb0hKU1AKbE5xNkJrWjRINVhUNGw4UTBQTWRaT3ZJWUd3RFNnVFM5T0VVUHYvK1FCU0gvUzk4QitSZGJydjdYNkRRSVRYVApja0V1bDgxQThqY1BTYjF0SlBoeU9EYjBIMW1lK0pvakhUdW5iNmlJVnBWUXdVTHRqM1JnaEgvNDYzc2RuZ0NxCjdiMDhhWVRtYTBscFVyZnYrWUJ0NVVUdzJZa3lHaE1GSmdCQy82SmE3YnJFMlF0d3pncmNaZ20vZDhwYVdxY3AKdENvQzlBaTVuNUcxWm1wSzhzbHl3OC9Da0E9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBbmZMQTZ2dE92NjN1TXo4TzJjSkpXaGZ1c1NLc1YxY0x6bnhKZWQvay9JOVVSRkZtCndQUms2WlJIYmlMVExCZUorUERTMW1BM094OXYza2dtaHpJc0RVMVRadEY2OGNUaEJ6SFp6dG1wcC9RUWM0WHYKdVBYYTRRN3JEcDFjU08zZFJmR0lSVEw3cWFGZ1pSZk8rZXRjRituNHZSRmVQN2pFOGk0WlBzU1VkOHhKRUxtUwppMHVsd2t5UnVJdkdIUmpxeUJKMTUvd1ZlVUFrMjJab3A4ZU9jNnQxZjdhSXp4c3VjQ216QVR4NVl2TXZZOXVsCitBVVJnTm43VC9tMGZka1o4UmpybHZUNE9tSnB6cUxraGord3lJbGE5R2EvRW1BN1MyMlYvU21EZ2ZFWHluaEcKdWVGZ29ueklYTkhQVzM3d3JzZkw1M2tYQi8zNC9vaml6bVIwRHdJREFRQUJBb0lCQUV1Z3RLYk85Z0hwc2lodgpoUmpYWW0vMURhRmJUTkgxSi80U25NdnlYSjVoc3FPVHBuTzFrYXdXQjYzQWx3U0JzTnExMVA0NHk3bFBjQzBxCnR1ZjlLZ0traDg2dmR3TFVsanJ2cjY3UG9lQjlpSE1JS3FTUmMrQlhXRTJESTNENEUvOHRpMlkyNXpGdHg4NGYKL0ViR1h5NUVKWW5DQ3pMUHNkMlVIUnBrM2dJTjJqcjNKV0R1Q2xQNVlxTEhnZHlFb0RMQlNQamJDS0VEREJNbApoalRNQ3B6T2JIQk5yemIvbU5VZWJWZUVxSXRDTVFJcjl4bW9EWjRKSlRHNVFDRm4yU3E5dTQva2dQaFJFVVdCCmVVQWI4MFFuSGZQUWRJZ1ppanpYdFNETmNLaXZUYkx2WUxIMzRwb2I4aUNoNWJ0enQvU2EvWGFYNkhPZ0pQUWgKdy9rNkwwRUNnWUVBenFlVzk1Tm5vcTdoY0d4YXJWam81Q0ltZGNSR0RDT0hBb3g1WEFOZUR0VVFrQnIvVHpuYwp4cW5VZkw5RzVBTDJxeXRkeGR0NUVOelFmeXpESEJQbVE5SVIyTTFjTEgzZlhpTDRJRGw4bTVhTDl0NllvYjhVCnBxTFpwQkVQZDZTOFZJZEFOWDhRRjRuN01rU21KcTdvTkNzYXFlVTVNbmFGRWhWU0t1Q3I1V2NDZ1lFQXc2blYKYldGbFBlVTJxek0rUm1MVFIzNVRyT2pvWUR2eVE2UDhObHdsWGdCYzRuZUc5enh0c04xNXBHQXBFNkU2Zy8xQgpsK0lUcVNMOGtaNXBwbE4vYllPQzVOeFR4WWVRMWdqb1dwK3J1U09NQW1TWHBnUndWcEtSWWpTbnFJdjhGLzJCCiszeFduY0tZNnB0eksyTlJUTDhLLzd0a3pzWVNFck9DOGxEZmF4a0NnWUFhdUh6Q3dtS1NISDYxNUt6TTRVUXIKeTJhaHI2RkhESWoyZ1dkbnlGK3ZGMG11K0c2dXRkS2dOWEZ1TitWWXNqRm03SktSZE5Gd3ByeW0xUWpkWm8xTgprNm9QR0c2a3FobnB1Q2ZSTXQyejJJRjhpRWZBRWs3L1JPdFRWWWxrZFA2TkIzZjc4dFFIMXlXTjJHYUxkZTQ4CllKNXYvVjJwOHIwK0cxZW1oNnB5WFFLQmdIVTlQVkpXQ3BqazBEWVM5Vnl0ZUpXZEh6dzdMb29EUVczQVE2NjYKMWZVV1dKR21OeXZMZkpwK2lwV3d2TXd6VG1HcURYU1psVmhDUzM1aG9rSjBRNlYyS0tkRFVickpPVUxXZ1l0VApvMHpDL1BDdUg2UHRndmFNeWlwRERMYlVjaEJaNlZtc0xpWkhaT01tbEFMS2R2dDZlWGUwYkhudGV3VFRwVUhXCnJaaDVBb0dBYVpMK3hzK3d2am9aRHB0R0RXMVpwMHF4SFFxcklqd0ZucUE3TFhpd2VYczMvMjl6SEpGQTI2RjMKQzlOeUl2a0djMDJMd2QwaGNIaXJZd0dnQVNFZXdRVHIrWnhUSUw1L1ExODNvdU9Cd0Z6YVpzZURnb1U5Nms5RgpSSzh0NC9MTVdtVFpKSnozZmtqSXc3MzAyY25JbkN0b29QbDZyeDIxbXhEOHhCcVV6UVE9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU5RUUZiYVBTYjFYeE5vbjFMRE9LM0l3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN6T1ZvWERUSTNNRFl4TVRFNQpNamN6T1Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUE4Z2NRZEhRWEt0WDh5ekJ6N0F0THhxRENwRnYxWGR0UGFFejNsdFBxY2JwYUJSTWcKcmtJZTl6UHZCcHFVRjlidnc5WkdReVp4RDZGK0ZLdlBCRCtYRm1pbHR3YUprTmNvanVtVmJ5ZWZFK0V3VjNibgpQWElNd1dGK2hXaXFWT2djWXQ1Z29rUXlCdDM4TnRMQjMvMC9lNE1US0E5dnlBaERhZzFDUUc2U25peWhldXNaClFnWkxNMnhRVzhMdldyWG8vRW93a0ZHN2QyZTk3S0duSWNqK0k2bFpJdUpxUXJmejRucWhuQ001UUw5Z3ZNVmYKRG1LK1p2WnFhMjVGcjYvcVA2MDRZNkJWL3hoVUY2cGdSOHFCTHQwY05YUkUraTlFZXNobi80WE5nVHRFMEFlRwovenBwU3FFdHE2SjJPM2VhYmFkbWtUR283MTljVE5kZUFqMVJzUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGRHFob1RZUFZ6NnhmaGhNRE1NL0V0Tk8xaDNyTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQUZYWGo5TFJBSzcvc1RLWWxXVGlDSjNCK3BYeENIbm45VzlhWmNMdzZLdFVsSFlyNUZpRG9ZCnh3c2pQUHJLZFQvV0dCMXJzbnkwSlp5QXE0bUZzVG82Ykd2UzJjUWpKMDNkSEtFSUZ4Y2hGQlNGSzA2bk5hczEKbVhtRzAyM3ViT1BRRkZ2bk9iclVPT0hXbjJXZTFHVEdsNzIyZmY1c3BIOGpMUUlaSGlWRlpqWUFZR01PS3dhKwp1bmJGNDM5U3BCa3M1d3dTWFBFSHZScU1VeVVYd2QyTEdtY1V5RlplWWJveVhrM2UzNXJqK1hZUG1tUERES0pqCk0xcE5SeXhkTXM1OXJvMVp0SHhFZGh6YjJkbXhnclFxbWNkNFVYNmwxeXhYRUpabmNGMHBkZlRReFhUZXNYNVEKU3VHNzBwZ2tCYXN2SWlSUEJ5dThqWi9oN204Sjh5OVEKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURxRENDQXBDZ0F3SUJBZ0lSQU9Ea3h0WmU5RVFOYktQczBMV1Mxbmt3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN6T1ZvWERUSTNNRFl4TVRFNQpNamN6T1Zvd0tqRW9NQ1lHQTFVRUF4TWZZMngxYzNSbGNtMWxjMmd0WVhCcGMyVnlkbVZ5TG1OcGJHbDFiUzVwCmJ6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUw1UUpjRFJ0R2QxNCtjYnBUZjYKei9GdlR1WUw2a2tLOHIwbHRMTStUdmthZXJId1QrY0o2b0poZlZmYWlYTVpaQjhGRGRJdDRKVmdlbkxPMm1idApqcGErek9ZMkkrN2doTkFYYjJSc3RMeFk0blBKMXJwNG1aY0R3RkxGQnVOczB5TWp2Yld0UHAwYWE1bnc1ZHdlCi9NOUxONWdTTVBFZE1OTk5wS2xJVVR4TTJhKy83bS9qb2NIOTJsYUw0N1FheEE3MzUxRzR4b014VHVQZEEvaGgKYkZkeEw0SS94Y0Q5dXRyeGNpM0NSeXhWM0dIUUc2V1QyTmVCYUpmNWNTQVJLRmlwcW02dS9ablhhQW9wbDBWRgpFVFBkK2VGYzl1TnV1UmlSK3pPbDhyMjhseFF2bEI2clN3WW5uV1ZLOUw3M0FLWVk0L21CcVp6N1VmN2ZZVFYzCmxIOENBd0VBQWFPQjNqQ0IyekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUgKQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3SHdZRFZSMGpCQmd3Rm9BVU9xR2hOZzlYUHJGKwpHRXdNd3o4UzAwN1dIZXN3ZXdZRFZSMFJCSFF3Y29JZlkyeDFjM1JsY20xbGMyZ3RZWEJwYzJWeWRtVnlMbU5wCmJHbDFiUzVwYjRJUUtpNXRaWE5vTG1OcGJHbDFiUzVwYjRJbFkyeDFjM1JsY20xbGMyZ3RZWEJwYzJWeWRtVnkKTG10MVltVXRjM2x6ZEdWdExuTjJZNGNFZndBQUFZY1FBQUFBQUFBQUFBQUFBQUFBQUFBQUFUQU5CZ2txaGtpRwo5dzBCQVFzRkFBT0NBUUVBeUtWeGtnUm92aWdnQ3lQQ0J2azJhVnRDNWc4Q2N2dCtBMVQzR2ltNkpzc01KRWc4CjBMOFI5TDFBakhwbWJtcXkyU2VacXpUOEEwdksybjZSdnVPQUFqSWhlaTQvcEdBbFVGeW94V1FXMlVYSGFIQW4KZmlveERHaGZCRzIwVStlVUNoaGh0U2N1M3JLcGloKytzOVUwaDRGbUFld1Y3T1hWYWhwZnBZbjZ6S09icWdqQgoxTmpVZlpLWktZOUNlK2I2RExLTGh6K0kzUWtleVVFYklNT2pHYWdKL2g1Mm1YMFc0ZnJvdlV3dHNhZU5BaFpGCm0xTEVINlp1Qzhjcm8xR2plcTRrZFQ4czZYaDEyM2pUR1diaGViZHZGbW1TQUlkY3ZkQ0JHYzZIVlI0anpMNEoKK2NkSm1GSTV0L0kxUHlpZ0FMbGlCNG10L0taZWs4UnZpNUgweVE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdmxBbHdORzBaM1hqNXh1bE4vclA4VzlPNWd2cVNRcnl2U1cwc3o1TytScDZzZkJQCjV3bnFnbUY5VjlxSmN4bGtId1VOMGkzZ2xXQjZjczdhWnUyT2xyN001allqN3VDRTBCZHZaR3kwdkZqaWM4blcKdW5pWmx3UEFVc1VHNDJ6VEl5Tzl0YTArblJwcm1mRGwzQjc4ejBzM21CSXc4UjB3MDAya3FVaFJQRXpacjcvdQpiK09od2YzYVZvdmp0QnJFRHZmblViakdnekZPNDkwRCtHRnNWM0V2Z2ovRndQMjYydkZ5TGNKSExGWGNZZEFiCnBaUFkxNEZvbC9seElCRW9XS21xYnE3OW1kZG9DaW1YUlVVUk05MzU0VnoyNDI2NUdKSDdNNlh5dmJ5WEZDK1UKSHF0TEJpZWRaVXIwdnZjQXBoamorWUdwblB0Ui90OWhOWGVVZndJREFRQUJBb0lCQUdhZnVYdjhtUmVoVHIvMAovR2J2Yk9wNFowZE43WXh0eHUrUVFaeldZS2ViUzhaZ0cvWXVOck1QOXhORTJSR2tBNFZtcUVsS1MrekJGY2FMCkhPS2IvMlB5aDNNc2hydnRmakRvTWowcEVWenZZVTJtN1krb01NcHFUMjlTcDZCRHNxY2tRc3lSRzA2RVRMbTYKV1hrVmpLWUxuWEwzZkVUSXhPZHMydm9kOFJCZVFOeG9NdG1qQ0s1TFhDOHhFaHJwaEt2OW5TMnkxeTlOS0VKVwpoNFREYWZiUVhHOHlRS2NlczFxaVVpeW5tQ1k0Y3Q1RCt6cDJSQ1ViUTd1ZHI3VjVzeVNLUC9yYVhlTWdXekZtClpscjBPakpWZVRrbDRPdy9zRHRlWnBVK2IvalQ4cEE2TXlWdUgwVnhLQVdKUnZTcjNoYnlDdG13VHp0cWk0WTcKV29qYzVJRUNnWUVBK0hPV3RhcUpROTBoYXFodjcvV2l3bzF2dlNpN2VtczJOclFQRjlvRFU0bEI2Qld0ZUNqRAppaGhYSGE0aklwZzNLWmFUQXd0ZGdqTWprelhGMDdFelo5UmlDZlFUNG9OTS83eXVRUE1LcGxBWDZxRWYvcTQ5Cm1EbE9YVDJTTWhvY0x5dnRjRW1qOHpyVFFBbmphTURNNGFZQ01Jb1Nyb0JzR09EdFVYWHl6ODhDZ1lFQXhCaGUKVDREbUdZQjF5VmRnUFFZS21NYnBmRWc1bmtET0dUUmN3a2hyUXRVODV5dVBRd0l5TE40bGhmZW5yMVIwdjQxeApJQ1c0SVdzVi95eXp4M3VhOVdqNWdUVEpXSG9HM3I0UjFxeHdrSkdMQ2hNRGZ1M2czTUhWc3IxSEI5WnpVdnhOCjBscng3TUxsQUNiY3VJc1U2MzEra00reVh5TTJBOFJqMEg0ZjdGRUNnWUE3UGZ5aXhzNUNRMWt6Z0lSb2VHN2QKNnpISXJneStMUkJaVE9nSWJQQzhHNDkra3FTeGNTN25IOVN0L0JiZXFlTUZaS1ViWmJ0ZlQyaGRNc1pBS3hHeAo0VitiTmZzRDJRRWtQYzVqS0ZEU3hXaGVoeHNFOUhFMWVmeW9tUVRpTTMyaTlkdUJHZDRoSWxhNi8yQ2RXdE8vCnZvRHBLQk02VHQ3M3M3S0M2UmdEMndLQmdFQ09JU1lkTWlMOUZrbWxPU3A5dmFsVCtuT090MkV3eG1pbncwMjIKVjVGVjc4bk9ua2dhQmZpZFhVOEFHN1R0b2MyWnU3OHdpN0I4dDI0ZEFrWk9tOUhrc0Jib0VNek94MG8yMmxxSQp4RG5qb0JrOTd5MnZGQks0d1NncGhhTy81cEZRUERKZS9Edk1ZV1V1WmdWZXpCRkdiQTh5UU85dkFRNDJiZ0dxCk04b3hBb0dCQUp1RkU2SGZIaGdPR1Z0Z2ZqSXJzaXdGbGh1WHBxcjRQUnJHTm1wYS9CK1lVbSs4eEs2VVVzUWoKWWZ0TElBOERQTUZMRDBnSnd6eG5IVGFPeHljM0g3MmpWbVlJTER5bXNFV3NTZUJlY3g0RFo0Sm8wRHRyS1laRAo2TFk4SHQ1bmpVTG9OZWFpcmx4S0xiYnMreUV2RE9BZlJvMWM2N0h2aEpvQWZPVUlIZVNJCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU5RUUZiYVBTYjFYeE5vbjFMRE9LM0l3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN6T1ZvWERUSTNNRFl4TVRFNQpNamN6T1Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUE4Z2NRZEhRWEt0WDh5ekJ6N0F0THhxRENwRnYxWGR0UGFFejNsdFBxY2JwYUJSTWcKcmtJZTl6UHZCcHFVRjlidnc5WkdReVp4RDZGK0ZLdlBCRCtYRm1pbHR3YUprTmNvanVtVmJ5ZWZFK0V3VjNibgpQWElNd1dGK2hXaXFWT2djWXQ1Z29rUXlCdDM4TnRMQjMvMC9lNE1US0E5dnlBaERhZzFDUUc2U25peWhldXNaClFnWkxNMnhRVzhMdldyWG8vRW93a0ZHN2QyZTk3S0duSWNqK0k2bFpJdUpxUXJmejRucWhuQ001UUw5Z3ZNVmYKRG1LK1p2WnFhMjVGcjYvcVA2MDRZNkJWL3hoVUY2cGdSOHFCTHQwY05YUkUraTlFZXNobi80WE5nVHRFMEFlRwovenBwU3FFdHE2SjJPM2VhYmFkbWtUR283MTljVE5kZUFqMVJzUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGRHFob1RZUFZ6NnhmaGhNRE1NL0V0Tk8xaDNyTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQUZYWGo5TFJBSzcvc1RLWWxXVGlDSjNCK3BYeENIbm45VzlhWmNMdzZLdFVsSFlyNUZpRG9ZCnh3c2pQUHJLZFQvV0dCMXJzbnkwSlp5QXE0bUZzVG82Ykd2UzJjUWpKMDNkSEtFSUZ4Y2hGQlNGSzA2bk5hczEKbVhtRzAyM3ViT1BRRkZ2bk9iclVPT0hXbjJXZTFHVEdsNzIyZmY1c3BIOGpMUUlaSGlWRlpqWUFZR01PS3dhKwp1bmJGNDM5U3BCa3M1d3dTWFBFSHZScU1VeVVYd2QyTEdtY1V5RlplWWJveVhrM2UzNXJqK1hZUG1tUERES0pqCk0xcE5SeXhkTXM1OXJvMVp0SHhFZGh6YjJkbXhnclFxbWNkNFVYNmwxeXhYRUpabmNGMHBkZlRReFhUZXNYNVEKU3VHNzBwZ2tCYXN2SWlSUEJ5dThqWi9oN204Sjh5OVEKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTRENDQWpDZ0F3SUJBZ0lRVVhWYW9LanZaTjc1TnMwcTJUSkI4akFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek01V2hjTk1qY3dOakV4TVRreQpOek01V2pBak1TRXdId1lEVlFRRERCZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDMVA0Z0ViWFpZQzFUK3VmUkM3SklkaDZWS1k5QkEKaHZHOG15ZDI5ZFFOZ2JPMklPTk1FU1NmUzNpWXdEZFNhNTEyRmpSSml4RGs2akxMSjhwcnRhTFFNeFV6ZjdoZwpZajF1eFpoa0NUOGFqOTBteG1BQjhjVkNqeFBsZVRVQ0NqM1ZjL0dmYjBlVWx2bFpXbXcxR2gzakVtdU1kdEZTCmlBTmF6cExvVzdvMVUxOW1iZU56cHFDVTBTcE1RUS95dHhBeVM3R2RucEZOcytxNmRrWmpwS0dtWUV3bWRWYWYKa295VGpsdFJWclVGYS9mM1RGd3p2MjRCdFloS2d1SGZmczNHRHB4RUNscWJNTEpVeU1OcHozanZjaWVCNktqUApCbU1Wd3RrTVdlb0U2eDcxSDl3SXNtZnE5OFN3NnlyVDdaMHBwNEw0SDZmd1dLUWo2WkJtdzh6dEFnTUJBQUdqCmdZWXdnWU13RGdZRFZSMFBBUUgvQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUYKQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUI4R0ExVWRJd1FZTUJhQUZEcWhvVFlQVno2eGZoaE1ETU0vRXROTwoxaDNyTUNNR0ExVWRFUVFjTUJxQ0dDb3VhSFZpWW14bExYSmxiR0Y1TG1OcGJHbDFiUzVwYnpBTkJna3Foa2lHCjl3MEJBUXNGQUFPQ0FRRUFGMmxrNHJLalVHbkxVUmZBNjhnejBqTGZ4TGFkZ1BSaXZSSS9Db2J0SHV2U1l6TUEKMExoTnBxRkQ3azFUWG1RVVk3UmEvc0Z2K3Q3eDh6RnZ4UW4ybC9zL0g5Sjk2aGJxcWFYRExlKzZXRysvNm9USApMYXN3WEQrUTNWSjJWRVkxTHRjdWpJVlhzTFc1eUtacWsxdUxjRWRYd0NiSFY5eUpQTERUSm96T29qRTY3R3hpClRpbnJtd1JHZEVIbG5FR0hrTDNSRXp1MzZoZW9NdzkwT3FiOS9YdFFCNkJvS2NaVEtxWWVQUy9xNEJodXBkS0oKMTJVRmh2aU9iM25ZbjBBKzF2Zit2S1J2WDNyQ0MydDEzeGdSbUQxeHNKUjZXUkwxQzJKVzZHR0M5NVZGYlM0LwoyVndQN1pndkVUOGlrRFFMZVVMdEJobTNJUUZEYnRVRXpseTFTZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdFQrSUJHMTJXQXRVL3JuMFF1eVNIWWVsU21QUVFJYnh2SnNuZHZYVURZR3p0aURqClRCRWtuMHQ0bU1BM1VtdWRkaFkwU1lzUTVPb3l5eWZLYTdXaTBETVZNMys0WUdJOWJzV1laQWsvR28vZEpzWmcKQWZIRlFvOFQ1WGsxQWdvOTFYUHhuMjlIbEpiNVdWcHNOUm9kNHhKcmpIYlJVb2dEV3M2UzZGdTZOVk5mWm0zagpjNmFnbE5FcVRFRVA4cmNRTWt1eG5aNlJUYlBxdW5aR1k2U2hwbUJNSm5WV241S01rNDViVVZhMUJXdjM5MHhjCk03OXVBYldJU29MaDMzN054ZzZjUkFwYW16Q3lWTWpEYWM5NDczSW5nZWlvendaakZjTFpERm5xQk9zZTlSL2MKQ0xKbjZ2ZkVzT3NxMCsyZEthZUMrQituOEZpa0krbVFac1BNN1FJREFRQUJBb0lCQVFDanQ1Vm5XbkR4cXByRgoxTGFjMVJCTytENEg2ZzBzbkRnemczcXNhL1YxbGRqOUJNd0w0OWhPdzE5VnF4ck5xa043YlNjaDN5b05mTGNRCjV3cGpMSmk2czhuTTBPdDh0SUNGVkpzSWtZbWN0cUt1NmJYRFM5NUE5dmlqNlU1R1gzWG5IMm43K0FxU1g2VXcKWHdzckZFSTI0R2FoWkpwRGtIUm5TLzFMUWIvN2RhU0h5OGh5d0JTejVnaEx6dFBtTjQycW5RRUVSUmp5VjJQMQpiWDBTajJhV2NVeENEYnRubnBXWDMyUktzZzlGd2lFR1hKTjE2OFpYRk40TzFuK2Vkbzd3N2VXekRIenRTTTRoClM1OG5nZk1keitJTnRLV3ZPVndoY2Q1Um50WWhyODVNeFVBMk9SNVVzODlxdjVQWWpQa21xekIvaU11WlM5bTgKM2xJcEtIckpBb0dCQU4wNTNMZlhjWEgrRXdQZW9ZZTdhYUNVaCtRczJIaXBtZUNVbXpsYXhPOC9Sbk40dE1KKwpLU2VHNmxVYXE0Y2V2QmZqOUQyZWt4bnVQKzlieVhmenFmeFZRb2k3Yld3a0kvSzBrU3dPdGpDWm50YWpxSyszCkNiTkxFN2ZPaEo1SUtWeUFRN1RicndwU2pJWDR5T1hzb1RETUxFdlFFMWk4QVZUelc1dXZBNlRqQW9HQkFORzgKOWJSZm93MUY4UEhLbkpuelV2MDNURWFXNFd2dy8zeHdxYW5PSHBoOXZvLzh0NVlKUE9xbi8xU1hBZmk0TmM4MQpQL0pLRWE0T1R0cVdnSzd4dXFoY1FKZVU0cEtvVXUvdUEvU0NPdjVSa3hKM3cvd0VnVS8xUHR2bGc0d1EzanRpCksrci9yOXVSWjI0b0F5T1lpOStMYm9GUE1BWk5XUGNvV3VXVFl6L3ZBb0dBVEREQVpvU0pxclBSZ3JTck54OEIKcXU5Y3VlWUVDOUtGajRZK3k0c0taa2VKa1AxU2ErV2RjT0tUVkFvaVp4L2JzZkt0VEllUHJBK1U3Mi9TUEVDcwpHNTZWa3BmU2dMc1ZzbUlqMldPYnRiTkN0RE9iUmlFbzh4bjVTWVdUd1J1ak94dGx0aVV1N01RdlozaWVZQ21WCi9rTmpRaDBBZk1BTFNXR2kvRVJUWWZjQ2dZRUF2bVJ1RndNS0hLNTAvc2tTUjU1ZW80WmpNMkViMk1TNDU5bk4KNmxzMTR1K2k0VXBqelVzdGhVWmp2Z0lteEFWVXMzaC9TQTU4NWlnTzVOYmlrZXpWcUtlMTZ1UTRtVEU3dUptego5VzJTNS9KZE05S01rbVgwalFUdnZ1WWwrQ3dIMEpoWmpjWDFlYmdRMENwNlR3SFhWMkpYT2dNTWNXd2RhcCt6Cmc5dTdxUGtDZ1lBVzRKYnZURWg5eVRwYWhBa0paMGtTU1h6a25icDBnK3NQdys4Rk5pdTZjVVF5YnpLZGpIY2MKcDZQQ2FHUEhZL3Fuc2lyUW5oaStrZDVGeGRHcGxYMlZmRm80Skw4QUNYQ2daQ3l5SmJwU1NuTjR0djJtZVFyZQp6R2UzQkh3U1V2VUZCUGthMGdKRlFSYmprQUlYbVd1Z0d6blZvazZsd1pzL2xqY09NdkdLMUE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU5RUUZiYVBTYjFYeE5vbjFMRE9LM0l3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN6T1ZvWERUSTNNRFl4TVRFNQpNamN6T1Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUE4Z2NRZEhRWEt0WDh5ekJ6N0F0THhxRENwRnYxWGR0UGFFejNsdFBxY2JwYUJSTWcKcmtJZTl6UHZCcHFVRjlidnc5WkdReVp4RDZGK0ZLdlBCRCtYRm1pbHR3YUprTmNvanVtVmJ5ZWZFK0V3VjNibgpQWElNd1dGK2hXaXFWT2djWXQ1Z29rUXlCdDM4TnRMQjMvMC9lNE1US0E5dnlBaERhZzFDUUc2U25peWhldXNaClFnWkxNMnhRVzhMdldyWG8vRW93a0ZHN2QyZTk3S0duSWNqK0k2bFpJdUpxUXJmejRucWhuQ001UUw5Z3ZNVmYKRG1LK1p2WnFhMjVGcjYvcVA2MDRZNkJWL3hoVUY2cGdSOHFCTHQwY05YUkUraTlFZXNobi80WE5nVHRFMEFlRwovenBwU3FFdHE2SjJPM2VhYmFkbWtUR283MTljVE5kZUFqMVJzUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGRHFob1RZUFZ6NnhmaGhNRE1NL0V0Tk8xaDNyTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQUZYWGo5TFJBSzcvc1RLWWxXVGlDSjNCK3BYeENIbm45VzlhWmNMdzZLdFVsSFlyNUZpRG9ZCnh3c2pQUHJLZFQvV0dCMXJzbnkwSlp5QXE0bUZzVG82Ykd2UzJjUWpKMDNkSEtFSUZ4Y2hGQlNGSzA2bk5hczEKbVhtRzAyM3ViT1BRRkZ2bk9iclVPT0hXbjJXZTFHVEdsNzIyZmY1c3BIOGpMUUlaSGlWRlpqWUFZR01PS3dhKwp1bmJGNDM5U3BCa3M1d3dTWFBFSHZScU1VeVVYd2QyTEdtY1V5RlplWWJveVhrM2UzNXJqK1hZUG1tUERES0pqCk0xcE5SeXhkTXM1OXJvMVp0SHhFZGh6YjJkbXhnclFxbWNkNFVYNmwxeXhYRUpabmNGMHBkZlRReFhUZXNYNVEKU3VHNzBwZ2tCYXN2SWlSUEJ5dThqWi9oN204Sjh5OVEKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUekNDQWplZ0F3SUJBZ0lSQUowQW5JNjZGRnBpWFNnaDllc2pPVmN3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN6T1ZvWERUSTNNRFl4TVRFNQpNamN6T1Zvd0pqRWtNQ0lHQTFVRUF3d2JLaTVqTVRjdWFIVmlZbXhsTFdkeWNHTXVZMmxzYVhWdExtbHZNSUlCCklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF2ZWYrQTNmZEhmU0EyS2xvLzJ3REhGbkwKbGRodW9zRGVLYTg1V0E2aTM3aGp2NDUwVjk2cGFQRnVpVFEvQmROQlpqeC8wYUJjazJqemo4TURWVTZucGZYTgpaZTN5SDBlMTN6eHZGRmg0OXRnOXBQMExzSmVWaGNndUhJckk5VEpsWnF3QXA5WnByRVU0dVBtdk1pb1k4WkVKCmNWZ3h3UENLaVFLTU1Hb3RPRHF4VlN5MlFyMjNsclJzVmFrSXRTbHZCS3dkZHk3RVlINy9CK2h3bmVJbzREOXAKektjZWw4dkdFZkxUdWU5TGovaml4cUdpWGNDTzc2RU4rck10T2pKbEFLOXFXU2ZsUm52TFpGMWIyUThGcmV0bQpHZDhzTUhScTU3NUVZZXJVSmVzdWRPUThHTUJvUkdsNEMwT2ExcGh4dUJLQjdrS3dUUTZYbDRDRTFodTNsd0lECkFRQUJvNEdKTUlHR01BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWZCZ05WSFNNRUdEQVdnQlE2b2FFMkQxYytzWDRZVEF6RApQeExUVHRZZDZ6QW1CZ05WSFJFRUh6QWRnaHNxTG1NeE55NW9kV0ppYkdVdFozSndZeTVqYVd4cGRXMHVhVzh3CkRRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFDYUVLaDIyRzNiVG9tU0ZjNkpxNTdvK0ZmcDhjcU42djZMcm0vOE0KTVF0T0YraVZmQTFPWCs1TUhOb2dDdVhlUmVRUlpGTGdmdkhWS21nc2ZQZEg2eS84L2Y0QlNyaHBKWGFldjFNTQpaM2Z3dzNlNU9QMjVTY0FtUFNOMTBvL2YrcDNERjVHeG42MFZEZG5kSzBDSWF4K3RPU2c3R1pMWENEekhSaFFvCmx4L1pXQlluNmhMZkY3WWZZQXc0bTdTZDJHbExPVEpjUGFhU3RXUEtqdUNvQ0xDME9EWng4N21oeGtMWUdDeXgKcllrR1k0U212ZmRlZFhOL0gwYU5XTU9RM3hseUY5MXN1NGJGTW1hVHFia1Q1eDNQWnZESmdyN2JOUitWNDQwRApObzJhbWFmcWNRUUlPckswc2hvNmFmeFp4YXRkMGhuOUxmTFlVbjFaN1EzN0x2Zz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdmVmK0EzZmRIZlNBMktsby8yd0RIRm5MbGRodW9zRGVLYTg1V0E2aTM3aGp2NDUwClY5NnBhUEZ1aVRRL0JkTkJaangvMGFCY2syanpqOE1EVlU2bnBmWE5aZTN5SDBlMTN6eHZGRmg0OXRnOXBQMEwKc0plVmhjZ3VISXJJOVRKbFpxd0FwOVpwckVVNHVQbXZNaW9ZOFpFSmNWZ3h3UENLaVFLTU1Hb3RPRHF4VlN5MgpRcjIzbHJSc1Zha0l0U2x2Qkt3ZGR5N0VZSDcvQitod25lSW80RDlwektjZWw4dkdFZkxUdWU5TGovaml4cUdpClhjQ083NkVOK3JNdE9qSmxBSzlxV1NmbFJudkxaRjFiMlE4RnJldG1HZDhzTUhScTU3NUVZZXJVSmVzdWRPUTgKR01Cb1JHbDRDME9hMXBoeHVCS0I3a0t3VFE2WGw0Q0UxaHUzbHdJREFRQUJBb0lCQVFDRTNqVUYvaTR4MENqNQo3Z1d0ZDhmeFpRNGd5QzRZSnpNSkhUVFUzR0N1Z0pjaHBpeldjYzQ3dzNmZi9UTC9BMkNsaER5MTBTb1VaUURNCkc5aFFMbGp6cjdmRzBpVnVKMEVqY0dnVFp4Y3pOZlpqWWp4MGtJb244UGY2Tmt3RjZmMnlTVE9vT2tiekpmZGEKekM3OHZTRjRtazV1QkJQRGQwaW1OYWNhRkorUXo2TXF5Ny9OZ2VKVUJnUEF3dUpBWTloTmZxeW9GQk1CZ3VTQgpMNGd4MlZycHl0TktQd0djcWl5Q3gzZVJ1L1EzcmRqcjNDOWVFRE9wY2VuYU8zZGZ0WFUwYmROQ005MU1VblhDCkgrTm83QjFicW9xRVJhSGxwdjI4Z0hxSkx4c1dwRElHS254dVFTT0EwNlhrSnhPU2RLMVllTmovQkpETTNjbHAKTEVKS2Z5THhBb0dCQU9MdG13UXY4UXJkL3dUbU0raGgwWmw0R3BFSDdaQndiVXliWUZqTzlOQkhWKzRROGFGZgo3VVZLbkMwS0UzR25iMi9GRFkyT1VPSlprejdlVTA0bkxkM1haaU1ZdzZ6STFKbW5HR3k3UFJCUzlDaVhOTnl3CmhmQ1JtQXNQaFZvUTFrS0pGSXRHNVBoWXV1dkpDYXBuTWxJVUhIWmVOTFRocHVGRTNtejE4WkVwQW9HQkFOWTgKTkxxTzZhUDVMM2twc0NVTUc3cUt2TWh1ZUEvQm00UENvNUNyRWRVcjF6UGlhNU5vT3hYL1VlZFF1SFhnOUdyVQpJRXh0Wm00ZWlNQjg3UmRxNC9DdEYwYzN4ckVlQzJqbGpaSituY1doOEMwN000ZXZvTlVFOXdDUGo1RG9SVUFaCnVUaWN3OExESXdYeXVyVmFMU052cFpMc3V2SS84QTlqdVlvZUdGcS9Bb0dCQUtXd1RRNEtueG1MSzRkOU9ZdEQKMk5FUVUzMXZaM0tkMUFBcU5uZkJiQmlpN3IzQkcxdnplWCt0VVVqRllac0xZSjhnSnB3anZFVDRtRDFBQVYwLwoyQXB4R244bnRyOXl4MkFGRkIxWHZPY3RXbDVFd1BFZDVqM1hZRWM3SnVlekFXNEZQcjNPbnFJQnowRVhRWHBzCjdOM25GejBKM2J2d1FuT2FZRGo0ZmsrNUFvR0FaVW1Yd0hCYkJGeUcxbWtnVDVPMjlHNHRyVEdWY0JXZ09oNW4KQ0xub3QzbC95SmNQTjJVN01qNUJjZlRYRVZ4bkVxN3lDbEJhOGt0YmFtNW1CZ0ZTZlhMSW83STZMWGsvK2JzMgpRUUcrQkRkNC8xbVRGbDZ4MHFVRFJ1K1k5L0RvOU5KMG9OQjFPWHJhN3pBQW1FZG5PZTdLUUhuT05VU0hjaTg3CkJKTVAvcThDZ1lBOS85czBSQmxkYWZRSDVBUSsweXhzUGlnVHNueDBKTGNvL2RoU2U0VERMOUVQOWtoSnYxUDYKVmVUTWhxWmZTUFBpcDkyQlBhZG1uUllZSXRFUjlUN0xxdG9xYmdHcXZsd3grR3A5OW13ZFR6NzF6VFg1OXdaaAo0NmlnU1RDQ29nQXYybXVyNklYR0xSQk9mUXJPeFgrN01WSVlFYXhGSVJqY1hKQ2E0Y2pia2c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  skip-cnp-status-startup-clean: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  policy-cidr-match-mode: ""
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"
  # If you want metrics enabled in cilium-operator, set the port for
  # which the Cilium Operator will have their metrics exposed.
  # NOTE that this will open the port on the nodes where Cilium operator pod
  # is scheduled.
  operator-prometheus-serve-addr: ":9963"
  enable-metrics: "true"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: c17
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "117"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  # Default case
  routing-mode: "tunnel"
  tunnel-protocol: "vxlan"
  service-no-backend-response: "reject"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-masquerade-to-route-source: "false"
  enable-wireguard: "true"
  wireguard-persistent-keepalive: "0s"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-local-redirect-policy: "false"

  kube-proxy-replacement: "false"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  enable-host-port: "false"
  enable-external-ips: "false"
  enable-node-port: "false"
  enable-health-check-nodeport: "true"
  enable-health-check-loadbalancer-ip: "false"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  bpf-lb-acceleration: "disabled"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  hubble-export-file-max-size-mb: "10"
  hubble-export-file-max-backups: "5"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  ipam-cilium-node-update-rate: "15s"
  cluster-pool-ipv4-cidr: "10.17.0.0/17"
  cluster-pool-ipv4-mask-size: "24"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "true"
  bgp-secrets-namespace: "kube-system"
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"

  k8s-client-qps: "5"
  k8s-client-burst: "10"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  # default DNS proxy to transparent mode in non-chaining modes
  dnsproxy-enable-transparent-mode: "true"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-xff-num-trusted-hops-ingress: "0"
  proxy-xff-num-trusted-hops-egress: "0"
  proxy-connect-timeout: "2"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"
  proxy-idle-timeout-seconds: "60"

  external-envoy-proxy: "false"
  max-connected-clusters: "255"

# Extra config allows adding arbitrary properties to the cilium config.
# By putting it at the end of the ConfigMap, it's also possible to override existing properties.
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: c17
    peer-service: "hubble-peer.kube-system.svc.cluster.local:443"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-hubble-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-hubble-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n\n        # Liveness probe\n        location /healthz {\n            access_log off;\n            add_header Content-Type text/plain;\n            return 200 'ok';\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumbgpnodeconfigs
  - ciliumbgpadvertisements
  - ciliumbgppeerconfigs
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  - ciliumbgpnodeconfigs/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumbgppeerconfigs
  - ciliumbgpadvertisements
  - ciliumbgpnodeconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumbgpclusterconfigs.cilium.io
  - ciliumbgppeerconfigs.cilium.io
  - ciliumbgpadvertisements.cilium.io
  - ciliumbgpnodeconfigs.cilium.io
  - ciliumbgpnodeconfigoverrides.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  - ciliumbgpclusterconfigs
  - ciliumbgpnodeconfigoverrides
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumendpoints
  - ciliumidentities
  verbs:
  - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumexternalworkloads/status
  - ciliumnodes
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumendpoints/status
  verbs:
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumexternalworkloads
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-bgp-control-plane-secrets
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: etcd-metrics
    port: 9963
    protocol: TCP
    targetPort: etcd-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: NodePort
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
    nodePort: 32379
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-agent: "unconfined"
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: "unconfined"
        container.apparmor.security.beta.kubernetes.io/mount-cgroup: "unconfined"
        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: "unconfined"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
          initialDelaySeconds: 5
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.memory
              divisor: '1'
        lifecycle:
          postStart:
            exec:
              command:
              - "bash"
              - "-c"
              - |
                    set -o errexit
                    set -o pipefail
                    set -o nounset
                    
                    # When running in AWS ENI mode, it's likely that 'aws-node' has
                    # had a chance to install SNAT iptables rules. These can result
                    # in dropped traffic, so we should attempt to remove them.
                    # We do it using a 'postStart' hook since this may need to run
                    # for nodes which might have already been init'ed but may still
                    # have dangling rules. This is safe because there are no
                    # dependencies on anything that is part of the startup script
                    # itself, and can be safely run multiple times per node (e.g. in
                    # case of a restart).
                    if [[ "$(iptables-save | grep -E -c 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN')" != "0" ]];
                    then
                        echo 'Deleting iptables rules created by the AWS CNI VPC plugin'
                        iptables-save | grep -E -v 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN' | iptables-restore
                    fi
                    echo 'Done!'
                    
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - CHOWN
              - KILL
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
              - DAC_OVERRIDE
              - FOWNER
              - SETGID
              - SETUID
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Unprivileged containers need to mount /proc/sys/net from the host
        # to have write access
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        # Unprivileged containers need to mount /proc/sys/kernel from the host
        # to have write access
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Unprivileged containers can't set mount propagation to bidirectional
          # in this case we will mount the bpf fs from an init container that
          # is privileged and set the mount propagation from host to container
          # in Cilium.
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-dbg
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      # Mount the bpf fs if it is not mounted. We will perform this task
      # from a privileged container because the mount propagation bidirectional
      # only works from privileged containers.
      - name: mount-bpf-fs
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        args:
        - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
        command:
        - /bin/bash
        - -c
        - --
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        - name: WRITE_CNI_CONF_WHEN_READY
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: write-cni-conf-when-ready
              optional: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
            drop:
              - ALL
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
      - name: host-proc-sys-net
        hostPath:
          path: /proc/sys/net
          type: Directory
      - name: host-proc-sys-kernel
        hostPath:
          path: /proc/sys/kernel
          type: Directory
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              - key: ca.crt
                path: client-ca.crt
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/port: "9963"
        prometheus.io/scrape: "true"
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.15.6@sha256:5789f0935eef96ad571e4f5565a8800d3a8fbb05265cf6909300cd82fd513c3d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        ports:
        - name: prometheus
          containerPort: 9963
          hostPort: 9963
          protocol: TCP
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      initContainers:
      - name: etcd-init
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - etcdinit
        # These need to match the equivalent arguments to etcd in the main container.
        - --etcd-cluster-name=clustermesh-apiserver
        - --etcd-initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --etcd-data-dir=/var/run/etcd
        env:
          # The Cilium cluster name (specified via the `CILIUM_CLUSTER_NAME` environment variable) and the etcd cluster
          # name (specified via the `--etcd-cluster-name` argument) are very different concepts. The Cilium cluster name
          # is the name of the overall Cilium cluster, and is used to set the admin account username. The etcd cluster
          # name is a concept that's only relevant for etcd itself. The etcd cluster name must be the same for both this
          # command and the actual invocation of etcd in the main containers of this Pod, but it's otherwise not
          # relevant to Cilium.
        - name: CILIUM_CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        # The clustermesh-apiserver container image includes an etcd binary.
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --auto-compaction-retention=1
        - --listen-metrics-urls=http://[$(HOSTNAME_IP)]:9963
        - --metrics=basic
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        - name: etcd-metrics
          containerPort: 9963
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - clustermesh
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt
        - etcd.config=/var/lib/cilium/etcd-config.yaml
        - --max-connected-clusters=255
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        - --controller-group-metrics=all
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: IDENTITY_ALLOCATION_MODE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: identity-allocation-mode
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        ports:
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir: {}
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "clustermesh-apiserver"
      serviceAccountName: "clustermesh-apiserver"
      terminationGracePeriodSeconds: 30
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: clustermesh-apiserver
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.15.6@sha256:a0863dd70d081b273b87b9b7ce7e2d3f99171c2f5e202cd57bc6691e51283e0c"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 3
          livenessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 3
          startupProbe:
            # give the relay one minute to start up
            grpc:
              port: 4222
            timeoutSeconds: 3
            failureThreshold: 20
            periodSeconds: 3
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          - name: tls
            mountPath: /var/lib/hubble-relay/tls
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Always
      priorityClassName: 
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 1001
        runAsGroup: 1001
        runAsUser: 1001
      priorityClassName: 
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.13.0@sha256:7d663dc16538dd6e29061abd1047013a645e6e69c115e008bee9ea9fef9a6666"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
        readinessProbe:
          httpGet:
            path: /
            port: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.13.0@sha256:1e7657d997c5a48253bb8dc91ecee75b63018d16ff5e5797e5af367336bc8803"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
