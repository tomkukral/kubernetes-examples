---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUxkZFRtM1MzTnpaMEFlTTh4K2ZDZkV3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV3T0ZvWERUSTJNVEV5TVRJeApOVFV3T0Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFrN25jZTk3ZTdMRXM5Z05PRSs4Q0V5MjJGVGxTdUhMb2RtM216Z3dITlNJSm1LdFQKb2tyMTRVNUZRanpvc2I5dWRIaDFTcUZyMXo3SGtkYjFBbTU4eFNPZmFhanQxVVdaQm1HcHRwTHRVNFM2Qm5NSQp4K21rcHBWd0hUOE5yeEdTQ3NuNmhkVzl2MjF2MnhqSGdwZXhHd0xqM0NaRGxsSTFWeWRVNlJCa2FJZFZkK1NmCkNNd0s4MjdhRzhpNFN6TWRzU0RMUFQzbWFqdXNETWJBcVhiM0Y4REVtaU5QcTVhYjFrL3RDVXFORSt1bHpCZk4KRms2MU1zQndwekhkVFl6VjVBaFBUNkxwY3d3N1BQMVdBNVBPQkhxTXBOUTIrSXNnREVvSXRBNTRaWHcwSDEvQgplUzhzc2tpZE5LM1pOajFwbVhBcWZ6b0xxaDlVTkNOb0hDV1lyUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGR1RHejhsQ0xpcTdSUFpLN29QQ2hyb0Z3dmZMTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQnBFQU9CWUwzY2l1ajZlRVE3bDZ5RDk3by8wZ3lhMC9RWDB0ZFE0SVd2SlU2MFk3cTBHbGc4ClZFcGJhTkhCUVhiTGJRbENUOUJaQ05nRWI1Sm1mK0lJN2VzUWhEcDI1cHFxTy8xNHdkSGxhT0pING1NOTlEcXgKYXlBMTZCM2h1Z05seTgxRC85YXZHM1ZmQ3puRWFBb1Z1U3J2SCs1UUhXMllOMGpKdk9RU3dLOE9ucjVleU1wZQpVNzJJS1ZFVEhZT05wYU9GV3VoU0ZicFQrTkVSVmdjenVydW95QTBNMi9MOVJYaU4ydHdPQWR2S211cEdTT05xCjJTZHlNMVhmUW9ieklkdEFadWdLYzdxNUN2M2ZnbG00L0xwMEJ2REdXZ3QyVmdFaFliSUpSQXlYL2dnRTh5MDIKQTdPUUZkMElDU3pEdnlMWmI5N2x1YWlNN1BpZ28vc2oKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBazduY2U5N2U3TEVzOWdOT0UrOENFeTIyRlRsU3VITG9kbTNtemd3SE5TSUptS3RUCm9rcjE0VTVGUWp6b3NiOXVkSGgxU3FGcjF6N0hrZGIxQW01OHhTT2ZhYWp0MVVXWkJtR3B0cEx0VTRTNkJuTUkKeCtta3BwVndIVDhOcnhHU0NzbjZoZFc5djIxdjJ4akhncGV4R3dMajNDWkRsbEkxVnlkVTZSQmthSWRWZCtTZgpDTXdLODI3YUc4aTRTek1kc1NETFBUM21hanVzRE1iQXFYYjNGOERFbWlOUHE1YWIxay90Q1VxTkUrdWx6QmZOCkZrNjFNc0J3cHpIZFRZelY1QWhQVDZMcGN3dzdQUDFXQTVQT0JIcU1wTlEyK0lzZ0RFb0l0QTU0Wlh3MEgxL0IKZVM4c3NraWROSzNaTmoxcG1YQXFmem9McWg5VU5DTm9IQ1dZclFJREFRQUJBb0lCQVFDUU5JUDE2NWNEeU9UUgo5bUgyZFg4NkI0cFNaNVhIZG14VWgyNGlQMzJkc1c5YXVBdzVSaUdGNGVrY0F1ZEg5RTQzcGdzaFlqZ3FjeDlQCnoxMTNGVEg1STVBUERaZTFkRzR2MjVCWEtGQkNFak9oN2hOcFN6dXVYZnlHb0RHVWIzdDN5cmtpZ29icTRrS3AKeHlPaTZMODdWZlBteVBkN094N1V5QkZNUGZNMlVVSkF1cC91a2Z3YVk1c08wYUVaQlVPZlo0YzFUVU5vUFExYgpBeWl3WUpabHlndk5kazJla3NuQ0tZaWhmTndhWkRpT2FFVFJmU0xaWm5OYzZMMGZOTXVuRHdSSzlzMWx1QlBRCkM4NnVFQkc1OFMreXFadVZYeG5ZUHIwQTVrRlBaWUZBZ0FLNGtoZU5Qbm55eUtOYXZBR2IzVENxanRtWkNodmQKUVcxUjF0MEJBb0dCQU1PYlRHT0F0dEhYT21VV3RVUUw5SjkzN1h4RjlGQzBCclprTkVjdFpBL1FNelJ2S0Zzagp5ZXZ4RXBnbE5sd3RCamhRUGd3UWV2aDhPbHV5VTl0UGxZM2xqZmtEUlRqakE5VGJnMEl5L2p4ZjZFQTJqMW12ClhmMThxYTFuaURhVDhwcHl2YXhOMmVSNDhzaUplZGo3V2o4RFdydmlPSXpaWUpvd3FCSEdBODF0QW9HQkFNRlcKRnpJTURnYU1ocVMzZmE0UEhLTWpvYU1aZVpPa0UvVFNhQTBacFhNWHRXRmVHWThQTDlNUnhJNm9UQ3l0NVlvNApjdS9hb1dKVzY5U2ZONlNHRlZ5Ti9zbVZXcWFzTkxjUld1YithVUdtelBxYWR3MFBndFBlY1Y2Sm9xR2dGVHB0CjJ3WW9ObkVMNitKei9zYUt3TXl2cEh0WjdmaWJnRnZQdEZOQkVqQkJBb0dCQUwvd1A0RFQ2SkQ0RlFEa3kzRysKR1lmeGNrT2prUjB2eWZablZUVVN3VUVURjJ1NE4yMVhMT2dzWWdhUlhVb05sRERsN0R5Q1gyZzgzamJrUVl6TwpCdjU1NWxvV2IzSm1zSGZKL242Uzh3M2pQazdrT3IzU2F2UTF3M200UWR6c1IvNXQ0TmlXZTl6SklkTE5zNWJLCjdiOHZWM1ZOZ2hnVHBjc25PNFJWUFozeEFvR0FhK21Gb09XaG5uNHBXUjhpQTFsai9wc1F5VnlhdzVHOW9kVWYKUnRDZHpKUGJKYkhFU2xtTHRDQWl1ZzJ1RnZJcFFQRXBGai9OL0huUHdDbnVnT0ptWWZiUDAreU5ZS0tWK2VpeAorR1RnazBocStTWG1kVi9IQWtNU3ZGWE9kTEJKcVFkUVRTdDgxN1J6d1Q1RllzUm53TmY0MHZEckp1eUV4TG8yClNKSDFlUUVDZ1lBSzlnRjFmWWNyN3kxQUFucXZzZWVZb3hnMWpNbFpvV2ZWaldMSzE2NUFNSTNIb2liUEtPUngKeFdDV3lBSnovNE92K0h5SjU3Yy8wWU5ZZDdWTUZPYml6Mko4b2RQd3NXT1NNK3lEMXFNOVZRU2dBVzd5SHFHZQpRdkl4Y2NQaTZDYzZueU9UVGdSTnpTV0E3N2hMTU9PNjFsUy9CUGRyZGtyMjRhaEwzNm4rSUE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUxkZFRtM1MzTnpaMEFlTTh4K2ZDZkV3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV3T0ZvWERUSTJNVEV5TVRJeApOVFV3T0Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFrN25jZTk3ZTdMRXM5Z05PRSs4Q0V5MjJGVGxTdUhMb2RtM216Z3dITlNJSm1LdFQKb2tyMTRVNUZRanpvc2I5dWRIaDFTcUZyMXo3SGtkYjFBbTU4eFNPZmFhanQxVVdaQm1HcHRwTHRVNFM2Qm5NSQp4K21rcHBWd0hUOE5yeEdTQ3NuNmhkVzl2MjF2MnhqSGdwZXhHd0xqM0NaRGxsSTFWeWRVNlJCa2FJZFZkK1NmCkNNd0s4MjdhRzhpNFN6TWRzU0RMUFQzbWFqdXNETWJBcVhiM0Y4REVtaU5QcTVhYjFrL3RDVXFORSt1bHpCZk4KRms2MU1zQndwekhkVFl6VjVBaFBUNkxwY3d3N1BQMVdBNVBPQkhxTXBOUTIrSXNnREVvSXRBNTRaWHcwSDEvQgplUzhzc2tpZE5LM1pOajFwbVhBcWZ6b0xxaDlVTkNOb0hDV1lyUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGR1RHejhsQ0xpcTdSUFpLN29QQ2hyb0Z3dmZMTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQnBFQU9CWUwzY2l1ajZlRVE3bDZ5RDk3by8wZ3lhMC9RWDB0ZFE0SVd2SlU2MFk3cTBHbGc4ClZFcGJhTkhCUVhiTGJRbENUOUJaQ05nRWI1Sm1mK0lJN2VzUWhEcDI1cHFxTy8xNHdkSGxhT0pING1NOTlEcXgKYXlBMTZCM2h1Z05seTgxRC85YXZHM1ZmQ3puRWFBb1Z1U3J2SCs1UUhXMllOMGpKdk9RU3dLOE9ucjVleU1wZQpVNzJJS1ZFVEhZT05wYU9GV3VoU0ZicFQrTkVSVmdjenVydW95QTBNMi9MOVJYaU4ydHdPQWR2S211cEdTT05xCjJTZHlNMVhmUW9ieklkdEFadWdLYzdxNUN2M2ZnbG00L0xwMEJ2REdXZ3QyVmdFaFliSUpSQXlYL2dnRTh5MDIKQTdPUUZkMElDU3pEdnlMWmI5N2x1YWlNN1BpZ28vc2oKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLRENDQWhDZ0F3SUJBZ0lSQU01RHpjZ293cEFFQjRwN01LSXhkSlF3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV3T1ZvWERUSTJNVEV5TVRJeApOVFV3T1Zvd0V6RVJNQThHQTFVRUF4TUlZV1J0YVc0dFl6WXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRREhsUlJwZ3BwaHBuWGRjazJQTWYxR0tyTnRRaWM1ZjhxYk5mQ3JlNDhDMnNhTTFQTVQKTmtHcGRqNEpuc3hYM2hNbFNVb241bDBBUnpxZnduREdXTUEzVnVvd0haTVFZNVRVNmVLUWxkWjU4VFpiM1BZbQp3LzlPVG9vQllpNFl6alB3ZkZ0VDdTYjViZU10S2svdDAvRVV3Tmk2dmZNUXZhTmNvTmh3YVdwTFhLYjZTZUE1ClFldEJtVHU3UUdpM0dOM2FmTlo1SVBYMm16OXNmb205Tm8xZnJlQ0tvb2tJTkRzWDNPL1FOeWJnTjl4UlA2TG4KTVMyUlV6VnNnSm0ycUp2T1F4SWpNSFRWek5jbGNtTHJQU0hRa1hEemduSWxURlN5dDhrNmNFVWJQS1FnU0lzKworMnhRbUloWFI2VlFDdEpUbllKTnZBbVMrWEtEZ2psSDE4dWpBZ01CQUFHamRqQjBNQTRHQTFVZER3RUIvd1FFCkF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXcKQURBZkJnTlZIU01FR0RBV2dCUmt4cy9KUWk0cXUwVDJTdTZEd29hNkJjTDN5ekFVQmdOVkhSRUVEVEFMZ2dscwpiMk5oYkdodmMzUXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQkJ4eEJKZDIwQzQvVWN1dVJ6alJHTFl2NFNRCkRDVDNrZnNlc005UXNRTytvVnUrVEx2TklPaUhGMDlMcTBKRjRnNHhSMUg3cHFwVVRZTnZPQ0hwT3dYNmdZcncKdnRZRHdUTGZFc3lzWk1OM3FsMXl5K1QyL0Z5a3BZZWpOMzRFcHFNZVhmT0lqUTNnalRlOEwrQTVOYVV6SzdMagpwRHNrWUZRWk91V2QyZ0FSUyswTTdnOGoyeS8zcWNVRVNEQzJDOTFQN0xwK3dVSkZjK3pUQmVFSDNKdUZqR1FyCnJCNDJxeEZUZEFkckhENDBpUEI5OWY1ekc0RS9mU0hkbEdQSjY3YlowWkxXQURoU2pVcDNKM2hDOFo2VTQzd0YKNUNZdXRZenhxMExYQU5mSHlyWXdrTDN2U1kxeGpJeXVBa0FmSjN6MVZYaFJZNWRSNjlBVGhZWjlsQVE9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeDVVVWFZS2FZYVoxM1hKTmp6SDlSaXF6YlVJbk9YL0ttelh3cTN1UEF0ckdqTlR6CkV6WkJxWFkrQ1o3TVY5NFRKVWxLSitaZEFFYzZuOEp3eGxqQU4xYnFNQjJURUdPVTFPbmlrSlhXZWZFMlc5ejIKSnNQL1RrNktBV0l1R000ejhIeGJVKzBtK1czakxTcFA3ZFB4Rk1EWXVyM3pFTDJqWEtEWWNHbHFTMXltK2tuZwpPVUhyUVprN3UwQm90eGpkMm56V2VTRDE5cHMvYkg2SnZUYU5YNjNnaXFLSkNEUTdGOXp2MERjbTREZmNVVCtpCjV6RXRrVk0xYklDWnRxaWJ6a01TSXpCMDFjelhKWEppNnowaDBKRnc4NEp5SlV4VXNyZkpPbkJGR3p5a0lFaUwKUHZ0c1VKaUlWMGVsVUFyU1U1MkNUYndKa3ZseWc0STVSOWZMb3dJREFRQUJBb0lCQUNtM0RUY29aeUExN0xqRwpaVk9pdlM5blNXMXl3RVFTWThTaE41YUFFdG9qNUJBWGlsN2Zua1hQUXhRN3JyWkc0bldPcGdORThQZFg2L2JzCmF5bnA3dk1pSlh5OUVib0JObUJ5S2pyU05xdnlNTXh1bUx4dGh2VlZFUjlNNkJtakw5UDZDaFMyb3NqTG9Rb1YKcC9NcnMxNEZHTWVmWUNpRm1wbUh2UFZ4OHhlZy9TN0FQZkpnK3dVQnFhM1ArVkJ3UlpOLzhoUnUyRlFLb0U4ZApCRjE4eW5Tc0luZlA3Yk5HUW0rNlpuTFp2UWhyQTZlV29IdzMza3pSQnMyU01qdkpqSWloWlV3TlNsMmRzbWh1CnNBK2s3RHVvWXhnZVQzaFBKdExVNTZJNHpMcVZqc3BUWVQzZU9HekFXcXJJd3RRZE5PbGJzMmdHOXFjWmRtZ0MKWUFQeUJNRUNnWUVBOVZoRXIxS0NEaXk2MzRFNnZUKytPdFlFcE9IaU9IZmwwTHlnM0FjT29QWEQ0YnZnbHFZTQorY1I5N3ZtM1ZLVEJ0eGpNdml5VlV0RjBJdFNKcHpjL3lzMFN3TGtpME4wczVDSmlCM2k2T25rb3hqS3k2emc2Ckt1K1NMWUp4SS9FWmVybFVJTE53cUhuUlAxVExnSFdNQ1FPaGlLbmtOcS96TjZKdnRlTERWWk1DZ1lFQTBFQUcKMHBYMWVYaGE5dnJ2WHlJYWErMU40OWFMcjh4VERET1kvUEZneHF3WlZPTzRGcFIyNlptelNXYnNYa2llR2M4Ywo5Zkc3L1ZrMUZmdmJTcGpudFRFNGJpc0dBZldQQkVjdTJTUnl3a0I4RnVDaFZmeXU1M1JjR0tiQjR4ZDdBdFNlCktCQnVEYTNmWjVuTTlqb2s2VUtFVUpYdWY5VVVqZzN5eDNRa2U3RUNnWUJPdDRKYUNndm1SbDJ5eGtDMVpaVkEKUlZoNkdtczltT0pvWll6cTYyeTdJZjgyRnRTSklUKzZoMXVzWi94MU1PTmlQcGU2VUkyY1k4MXlPMlRxL0tRQQpDbW9BNGFXVkE5R2FaSm0xTWZ2Mk5OZHJOK3NGNHlWdWp5MEVZdnl2L25RaFZ3THg5d0NuWFdaUWZvRklkdTUyCkdlOGk3UGRtd0c4MW8yMWFHeVoyOXdLQmdEcVBWcHZQR1hrdjgveHhzZkJCaWNhQnM1NTNEVTdCR1RWY0tSQXYKM0RQaDN6bTAwMlplRjFZM0oyaGpyZUlSYjR2NFpyOXVXNXV4Z3pFTVlxMEdkRm5LWG9EMFRqc3N6eXUzekorNQpGU0EwdS9BKytIOVNqK2g4R3cyL2p0UUtIVWc5ZTcvdVp0UW42YU9iWnp4eU8wRHd1SDVrdXUxdGdOczFadWpaCmF3enhBb0dCQUl1VjYxR1Z0N1dlM0hYa002aHM5TmxrZ2lyUy8rTlhHdFZWNTlVSmo2bERZcGpKaVo0czQ5NXYKRURvMmdLV0RYZWlwUmFycmVabEJXZzFUMVhTVDFVR2JMZ3JjR0RDZDd4a3Z0djRVYktkU1JBZ1J2TGhkRzdqeApYcGJ3MVc3bExrTU1IeHd1bjNPQ001YnFCVFhLaW5sN2pVYVFOWTUxS1RianVwS3lnRkJQCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-ca-cert
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUxkZFRtM1MzTnpaMEFlTTh4K2ZDZkV3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV3T0ZvWERUSTJNVEV5TVRJeApOVFV3T0Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFrN25jZTk3ZTdMRXM5Z05PRSs4Q0V5MjJGVGxTdUhMb2RtM216Z3dITlNJSm1LdFQKb2tyMTRVNUZRanpvc2I5dWRIaDFTcUZyMXo3SGtkYjFBbTU4eFNPZmFhanQxVVdaQm1HcHRwTHRVNFM2Qm5NSQp4K21rcHBWd0hUOE5yeEdTQ3NuNmhkVzl2MjF2MnhqSGdwZXhHd0xqM0NaRGxsSTFWeWRVNlJCa2FJZFZkK1NmCkNNd0s4MjdhRzhpNFN6TWRzU0RMUFQzbWFqdXNETWJBcVhiM0Y4REVtaU5QcTVhYjFrL3RDVXFORSt1bHpCZk4KRms2MU1zQndwekhkVFl6VjVBaFBUNkxwY3d3N1BQMVdBNVBPQkhxTXBOUTIrSXNnREVvSXRBNTRaWHcwSDEvQgplUzhzc2tpZE5LM1pOajFwbVhBcWZ6b0xxaDlVTkNOb0hDV1lyUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGR1RHejhsQ0xpcTdSUFpLN29QQ2hyb0Z3dmZMTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQnBFQU9CWUwzY2l1ajZlRVE3bDZ5RDk3by8wZ3lhMC9RWDB0ZFE0SVd2SlU2MFk3cTBHbGc4ClZFcGJhTkhCUVhiTGJRbENUOUJaQ05nRWI1Sm1mK0lJN2VzUWhEcDI1cHFxTy8xNHdkSGxhT0pING1NOTlEcXgKYXlBMTZCM2h1Z05seTgxRC85YXZHM1ZmQ3puRWFBb1Z1U3J2SCs1UUhXMllOMGpKdk9RU3dLOE9ucjVleU1wZQpVNzJJS1ZFVEhZT05wYU9GV3VoU0ZicFQrTkVSVmdjenVydW95QTBNMi9MOVJYaU4ydHdPQWR2S211cEdTT05xCjJTZHlNMVhmUW9ieklkdEFadWdLYzdxNUN2M2ZnbG00L0xwMEJ2REdXZ3QyVmdFaFliSUpSQXlYL2dnRTh5MDIKQTdPUUZkMElDU3pEdnlMWmI5N2x1YWlNN1BpZ28vc2oKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBazduY2U5N2U3TEVzOWdOT0UrOENFeTIyRlRsU3VITG9kbTNtemd3SE5TSUptS3RUCm9rcjE0VTVGUWp6b3NiOXVkSGgxU3FGcjF6N0hrZGIxQW01OHhTT2ZhYWp0MVVXWkJtR3B0cEx0VTRTNkJuTUkKeCtta3BwVndIVDhOcnhHU0NzbjZoZFc5djIxdjJ4akhncGV4R3dMajNDWkRsbEkxVnlkVTZSQmthSWRWZCtTZgpDTXdLODI3YUc4aTRTek1kc1NETFBUM21hanVzRE1iQXFYYjNGOERFbWlOUHE1YWIxay90Q1VxTkUrdWx6QmZOCkZrNjFNc0J3cHpIZFRZelY1QWhQVDZMcGN3dzdQUDFXQTVQT0JIcU1wTlEyK0lzZ0RFb0l0QTU0Wlh3MEgxL0IKZVM4c3NraWROSzNaTmoxcG1YQXFmem9McWg5VU5DTm9IQ1dZclFJREFRQUJBb0lCQVFDUU5JUDE2NWNEeU9UUgo5bUgyZFg4NkI0cFNaNVhIZG14VWgyNGlQMzJkc1c5YXVBdzVSaUdGNGVrY0F1ZEg5RTQzcGdzaFlqZ3FjeDlQCnoxMTNGVEg1STVBUERaZTFkRzR2MjVCWEtGQkNFak9oN2hOcFN6dXVYZnlHb0RHVWIzdDN5cmtpZ29icTRrS3AKeHlPaTZMODdWZlBteVBkN094N1V5QkZNUGZNMlVVSkF1cC91a2Z3YVk1c08wYUVaQlVPZlo0YzFUVU5vUFExYgpBeWl3WUpabHlndk5kazJla3NuQ0tZaWhmTndhWkRpT2FFVFJmU0xaWm5OYzZMMGZOTXVuRHdSSzlzMWx1QlBRCkM4NnVFQkc1OFMreXFadVZYeG5ZUHIwQTVrRlBaWUZBZ0FLNGtoZU5Qbm55eUtOYXZBR2IzVENxanRtWkNodmQKUVcxUjF0MEJBb0dCQU1PYlRHT0F0dEhYT21VV3RVUUw5SjkzN1h4RjlGQzBCclprTkVjdFpBL1FNelJ2S0Zzagp5ZXZ4RXBnbE5sd3RCamhRUGd3UWV2aDhPbHV5VTl0UGxZM2xqZmtEUlRqakE5VGJnMEl5L2p4ZjZFQTJqMW12ClhmMThxYTFuaURhVDhwcHl2YXhOMmVSNDhzaUplZGo3V2o4RFdydmlPSXpaWUpvd3FCSEdBODF0QW9HQkFNRlcKRnpJTURnYU1ocVMzZmE0UEhLTWpvYU1aZVpPa0UvVFNhQTBacFhNWHRXRmVHWThQTDlNUnhJNm9UQ3l0NVlvNApjdS9hb1dKVzY5U2ZONlNHRlZ5Ti9zbVZXcWFzTkxjUld1YithVUdtelBxYWR3MFBndFBlY1Y2Sm9xR2dGVHB0CjJ3WW9ObkVMNitKei9zYUt3TXl2cEh0WjdmaWJnRnZQdEZOQkVqQkJBb0dCQUwvd1A0RFQ2SkQ0RlFEa3kzRysKR1lmeGNrT2prUjB2eWZablZUVVN3VUVURjJ1NE4yMVhMT2dzWWdhUlhVb05sRERsN0R5Q1gyZzgzamJrUVl6TwpCdjU1NWxvV2IzSm1zSGZKL242Uzh3M2pQazdrT3IzU2F2UTF3M200UWR6c1IvNXQ0TmlXZTl6SklkTE5zNWJLCjdiOHZWM1ZOZ2hnVHBjc25PNFJWUFozeEFvR0FhK21Gb09XaG5uNHBXUjhpQTFsai9wc1F5VnlhdzVHOW9kVWYKUnRDZHpKUGJKYkhFU2xtTHRDQWl1ZzJ1RnZJcFFQRXBGai9OL0huUHdDbnVnT0ptWWZiUDAreU5ZS0tWK2VpeAorR1RnazBocStTWG1kVi9IQWtNU3ZGWE9kTEJKcVFkUVRTdDgxN1J6d1Q1RllzUm53TmY0MHZEckp1eUV4TG8yClNKSDFlUUVDZ1lBSzlnRjFmWWNyN3kxQUFucXZzZWVZb3hnMWpNbFpvV2ZWaldMSzE2NUFNSTNIb2liUEtPUngKeFdDV3lBSnovNE92K0h5SjU3Yy8wWU5ZZDdWTUZPYml6Mko4b2RQd3NXT1NNK3lEMXFNOVZRU2dBVzd5SHFHZQpRdkl4Y2NQaTZDYzZueU9UVGdSTnpTV0E3N2hMTU9PNjFsUy9CUGRyZGtyMjRhaEwzNm4rSUE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUxkZFRtM1MzTnpaMEFlTTh4K2ZDZkV3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV3T0ZvWERUSTJNVEV5TVRJeApOVFV3T0Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFrN25jZTk3ZTdMRXM5Z05PRSs4Q0V5MjJGVGxTdUhMb2RtM216Z3dITlNJSm1LdFQKb2tyMTRVNUZRanpvc2I5dWRIaDFTcUZyMXo3SGtkYjFBbTU4eFNPZmFhanQxVVdaQm1HcHRwTHRVNFM2Qm5NSQp4K21rcHBWd0hUOE5yeEdTQ3NuNmhkVzl2MjF2MnhqSGdwZXhHd0xqM0NaRGxsSTFWeWRVNlJCa2FJZFZkK1NmCkNNd0s4MjdhRzhpNFN6TWRzU0RMUFQzbWFqdXNETWJBcVhiM0Y4REVtaU5QcTVhYjFrL3RDVXFORSt1bHpCZk4KRms2MU1zQndwekhkVFl6VjVBaFBUNkxwY3d3N1BQMVdBNVBPQkhxTXBOUTIrSXNnREVvSXRBNTRaWHcwSDEvQgplUzhzc2tpZE5LM1pOajFwbVhBcWZ6b0xxaDlVTkNOb0hDV1lyUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGR1RHejhsQ0xpcTdSUFpLN29QQ2hyb0Z3dmZMTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQnBFQU9CWUwzY2l1ajZlRVE3bDZ5RDk3by8wZ3lhMC9RWDB0ZFE0SVd2SlU2MFk3cTBHbGc4ClZFcGJhTkhCUVhiTGJRbENUOUJaQ05nRWI1Sm1mK0lJN2VzUWhEcDI1cHFxTy8xNHdkSGxhT0pING1NOTlEcXgKYXlBMTZCM2h1Z05seTgxRC85YXZHM1ZmQ3puRWFBb1Z1U3J2SCs1UUhXMllOMGpKdk9RU3dLOE9ucjVleU1wZQpVNzJJS1ZFVEhZT05wYU9GV3VoU0ZicFQrTkVSVmdjenVydW95QTBNMi9MOVJYaU4ydHdPQWR2S211cEdTT05xCjJTZHlNMVhmUW9ieklkdEFadWdLYzdxNUN2M2ZnbG00L0xwMEJ2REdXZ3QyVmdFaFliSUpSQXlYL2dnRTh5MDIKQTdPUUZkMElDU3pEdnlMWmI5N2x1YWlNN1BpZ28vc2oKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lSQUszeFl1RFZRVTBLVW9FbVJnUXNEa013RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV3T1ZvWERUSTJNVEV5TVRJeApOVFV3T1Zvd0VURVBNQTBHQTFVRUF4TUdjbVZ0YjNSbE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBCk1JSUJDZ0tDQVFFQTBUWEdvV2c0YkpGN01ycmZTeU9pVkVCY2ZXNklzbE9LWm04aXBEb3ByZ2R6akdBZmcxUFAKZ0ViLzZ6akVOV3lSTytjM1lxNkE3dnZ0VjZWc1FnaElGa01hL2h6RTlUUVZqV2gvWXc4VnZjS0JBanc2dlprZwo4NFU4NEhyQUtGeW9jbGZPaGdhK3hia2FUTVlDVkk0L1pGVnliOU04S2IwR1VVUlgrd2lKQzBjRWdSS3RNT1JuCkpEcUYwSVVLMmhhV0RPaG1VRG56VjRXQjY4MTNKbUJ4ZmNPeFEyN0hhOVFUUW55bGxWaDJYektWMzlQanhJSHUKNmdhZWFMSStSWjVCUmZ1c2Z4SkQ2T3cwM1FsUWdUR3ZWT0EwNjl4SitVdDlOWGkwV1AwQ05IREE4SFRpQW95OQpGNitLM0dvb3JhMGtTWVRUdjFJZlpJTTlqNXpOdEhNSCt3SURBUUFCbzJBd1hqQU9CZ05WSFE4QkFmOEVCQU1DCkJhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXcKSHdZRFZSMGpCQmd3Rm9BVVpNYlB5VUl1S3J0RTlrcnVnOEtHdWdYQzk4c3dEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUJySHZYUmdlV0N6cU5CL1V2Z2xzd2V4WmZzSWh4M3E0aUFvcXhVVmUxTlBKTTdOV00xbXJES25ON2haCnZjTmEwNkk3dUduUmdZd3ZhdnZpbzk1ZzR5T0F4NHhpd0RFdjE1R2taU2dVVE55UGlEUXkyVER6NC9id2VTdVYKaktWSk1FQ0Y0aVVLZDBXVGZRYmNxbVVxdndQMDRBUU40NFM5dVRnNFpBZDc3a2thRUR4R293VnJsTHdHRnZ4ago3YlB6WmFvcWFkNjltZ2NuUWE0QzREN2trVFRSbFh5a1Ryc3RRTU9ud2tocTBmeXp6T01ObkVLQ3dJWlV5emZyCjRHc2huNDU0c1pOaWdvN044UFNieVFEcVJYQ3o0SXE0b3MrMmF6TnF3VmtMaXVpV0dOUUF6OWxnWWVSVFdXQ2EKc01xS2FNQzMwVWFPWWY1dTdHSTRWZ1I0Z2lZPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBMFRYR29XZzRiSkY3TXJyZlN5T2lWRUJjZlc2SXNsT0tabThpcERvcHJnZHpqR0FmCmcxUFBnRWIvNnpqRU5XeVJPK2MzWXE2QTd2dnRWNlZzUWdoSUZrTWEvaHpFOVRRVmpXaC9ZdzhWdmNLQkFqdzYKdlprZzg0VTg0SHJBS0Z5b2NsZk9oZ2EreGJrYVRNWUNWSTQvWkZWeWI5TThLYjBHVVVSWCt3aUpDMGNFZ1JLdApNT1JuSkRxRjBJVUsyaGFXRE9obVVEbnpWNFdCNjgxM0ptQnhmY094UTI3SGE5UVRRbnlsbFZoMlh6S1YzOVBqCnhJSHU2Z2FlYUxJK1JaNUJSZnVzZnhKRDZPdzAzUWxRZ1RHdlZPQTA2OXhKK1V0OU5YaTBXUDBDTkhEQThIVGkKQW95OUY2K0szR29vcmEwa1NZVFR2MUlmWklNOWo1ek50SE1IK3dJREFRQUJBb0lCQUF3OU15T2FMMExhdC9SZAp6bFpjL1ZBa2U4U3l4TGg1L3F6RGI2bGY1YlJTcDBYZEVicmpHazZNMk1md0NEcC80WGM1clpuT1Q2aXJnRlVTClRtVUdpd0VTWisvWnl3UDFTaFY5dVlZWUNkT1NIMjM4REF1dmU2Z0RjVzVJZ0JsY1lsWmVJS3ppbENLSkU2ck8KSXJERHFaMjdDZmpVeUw1QVdyQkNhVXM4VXBnZ01tVThPbVN2Zm8xMWExcFVsTE5Vdk1OYTlRb0ZBNUpOWDUxZgpQN0toQ2RiNUFGeXc5eTNrQmdsaEtGb1YrUjlxdmlUdnlRK0MxYW5xbUhlMm5ZS3RUL2h0TXRiMmdEQ3pHUndZCkN5SHpvUi9rdHZQWHozYkZDdWJaOVBmb2FjNno4dTAzQkd1VWNBNDdMS3dodXV4dm1CQ2NvV2I3Wkh2NVVtMTQKSzg5eEZFRUNnWUVBNkxlVEJneFVWZTg0L2tMc3VhOGt0U2dPWWtFY2FHYUZ6aE5FL0lwelVMRFhXQWxlaER2Ywovc1dJK1hCQ2FnRFZ1cnp3Z25HaDNyY1RNYmNUWHdpOTA0UmdhaGpoWkdTZzUza25USGRNb1pHemptY0JWT0ZFCkxxM3pud05MZWp2T0k2T2hsTGJtU2pXNTVFSHpLSC9ZRjZiUjdHRjZmVmlqSkozVXFYWm9IMHNDZ1lFQTVpUWgKekRUY3hXelVFaSs0S2kzcm1JSU1taGhUaFdEWUM4emJlSHNHbW5UYzV1OTFYTVV2VGxvRWhFUXVBVk5KcDc1NApKV2tNMnQyWnFLSXc0cCtrandhUjA2NmRYYUpCVEtTUzRJUk5SemVpUHBZSUFlQUtabkRDcUlITnVqMzFzOHA5Ci9qTGpQQlgxZFBqYUp1VW1uQzN2ekVpT1dxVExQUEt0TnRTZVhCRUNnWUFxeXM3VE51TXZKaDBSekJhaGtrNHEKcmFIdmVVK1M5djgxeEo5VDNOV1ZpZDhmUmlIR0tRZmJKVkdwcEhYaDdpTmZBaTBybjErSGg1eVU4TGcwS25SVgpkNnNPOTJKQ3hxbzd4akJ1eENVb05KV1M0dWdBeHFkMStmQ3BWYjdFVEVqOGpyTkFtRjFDV2h6RGwwanlNb2YyCjJXc1NqMTRwdkduTGF1Wlcvdm5vZndLQmdCZmp1a3ByVmx0OEQ0dVB2b3RLVndGdXhvWWNibGNURlhvc0dzQW4KN1NpTlp2emw4SVhmeGloWStjME5Fc1Y2Y3RQaDFyRHpkYTBtZ2JQYW1qNThHZVhxNWFwV251bEFWWXp5TEhqMwo0dG00c2JQVGVTTlFzV091NHRZQkcyend6NWVKTm9qem1WajhZbzF3NDV4VC95MEpLN0pGK2RqNDhFdjBXUHl2CkYzMHhBb0dCQU55ZW1xNGpaMWRObUNGak9mNkptN084Ty8rOXIzOUR0R3VURUQySXBtZG5FSzBHVFZLZEJVMTcKZVlRSGFOT1F1OEF4Mmx2NXhTSkNBQWthOGlMQkwwQXVjb2RJTHhpcTA3b0VlNlF3ZUNIbEp1ODhaN2t0b1hyZgpJVFVHUXNKc1pGVU8rbjU2N3NIaUtHeDBTTDVEc1lMcEpGY3MvRWxiNG5xMTVoMjA5SVVYCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUxkZFRtM1MzTnpaMEFlTTh4K2ZDZkV3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV3T0ZvWERUSTJNVEV5TVRJeApOVFV3T0Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFrN25jZTk3ZTdMRXM5Z05PRSs4Q0V5MjJGVGxTdUhMb2RtM216Z3dITlNJSm1LdFQKb2tyMTRVNUZRanpvc2I5dWRIaDFTcUZyMXo3SGtkYjFBbTU4eFNPZmFhanQxVVdaQm1HcHRwTHRVNFM2Qm5NSQp4K21rcHBWd0hUOE5yeEdTQ3NuNmhkVzl2MjF2MnhqSGdwZXhHd0xqM0NaRGxsSTFWeWRVNlJCa2FJZFZkK1NmCkNNd0s4MjdhRzhpNFN6TWRzU0RMUFQzbWFqdXNETWJBcVhiM0Y4REVtaU5QcTVhYjFrL3RDVXFORSt1bHpCZk4KRms2MU1zQndwekhkVFl6VjVBaFBUNkxwY3d3N1BQMVdBNVBPQkhxTXBOUTIrSXNnREVvSXRBNTRaWHcwSDEvQgplUzhzc2tpZE5LM1pOajFwbVhBcWZ6b0xxaDlVTkNOb0hDV1lyUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGR1RHejhsQ0xpcTdSUFpLN29QQ2hyb0Z3dmZMTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQnBFQU9CWUwzY2l1ajZlRVE3bDZ5RDk3by8wZ3lhMC9RWDB0ZFE0SVd2SlU2MFk3cTBHbGc4ClZFcGJhTkhCUVhiTGJRbENUOUJaQ05nRWI1Sm1mK0lJN2VzUWhEcDI1cHFxTy8xNHdkSGxhT0pING1NOTlEcXgKYXlBMTZCM2h1Z05seTgxRC85YXZHM1ZmQ3puRWFBb1Z1U3J2SCs1UUhXMllOMGpKdk9RU3dLOE9ucjVleU1wZQpVNzJJS1ZFVEhZT05wYU9GV3VoU0ZicFQrTkVSVmdjenVydW95QTBNMi9MOVJYaU4ydHdPQWR2S211cEdTT05xCjJTZHlNMVhmUW9ieklkdEFadWdLYzdxNUN2M2ZnbG00L0xwMEJ2REdXZ3QyVmdFaFliSUpSQXlYL2dnRTh5MDIKQTdPUUZkMElDU3pEdnlMWmI5N2x1YWlNN1BpZ28vc2oKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURwekNDQW8rZ0F3SUJBZ0lRRllzRHhjclpRdmJKRUFGejJoQ0ZXREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEE1V2hjTk1qWXhNVEl4TWpFMQpOVEE1V2pBcU1TZ3dKZ1lEVlFRREV4OWpiSFZ6ZEdWeWJXVnphQzFoY0dselpYSjJaWEl1WTJsc2FYVnRMbWx2Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBcE10aWQ2SW1hRG12WG5PdTJCREcKNTluWVlMSjk0ZzY4dy94SktQMFByTHlPaFltdGZHRDRLZ1BLZXBNV1VQSzV4T2pSejdnR254dWMzbjNYb2lVcQpXcnhZWUdnbXRGZGFoSk9HSGJXTWpRVUhtaGpaQUFFOVl1cjFtUWhkYjFiaVRwTm5aaVFzK01kbmFwenZwZ2dKCnJ5Ym5WYWtVcm9KYW1xOEt2c21Za3NKNmtZMERqV0Zxb29zV1UvYStpSGFZUTZXUjlJUDJOUEVIV2NRUUo4VmQKcnIwck8vUGcxV042Tk1RQ3NCalZKY0ZZelQzTThJWENrc2wxcFh1b0c1RXFWQTNxUUFJQkVoWjNKMDFHc0FRUwpIQkp0Z0tRb0dmUTlYWk1hemVYVjB6OTRXVXBISWFBUnZwMVBUTlY4MDE0emZzaTlPRkVvTGZmTnFKMUhYcWZ6CnpRSURBUUFCbzRIZU1JSGJNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0QKQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JSa3hzL0pRaTRxdTBUMgpTdTZEd29hNkJjTDN5ekI3QmdOVkhSRUVkREJ5Z2g5amJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXVZMmxzCmFYVnRMbWx2Z2hBcUxtMWxjMmd1WTJsc2FYVnRMbWx2Z2lWamJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXUKYTNWaVpTMXplWE4wWlcwdWMzWmpod1IvQUFBQmh4QUFBQUFBQUFBQUFBQUFBQUFBQUFBQk1BMEdDU3FHU0liMwpEUUVCQ3dVQUE0SUJBUUJIM3NrNTlMR0t5NDZ4REJsaTllWGt2RisvWHJTeDdMQytMTzd1Y29YRnpHdXJJVXdhCm43NHZmUmVjbXR0RjZJSklHdkRuTTFnZkZtNWU5SFpuOENCVi9QRXB2eXpBOGY5LzhBS1N1NTIyT2JKdVlvc0QKbHRLZ1JMZGNub1RQeVRXQ2tWU0FTRTQ1amM5bnZwYld4MGxDQlBMWlNMU0VIM1JGNUdEWFFHZlQyWHJNU0pETApFTWpLeDU4YndycnUyUWdsY01oekpXanQ3Uzg1QzZrV2wydnVnM0NEbGpBT2pndGMrOVlGREZmOS9KUTlOVVBoCklqNUdNVW9FbXN2RVdFN0ZaQktFeHlzd1FxbXUwV2UvTS9laFlHTndmakhTb01hTm9QM1FKZTAxVkt5c2lwalcKL3pudlNRRnVkZTlqOHc1WFplamNrRXRwd2JDS2tFZjdaWHFWCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBcE10aWQ2SW1hRG12WG5PdTJCREc1OW5ZWUxKOTRnNjh3L3hKS1AwUHJMeU9oWW10CmZHRDRLZ1BLZXBNV1VQSzV4T2pSejdnR254dWMzbjNYb2lVcVdyeFlZR2dtdEZkYWhKT0dIYldNalFVSG1oaloKQUFFOVl1cjFtUWhkYjFiaVRwTm5aaVFzK01kbmFwenZwZ2dKcnliblZha1Vyb0phbXE4S3ZzbVlrc0o2a1kwRApqV0Zxb29zV1UvYStpSGFZUTZXUjlJUDJOUEVIV2NRUUo4VmRycjByTy9QZzFXTjZOTVFDc0JqVkpjRll6VDNNCjhJWENrc2wxcFh1b0c1RXFWQTNxUUFJQkVoWjNKMDFHc0FRU0hCSnRnS1FvR2ZROVhaTWF6ZVhWMHo5NFdVcEgKSWFBUnZwMVBUTlY4MDE0emZzaTlPRkVvTGZmTnFKMUhYcWZ6elFJREFRQUJBb0lCQUVIK1pPZHQyeDJnQkRlNQo4Z242NWZ6UlE1S3R5RFd3R3k0TktTc3Q5SW9EVkx2cmY3c3doaEVsUlgvQ3lZd1BPQS9BQU0zRGIzdG1MbkwzClNGUlp0OVZ3V1ovNTlZNEE4WEhvTml4Tm1RU2NRQWdZN1VYUU9Vb1V0OWZaL3Jqb3ZXWWtKNk5DMTNPbFB5ZjEKd3c3bFp5TnFXL2YwNXlCZmVYTTZwLzN4YzVWSmdnU1pEQ3JCbkU4c1JPcFRWaGxYOGM1N1lPVEo5VlRWbkxlTgpuV002OXhKYkU5bTJZM29aN09kRWtjVFpKWXFQT0l1SkxoSlJEdmM2VTc3bUFDU1RRVHdpREgxZlNjY2diUG12Cm55ZExQS0xUR29KMUNFQzZrRHRSVDJ0a2c3NE42am1Pd1N1aW9ZWEVJa3BTR3U2WEFQalJCQ25CYmp5Tmc2QlkKWlhyZ1M0RUNnWUVBeCtrbktOUUF5OGdqYWsxUUl5OVdaVnJzM2EwU0JtaXo4RzVMQVUraUV0R2xyMkM0Q1oyQQpNQnE0emt2NittQmZuOS81a2tWcXo2MWF3VkJKMXNCRExzSW5XOXR6Z1VBQWp5R1R1bWE3U3NQYVZHYnp4aTk4CjRZbU1BbGxOcVkvWUxUZmdTU2h5M2NiK3NVU0RRazJzbGM3Z1NFdEl1cnZFUk9ySFYzUGxxaTBDZ1lFQTB3ZjEKb2xpM0Q5dXRXSHdnMzBBaWp0UXY0TG8rZ0Y0T0tCRHZpSmFrKzFxTW50Wk9OMEQzRWkzRm9KYzlTZWRvSmo2MQpGRzFLbUhPK2NoSHVqVnF2ckZvYWhVNjRGSVVjNWkxL0s2SGcxQlZDUWpwL09WU3hFeTRJMkJjU1NPOXB2N0xtCkVaTllJVDY0dXBhbXRTVlFFKzRGN0t2UjdrQkFsV1RuOUhnM2xDRUNnWUFHV1FmdVN2VVBnM1prYkxvTHMvZ1oKVmM3SnB6STRVK0RLMUtXN0QrMUVqYldtSVBzWEN4SkQ5TVZEZjdRamVTWHdMS3QvRW9jMnV2bHp3L25rUU15aApVbmJ2ZXNOcktqNGFUV1drZUppZjRpSXZwZWs5dE1wUld3M0FFVmZlOTN0VXpENXA5RWZaZFBVbmFkYUZKM1JBCmVZWXpwWGhVdlp1WTJKK2x6ajlQclFLQmdCdHc2NFlDMXpzZXE3blgya1p0aHBEZ0VxRzhWaWhIRXJ3dkI1YlIKVC83SFZZWEtCRDIzR3Vtb1BneVYzZ2hnS1BEZ01wZkhabTNRanpFeUY3MFZ6OFl2cVVjd1owdHp5OEE2cGxDOApLZ29xQVlXdkthQUEzVTNMTEtjOHlNbm5KKzhmaWo4NjA3anUrUUo2V0k4eG5Pb2FoM2F4R1FsTUhablBsMEg0CjUvRkJBb0dBQVNSQ29lYnVwb0l0bUVPNnhYOWlLeHhIRnNydjNmbkZjK2FUcWI3eDhiUTQ5QlJUK2RRWnNGVzYKcEEyUHYvTWJpT2dSTUtHelptanpPM1NqYys3dlRFc1l6eHVxNmx3U3V2NHhtaFBjYlJGUXVLZUlYV0hQVjJ5MApFTWhpczZvQ01uN1F2ZDlXU25xeGs4UEtYM0diMnlhL1RxbStQbXc1RkJObG1hNHQ1ODA9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUxkZFRtM1MzTnpaMEFlTTh4K2ZDZkV3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV3T0ZvWERUSTJNVEV5TVRJeApOVFV3T0Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFrN25jZTk3ZTdMRXM5Z05PRSs4Q0V5MjJGVGxTdUhMb2RtM216Z3dITlNJSm1LdFQKb2tyMTRVNUZRanpvc2I5dWRIaDFTcUZyMXo3SGtkYjFBbTU4eFNPZmFhanQxVVdaQm1HcHRwTHRVNFM2Qm5NSQp4K21rcHBWd0hUOE5yeEdTQ3NuNmhkVzl2MjF2MnhqSGdwZXhHd0xqM0NaRGxsSTFWeWRVNlJCa2FJZFZkK1NmCkNNd0s4MjdhRzhpNFN6TWRzU0RMUFQzbWFqdXNETWJBcVhiM0Y4REVtaU5QcTVhYjFrL3RDVXFORSt1bHpCZk4KRms2MU1zQndwekhkVFl6VjVBaFBUNkxwY3d3N1BQMVdBNVBPQkhxTXBOUTIrSXNnREVvSXRBNTRaWHcwSDEvQgplUzhzc2tpZE5LM1pOajFwbVhBcWZ6b0xxaDlVTkNOb0hDV1lyUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGR1RHejhsQ0xpcTdSUFpLN29QQ2hyb0Z3dmZMTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQnBFQU9CWUwzY2l1ajZlRVE3bDZ5RDk3by8wZ3lhMC9RWDB0ZFE0SVd2SlU2MFk3cTBHbGc4ClZFcGJhTkhCUVhiTGJRbENUOUJaQ05nRWI1Sm1mK0lJN2VzUWhEcDI1cHFxTy8xNHdkSGxhT0pING1NOTlEcXgKYXlBMTZCM2h1Z05seTgxRC85YXZHM1ZmQ3puRWFBb1Z1U3J2SCs1UUhXMllOMGpKdk9RU3dLOE9ucjVleU1wZQpVNzJJS1ZFVEhZT05wYU9GV3VoU0ZicFQrTkVSVmdjenVydW95QTBNMi9MOVJYaU4ydHdPQWR2S211cEdTT05xCjJTZHlNMVhmUW9ieklkdEFadWdLYzdxNUN2M2ZnbG00L0xwMEJ2REdXZ3QyVmdFaFliSUpSQXlYL2dnRTh5MDIKQTdPUUZkMElDU3pEdnlMWmI5N2x1YWlNN1BpZ28vc2oKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTVENDQWpHZ0F3SUJBZ0lSQU1FZm41bjkzeVNCT3doaFdSb0VKRkV3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV3T0ZvWERUSTJNVEV5TVRJeApOVFV3T0Zvd0l6RWhNQjhHQTFVRUF3d1lLaTVvZFdKaWJHVXRjbVZzWVhrdVkybHNhWFZ0TG1sdk1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTN1TDU4UDB0N051OHRZZWRBeGlMK2tVbWsrUm4KTnRRS3RFbUxqeDBuN3A3V1NKVmM0T1d5YVVNNHJsZ1lUbzk5RDY4QjZKaERTZDBXby9iVm5seHJqU0x3MHkrTgp0MGJIRm5JM2hGM0NacThqYVQ4dHRWYjgyR1NvTTUreXJRVWk0ek5NdVhiZTRRK0RoWkhnUVhoMkxMb0Jwd1EzClN3Y3FLMEZQTTIxS2RxbjRITmhTeDQrUUc3ZzJ5dGFjVzB1SXBEM29kN2Rxa08vYkJSM2ErMVJPZFVFR1JobVEKQmlDVWl6S1ZmYVUrYTJFc3hKWTNpTW9VZk1ZRi81VmVhVWh2Q0MxSlhZUnIrY0tPK05tN3BCOTBMemRSQlE0Rgo0L3kyV2RKajB6NUJsV1NBcnByMjFTUzdKUlEzZ1BoNVJMVHduUGh1YmY2STR4NmdHcnM5bzMyQk93SURBUUFCCm80R0dNSUdETUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUIKQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCUmt4cy9KUWk0cXUwVDJTdTZEd29hNgpCY0wzeXpBakJnTlZIUkVFSERBYWdoZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d0RRWUpLb1pJCmh2Y05BUUVMQlFBRGdnRUJBRVR2SEZBWTdLaWUwc2JBSExZcERWcUdkS0FoQlJuZ0cvVkxPWlBYQ1ZyRnh6bTgKM0ljZkhvbzZqM2NBcFNLQ3pNWk10V1AzNjlHNldzajhUWjdmQ2crTnFYd1Z1MHlnbjFFOUNua1ArM0o3YlpPawpPb005T2ZKRURLL1V2VERKSE1GaGxqcGRTUm4vcDFLWld3SmQvZE5CbFZ1TFhsaFFJWDZSQ2hWazdHNlFEMXhXClFvalpnQi9RWC8vSWZtcDNkc0QyeU1mK2JJTzlnMnBCOW9LUmtSSTVBRmttaDFqZlIwV3A2ZXJTaDZyUzZFRmwKdjFJVGd1VFB0NXNTeWtoenFYbzA1MGtFak1GNjJiOHZBSE5Mc2N0SmQ0WHJxcXV4a0c0WDZHYUlpWE5UNEtYVgpzWUxqdWpqK1ZpQi9vRk95OWxreWRuUEdxL0E0cUFGTHFwcHBpcUE9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBM3VMNThQMHQ3TnU4dFllZEF4aUwra1VtaytSbk50UUt0RW1MangwbjdwN1dTSlZjCjRPV3lhVU00cmxnWVRvOTlENjhCNkpoRFNkMFdvL2JWbmx4cmpTTHcweStOdDBiSEZuSTNoRjNDWnE4amFUOHQKdFZiODJHU29NNSt5clFVaTR6Tk11WGJlNFErRGhaSGdRWGgyTExvQnB3UTNTd2NxSzBGUE0yMUtkcW40SE5oUwp4NCtRRzdnMnl0YWNXMHVJcEQzb2Q3ZHFrTy9iQlIzYSsxUk9kVUVHUmhtUUJpQ1VpektWZmFVK2EyRXN4SlkzCmlNb1VmTVlGLzVWZWFVaHZDQzFKWFlScitjS08rTm03cEI5MEx6ZFJCUTRGNC95MldkSmowejVCbFdTQXJwcjIKMVNTN0pSUTNnUGg1UkxUd25QaHViZjZJNHg2Z0dyczlvMzJCT3dJREFRQUJBb0lCQUVwUzZnSGdpMVgybUdENApUZlZnVkIwcXZnaUhHNXYrN1dyZE0zcVB3R2NqOUZUVDZkcmMvYmQ0UVFoeU8vakdoRytjYmtoL3JjQ054eVQ2CkJKWUFQNlVheDYvRXBiOCtETm1CVU40RTNmU2I1blVNS2xQVUpCQ00wRUlXdU9CVlhDTGpVbXh1SlRocmtmSVMKaVBPTUZld29RckROQ1JzdDBuUUdIVUVLNnMvU2txWmd2Q2x6QVpvT1IxTUI5OEJ5V0MvWlFaNEZjSmdzM01ucApzWEg3Uk8zOU1BRStOSFpmRVRudGkzK0lrUGoxUW95OFF5RklFdXRlVStTVmNxRTE2Zi9CUlp6M0pJV3dEbXpiCjNvTGtHS1ozY0dDaWFVR1NyazQvTTVIcGdFWEo5YzkvWm1INUpEblR0QjJwcUxNRUZTSGh3cndSQ0dtdWJ6R2sKZG5PejVZRUNnWUVBOFhaR1lNcW1oTjJyQUNOQXM0VER2VTFEVnlRTXBRSVJrc1Rla2pqUy9mWUNPNXplUmpUMgpiNFJTZ2M3cnk0ajFYQlJubnJGQ2UrV21NWE1iNWZGNHBZbmlVcmxGVmJicnBabFJEYkZ5blVveDloQnlLS1ZECnBSUndWT0RtOXlDTE9BaG8vYkJnaVNKZ0JiZ3h1eXZNdmQyV0U2bjFHdmRPVk1qaGNDMUo5TnNDZ1lFQTdFNWsKdnZXS1NiYUZWbENDNEg0aWU3cDhJY1VxRXNndUYwRGx4Y2JJdklLQUhBdXNxUysvOHdUMzlQcWJqR2RCb0hNWQpYWURzeDdZQzg3S1RsQzBGd0dJMkFLcUVMc2ZicW8wcktWWGM4V0trVkVjUkg2b0dXOGtJS3FBd2E5bVdXcVgrClhMNklBWWE0LzNmSnBMZDF2KzBuQnZFUmphaHltRFhQcmpUaEl5RUNnWUVBa3NGb0ZQd1dLVHJ3NjZ5QmJwcUsKdlV0d1drNDJ3VE40cXRPczB3Sm1lcVJDeHlpWWorTXd4S2FQM3dWOG1zQXJJRVBtbHJUMXk0ZlFjczJiYnk1TQpQWkNJVmU3MURSdVlMWlg1aFhFTVVEMEFFS1grUEdYMXJ5ZTAvbUdTL3pCd2JTWHZhZ0VCSzFnUk5HaTNFU09WCjFQQVFmdk1WWGNaaGZYWjZUa3U0WDNFQ2dZRUFqdVBVZmJnaUYvSzdhL2NoUExocEI2STdYM3hHdGJiQVVDVloKQzUvcFVEd2xWVkFsNXVSTjBKakhpeVpqR3FKeGg2RXhNWkU5SElKT0JLaU9Ic0tld0xkaWFrS3h6VXZpNDUyYgpaTkpiMk1iS0VZQXJ0WmJ0WTJFTGhDTDdSS3Y5QS9GdC93empWdkR0T3VWblZDZnZscy9Ea3FvQThFVFVqbit6CmhtYkpZS0VDZ1lCTkpSOHNHTG1SVVlGYkk4WlFicGE0eWVSNDZQY0kvSTlQYlpseElJUThmVXJsUHFXUnU5akkKV202emNDWmlDcDdFRjR0b0VEd0tWNU92QTMycEd1MmFMcFRHTGRpMGVaS1lnTUJoc3lybFNpandtelJrTmdrTwp2TEptN2kydDRhZlRPQUFkazZYbGRSNlJXSGJ3Y2JpUkI2MDRqR3hzNHF1dUxXdDV6QUp0bVE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUxkZFRtM1MzTnpaMEFlTTh4K2ZDZkV3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV3T0ZvWERUSTJNVEV5TVRJeApOVFV3T0Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFrN25jZTk3ZTdMRXM5Z05PRSs4Q0V5MjJGVGxTdUhMb2RtM216Z3dITlNJSm1LdFQKb2tyMTRVNUZRanpvc2I5dWRIaDFTcUZyMXo3SGtkYjFBbTU4eFNPZmFhanQxVVdaQm1HcHRwTHRVNFM2Qm5NSQp4K21rcHBWd0hUOE5yeEdTQ3NuNmhkVzl2MjF2MnhqSGdwZXhHd0xqM0NaRGxsSTFWeWRVNlJCa2FJZFZkK1NmCkNNd0s4MjdhRzhpNFN6TWRzU0RMUFQzbWFqdXNETWJBcVhiM0Y4REVtaU5QcTVhYjFrL3RDVXFORSt1bHpCZk4KRms2MU1zQndwekhkVFl6VjVBaFBUNkxwY3d3N1BQMVdBNVBPQkhxTXBOUTIrSXNnREVvSXRBNTRaWHcwSDEvQgplUzhzc2tpZE5LM1pOajFwbVhBcWZ6b0xxaDlVTkNOb0hDV1lyUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGR1RHejhsQ0xpcTdSUFpLN29QQ2hyb0Z3dmZMTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQnBFQU9CWUwzY2l1ajZlRVE3bDZ5RDk3by8wZ3lhMC9RWDB0ZFE0SVd2SlU2MFk3cTBHbGc4ClZFcGJhTkhCUVhiTGJRbENUOUJaQ05nRWI1Sm1mK0lJN2VzUWhEcDI1cHFxTy8xNHdkSGxhT0pING1NOTlEcXgKYXlBMTZCM2h1Z05seTgxRC85YXZHM1ZmQ3puRWFBb1Z1U3J2SCs1UUhXMllOMGpKdk9RU3dLOE9ucjVleU1wZQpVNzJJS1ZFVEhZT05wYU9GV3VoU0ZicFQrTkVSVmdjenVydW95QTBNMi9MOVJYaU4ydHdPQWR2S211cEdTT05xCjJTZHlNMVhmUW9ieklkdEFadWdLYzdxNUN2M2ZnbG00L0xwMEJ2REdXZ3QyVmdFaFliSUpSQXlYL2dnRTh5MDIKQTdPUUZkMElDU3pEdnlMWmI5N2x1YWlNN1BpZ28vc2oKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQU55cWZxem16YlZ1bmN1OHVrYlhLSjB3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV3T0ZvWERUSTJNVEV5TVRJeApOVFV3T0Zvd0pURWpNQ0VHQTFVRUF3d2FLaTVqTmk1b2RXSmliR1V0WjNKd1l5NWphV3hwZFcwdWFXOHdnZ0VpCk1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ3pZVi8rMkxmb0owV1lpN0JyVjdvL3drODUKb0pMOVk1SnJWRzhGMllHcDI2VlQxQW1MTGhPempvU0JhN1RKanEyNUZXZjVJZHNYQkdReGFXVnpDRzl6ckV0dQpZUTNFRmhCcmZQY2hNejl2dWwxQjR4aUFHVlBlOFgxZUFiRDNMQ0ZkZ0Z0T1QwTUExU00vTFJGNGZ6NkRvZ0p3Cm5Rb1MrTEkzRWcxbnNWUkZyL1JjbjRodGI4NU5hMGpwY1p4MXdIOC9xNWEvL0VhNmxyYmUwaDhsWjNQN2NVdzkKU3BaNDBVcGtmeXJBVENYWDBEdzBMN05VejhXd2d5Q2M4UUJXOC96a1UyUGIvRTliZkhUM3pnbVZ3QnphS1NyZwpVYjlpZGNSRktXdzY3dHpWbnZ0VlJVTnlZWTBLVXNhbHBMWE16U3dOZUhFdDRnbE5jUWlmVEdoaGZEdUpBZ01CCkFBR2pnWWd3Z1lVd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGR1RHejhsQ0xpcTdSUFpLN29QQwpocm9Gd3ZmTE1DVUdBMVVkRVFRZU1CeUNHaW91WXpZdWFIVmlZbXhsTFdkeWNHTXVZMmxzYVhWdExtbHZNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFBdFEyVndXZzJySFd4bEJTR2JiZC9rcWxscitBOTZWVG9jYktjcG9JYVIKTCs0VjBGWm5TRmhmOHNjYldSdFVzQ2FrQ0tIVTVMczZHa0Z6YWNWWVZQS1E1eEtJbHEzenNpcWI0NXEvYkJHRQo4SGVGQ2w2eWtVckd0OUpjbGtneXBrc09oc3RPSnNxRGh4WU50WmQvNFYxc2JtNGd1Znh4N3ZLQWxpeG5JcTdxCmoxVlZvV25ldmgzZUV3Nk5uWFpNZzJ0d3o1YmlkdUpESEhFNk9mUmVtZkZqWnNXUnhBSjlOaVQ5dGQ1cDllQ0UKYUN0UVRueGdMclRaVFMxak44cnBQRHBJc1JKWHdkMDZhV2ZtSU5uRlcvUHFhZVB5amlVQ24xbkZLVDhENXh0dQpXQUxUTTIyRE1ZTXJKaitKS0VSZ1dicnR1bC9MdmlXdzFKY2prYW9zSHNjcwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBczJGZi90aTM2Q2RGbUl1d2ExZTZQOEpQT2FDUy9XT1NhMVJ2QmRtQnFkdWxVOVFKCml5NFRzNDZFZ1d1MHlZNnR1UlZuK1NIYkZ3UmtNV2xsY3dodmM2eExibUVOeEJZUWEzejNJVE0vYjdwZFFlTVkKZ0JsVDN2RjlYZ0d3OXl3aFhZQmJUazlEQU5ValB5MFJlSDgrZzZJQ2NKMEtFdml5TnhJTlo3RlVSYS8wWEorSQpiVy9PVFd0STZYR2NkY0IvUDZ1V3YveEd1cGEyM3RJZkpXZHorM0ZNUFVxV2VORktaSDhxd0V3bDE5QThOQyt6ClZNL0ZzSU1nblBFQVZ2UDg1Rk5qMi94UFczeDA5ODRKbGNBYzJpa3E0RkcvWW5YRVJTbHNPdTdjMVo3N1ZVVkQKY21HTkNsTEdwYVMxek0wc0RYaHhMZUlKVFhFSW4weG9ZWHc3aVFJREFRQUJBb0lCQUNVUXkrczNFTmxSdEJuUApVNGI2dTZ1TkZSM05SbEpCanZIS29wNU0wWFF0eEwzTHBLVXp3akpxRW90RG5EbkIxN2ZVNm9VYUw5RlR3UGhNCjFQK3VFSW1RWW8zT1ZDL2VkMG9lcWxvYjR0SE5hcFBBdjBGSStvR28yTVRpQ0pVcWMwS0UwVmtmRzdOQ1YyUW8KaGVHbU9WNnR6VjlEczk4enNHK2N0VlJsMmdvRDlzVGl5WUNPcnV1RVBiREV1aDFlKy9WeHpwd05SRW5TbU9UcwpueVBIQ1BIUExHVHJxZ2o5ZGFySHUzZW92bmUwdDlvL3JtVGZiRUxvUmJGTTBldTd6NitTaGpSczZYUHJEd0hZCmdMWFY0bExodDJ0LzV3UnQzaDhwc2YvVDltWXNFVnRjb3hXb2IyT1FVd0RFMmRiRmsrekV4c014K1BLY2tYWjQKcDJpc05Sa0NnWUVBdzNWSXRKNmh1UTRKcXYwYXYrYTRlNE9XWVI4cDU1ejI3SzZEZzJGM2wvQjNBMjNtUm5tVgpPQm9wTWtPRkZDNjFwaFJsOXg2SzNPcGdIeDJDL0JRa2pESVFRSEVXV3M1YlBGcnM2MzVHR1pJWG0zSlB3eXhWCkd2SW1zNUgwWSt1NjVaZWxZQUJpaEtOMXBFK04vcXdMTEtsNkVqRklkeUE0MmMvVXpiQUJTM3NDZ1lFQTZ2RTMKTEt0elpBbExJc3pmK2I2djBndm1qWkt2RFZxRVFIWk1wQ2E2QzNCRGpaVG11Nm1sYmtYL3pRVDFpSElic1BNbApMbXVld2hiL3BNekduY0NRMXpUUGN2eHdhVno5ZVl6bFRjTDJ2VWlzT25PVUVSTktGc0tDd1kzVk1HVVB3eTJjCjVLWkxUMmZqMm5FcGlFcGxVUGx2eEZudlI1dU5vTklTNHA0TjA4c0NnWUFkdWNXUDZwd3YxNm15dm9HRjgrSFUKcndOOHk4K0VzUU9BcFYzTTZsTFU0YlpINkR2Z05mZHlxOC9lSEJTdUtCaHFKS29KTmpUcU9oN2FQSlBDSUpJYQpYRGJLaGloZk1Ra0JHZGIwVGFUOW1KRk1pOHNEcE1kZ3JMa2tFQ3Q1MHN6K3c5eGJ5Rk16VnVTNlUzc0Y0MFpqCnlYYU9NNzZRbDI3dCtVU2s3NEtTNXdLQmdCSTlaK3N2NUdWLzB6V0FjbU1SU3RVajEySm1ZUERJZGp3Szh5aEwKV1daSjhQU3MrcnpYRHVEZ3psczhaMU9RaUZYVWlxNXY3SU5sQmJQbHNnWE5UWEZueURORkpmVUlJeVdzcXFDKwo0aWtQMjA4dWFmQnBidmNWWXRGa0VZa1FUNGozb1phZTBubjN0dGplc0RyRWk5a2RoRy9hQzVtam1mdENVL1VFCkVFN0JBb0dBVWZsUk16SGlOdDdBZlA2d2NNUVNsWmVXSVJNc2hhNGZ6S2hUVXFnZ2pXVVhxcDlJQndSQkhWT0EKNXJ2T04xVzB4Ry9JeUVTd3hoSDRjMGR2NnVjMFhjaThWM1dBUThZUm5oZ0hNeE5BYy9xTG5WZHd3WlU2T3dTNwo1bi94dG5YWkx6KzhwZWR4NU41KzVwUUZ2ZmFid2g4dG53Z0FhMnV1QVd6YVZHR0VjNUk9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  skip-cnp-status-startup-clean: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: c6
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "16"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  # Default case
  routing-mode: "tunnel"
  tunnel-protocol: "vxlan"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-wireguard: "true"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-local-redirect-policy: "false"

  kube-proxy-replacement: "false"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  enable-host-port: "false"
  enable-external-ips: "false"
  enable-node-port: "false"
  enable-health-check-nodeport: "true"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  ipam-cilium-node-update-rate: "15s"
  cluster-pool-ipv4-cidr: "10.6.0.0/17"
  cluster-pool-ipv4-mask-size: "24"
  disable-cnp-status-updates: "true"
  cnp-node-status-gc-interval: "0s"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "true"
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"
  k8s-client-qps: "5"
  k8s-client-burst: "10"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-connect-timeout: "2"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"

  external-envoy-proxy: "false"
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: c6
    peer-service: "hubble-peer.kube-system.svc.cluster.local:443"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-hubble-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-hubble-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumendpoints
  - ciliumidentities
  verbs:
  - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumexternalworkloads/status
  - ciliumnodes
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumendpoints/status
  verbs:
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumexternalworkloads
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: kvmesh-metrics
    port: 9964
    protocol: TCP
    targetPort: kvmesh-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: NodePort
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
    nodePort: 32379
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-agent: "unconfined"
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: "unconfined"
        container.apparmor.security.beta.kubernetes.io/mount-cgroup: "unconfined"
        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: "unconfined"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        lifecycle:
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - CHOWN
              - KILL
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
              - DAC_OVERRIDE
              - FOWNER
              - SETGID
              - SETUID
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Unprivileged containers need to mount /proc/sys/net from the host
        # to have write access
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        # Unprivileged containers need to mount /proc/sys/kernel from the host
        # to have write access
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Unprivileged containers can't set mount propagation to bidirectional
          # in this case we will mount the bpf fs from an init container that
          # is privileged and set the mount propagation from host to container
          # in Cilium.
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - cilium
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      # Mount the bpf fs if it is not mounted. We will perform this task
      # from a privileged container because the mount propagation bidirectional
      # only works from privileged containers.
      - name: mount-bpf-fs
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        args:
        - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
        command:
        - /bin/bash
        - -c
        - --
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
            drop:
              - ALL
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        resources:
          requests:
            cpu: 100m
            memory: 100Mi # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
      - name: host-proc-sys-net
        hostPath:
          path: /proc/sys/net
          type: Directory
      - name: host-proc-sys-kernel
        hostPath:
          path: /proc/sys/kernel
          type: Directory
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              - key: ca.crt
                path: client-ca.crt
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.14.2@sha256:52f70250dea22e506959439a7c4ea31b10fe8375db62f5c27ab746e3a2af866d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      initContainers:
      - name: etcd-init
        image: "quay.io/coreos/etcd:v3.5.4@sha256:795d8660c48c439a7c3764c2330ed9222ab5db5bb524d8d0607cac76f7ba82a3"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
        - |
          rm -rf /var/run/etcd/*;
          /usr/local/bin/etcd --data-dir=/var/run/etcd --name=clustermesh-apiserver --listen-client-urls=http://127.0.0.1:2379 --advertise-client-urls=http://127.0.0.1:2379 --initial-cluster-token=clustermesh-apiserver --initial-cluster-state=new --auto-compaction-retention=1 &

          # The following key needs to be created before that the cilium agents
          # have the possibility of connecting to etcd.
          etcdctl put cilium/.has-cluster-config true

          etcdctl user add root --no-password;
          etcdctl user grant-role root root;
          etcdctl user add admin-c6 --no-password;
          etcdctl user grant-role admin-c6 root;
          etcdctl user add externalworkload --no-password;
          etcdctl role add externalworkload;
          etcdctl role grant-permission externalworkload --from-key read '';
          etcdctl role grant-permission externalworkload readwrite --prefix cilium/state/noderegister/v1/;
          etcdctl role grant-permission externalworkload readwrite --prefix cilium/.initlock/;
          etcdctl user grant-role externalworkload externalworkload;
          etcdctl user add remote --no-password;
          etcdctl role add remote;
          etcdctl role grant-permission remote --from-key read '';
          etcdctl user grant-role remote remote;
          etcdctl auth enable;
          exit
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        image: "quay.io/coreos/etcd:v3.5.4@sha256:795d8660c48c439a7c3764c2330ed9222ab5db5bb524d8d0607cac76f7ba82a3"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/local/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=clustermesh-apiserver
        - --auto-compaction-retention=1
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.14.2@sha256:0650beac6633a483261640b6539c9609f5a761f4ab4504fd1e6ffe7f2bb82e9a"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt
        - etcd.config=/var/lib/cilium/etcd-config.yaml
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: IDENTITY_ALLOCATION_MODE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: identity-allocation-mode
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        ports:
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir: {}
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "clustermesh-apiserver"
      serviceAccountName: "clustermesh-apiserver"
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: clustermesh-apiserver
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.14.2@sha256:a89030b31f333e8fb1c10d2473250399a1a537c27d022cd8becc1a65d1bef1d6"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            tcpSocket:
              port: grpc
          livenessProbe:
            tcpSocket:
              port: grpc
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          - name: tls
            mountPath: /var/lib/hubble-relay/tls
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Always
      priorityClassName: 
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      priorityClassName: 
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.12.0@sha256:1c876cfa1d5e35bc91e1025c9314f922041592a88b03313c22c1f97a5d2ba88f"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.12.0@sha256:8a79a1aad4fc9c2aa2b3e4379af0af872a89fcec9d99e117188190671c66fc2e"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
---
# Source: cilium/templates/cilium-secrets-namespace.yaml
# Only create the namespace if it's different from Ingress secret namespace or Ingress is not enabled.

# Only create the namespace if it's different from Ingress and Gateway API secret namespaces (if enabled).
