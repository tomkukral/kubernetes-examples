---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUx2bzVXcGFRRHg1UjB6RkN5KzN3ZE13RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN5TmxvWERUSTNNRFl4TVRFNQpNamN5Tmxvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF1QWU3TlFOT0NtS3N4U3RSSWJDOVN0Smp4dThRNjc0RmV3eWJuU1JJcHdUN0ZVeG4KK3p4SjB2TldrNlhHTkRIWVo5L0llWm56eHg5M1FjdDhHWFVYQ0x4UnIranFmZGhhYlZKY0VxYVByaG1yT2paTApmT0svL0VkRjVVOEdISUdWSktaRGV2L2E1cXVBM2xvdlNNZTZDcnBKOUl3bFBGRGtacjhCZkVVc0Z3Y3R6Y3FvCnFHU3VySzFRcVpBSnZRQWVwOXVUMHNRblhBdXRXZDN1K29ZcWpPQmVkbFBnVUJlWFZDcTRTemJnM1UzVjJaRVMKRjJPRjVBb0c2MExSSXMvdS9yQkpvTW1IUFJSbGpNUFREODdUUHdYTlQ3UEttSWVleUlXcmt1bU5QS0hJTGRyTwprc2dlV25IUVpnSndBRGdqTjgyNHVrN1BmczBPczhXSjJhNm0zUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSlhrZ3RSOE1FQ1pFZzJJTm1RVnVlOVhTS0ZzTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQmZFMGt6M1dQRXRGMHhTZkhmZlhmL0hvazVFUjcrWFB6WFNjSDhEa1dIazZxbVp4Mjg0NVNOCjI1YkZCaU9ZWHZDVWJldkRxOEl1dThjYURVRWVaSE1mRGR5RFhHa01iN0kwbTBCTnlzVC9JdXYwc25vb3h4eHgKM0Q5blpaQWVNWnlQVG8xbTdGSThNMnVVQ1JBM1BtVGZhb1BhQXVBNkZsK2N1SmR4UXRiUDYwZTA0MzlvOGs2Nwpnd0E2RDVpaGU1N2dYUXNCbjVnWm9VNWx0VHdqQUhMQ1N2TmI2MzJ3aCs3QjkwUGVDcCs0VFg4Y2dQdEFXNTJvCnhiejBQUm9aQmZwT2ZjN3lwejlQSHltdEFRdVhZU3doVFl1VkhzSTlETngrOGRHVmNwdzk5K2I5dWFxZDZiMG8KdnZjcVhibnM5ZnZvcWJyL1JyUXp3MHJtMjAvTzlCM2EKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdUFlN05RTk9DbUtzeFN0UkliQzlTdEpqeHU4UTY3NEZld3liblNSSXB3VDdGVXhuCit6eEowdk5XazZYR05ESFlaOS9JZVpuenh4OTNRY3Q4R1hVWENMeFJyK2pxZmRoYWJWSmNFcWFQcmhtck9qWkwKZk9LLy9FZEY1VThHSElHVkpLWkRldi9hNXF1QTNsb3ZTTWU2Q3JwSjlJd2xQRkRrWnI4QmZFVXNGd2N0emNxbwpxR1N1cksxUXFaQUp2UUFlcDl1VDBzUW5YQXV0V2QzdStvWXFqT0JlZGxQZ1VCZVhWQ3E0U3piZzNVM1YyWkVTCkYyT0Y1QW9HNjBMUklzL3UvckJKb01tSFBSUmxqTVBURDg3VFB3WE5UN1BLbUllZXlJV3JrdW1OUEtISUxkck8Ka3NnZVduSFFaZ0p3QURnak44MjR1azdQZnMwT3M4V0oyYTZtM1FJREFRQUJBb0lCQVFDWmk5SFdMSmk3cjVNSgp1OWVvcllkeTIxSG0xT2NnV3Q3RnlVSTVmZUdrZ1ZKaGRldTRRcGd5QzFoc1ByKytJdXkxMXBDMWJROXFUOFc0ClB1aWZjUU8wQlRSKyttNVVhK1VmRzcyNHpnSkp1QjhXcGVDY0piRWI4L2ZNbVArM1h5TXFmaE1GbUY1ellodFcKNnBaVE9sbnV3M29iTWFlTHlNNlpMN3Mwalo1NDR0Zzg5cHIydmg3d1p2cklaR2t0MGRaZkFTQVpxYTM5RUhxdQpTZ1Q4U2VXYXZhU3N2am1pcFlCZ1NMeER1TmpubE95WHVxQ3FzT0toeTNISjdOeFg3M2QxWU8yTFJlRkhWVVJPCjJ2RE9jSjBNMHUyWFNXMEZ5ZTdlR3I5clFzamhzTElVSVlGQm1QK2JlZmR0c3BYVktaZFNqUkRNd3JjVjBnQnUKTHBjNFh5SjlBb0dCQU1qM1NsTWhISDlTdVlmcm9WUmJ2TWxKM21oVUc4VVZQRndaOERka3ByakhDZ2w2OEJueApLdTE5OTRhN24vMzZrQzBmZUhPNkVBbEttOGFqNHN1cXZheUxjSVdnZFR1aGZUZENjMWprQXB3SHoxc01RUEJGCjQvcXlPM1AzbzNpc1hTdEhKNXgyR0txQXVWa05YZE5ZcDNCNTR3Mm9IQXVlZ2ovL2VGVlJLdnlIQW9HQkFPcHQKS0x3emYzVm10S0x6RXRJS1M3TGloQ05iNUhtaWdoSU9wb0hYditQbzNvWGluVnAwRzhlcU1qZWN1SlkraVNYNQpMNHNFcmlSQjFmRjlIMlRZZHJhRDBndXlKY2psL29hOXRtQkJqNXZaOTZZVmpjbzFGOTJpWkQyR0w3bDd5WjNLCm9ETkZ5MDdFNlpQaC9xRVEzbU9FZVo5T2ljN2FLd3V0aW9ZemRKNTdBb0dCQU1DVGY4eVRNU3l0U0E2QWRITlQKQ1dCV0FlTTFuZnJJczdPS1E0L0JTcVpNVFVqeVhyeHRSdmFYdkNlSENmU21NNXlaeUtJVkRTTHFOTVl2NjdmQgpJTXNFUDhvOURib2JzTkxRUVpwUHZGUnFnNEE3Q010MkhkWHhEMW04VnhEZkV0VFM5WmxQN2FrTmV3OWo2S0lMCkZVQ0ovRkxzNGhzY1JMSXhDODJ0M3lSbkFvR0JBTXp3QXZXTW03ZTV3dDdWV3pXdDlJRjlEd0dPV3cyTzZPRDYKVjh3WkhkTVRpRDFKWUVCc1VzRFpaQzlEM2diU3dya2t2OUJybGdWeVhLTlJ2RGxBRjMvMWU1SG4rcXBIanB5aQppeVpaQ2orNGJJeVFPVFYxOXRnMkdDWEZBa0hJR3ZqTDVBTU8xKzZUckpNd3RaWi9GYnV3VzFiT3BTRGxqMDRWCk40MmN2QzJ6QW9HQVQ1QVZmNjZpdjE1NC9waWIwVW50WEJGY045TndueUhINFViQkM0RTBXT1BkZi9TaTRzS0MKZnZqeEJVaW5ZSldqZGhFZzgzbEpuZVJtWmdDWUtSdDBLdGV0b2NyUGFERCtPUFhBMzdpcFlzbndDSEh4Tm5IcAorODdZT1dzc2RPQzVxR2FqMnlXN2JUaktKNUtNQkNleGM1SGduNTFXY2pLT294THZMaXg4YUxBPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUx2bzVXcGFRRHg1UjB6RkN5KzN3ZE13RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN5TmxvWERUSTNNRFl4TVRFNQpNamN5Tmxvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF1QWU3TlFOT0NtS3N4U3RSSWJDOVN0Smp4dThRNjc0RmV3eWJuU1JJcHdUN0ZVeG4KK3p4SjB2TldrNlhHTkRIWVo5L0llWm56eHg5M1FjdDhHWFVYQ0x4UnIranFmZGhhYlZKY0VxYVByaG1yT2paTApmT0svL0VkRjVVOEdISUdWSktaRGV2L2E1cXVBM2xvdlNNZTZDcnBKOUl3bFBGRGtacjhCZkVVc0Z3Y3R6Y3FvCnFHU3VySzFRcVpBSnZRQWVwOXVUMHNRblhBdXRXZDN1K29ZcWpPQmVkbFBnVUJlWFZDcTRTemJnM1UzVjJaRVMKRjJPRjVBb0c2MExSSXMvdS9yQkpvTW1IUFJSbGpNUFREODdUUHdYTlQ3UEttSWVleUlXcmt1bU5QS0hJTGRyTwprc2dlV25IUVpnSndBRGdqTjgyNHVrN1BmczBPczhXSjJhNm0zUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSlhrZ3RSOE1FQ1pFZzJJTm1RVnVlOVhTS0ZzTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQmZFMGt6M1dQRXRGMHhTZkhmZlhmL0hvazVFUjcrWFB6WFNjSDhEa1dIazZxbVp4Mjg0NVNOCjI1YkZCaU9ZWHZDVWJldkRxOEl1dThjYURVRWVaSE1mRGR5RFhHa01iN0kwbTBCTnlzVC9JdXYwc25vb3h4eHgKM0Q5blpaQWVNWnlQVG8xbTdGSThNMnVVQ1JBM1BtVGZhb1BhQXVBNkZsK2N1SmR4UXRiUDYwZTA0MzlvOGs2Nwpnd0E2RDVpaGU1N2dYUXNCbjVnWm9VNWx0VHdqQUhMQ1N2TmI2MzJ3aCs3QjkwUGVDcCs0VFg4Y2dQdEFXNTJvCnhiejBQUm9aQmZwT2ZjN3lwejlQSHltdEFRdVhZU3doVFl1VkhzSTlETngrOGRHVmNwdzk5K2I5dWFxZDZiMG8KdnZjcVhibnM5ZnZvcWJyL1JyUXp3MHJtMjAvTzlCM2EKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLRENDQWhDZ0F3SUJBZ0lSQUpJdk5mQXNxZHBqd1cwOFV5ZDZxVDR3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN5TjFvWERUSTNNRFl4TVRFNQpNamN5TjFvd0V6RVJNQThHQTFVRUF4TUlZV1J0YVc0dFl6WXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzM0RXNST3ZSZEE4WjRTSGo0RUFjTDRMSkVkZXB6N2tUSitIUHBpUWdrYnRtU0lXVUwKY0dwQnJBVVJDTmJTWUJ5OSt1RzY1MWhtdGR4dmZuK1pjTHJHeWc5eWc0dnZCMUczSEJYYy9IY3Y4SjQ4OUJRTgpqbVV0NjkzRUhSY3ZITmVlRnU5V256S2ozNUlUc0hGclN4R0ZpNEltMklxMXVzY3p1b3c3RHJHcTJDQTJZN0ptCnNHWHp1dndYUGpUVnU3OUVrVmZ3Tjc2dzQvRzltY2d2UXVHdXhBK3hHeng3VzBPd0wxMjU2cDFFNHhpMEpNMzIKQ2wrSE9JbmxUZ01ROElMVFkxM1dNVFYraXhvRkhac2Y2UWpVL290QVdTNUFqcUZQa3U1Ri81S2dSR3JJTW4wMgpUdzhWZytpdVdmaFg2d1dqbExST2VoYTBydUYrcFpuZkh4MnZBZ01CQUFHamRqQjBNQTRHQTFVZER3RUIvd1FFCkF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXcKQURBZkJnTlZIU01FR0RBV2dCU1Y1SUxVZkRCQW1SSU5pRFprRmJudlYwaWhiREFVQmdOVkhSRUVEVEFMZ2dscwpiMk5oYkdodmMzUXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQlh1L0xKcG1aQVhwakxJMDNCS0hYOEliVWZTCkNSTm5LKzJjb0Fid0xTLzZldmtuS3JuZFY1K2R2andFcC8zdHJBdGlFUmQzdUJ6Wm5wRWJ4amVtN2Z2VVhqKzMKY0tRcjIrVmpKbVJZbUxaRTVOcnFJTDJHdnVmOENSYXhkWVZVNUtsWTR3L2Rhd3NNWU9EYkJkVFdUUDkxRTRaZAorNDYza0V2d1pBZ3JnSXYwRkwyTGRlcTE4bW9MTFRGdlAyZW9WYThUUFNmTUJoaFhVN25LbmtyTmltSGJWVDh6ClZUL1FzTEQ5N2xlWmRSc1RnWDVpVVZFVHVzRDFHWStNK0V2V1BSakJVNDJTQm1zYTBJQ2ZHV1YrTm94b0drdmQKQ0JCNVNTbDBGOGtQQ1FtUit4TzFHeWNreElLdU13ZVVrVGhKa0dQMFM0VWRpN25MY21QU3gwcWYrc1k9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdCtCTEVUcjBYUVBHZUVoNCtCQUhDK0N5UkhYcWMrNUV5Zmh6NllrSUpHN1praUZsCkMzQnFRYXdGRVFqVzBtQWN2ZnJodXVkWVpyWGNiMzUvbVhDNnhzb1Bjb09MN3dkUnR4d1YzUHgzTC9DZVBQUVUKRFk1bExldmR4QjBYTHh6WG5oYnZWcDh5bzkrU0U3QnhhMHNSaFl1Q0p0aUt0YnJITTdxTU93NnhxdGdnTm1PeQpackJsODdyOEZ6NDAxYnUvUkpGWDhEZStzT1B4dlpuSUwwTGhyc1FQc1JzOGUxdERzQzlkdWVxZFJPTVl0Q1ROCjlncGZoemlKNVU0REVQQ0MwMk5kMWpFMWZvc2FCUjJiSCtrSTFQNkxRRmt1UUk2aFQ1THVSZitTb0VScXlESjkKTms4UEZZUG9ybG40VitzRm81UzBUbm9XdEs3aGZxV1ozeDhkcndJREFRQUJBb0lCQVFDdjA1NTBuM2RENm5SQwpXS3EwS2o5U3NFNUhBS3BzcVE3R1F2b3orb0Q2dGJUKzgwZjRKRXEyK1pMdXN4RVlvaWRaMHlrKzNESEFKVzdnCmZvbnRZOHAyaElrNDYybEg3Q3ZMZU9PL0tQdWZyK3JnUmxWV2tTOVhOaEFkaytPemZWVUJLdFU2YzRpdEF3QmcKSzN5SktJTmN2QVo4dHR3TTRzblJRVFVPMUFJNFprcE1iamhjZTNiWVZ1MURSR0lxZEJNVW5RR1dvV2xneUVXYgpTeFRxU05GZHpjeGt6aHJNS0NuWUR2dSt3bFdBWDROdTMxUTFtbW5JeDkyRk1BSHZhZFd0ZmlpbGlaeXlZVFpkCnlYVVh4d085M1V0bVhmMmcwQTBOTlJtUlJNbFIyZld4WTNzUDNxcEFRL1l6cnJ2TTdObW9XRUMxU3NaMks3eVcKWVZ0aFhCckJBb0dCQU1oNk94S2h6ZzdGL3ZpQUZ4a2JFSlZDa3llWVVRODdqNTd5Q2N2ODFRL1VhRzNqbVFyUApoVXZpamIwK0VmQVdRaWZKVGVtYTJVbU0xUWFNczZnTjV0K2xnWmltRjRha3FyZkZRYzJqWmlzSGcydEI4NTBwCkJzVEs2d3YyZnliRVlnam8ySFE1WmhHUmV6LzkwOThScEVKSDJCc29UUXZ3eUorNm9YNlZjVElIQW9HQkFPck4KQ1M2NzFSdWFnTXFCYmhtZ1JTM3ROVDd6NzhVN0RjNWtycmhRa2NERVVZNjlWb2p6WUgyeFpHOGhMdUs3M2ovMQovUWlVRDVNcHAyRmU2NW9hY0FVWGV2ZFNDN2d1YVlvVEJhdW9TU3ZyeFc4NmFIM2RVZ3ZBa09vMW9DMEZRcVRCClRDa1pUVmVtNlMySkxFL21ta1JHMUhkL285WGVXRlVCY21EckNpMFpBb0dBV2ZaSHhlK29DUWNlaUtMcU9wRGoKbXljNTQ3MjlPa212QkZOMncvd2NIRE5qL1ZQeDNHRU5YdVUyVjZLZjZBNEU5OWVreDl4OS96eGNaOGtCNGJzRApUSDczcmVseWl6QWZqOEhMNnB5VmYxK3F3Sm5pMlRhTTNBaDIrM0pNMHJlemltMzZuQVVaNFc1WVVYbjA5cGZ6CkR1OHdjZGRlNDZuVVRhRXhVUjE4bzBjQ2dZRUF6UDAwaHhoMWRTUHVUTjJ5d2F5cXVPM2ZEcGJwUGNmUXhlQWcKcWNtdGRoM3ZGaTgyM1ZtZFpCNzdFQXBvWklxZi9qZEVNYmtSMytqOXVJU21MR1BvYUltWFVWVFA1bnllcDJ6MApCbWxsZUhMZWE3MFNmTkE4VVFaTmZpeFRLdnJzcytvT0U5T0RNb01HRURzeDlJL2ZIcnkzd1p3dDdRbXhGSVd1CjFlNWRkQUVDZ1lBZ2dWb0VyMHM4N3pwRjFtR1h6NkZvYmZLcTlBcTVCRHZ5Vlc2dnhRRTdNTlUxbGp5dHFUSHcKemxMR09TNzlYS2JsajZYbStkQ2NzTTZoekFXQjZTODNQYkdQWkJrN1BNM1I1ZGJIODF5L0JtSEZVL29NcFFudgpCREc5bGlaSDBtK0RCL29yZVlBR3Vsa3F2WSt6b1BOK2JyTlNRSkhndzI0NEY2c0ZVTCt2N1E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUx2bzVXcGFRRHg1UjB6RkN5KzN3ZE13RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN5TmxvWERUSTNNRFl4TVRFNQpNamN5Tmxvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF1QWU3TlFOT0NtS3N4U3RSSWJDOVN0Smp4dThRNjc0RmV3eWJuU1JJcHdUN0ZVeG4KK3p4SjB2TldrNlhHTkRIWVo5L0llWm56eHg5M1FjdDhHWFVYQ0x4UnIranFmZGhhYlZKY0VxYVByaG1yT2paTApmT0svL0VkRjVVOEdISUdWSktaRGV2L2E1cXVBM2xvdlNNZTZDcnBKOUl3bFBGRGtacjhCZkVVc0Z3Y3R6Y3FvCnFHU3VySzFRcVpBSnZRQWVwOXVUMHNRblhBdXRXZDN1K29ZcWpPQmVkbFBnVUJlWFZDcTRTemJnM1UzVjJaRVMKRjJPRjVBb0c2MExSSXMvdS9yQkpvTW1IUFJSbGpNUFREODdUUHdYTlQ3UEttSWVleUlXcmt1bU5QS0hJTGRyTwprc2dlV25IUVpnSndBRGdqTjgyNHVrN1BmczBPczhXSjJhNm0zUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSlhrZ3RSOE1FQ1pFZzJJTm1RVnVlOVhTS0ZzTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQmZFMGt6M1dQRXRGMHhTZkhmZlhmL0hvazVFUjcrWFB6WFNjSDhEa1dIazZxbVp4Mjg0NVNOCjI1YkZCaU9ZWHZDVWJldkRxOEl1dThjYURVRWVaSE1mRGR5RFhHa01iN0kwbTBCTnlzVC9JdXYwc25vb3h4eHgKM0Q5blpaQWVNWnlQVG8xbTdGSThNMnVVQ1JBM1BtVGZhb1BhQXVBNkZsK2N1SmR4UXRiUDYwZTA0MzlvOGs2Nwpnd0E2RDVpaGU1N2dYUXNCbjVnWm9VNWx0VHdqQUhMQ1N2TmI2MzJ3aCs3QjkwUGVDcCs0VFg4Y2dQdEFXNTJvCnhiejBQUm9aQmZwT2ZjN3lwejlQSHltdEFRdVhZU3doVFl1VkhzSTlETngrOGRHVmNwdzk5K2I5dWFxZDZiMG8KdnZjcVhibnM5ZnZvcWJyL1JyUXp3MHJtMjAvTzlCM2EKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lSQUxmQ29oZFkwNFJ0ZXBNQ1A1dmlJdXd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN5TjFvWERUSTNNRFl4TVRFNQpNamN5TjFvd0VURVBNQTBHQTFVRUF4TUdjbVZ0YjNSbE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBCk1JSUJDZ0tDQVFFQXMrb2g2S3NTaS9NcXFUVW1XenlNb2VHaTFSN09CaThEamorZzFpMmRPODZTaU9JMzhvK2oKZG1kQnNHbG9PUTVnOGJSOWJ0ZllrQUk4UGYrakdIRVRmbzZlVDZsQ09vYklFLzRsLzJLZGN0Vk9zaUZTa1pUMApab21zMEE4ZjFVTmRDaHA0Y1JVcmJzK3ZFaEZERy9YdUJsK3JWa0tZaW1heEZnNVVTODlnejhjbk15RzA4dWxZCnczbGJoS245ck1uc0xqb2R4M1RoVzhrSHQxRFBVTnBVYytPMGZ6c1RVdUhTbGIvMVNGVDdRNGZBTlY3QllvMngKQ1RSdVNFQ0REV0J6T1lqdUJzdm5ibVNYVkRxOTJ0a2t3bHMxS1EzV1hGWVRXZ1JaWWZYT0xNSWFvRHFReEN4MQp0NER4emY3RWEyOFlseVZRTnhPeFUrZDltOWNncUJaMkN3SURBUUFCbzJBd1hqQU9CZ05WSFE4QkFmOEVCQU1DCkJhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXcKSHdZRFZSMGpCQmd3Rm9BVWxlU0MxSHd3UUprU0RZZzJaQlc1NzFkSW9Xd3dEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUR0TlRMNCt0eHpTejU1S2dZaFVSS09CN2dYYnVEZGhnUlkwWjlNSDBFUFpNc0FDSUVrcndiVDVaQlp1CnJob3BhTXNMV0FkTFJURmU4SWEveW16ZVErZU9qZlZlSmFSMDBDSUlGNUtYUC9CamxxMytrWDRqM2hWZjgwRUIKbmRUL2lXT2U3MlEvZG42eHgyYUN3RVJzdlBmclNIaFpyaHp0WXVGd1RsbXdPNUljYUJXNUdFQUxobUtzZzlCbQpxZWtYT0FRaHZPNVRrZ0NKcVJMN2IrbjRhYldrMEJncGFNUjBiK3Z0bWhBa1dmaFA1bWU5WEcvZDRxVkpoVy8zClZKWjFDaDFPV3dwRi8xc0VtSS9EN0UyMDFEc1NXRU85N2U1dzRVaEtxWDVxQWZKcVRLRU5wU1JQRkY3eWRkd1YKbm9wazYyTXM5UjhoQmlaWWxSbURlZ1R3bTdVPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcytvaDZLc1NpL01xcVRVbVd6eU1vZUdpMVI3T0JpOERqaitnMWkyZE84NlNpT0kzCjhvK2pkbWRCc0dsb09RNWc4YlI5YnRmWWtBSThQZitqR0hFVGZvNmVUNmxDT29iSUUvNGwvMktkY3RWT3NpRlMKa1pUMFpvbXMwQThmMVVOZENocDRjUlVyYnMrdkVoRkRHL1h1QmwrclZrS1lpbWF4Rmc1VVM4OWd6OGNuTXlHMAo4dWxZdzNsYmhLbjlyTW5zTGpvZHgzVGhXOGtIdDFEUFVOcFVjK08wZnpzVFV1SFNsYi8xU0ZUN1E0ZkFOVjdCCllvMnhDVFJ1U0VDRERXQnpPWWp1QnN2bmJtU1hWRHE5MnRra3dsczFLUTNXWEZZVFdnUlpZZlhPTE1JYW9EcVEKeEN4MXQ0RHh6ZjdFYTI4WWx5VlFOeE94VStkOW05Y2dxQloyQ3dJREFRQUJBb0lCQUh6U3V6WHV3czVnSmtBQgpSUnhWdFFoM1FINzJnV0FlN0N1Y0Q1MnBSZ2FCZW44SDNHTW9ydk51RGxBendZQ2NiandqeWtiRjhGVnhoNVJJCk1VSzY2UmlNSUdBS2dZMlRoMnIva0NOUXF3Wko0ZkNLVi92elNXRitzV3drb2lSWE9VelNNcS9hVFNqelpIWjMKallUdnFuVzNtR3NmaHkrMnNiUW91dWxoOXJ3UU9NQ1d6Wi9FcG5LSk9RK1ZETlhDaGF0OWprMlliTHFVbXlVNgp1d3hXZWlra2lpRTVoZXVlK1ZOZytHM1ErdEg5ZjVYMkRJaHRTMDZQS3JzaHhkUlBOVGgvNi9tUlBkeXpYRTU2CkNOalJiUVlkaDNMaldPUzJNVnNESHA4T0tVY3U1bmxSaFZNL2daeWQzTnVkR0VETkxJcG00cTBvZENOczVIbmQKRmo0Mk94RUNnWUVBNVFORkxUVTVlVG9SbE12a3lqSFlpSHpkUEQ2T0h2VnJzUXB4OUllcjdtWUNtRjNEZnNwUgpaczF2QmZ0YWlodDhFR1ljbFpDZG1HUFdJUDhFMU5oVE1GZGxBei82SlBPSGdrV3ZzS1FyZGhOWjVDdnNqL2pKCmdOanZDeWlBR2VnZHBVajRqWGUvTXcxSmVPZDlHVko1SEk5OWtkYm1FUGpWYlRhUjhlckY0Tk1DZ1lFQXlSMngKL0xkejYrZS9QUHJTeEg0MDJTSWZsZ2htSnYwNVpDZXBGRFUrbVg1emtTWjhUd3RxbTl6TUZHMXdsUzh1MXFxdQpXbFdNOWdiUnFjdGJEdERIRGlGRDhkYjg5VGJONjRqeEoxVTgyU1REZEQ0bytRSEdQMjNvNFRCWERwdkpLZU9oCldlbzhwUE5tcnoyU2hUTitYOWc2eHJEM0lyT1BkZXZBRVNKYUV1a0NnWUFFdzB1bUJBeGM5Qk0zaUFJTEhueEYKWW10cmZGV1NXVUpUSFVkL2NXN205MklvYnhMSXlVWm1IL0dtS3pNWDJqaDdVdFJYVy9tYkdNQjBVVGwxZjhaRApKQjRxc2lMdXI4M3FySzVadXlCWVJWRENTUk9UYnZZcDR0a2QzMHJDdnl3V3F1elliRndpb0swZGdacjljdFNuCi9tZjdKNEFEYkZscit3MlAvWFQrRndLQmdFMFJmaFZUejY1RS9ubkZ2R0xqNGlpYTlQT3ZnRVhNbitPTGR6VngKT2Uza0VURThTRUthSTE1YS9ER1B4cWJFai9SZkw3VWFONHhJREt3K2EwU0FLT2QzUSt3MjhIU2ZiY1dta3BMNgpEUGxCSjAweVRNMHZLdU0vb1JBNlVBSWZITFZhcjRnZlJPSUpDLzUzWCtCL1hSd3Baa3lobi9MQ1VHVmwxQkk4CjBidVJBb0dCQUo2cEVaUElvbTFSZ0JSWFNsZnc1YmNsbkdaVHZpUkhCNTNTUk9QOXNrL1lIeHpuazFzTUtQaEcKWTdFaFp5UWtodytrMDNESzFTSlc5S1lOVUZNMStTK3RjL3BRdGNpTEM0UHFPNTRRNUxSTlhzR0I3TVNlRGFQSgpBSEN3Q1FNamtRZEpva0diQlgyQU9LS0FQbzJSWDdvbTBGRFN2NWpzY3JGbUhheHFCaGZwCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUx2bzVXcGFRRHg1UjB6RkN5KzN3ZE13RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN5TmxvWERUSTNNRFl4TVRFNQpNamN5Tmxvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF1QWU3TlFOT0NtS3N4U3RSSWJDOVN0Smp4dThRNjc0RmV3eWJuU1JJcHdUN0ZVeG4KK3p4SjB2TldrNlhHTkRIWVo5L0llWm56eHg5M1FjdDhHWFVYQ0x4UnIranFmZGhhYlZKY0VxYVByaG1yT2paTApmT0svL0VkRjVVOEdISUdWSktaRGV2L2E1cXVBM2xvdlNNZTZDcnBKOUl3bFBGRGtacjhCZkVVc0Z3Y3R6Y3FvCnFHU3VySzFRcVpBSnZRQWVwOXVUMHNRblhBdXRXZDN1K29ZcWpPQmVkbFBnVUJlWFZDcTRTemJnM1UzVjJaRVMKRjJPRjVBb0c2MExSSXMvdS9yQkpvTW1IUFJSbGpNUFREODdUUHdYTlQ3UEttSWVleUlXcmt1bU5QS0hJTGRyTwprc2dlV25IUVpnSndBRGdqTjgyNHVrN1BmczBPczhXSjJhNm0zUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSlhrZ3RSOE1FQ1pFZzJJTm1RVnVlOVhTS0ZzTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQmZFMGt6M1dQRXRGMHhTZkhmZlhmL0hvazVFUjcrWFB6WFNjSDhEa1dIazZxbVp4Mjg0NVNOCjI1YkZCaU9ZWHZDVWJldkRxOEl1dThjYURVRWVaSE1mRGR5RFhHa01iN0kwbTBCTnlzVC9JdXYwc25vb3h4eHgKM0Q5blpaQWVNWnlQVG8xbTdGSThNMnVVQ1JBM1BtVGZhb1BhQXVBNkZsK2N1SmR4UXRiUDYwZTA0MzlvOGs2Nwpnd0E2RDVpaGU1N2dYUXNCbjVnWm9VNWx0VHdqQUhMQ1N2TmI2MzJ3aCs3QjkwUGVDcCs0VFg4Y2dQdEFXNTJvCnhiejBQUm9aQmZwT2ZjN3lwejlQSHltdEFRdVhZU3doVFl1VkhzSTlETngrOGRHVmNwdzk5K2I5dWFxZDZiMG8KdnZjcVhibnM5ZnZvcWJyL1JyUXp3MHJtMjAvTzlCM2EKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURwekNDQW8rZ0F3SUJBZ0lRQ2h4TUNxTlBnT0ZKQjM4SENneCthVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOekkzV2hjTk1qY3dOakV4TVRreQpOekkzV2pBcU1TZ3dKZ1lEVlFRREV4OWpiSFZ6ZEdWeWJXVnphQzFoY0dselpYSjJaWEl1WTJsc2FYVnRMbWx2Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBMTV4Ync5MExhWFB4Z1JWRnRia20KVXhROHo5clorWDI5ZHJzbUpkeFlQUnpudUFpWDVMZEhrWXlSM1p2OFZ0dERVRVZOSnVDeHFIMUpja0xWNnN6RQp1aWdzM2hZZ1k3a25LVW02RGJKR0hkNFVjQjVueDR3MWhGcEllbGRpbUYxeU5lbk9SSGJGQlZ0bCs2WjJQUjNHCkpYNVdIWjdRaXN0UFlFWXNVYXdzR1ZDanJrcmVCRldFc04wU09UK2dsQTUrY2JCM08vVittTGNKSkptMGQyWmsKR1lSSmJiVjlJYndCclVqMFBBYUdjTE9CL2Eya2xVTnpzVWIzRXJPWi9uVXVXeE1jaEluN2wyMDdsRWV2b0NTdAo5VHZQZ2FaSERDMEFBTXBlWklPUlZtMHRDb2dhSmtpUm5WaFlmSGJSNUtoTDlyQ3hSdC9tQVVjZlkrdFhmMXBHCjdRSURBUUFCbzRIZU1JSGJNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0QKQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JTVjVJTFVmREJBbVJJTgppRFprRmJudlYwaWhiREI3QmdOVkhSRUVkREJ5Z2g5amJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXVZMmxzCmFYVnRMbWx2Z2hBcUxtMWxjMmd1WTJsc2FYVnRMbWx2Z2lWamJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXUKYTNWaVpTMXplWE4wWlcwdWMzWmpod1IvQUFBQmh4QUFBQUFBQUFBQUFBQUFBQUFBQUFBQk1BMEdDU3FHU0liMwpEUUVCQ3dVQUE0SUJBUUEwWEhNWnBhYUZGVXdqQVhmRnljL0hVQnE3TVpNVVEyUVM0Z3IrYXlhTTNsc1laN2UrCkZRMjd4ZGJLSWFKVWlqMjJBTHdxYk5jbHRTLytJLzNwdHlSNTNLS3pkUGZEUkh5Y2tJNTlNaCtic1VYRmdhZGcKMjZRRVJ5UDNNVVI3T05Wajl3NHlBUnM1Qkc0SVk2NUVWL09CUnFPZlBYYVNzamU3cVdnaU5yM1Z5dmVtT0lhWApsRmsrOWNBNHhoUTFTYUV1VzNWL2h1ZWtSeTVleVJqMyt1aXpyYzFibE1uYnI5R0NxQktaWWlBR1pYbk4yZ2c3CkxzWWsxM0xBWWtWMzlPa0xTSWJnWmJIQnBaSWcycGxmK2NyU2hsQTV6YXBKMEcrb1k4N1RvVmtvTjhaVzVJVXIKczhWczBlTUpkZ2VIU0R6WU9URnl0VVNkekpYN2cwUVg0bDg2Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMTV4Ync5MExhWFB4Z1JWRnRia21VeFE4ejlyWitYMjlkcnNtSmR4WVBSem51QWlYCjVMZEhrWXlSM1p2OFZ0dERVRVZOSnVDeHFIMUpja0xWNnN6RXVpZ3MzaFlnWTdrbktVbTZEYkpHSGQ0VWNCNW4KeDR3MWhGcEllbGRpbUYxeU5lbk9SSGJGQlZ0bCs2WjJQUjNHSlg1V0haN1Fpc3RQWUVZc1Vhd3NHVkNqcmtyZQpCRldFc04wU09UK2dsQTUrY2JCM08vVittTGNKSkptMGQyWmtHWVJKYmJWOUlid0JyVWowUEFhR2NMT0IvYTJrCmxVTnpzVWIzRXJPWi9uVXVXeE1jaEluN2wyMDdsRWV2b0NTdDlUdlBnYVpIREMwQUFNcGVaSU9SVm0wdENvZ2EKSmtpUm5WaFlmSGJSNUtoTDlyQ3hSdC9tQVVjZlkrdFhmMXBHN1FJREFRQUJBb0lCQUNjVEFocGo0OTZQa1pQbwpMQUw3OC9NWWR0RGdnNkpRWkZheElmKzRpQkZEUE1kQVgyNm12SVNuS2dRMGNhMjMvT0grUFRZdmdHTGRtY0xvClUrWkNoK0NJeVdEU043cDY0cHI3N29qdTV3QWdzQ21GaVI5RHpLc1l4WXZPYkdMYWhJazZ2eFB2UmxOck5mYysKT3ExbXlQTWdpekRCQ0dBdTZrcXpUUExjTmYyOEp6cHVtSzFHdC9TQnRaZ2JFM2kzNmZHU0RIdnNJRUsybExTNwpoRGpCWm0wQ0Jpb1puMGljR1FiQmRVTWpxKysyVDVZL0F3YXBLN2JTV0VyTklMbjhUbngxTTJoTjZuK1VvazB4Ck5sQ1JDWWVHNThSYlgxdjF4a2h5cDNMM2VxdEFSaHFFYW05REpYN09wVTlvWVRtdDVYVWhwY2xybnhveDFPUmYKZHVLS2ZDRUNnWUVBOXd4SGlBUlNmOVZZc1VydjhXc1ZvNTJuV05JT1B3Q1ZwT2JHNTVacW5ydEp4WGVWQkFXLwplYTFVN3Ivdk1Qc2puVUsyY21yNXlyaHYveEo1WTlHWVJPOXorY3JneUlRTlFwUWhMRTNPL3VGcW9IRmtqdE1zCkdkbUxDbC9seC9xcnVBNVFGbzlHK24xamNQMHFXSjRmOG1xOUFGZ3pXTXNJRXJIS3hKV0dHQ1VDZ1lFQTMyeDAKVjdTZ3hRZkwrcytQZU84WE1GM2dGQXYwNk8yVE1HV1FrS1orVExoV1Zwdk1Lb1I1S25VY201TmtpaUVyKzZidAp4VmhDUEwrTUZqZUJTVVVXMXVrTmVZNTFqMHV4ZmxGRkJkdm9jZDlveWtxcWI3VDdFdnM4SS9CS3ozeFRUcG9CCm9qYnlxSkF2eWJyTGtNbzUvMEZac0F3UXMvaHVHY1piNkQ4aDlTa0NnWUJTa01FTFhWNXhLTTEybTNQcnZIMUQKN0htMGZxZVNPTkRLaHZKdERlRmVZWHU3U2tiOFRDdDlNQWZWcjBIeW5jeCtUNENJWnVaSzhTOUZFVmlPbXNzSQpKdnNjdmNnNFc2SE80WkRnckxTRWpMUEZJWUNaRjB5QzZ5akQ4OTdvNGdjb0FXaVUwWmZJT2NYVlNsY3Z2TkV5CmhLZmNDSjVJaTdxTC9PMm1tODV3SFFLQmdRQzVEQkt3TWFLV2pnYWNEUjAvaEljb1FCZy9na2V1UkZjTVZwS04KdTlnUG92MmZiaHFEZklUK2JWRHNhZjl6aUZYdGNDeXVycEx0elpneExuZWVQK0xTek9Pa01pR2NOWTBrbWhzWQo1ekoyWGh0a3NNTEpFcFNBL0NTcmYzSDJ0M29vTjlYeWpLQWVqSTJILzNacXpaT0xub3l5Q3N3cXd6QXRtT1MyClR0UEpRUUtCZ1FDNzRSWVIzY1RqVmJmWXZWLzBDdEJTcW1TWWlvOFR1ODFSQ1ZFTTVaRHZRVGlZUVFlK09BWGkKbml3dVQ2Y05kWDBHMnVrZlJPUHNlcGVVTDdDeE5XSVZLUVYzYkV5RThiN3QwWERJR2Z1UW9lMzJCbms1RGdWRApnRkE4SjBwNytuV1lSQ0tkV3dYcU1UWWJ0VjVVV2h5SXQxTUQxL0R6clIrakV3TDNFNElJdnc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUx2bzVXcGFRRHg1UjB6RkN5KzN3ZE13RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN5TmxvWERUSTNNRFl4TVRFNQpNamN5Tmxvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF1QWU3TlFOT0NtS3N4U3RSSWJDOVN0Smp4dThRNjc0RmV3eWJuU1JJcHdUN0ZVeG4KK3p4SjB2TldrNlhHTkRIWVo5L0llWm56eHg5M1FjdDhHWFVYQ0x4UnIranFmZGhhYlZKY0VxYVByaG1yT2paTApmT0svL0VkRjVVOEdISUdWSktaRGV2L2E1cXVBM2xvdlNNZTZDcnBKOUl3bFBGRGtacjhCZkVVc0Z3Y3R6Y3FvCnFHU3VySzFRcVpBSnZRQWVwOXVUMHNRblhBdXRXZDN1K29ZcWpPQmVkbFBnVUJlWFZDcTRTemJnM1UzVjJaRVMKRjJPRjVBb0c2MExSSXMvdS9yQkpvTW1IUFJSbGpNUFREODdUUHdYTlQ3UEttSWVleUlXcmt1bU5QS0hJTGRyTwprc2dlV25IUVpnSndBRGdqTjgyNHVrN1BmczBPczhXSjJhNm0zUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSlhrZ3RSOE1FQ1pFZzJJTm1RVnVlOVhTS0ZzTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQmZFMGt6M1dQRXRGMHhTZkhmZlhmL0hvazVFUjcrWFB6WFNjSDhEa1dIazZxbVp4Mjg0NVNOCjI1YkZCaU9ZWHZDVWJldkRxOEl1dThjYURVRWVaSE1mRGR5RFhHa01iN0kwbTBCTnlzVC9JdXYwc25vb3h4eHgKM0Q5blpaQWVNWnlQVG8xbTdGSThNMnVVQ1JBM1BtVGZhb1BhQXVBNkZsK2N1SmR4UXRiUDYwZTA0MzlvOGs2Nwpnd0E2RDVpaGU1N2dYUXNCbjVnWm9VNWx0VHdqQUhMQ1N2TmI2MzJ3aCs3QjkwUGVDcCs0VFg4Y2dQdEFXNTJvCnhiejBQUm9aQmZwT2ZjN3lwejlQSHltdEFRdVhZU3doVFl1VkhzSTlETngrOGRHVmNwdzk5K2I5dWFxZDZiMG8KdnZjcVhibnM5ZnZvcWJyL1JyUXp3MHJtMjAvTzlCM2EKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTRENDQWpDZ0F3SUJBZ0lRZGxOMHJNdlpDOTU4OHNzR3hacmJQekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOekkzV2hjTk1qY3dOakV4TVRreQpOekkzV2pBak1TRXdId1lEVlFRRERCZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDN2dYaUxzalg4RVhZRFRzelBzK2YyRjRDZ0JHZ2gKRlY2RjFBYzY3Qm5KY004dlZiSVFwRi9idEtyTE84cEVuWEJGd0V1djlxL1o4OTdLMVBQdWlBTER1SDhwVVdyRQpSeTN4b2dZZFVqZjJKd2FabERsS2dKZXdjWVY2TkpDMDhDaHhWWDROQTFIUHl4d0NCYVY5elJrRWtUVjM3ZWUvCnRyS0YrLzhBYmh5Z1l2SkNMVWs3Q3RSZ0toaWlTczlZZEQxMjhHcCs5ckhYcUJBbkFFcE95NTZwNmt1YXpaVWwKc20zcG5EMElpenNJMkpNbUZZaldwMFRyRzVsL1psQ3lRME50c2I5SmwxRndaRDBVb01lSWdGNDM2b280NVhoWAo5ck5hSisrRDB1NWwzZVMySTdyL0djRGtOT0dhR2pVQkhCR0d1Z01ZcVBOeUNIaUtvLzJ5RlBEbEFnTUJBQUdqCmdZWXdnWU13RGdZRFZSMFBBUUgvQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUYKQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUI4R0ExVWRJd1FZTUJhQUZKWGtndFI4TUVDWkVnMklObVFWdWU5WApTS0ZzTUNNR0ExVWRFUVFjTUJxQ0dDb3VhSFZpWW14bExYSmxiR0Y1TG1OcGJHbDFiUzVwYnpBTkJna3Foa2lHCjl3MEJBUXNGQUFPQ0FRRUFoT3RrdTRDY0FKbzRybHdheVY4Qk44eWNicHlZR3BBa2JwVTB6Mzk0Y0dySzlyMkMKc01TK0VrTy9lU0ZYS2pWeW5pdGZxVllZb2FEbDQwRGM2dmFqckxPMElWS3QrQXFVUmJxWEVSRWI5ZUs4MzJzawo2L1pYbWVsNjIxUnJPM0d4dkdCbmhTTUZYaExwVlJSTE1vTXpFQ2piRjFVM3BDR3JSa3lLM0V6eHcvdS8rcnB3CldncUF1dmltYmRDZGpaWTZJa0tmeGNnOUZ0REl1KzR0UGxSTXVOaEptcGZrVXV6ZVFRcVRwS2owMjBNK25qRysKUzg5Q05idEFBQW9pUXFGVG5DZEx4dEd6VDRMcWRmdmlwNHYrZ29LZW96Ty9PNHZyRUlJTElVWHRxeHREWTI5Ngo5YnpiTGdiL0ZDbXFiajRlYmRvSnk4T2VlLzU1bXlheUx6RmJ3QT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdTRGNGk3STEvQkYyQTA3TXo3UG45aGVBb0FSb0lSVmVoZFFIT3V3WnlYRFBMMVd5CkVLUmYyN1NxeXp2S1JKMXdSY0JMci9hdjJmUGV5dFR6N29nQ3c3aC9LVkZxeEVjdDhhSUdIVkkzOWljR21aUTUKU29DWHNIR0ZlalNRdFBBb2NWVitEUU5SejhzY0FnV2xmYzBaQkpFMWQrM252N2F5aGZ2L0FHNGNvR0x5UWkxSgpPd3JVWUNvWW9rclBXSFE5ZHZCcWZ2YXgxNmdRSndCS1RzdWVxZXBMbXMyVkpiSnQ2Wnc5Q0lzN0NOaVRKaFdJCjFxZEU2eHVaZjJaUXNrTkRiYkcvU1pkUmNHUTlGS0RIaUlCZU4rcUtPT1Y0Vi9heldpZnZnOUx1WmQza3RpTzYKL3huQTVEVGhtaG8xQVJ3Umhyb0RHS2p6Y2doNGlxUDlzaFR3NVFJREFRQUJBb0lCQUErQ2hTTWhDYUFoSFo3bQpiTUNkaEFseUpqeVdRTHJEMXI3QkxCdnVuYTl3K21KUzkxaXpFQTdQWWZWUHE4cURMMTlGcWIwVGJiWmNtc2d5ClZ6OGExd2V6Z2lrN3g5WVdnVEZra3Bib1R5SzRWYTVzZVZTMVVGYlMvUlIvdHB5UTVQZUM5OXRCdEFtNUprYncKaXFEZVR6eDJlbkxDSmhKUW5YSEJ4M1VVcHArSml6TXZCRlV6OVJzS0dmSVlRd01LTWxuVGJMTXpXZENKaXJjeQpHRzVtZlhtMGk2QW9IaHRmVUttNytoYW5zNWs5VU43dEdsVkNrL1FLQ2FCZlNGM0JSeFN2b0NtbDJMbE9yRG5HCm52ZUFIaVdhYk90NXk4NWFEMkdUV1crMC9EelZRUzY0L2syUFZuam14U3dFZThDQ2NVODN4biswSHBNdzhRMTYKc1hsNlR3RUNnWUVBd1dIbTc3MEpoNmJYRWlsSTdlSEFHNFc1cDR0RFg5MHlXUjR5WWRaeW9PNkFUTml5S283LwpSMWI1bnZJRG42MTQ0YnNyNmxhSGFqRXBWQzY4b1lmQko3bFRxWHlwajkyclpZcEFYTkdyRmlXUGUva3dkdUJWCmtIaG5jZ29IY1huYWVjQWtZbm1JdG85Q3VIRDNpK25welBBdDF5b21wN0x4SmlCVldDRnRwTUVDZ1lFQStEaHUKYXd5UFZZNE92WXpJeUR0aGVQbDlHYUFRbGlDbG9wbFJaWXJjOExCbzhNdEgxMnFTcUxnWnhYMXdzUHo2UUU0bgprSUZQS1p1dEpxWERxMjcvMzNMaHpLTlMvSUJKT2g5ZjlPNng0VitLSFBDcSt5SGduaHNZSXdvalU2Z3RRZUNZCnhrcDFtaEhVVysrdUs1NE81K2RqLzJDR2NEeFo4WEhzRjhxUFlTVUNnWUVBc1B0enlsYzh3SXg5Nng0am82cG4KRWdrNTEwK0tFdE16QUFLMTQzckxIK1FIUWMxVWljU2pkMXZ2U250OXU0YWN5aUp0MTZMbmZkV09XSUFKbk4vTQpkQm1WcXRqdnFqNGFYZXpBYVBKdTNPNzFPV1hlNS96NThpVnZyeHZrb2dMK1kwenBQOEt3enp1ZnVZT1IydGZ5ClpPQXZZK3NzdzIvdWFaRlA2ajkxeEVFQ2dZQmpYMHd0UlJqNCttZENVV05zYmdGbXloTGdPR21MZ01SdTVReG0KSjRLdVJTR3VET1BWQk5CMEJVZ2ovVVVwUmczMXdwUXFVT3BkVVBxdjl6cnZuZitIK0ZrWGNPZGZPUWlYNFVtcwpLQWRFbjlnT0gvZURsSnQxRUluSU5WM1JOd252VHJnNjRrSlVqUURFVVo4YnpTcFFneDFRZHRjN2haM0lnSUF4ClFpSEdsUUtCZ0RScmRTN25mV3lFVnE1c0FjRjhyNWVBZ0xJUXEreHlPdFVZMFlqdGM0NzdQdGVhemF6TkNLdG8KWVUxdmRMQWRqV012NllhRVZmaDBwSkVaUFYyMFFwdW9JRUNxZWdaRDUxTHhxbUNONHRUTmtEZGRwb3FhWkYvYQpBUlh0V3R6QjlGc1NsZGFHb2pSY1dzeW85eFIwRE16K2htUFI0MWZsU1hMbU9uSnkweFNOCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUx2bzVXcGFRRHg1UjB6RkN5KzN3ZE13RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN5TmxvWERUSTNNRFl4TVRFNQpNamN5Tmxvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF1QWU3TlFOT0NtS3N4U3RSSWJDOVN0Smp4dThRNjc0RmV3eWJuU1JJcHdUN0ZVeG4KK3p4SjB2TldrNlhHTkRIWVo5L0llWm56eHg5M1FjdDhHWFVYQ0x4UnIranFmZGhhYlZKY0VxYVByaG1yT2paTApmT0svL0VkRjVVOEdISUdWSktaRGV2L2E1cXVBM2xvdlNNZTZDcnBKOUl3bFBGRGtacjhCZkVVc0Z3Y3R6Y3FvCnFHU3VySzFRcVpBSnZRQWVwOXVUMHNRblhBdXRXZDN1K29ZcWpPQmVkbFBnVUJlWFZDcTRTemJnM1UzVjJaRVMKRjJPRjVBb0c2MExSSXMvdS9yQkpvTW1IUFJSbGpNUFREODdUUHdYTlQ3UEttSWVleUlXcmt1bU5QS0hJTGRyTwprc2dlV25IUVpnSndBRGdqTjgyNHVrN1BmczBPczhXSjJhNm0zUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSlhrZ3RSOE1FQ1pFZzJJTm1RVnVlOVhTS0ZzTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQmZFMGt6M1dQRXRGMHhTZkhmZlhmL0hvazVFUjcrWFB6WFNjSDhEa1dIazZxbVp4Mjg0NVNOCjI1YkZCaU9ZWHZDVWJldkRxOEl1dThjYURVRWVaSE1mRGR5RFhHa01iN0kwbTBCTnlzVC9JdXYwc25vb3h4eHgKM0Q5blpaQWVNWnlQVG8xbTdGSThNMnVVQ1JBM1BtVGZhb1BhQXVBNkZsK2N1SmR4UXRiUDYwZTA0MzlvOGs2Nwpnd0E2RDVpaGU1N2dYUXNCbjVnWm9VNWx0VHdqQUhMQ1N2TmI2MzJ3aCs3QjkwUGVDcCs0VFg4Y2dQdEFXNTJvCnhiejBQUm9aQmZwT2ZjN3lwejlQSHltdEFRdVhZU3doVFl1VkhzSTlETngrOGRHVmNwdzk5K2I5dWFxZDZiMG8KdnZjcVhibnM5ZnZvcWJyL1JyUXp3MHJtMjAvTzlCM2EKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURURENDQWpTZ0F3SUJBZ0lRU3lLUWJLdlZjaFRaSzVKOGgrSXVqREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOekkzV2hjTk1qY3dOakV4TVRreQpOekkzV2pBbE1TTXdJUVlEVlFRRERCb3FMbU0yTG1oMVltSnNaUzFuY25CakxtTnBiR2wxYlM1cGJ6Q0NBU0l3CkRRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFQVDI4SnZOY3RRQ0FId3BXdWczREFlSXR1VmsKR2tmQ0lja1RoNTZIcnNydGREanltaTVqcDdQdms5TDd4ek1lSHdrbmNBUUhVTFI4YkZYc2dKNFJrSUU4QkVPRApiSDUwVkFTZkRVbWgrS2taUlRBbElJRUw2Mm1UZEFlclJDN3dWanBmWGRaRTZveTdNV3VRcExMVUord0xFV0FaCno2bjg2T1Nsck0vcEdaTUE4QmZyOXJINXZiU3AvTmw3T1FHNUw0VHRNZnVGekpQZFFBRHJRaVpIdFJSTFZFR2QKb29zT2V6ZFR3TVlDVk4ycEt1Wi9LL0dGVlhyR2EyQ3RkNFYxOHdid0ZoU0E4ZTZyak1Bc2t2Zk15OFZuSlU1dApGMkFRaENRRXVVSXdnV2NVUmVONlVvemJXbzB1WjJmNURvT0MvZHFMa29JR3Ric3dhQkR6ZHcveTJpY0NBd0VBCkFhT0JpRENCaFRBT0JnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0cKQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBd0h3WURWUjBqQkJnd0ZvQVVsZVNDMUh3d1FKa1NEWWcyWkJXNQo3MWRJb1d3d0pRWURWUjBSQkI0d0hJSWFLaTVqTmk1b2RXSmliR1V0WjNKd1l5NWphV3hwZFcwdWFXOHdEUVlKCktvWklodmNOQVFFTEJRQURnZ0VCQUdpbERWeEtqVFlXQjY3bU04WFhidVJhMVNvZFA0SStrVkQyZmZkMmdGTmwKZW9xZ1pHaFhyMEZBNkx2VXBXcmhYWWtoZnZCZ1FBb2owUGZxbllkYTcvdXNUc2RvRDlodXp0dUFxTEhQemprbgpPaEJpVkN1MkFCRzZzL04vMXRXa0xlakFoSHRRQkJWdkNFR0dBL2NTbVlqNldjVk5xdkJ4SmNvTTBId1VvWXd4CkxHdFcxR2txYkdkNVZvVUR0RVZ3THFFdGVJQWgvVWNSWHVPMEpDK1BINGUvd0pkZnNSOFZZaXRDNGVUdTR2K3gKZHdqVVFaMFhXaWR5YnRVRXFVYzJJOUtsaTQ0aGZESDl2K2ErZjhUaElxMU9Xd3Nadnp4MERZUjRGUmhJVkpvbApxT3FqK0tSbVFYWEVrVjNzQzFSdXRxUjU5dWNKa011dkpxMFdQM0hMdklJPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBOVBid204MXkxQUlBZkNsYTZEY01CNGkyNVdRYVI4SWh5Uk9Ibm9ldXl1MTBPUEthCkxtT25zKytUMHZ2SE14NGZDU2R3QkFkUXRIeHNWZXlBbmhHUWdUd0VRNE5zZm5SVUJKOE5TYUg0cVJsRk1DVWcKZ1F2cmFaTjBCNnRFTHZCV09sOWQxa1RxakxzeGE1Q2tzdFFuN0FzUllCblBxZnpvNUtXc3ora1prd0R3Rit2MgpzZm05dEtuODJYczVBYmt2aE8weCs0WE1rOTFBQU90Q0prZTFGRXRVUVoyaWl3NTdOMVBBeGdKVTNha3E1bjhyCjhZVlZlc1pyWUsxM2hYWHpCdkFXRklEeDdxdU13Q3lTOTh6THhXY2xUbTBYWUJDRUpBUzVRakNCWnhSRjQzcFMKak50YWpTNW5aL2tPZzRMOTJvdVNnZ2ExdXpCb0VQTjNEL0xhSndJREFRQUJBb0lCQVFDUXZ4MjdvbkY0anRwRQpnNWRBNGM0TTRaN1krd2FBWWxqZVhOamxOdDEwOFV5Y25kVzNGWkd4eEI0QUxHQXZkMXYxWjhWTHpCckhHMEpVCm4xUDhrdnBsTXRaK0lqbEltMnBOOU1IQVFhSVNJV2w5b21LTGZrU1RkTnE1OFZ4dnMvbnZzZ3hib1F0TEx3MXIKdHVOcSsrdS9FV2NwOXZaN1JvTkRJQloySUJISmh6dGM0MWdPUzlQdTBPL0poTXBjWVRab0RHcm91N3JlUjBIMwp2UGxiblZkWEVzVFNBdHFqZFNUTHVaalNxSHdMV1JPcVIvV3hsZlZGYmExdlorZmtSTGdsSVBHYUhQZ21QTER4CnpNb1NwdlJGYXdoYVpTcExDWHNWZXhRN1pYaFBJUkhsQS9OVngwRVpFdlBSZnJUdWxLUW1La0JrR0lpMEZTejQKL0JPUGdlZUJBb0dCQVA0dVBRdmdBTU5iUlNVVGloN2pIYTFBM3psem93OUFDQUFNQUdoMDljRm9VVlB4RVhZKwp3eDBiSWRoaW80ZFBOR0x2SzdMVG91WmZ0Wmk1SHBqRGxaUzJqVG5CUVlHTFhtbWRVWURrVmRqc08yQTQ0OUQyCndteEl2Q1kvdzVaMXJxU05Qb1I0czljWnRTZ1hoRkdkcTNEclhUR3Avd2Y1V09jcjJSKzZEUnhuQW9HQkFQYTMKMEYvZGhiTGdZUVpGSFcxOGRtNUY5MXNZZUpnTEFIMG9vOWdSc3lManJ6SHZwbHFTSzg1dkJrNTB1SzhwV0M3ZAp2UXZpWHRyeG5EbFU1VHNIVDdYQlJTckdNUENpYWpYQld5WEEwdXJjTUtnYzlwZUh0WkEySjBCa1o2VHppd0FkCk41clk4NVNjUGRnWkpBTDRNamZoMFhsbWYzL1NaVllIclRibVJieEJBb0dCQU01OXo5Z3ExVlBmZk0rL0RQRkUKdnFJMlZtSTlBQlh1aGRGTDdyVHRkNHowNjBVUFRZbExPWVVXdXFzb2p3TG9wSDFQSWFmNGFKbFEzWjFCbm9xcQpNWVdMdkRWVU81dzdGYXNsUThZN09VYXR1eHJUZkxnUkR5ZWErMGJ6ZkRocVNFT2ovMHJ0SitTeUhNcUNPRnQ1CmhJS0tvcjRyQldWNyt1NXFYOHgzZ0JrM0FvR0JBS2F3NUttUXF2K0RXQ3A3VWZtaVNRWVNZYUI3dFNiTThDU2YKNjZ0VnNobVZpYzRNWS9IM3BuOVFSZ3VHRXkzTm1sWDMzUDJGa1o4TjlRWkxWS0dBUEJ2S0hDaGRSYjJmam5FSgpWY0w1TjhnVXd3OGltbjBnNU13dHVuRm9KUnF1cmJDRERRbWpJVmU4QkpEWDA1dnFBMHY4VjZKVlhUbUlkbzBjCm5LeG1BcUhCQW9HQUNIRjhicEFKdjNJdGtOd2hXeHpQUElaN0VmTDdnYlNNSkR1UnB4cHdlckRXY09BdkhWQVkKTXJ2d0tpR3ZnSGlIRFVpOC9lT29lb1pCNXJheFFaZmpsSXZMVS9ndXN3dkgxOFo3LzJGSFlMTmRMOFdKOHd1RgpLM1RoZ2dJZzRRTDlPenFTbzdQSC9WWFhOT1ZFbFFjVCtaRVEwd21KbE9QSmNSYUpvZG9IUExrPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  skip-cnp-status-startup-clean: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  policy-cidr-match-mode: ""
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"
  # If you want metrics enabled in cilium-operator, set the port for
  # which the Cilium Operator will have their metrics exposed.
  # NOTE that this will open the port on the nodes where Cilium operator pod
  # is scheduled.
  operator-prometheus-serve-addr: ":9963"
  enable-metrics: "true"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: c6
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "16"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  # Default case
  routing-mode: "tunnel"
  tunnel-protocol: "vxlan"
  service-no-backend-response: "reject"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-masquerade-to-route-source: "false"
  enable-wireguard: "true"
  wireguard-persistent-keepalive: "0s"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-local-redirect-policy: "false"

  kube-proxy-replacement: "false"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  enable-host-port: "false"
  enable-external-ips: "false"
  enable-node-port: "false"
  enable-health-check-nodeport: "true"
  enable-health-check-loadbalancer-ip: "false"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  bpf-lb-acceleration: "disabled"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  hubble-export-file-max-size-mb: "10"
  hubble-export-file-max-backups: "5"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  ipam-cilium-node-update-rate: "15s"
  cluster-pool-ipv4-cidr: "10.6.0.0/17"
  cluster-pool-ipv4-mask-size: "24"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "true"
  bgp-secrets-namespace: "kube-system"
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"

  k8s-client-qps: "5"
  k8s-client-burst: "10"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  # default DNS proxy to transparent mode in non-chaining modes
  dnsproxy-enable-transparent-mode: "true"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-xff-num-trusted-hops-ingress: "0"
  proxy-xff-num-trusted-hops-egress: "0"
  proxy-connect-timeout: "2"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"
  proxy-idle-timeout-seconds: "60"

  external-envoy-proxy: "false"
  max-connected-clusters: "255"

# Extra config allows adding arbitrary properties to the cilium config.
# By putting it at the end of the ConfigMap, it's also possible to override existing properties.
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: c6
    peer-service: "hubble-peer.kube-system.svc.cluster.local:443"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-hubble-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-hubble-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n\n        # Liveness probe\n        location /healthz {\n            access_log off;\n            add_header Content-Type text/plain;\n            return 200 'ok';\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumbgpnodeconfigs
  - ciliumbgpadvertisements
  - ciliumbgppeerconfigs
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  - ciliumbgpnodeconfigs/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumbgppeerconfigs
  - ciliumbgpadvertisements
  - ciliumbgpnodeconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumbgpclusterconfigs.cilium.io
  - ciliumbgppeerconfigs.cilium.io
  - ciliumbgpadvertisements.cilium.io
  - ciliumbgpnodeconfigs.cilium.io
  - ciliumbgpnodeconfigoverrides.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  - ciliumbgpclusterconfigs
  - ciliumbgpnodeconfigoverrides
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumendpoints
  - ciliumidentities
  verbs:
  - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumexternalworkloads/status
  - ciliumnodes
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumendpoints/status
  verbs:
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumexternalworkloads
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-bgp-control-plane-secrets
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: etcd-metrics
    port: 9963
    protocol: TCP
    targetPort: etcd-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: NodePort
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
    nodePort: 32379
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-agent: "unconfined"
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: "unconfined"
        container.apparmor.security.beta.kubernetes.io/mount-cgroup: "unconfined"
        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: "unconfined"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
          initialDelaySeconds: 5
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.memory
              divisor: '1'
        lifecycle:
          postStart:
            exec:
              command:
              - "bash"
              - "-c"
              - |
                    set -o errexit
                    set -o pipefail
                    set -o nounset
                    
                    # When running in AWS ENI mode, it's likely that 'aws-node' has
                    # had a chance to install SNAT iptables rules. These can result
                    # in dropped traffic, so we should attempt to remove them.
                    # We do it using a 'postStart' hook since this may need to run
                    # for nodes which might have already been init'ed but may still
                    # have dangling rules. This is safe because there are no
                    # dependencies on anything that is part of the startup script
                    # itself, and can be safely run multiple times per node (e.g. in
                    # case of a restart).
                    if [[ "$(iptables-save | grep -E -c 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN')" != "0" ]];
                    then
                        echo 'Deleting iptables rules created by the AWS CNI VPC plugin'
                        iptables-save | grep -E -v 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN' | iptables-restore
                    fi
                    echo 'Done!'
                    
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - CHOWN
              - KILL
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
              - DAC_OVERRIDE
              - FOWNER
              - SETGID
              - SETUID
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Unprivileged containers need to mount /proc/sys/net from the host
        # to have write access
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        # Unprivileged containers need to mount /proc/sys/kernel from the host
        # to have write access
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Unprivileged containers can't set mount propagation to bidirectional
          # in this case we will mount the bpf fs from an init container that
          # is privileged and set the mount propagation from host to container
          # in Cilium.
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-dbg
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      # Mount the bpf fs if it is not mounted. We will perform this task
      # from a privileged container because the mount propagation bidirectional
      # only works from privileged containers.
      - name: mount-bpf-fs
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        args:
        - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
        command:
        - /bin/bash
        - -c
        - --
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        - name: WRITE_CNI_CONF_WHEN_READY
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: write-cni-conf-when-ready
              optional: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
            drop:
              - ALL
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
      - name: host-proc-sys-net
        hostPath:
          path: /proc/sys/net
          type: Directory
      - name: host-proc-sys-kernel
        hostPath:
          path: /proc/sys/kernel
          type: Directory
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              - key: ca.crt
                path: client-ca.crt
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/port: "9963"
        prometheus.io/scrape: "true"
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.15.6@sha256:5789f0935eef96ad571e4f5565a8800d3a8fbb05265cf6909300cd82fd513c3d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        ports:
        - name: prometheus
          containerPort: 9963
          hostPort: 9963
          protocol: TCP
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      initContainers:
      - name: etcd-init
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - etcdinit
        # These need to match the equivalent arguments to etcd in the main container.
        - --etcd-cluster-name=clustermesh-apiserver
        - --etcd-initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --etcd-data-dir=/var/run/etcd
        env:
          # The Cilium cluster name (specified via the `CILIUM_CLUSTER_NAME` environment variable) and the etcd cluster
          # name (specified via the `--etcd-cluster-name` argument) are very different concepts. The Cilium cluster name
          # is the name of the overall Cilium cluster, and is used to set the admin account username. The etcd cluster
          # name is a concept that's only relevant for etcd itself. The etcd cluster name must be the same for both this
          # command and the actual invocation of etcd in the main containers of this Pod, but it's otherwise not
          # relevant to Cilium.
        - name: CILIUM_CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        # The clustermesh-apiserver container image includes an etcd binary.
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --auto-compaction-retention=1
        - --listen-metrics-urls=http://[$(HOSTNAME_IP)]:9963
        - --metrics=basic
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        - name: etcd-metrics
          containerPort: 9963
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - clustermesh
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt
        - etcd.config=/var/lib/cilium/etcd-config.yaml
        - --max-connected-clusters=255
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        - --controller-group-metrics=all
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: IDENTITY_ALLOCATION_MODE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: identity-allocation-mode
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        ports:
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir: {}
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "clustermesh-apiserver"
      serviceAccountName: "clustermesh-apiserver"
      terminationGracePeriodSeconds: 30
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: clustermesh-apiserver
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.15.6@sha256:a0863dd70d081b273b87b9b7ce7e2d3f99171c2f5e202cd57bc6691e51283e0c"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 3
          livenessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 3
          startupProbe:
            # give the relay one minute to start up
            grpc:
              port: 4222
            timeoutSeconds: 3
            failureThreshold: 20
            periodSeconds: 3
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          - name: tls
            mountPath: /var/lib/hubble-relay/tls
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Always
      priorityClassName: 
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 1001
        runAsGroup: 1001
        runAsUser: 1001
      priorityClassName: 
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.13.0@sha256:7d663dc16538dd6e29061abd1047013a645e6e69c115e008bee9ea9fef9a6666"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
        readinessProbe:
          httpGet:
            path: /
            port: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.13.0@sha256:1e7657d997c5a48253bb8dc91ecee75b63018d16ff5e5797e5af367336bc8803"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
