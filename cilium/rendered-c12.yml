---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUpIcFM3VXhWb3FpSmZQWVdmVnMwUGd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN6TTFvWERUSTNNRFl4TVRFNQpNamN6TTFvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF3WS9vQ2lMbEFLZHhDVjk4YWtEYW1mZkJsYllobm9vSzNsMC9wUmZqQ3V2Vm96MnEKcW4yK0xoRkt0WlJsb1dDQTBPcVN4K0V4VWtVYzdIUGRFcEtQbDNZVllkNnVxWEcxZCtPc1hoODFHazBrTmdFcwpIODdwckdyY3E5TmpuL2ZEUXhQRTlJbHRVMU1RdHJPSTkvZUE2RnA5TWlTbUJMdkd6bGQwSFZ3MUQwcXNhaG50CmlYRmRpVzRJMU5RNUlaVGREa3FHL2Z5RWNPbTlObjc3R0pOanBzZDRnRFBJRXNENEw3NXpTdGVRSk10LzJ5TGwKQ3llTlFlVGQ3WXZpYUx1Uy9lVFlBN1Z5eElWV1FaajRpTkhHT0pDMTlvZnlxSi9WUUxnQU80TzVxc2I4OXp3UAp0cmJ1L2RmeG1SbWFHdVFzT2tBODExVG9CaVZva0tQeXlTeFpPUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSnpjY2d6RldaMC9sdm5ielMzYlRNd0QzdVY5TUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQmN5SExkdnVWZnNuRDBRNTc1Q2wrdlJBZEFvbThKdjRHQnBNcU1DOTdZMGNBZzVXN1ZMbVd2CnFrM1hBRXpwWXBVc3cwVEJ2dzBlTFFJRTNjWnU2T2htWHRuSTJnTUdiVXlKbk94SEVGR3NMUzFOKzJiK1ZWOFAKbDNaenVQSHdvejZKRzh2Ynh3RVVDYUtYS2Y2Rno2K3Aza2ZXa1pLamU2alNta3l4SXNIOC9udXZjZlIyV0RZawo2RGhzbFpSUzY2L0tDZ2xrSkZydjdzejhkblNSQkFsSVFtRUlrSWVEckN0NUNjWDFFblNHajQ5YnBWSGljZGo0Ck5mT0JjQTRwbVBPUEVlVmFaUnQrUktJc25md0lxZ0FrelA0S1A2NS8zSjBHNDhjY2NxdE1iRFdjV2JuZXNWWWIKaStwK1VkaUhuaC8zc1VxOGh1NndLMzNWU2JEZndKUkEKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBd1kvb0NpTGxBS2R4Q1Y5OGFrRGFtZmZCbGJZaG5vb0szbDAvcFJmakN1dlZvejJxCnFuMitMaEZLdFpSbG9XQ0EwT3FTeCtFeFVrVWM3SFBkRXBLUGwzWVZZZDZ1cVhHMWQrT3NYaDgxR2swa05nRXMKSDg3cHJHcmNxOU5qbi9mRFF4UEU5SWx0VTFNUXRyT0k5L2VBNkZwOU1pU21CTHZHemxkMEhWdzFEMHFzYWhudAppWEZkaVc0STFOUTVJWlRkRGtxRy9meUVjT205Tm43N0dKTmpwc2Q0Z0RQSUVzRDRMNzV6U3RlUUpNdC8yeUxsCkN5ZU5RZVRkN1l2aWFMdVMvZVRZQTdWeXhJVldRWmo0aU5IR09KQzE5b2Z5cUovVlFMZ0FPNE81cXNiODl6d1AKdHJidS9kZnhtUm1hR3VRc09rQTgxMVRvQmlWb2tLUHl5U3haT1FJREFRQUJBb0lCQUFzc1NtR2phQUtrcDdLNQp6MDIyMXFlQ2xLc1dxMVFpZGNRbUw5RlEwcXREdDc1SGhmMTNhcTN3RTVidHJQd212T2pTVVl5MkpBbXlzWnU0CmlHOVZCSExpdnhNNkxtemJnblVjTUV2eWt6Y2tjczJuUGF2TVh0SzBERzdpc2VKL0E4ZHdjYk1INThhaWlkbHgKL1pzS3IyYzZLZlhtQmF0S1I0eUxvY2s4RkZnQWhxUTB2dTFDUWpSVEJrazJDMUUyZmFRcWJYSGV3WXhWejVYdwoyYkZleWtpM0NQNUNqSlBWQlFDMHJhQTIzWWhsaEpOczN2YU9nLy9URlhzTThrTXRyWk9GcWUwMDFVdHY3MWxzCldOME83RnVPNzF4U2hKcmN4THZBeTZ0bFFSWkdzblllNHBiUkZmZmNScDBLM2xBaDVJbHNkMmJXWTNKVXppZXoKdXhBamxLMENnWUVBeVF4OUVuWTk0Tmx5NnUxaS9YYWY3Wjl0WktYUXZHdVBrcUN4eTF3R01teDUxZlFjeXh3MgpnMmdvd2wzRUdiaWVLdjJ2YlhvcjJGa1Q3aTc4WGVEaUxISlcxd01VZkUvdU5GdUlRTFFIVVRENFhuejZPemlWCkJINk5BWmdUNktzamZ4ZUU3Rk9NU1JqTmtlN05mUGQ5Rk1GZXEveHRPQnlIbFdueDcxL3ErcGNDZ1lFQTluZVMKZmpyWUNDK1gzcDJYT24vL294K01iY2NTQ2JreXB0aWhrRGgrRHE1bnhwaVNmNzdmNzU4U1FGUWJJR1VSYys0UgpZcUNENUI3eWpHVGVFQTltQ2EvUGFWdzBQN21aY3Bzc2d2UGR5RytFcDZYUm1IeDM3Y0VNcGo4NGtHZUhTbU55Cm0yTjFreFh6UkFpcWZiUjV5cE9MR0FxZ25Qdk5rVmNuMkQ3cTFLOENnWUVBcmdqVWY5WEJMTkd2QzdRZ2U1NWoKUkpROFl1S3l0Vmc2dVVmSGdHMFJwRGFJcE8raXVTT2NBTlo2YWY0M0ViamhtZjl1QzB1MWhwdGRpRkk5L1puOAp6MUxPMzJMNEtjQWJTRkZ2dWVyZFpxZ0laK3F4eGUvdDl5MEJMTDhUaE5ZWWJSelQ0S3RXQmJTbHhzeThMcEFpClE0UThTbzdCa05BSmdncHE5cmJHTnRNQ2dZQlJlZXZLb09kRHBZQWVEcGlzdFIyc0xrUzlFWjhMNmRZdHc5VjkKR0wvTFdLcGp3NUpDZXJZS3Y5cEh1OFlQNm5sZmlxYmlwTStVL1FvUGtWUzdtR3VSN2pXeHpkSlQ4cVlnZGQyOApHS1FMbTVvTjFjbzVENFNSNjB5a05LZ2RUS3d6MGpaVDJnaEhMRzF6NHkyQlNzVXNTNlFpdVhpcERMRERTRDJhCnhnblpid0tCZ1FDOHBjUEpzbG5ISlFiK09CVGEwOFY4L2t0SEY3VDZTQ1MrUHdWNStwY25YYkxPeHprS3d4V1gKRUhUanN6Z1hRajBuNzU3RzNOZEY5TUZjdWhSNFoyaktjdkNkVjZCKzQrYjUzdmxKS3AzUExZSVRmZ0pYaC9lZgp2T2FkZjBVYTVjcjNaZ3lRa3ZzS3FTNC9DTkpVNnVxTGhYMHU2RDdnOE5rcFEvQklrTmN3N0E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUpIcFM3VXhWb3FpSmZQWVdmVnMwUGd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN6TTFvWERUSTNNRFl4TVRFNQpNamN6TTFvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF3WS9vQ2lMbEFLZHhDVjk4YWtEYW1mZkJsYllobm9vSzNsMC9wUmZqQ3V2Vm96MnEKcW4yK0xoRkt0WlJsb1dDQTBPcVN4K0V4VWtVYzdIUGRFcEtQbDNZVllkNnVxWEcxZCtPc1hoODFHazBrTmdFcwpIODdwckdyY3E5TmpuL2ZEUXhQRTlJbHRVMU1RdHJPSTkvZUE2RnA5TWlTbUJMdkd6bGQwSFZ3MUQwcXNhaG50CmlYRmRpVzRJMU5RNUlaVGREa3FHL2Z5RWNPbTlObjc3R0pOanBzZDRnRFBJRXNENEw3NXpTdGVRSk10LzJ5TGwKQ3llTlFlVGQ3WXZpYUx1Uy9lVFlBN1Z5eElWV1FaajRpTkhHT0pDMTlvZnlxSi9WUUxnQU80TzVxc2I4OXp3UAp0cmJ1L2RmeG1SbWFHdVFzT2tBODExVG9CaVZva0tQeXlTeFpPUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSnpjY2d6RldaMC9sdm5ielMzYlRNd0QzdVY5TUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQmN5SExkdnVWZnNuRDBRNTc1Q2wrdlJBZEFvbThKdjRHQnBNcU1DOTdZMGNBZzVXN1ZMbVd2CnFrM1hBRXpwWXBVc3cwVEJ2dzBlTFFJRTNjWnU2T2htWHRuSTJnTUdiVXlKbk94SEVGR3NMUzFOKzJiK1ZWOFAKbDNaenVQSHdvejZKRzh2Ynh3RVVDYUtYS2Y2Rno2K3Aza2ZXa1pLamU2alNta3l4SXNIOC9udXZjZlIyV0RZawo2RGhzbFpSUzY2L0tDZ2xrSkZydjdzejhkblNSQkFsSVFtRUlrSWVEckN0NUNjWDFFblNHajQ5YnBWSGljZGo0Ck5mT0JjQTRwbVBPUEVlVmFaUnQrUktJc25md0lxZ0FrelA0S1A2NS8zSjBHNDhjY2NxdE1iRFdjV2JuZXNWWWIKaStwK1VkaUhuaC8zc1VxOGh1NndLMzNWU2JEZndKUkEKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLRENDQWhDZ0F3SUJBZ0lRTTRJeGQvTGY5emtaRFE3TGpqZFpyakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek0wV2hjTk1qY3dOakV4TVRreQpOek0wV2pBVU1SSXdFQVlEVlFRREV3bGhaRzFwYmkxak1USXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzlRQTJ4T3hZOVhUc1RiQ0tzNUlGYVhFSW51K1dMaU5KMkh6cHJ0bGdTYWVwRW1lWWsKQTNObmVRTHZQOC9tOFhnREYvd0J3dVl3N3liM3N0MXdFalc4RjZ3YTNYeW5TSDBnQStOL1l4WEVPZ0dZUDRnQQp6VmYwMEI2K29hSG9oYTVRRXNoNjBwUVgwaXVyblM3TGZ6VEYxRHdwYUw5NUF1dmFRSzBvV05oOXVjRU1NTGJkCk9kNFh6eS9LOFBTYkhVT0hHSEYzWUpYK3R5bUNHbzBPdGRPSUFVRVhGcDRYeFFid0lWQWFmN3F6TmlDS2U3TEoKeGpVT3ZqTGxldGlmdHdvM09wTEZUSEZ0Y3QydHRjMHVrUmVVZ2lJbm1KNjZuTGhzSzJBTE5kaDZsK1N1M0NiWQplZEY2U2tKL0I5YVhZUVlMOTZwSWRPeGxwWnl1NW1kR0FtREJBZ01CQUFHamRqQjBNQTRHQTFVZER3RUIvd1FFCkF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXcKQURBZkJnTlZIU01FR0RBV2dCU2MzSElNeFZtZFA1YjUyODB0MjB6TUE5N2xmVEFVQmdOVkhSRUVEVEFMZ2dscwpiMk5oYkdodmMzUXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSmNRc2JhRkJVa0JYWWhoNWI2RzlRRXdMcDRyCnNvU3BCeUdDZ1hycDdYa1hnRDhlZlZlaWh6aG5mM2g2MDRDdmlHemkwaFpmZzRSRzlJVnJZUGRGblNXdkZOT0IKMzdrVThOREZvOU1rOXpkZTFsU0U2amR4QnRQSXg5VHpVUHFuZnV4SDFEQjNJY3RSRlRBdXk1TDhlb3g4V2J0SAp4TGhlL2hkbGFYTTEzRVQ0cWRjbzQzVm5aclc5SStWUm5jeVgrYlY2NlZZYU8zMVpYVE9UeEg3WXJZSTU2aEhiCndMSmNWWFk0U3dmNEMzZDd1RGU4T1NDUERqZEUwS04xNUNEb2w5a09Zb21KWFFzNWtFSlpFY2VrQXhUVGdXOXEKVm55MW9IeUhvTE1jZitXa0lQVUVSK3lGbnh1YXlCZXZpdE9GNWRFcmFlck15ODdpaHZvWUVQWDYxb289Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcGdJQkFBS0NBUUVBdlVBTnNUc1dQVjA3RTJ3aXJPU0JXbHhDSjd2bGk0alNkaDg2YTdaWUVtbnFSSm5tCkpBTnpaM2tDN3ovUDV2RjRBeGY4QWNMbU1POG05N0xkY0JJMXZCZXNHdDE4cDBoOUlBUGpmMk1WeERvQm1EK0kKQU0xWDlOQWV2cUdoNklXdVVCTElldEtVRjlJcnE1MHV5MzgweGRROEtXaS9lUUxyMmtDdEtGallmYm5CRERDMgozVG5lRjg4dnl2RDBteDFEaHhoeGQyQ1YvcmNwZ2hxTkRyWFRpQUZCRnhhZUY4VUc4Q0ZRR24rNnN6WWdpbnV5CnljWTFEcjR5NVhyWW43Y0tOenFTeFV4eGJYTGRyYlhOTHBFWGxJSWlKNWlldXB5NGJDdGdDelhZZXBma3J0d20KMkhuUmVrcENmd2ZXbDJFR0MvZXFTSFRzWmFXY3J1Wm5SZ0pnd1FJREFRQUJBb0lCQVFDd1p5UmNMMWRybTV1VgpYeFp6VWd2QXpuNWJ5eWtNQjEwbC9iWFc4UURuS1JMVkh4OEdNckUvb2V5NlZpRFVnLy81NGtGazR1YnVkZjA4CnBkMEN1ZmFjZlBSUGxtUzdDVGFZd1FjdGxvNlRlZjVDaS9XWnljNVN4Q3ZrUllWRjJGWEREYjhSdlhlTlBMcTQKSEt1aHc5RE5GaWQ5OGNXSVp0Q3hmOWZuNCtqb1JzQkJoWE1CVTJOaGpNbEdjRmtob0J5SUZDeE1lbU56Yy90Uwpzc2FtSytqTEU3aWJwSkVuVXZEbDlTYTloaTVwM25QQm1wYTMxTys3OXQvMmpxTS9teXJrQVhOT05nM1NOb3dQCmp1ZU5SQWF1alEyQW1LaytyVXNsTzMxSjBRcGwvZEIzTVJGTDJFTFJJN2wraGI0SzMrVUhSODZaeTIrTjlTcE4KajFvVlREeUJBb0dCQVBiV1FoZ2VkRnhaWldYVVdnZkdpUWhjMElyQlkxQkkwRTUvcVJYWVorQnZyQ3E2S2hKVApac3dMRFdlMEZsRDdKcTh0V0xHM2dBUVZqOVRQdDhLRWNCMkNMN2p6bFA5VWlyZTVVK2I3U0pya0xzajRHSVp2CmtNemdWSzAreTYvUzYvTnhlYk5PRXgxVjl4Wm1TS2VxTDUwQ1ZpM0grVHBJTGZwVnhBcXNUOEZyQW9HQkFNUkcKaVd2a2JXSGZ2SjVNdGFMZGRVTG9vcHBGTG80UlFzbU1YKzBkOUU2WEVyRU5SNHdlbWZBWWpDVE5OcXdxaDNsRwpqQ3dLY293WGRkeGFPZzk1MDBqNCt1M2Vhc0dWdkxUaG9Sa3N6RG14dDg2Wjg0UGhBd2M2UnU1UlA5VURYTnpFCnI4cmFqY3pHOW5hbDB5M0l1ZHZ1d2JhUHFXS2Uyd2t4VlNkNkJmV0RBb0dCQUxOZHVJT2NSY1FCdGh3TDlpd20KU2RlSTBvV3h4OEJFV1JKaDAvV3EzcmtKalJzelVuVWtvOU5yeUo3dUR6VmplNVhhSnRSbFdxSWRKUHBvd3NpWAp3bnkrNkh6R2pDUUtSQThEbmdOLzRCK2w1cFZsS3pVdGh4UkpnMTZzL2doVEJlQk9PamhnYUtWdG5YSnFleXRUCkVPeFFFVjJOTGY3N0NtWVp3cTVhemszbkFvR0JBSVpiL3ZDVHcya1BudkFDZFFpVGJ4VXBhVDRRQThtTytWZzkKTnVGNzh1VGx1QTdwbDBQTkl2WGY1L2U5WHlMR1RrenZ4VDdVdkFzNGVCOHF5TG9WWEZTRTFFbUhTeTlQMElsRwpOMkNqY1A1QnNTREY5SlFmc1ZIK1M5WVNXbzc0S1ZhYmNmZDhXenVHSyt1V29wU2g1dEV1aFA3ekl6SDJxdHlGCkg5VFJURWovQW9HQkFNd1kvM2N3WS9pWlFZTVFMZHR4bVRPbDh1aEo2UG9KYW1ibGRxMjV0SEMwVjBrQ09PSnEKMkkrdUVqY2RhSkpIUURJMG1GdHROYlc5dlFmNG15ZFRyY3JLT3gyQnZmbXFoaGdaK0FYb29GSmFYWm1kSUhlSQppUDFCeDN3ODVVUGkwZ0JIZTRtdFl0YjBDUVd2RnlVUUpQNHp4YnByVnhnU1dNbEJ5MlVJdzBoWgotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUpIcFM3VXhWb3FpSmZQWVdmVnMwUGd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN6TTFvWERUSTNNRFl4TVRFNQpNamN6TTFvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF3WS9vQ2lMbEFLZHhDVjk4YWtEYW1mZkJsYllobm9vSzNsMC9wUmZqQ3V2Vm96MnEKcW4yK0xoRkt0WlJsb1dDQTBPcVN4K0V4VWtVYzdIUGRFcEtQbDNZVllkNnVxWEcxZCtPc1hoODFHazBrTmdFcwpIODdwckdyY3E5TmpuL2ZEUXhQRTlJbHRVMU1RdHJPSTkvZUE2RnA5TWlTbUJMdkd6bGQwSFZ3MUQwcXNhaG50CmlYRmRpVzRJMU5RNUlaVGREa3FHL2Z5RWNPbTlObjc3R0pOanBzZDRnRFBJRXNENEw3NXpTdGVRSk10LzJ5TGwKQ3llTlFlVGQ3WXZpYUx1Uy9lVFlBN1Z5eElWV1FaajRpTkhHT0pDMTlvZnlxSi9WUUxnQU80TzVxc2I4OXp3UAp0cmJ1L2RmeG1SbWFHdVFzT2tBODExVG9CaVZva0tQeXlTeFpPUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSnpjY2d6RldaMC9sdm5ielMzYlRNd0QzdVY5TUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQmN5SExkdnVWZnNuRDBRNTc1Q2wrdlJBZEFvbThKdjRHQnBNcU1DOTdZMGNBZzVXN1ZMbVd2CnFrM1hBRXpwWXBVc3cwVEJ2dzBlTFFJRTNjWnU2T2htWHRuSTJnTUdiVXlKbk94SEVGR3NMUzFOKzJiK1ZWOFAKbDNaenVQSHdvejZKRzh2Ynh3RVVDYUtYS2Y2Rno2K3Aza2ZXa1pLamU2alNta3l4SXNIOC9udXZjZlIyV0RZawo2RGhzbFpSUzY2L0tDZ2xrSkZydjdzejhkblNSQkFsSVFtRUlrSWVEckN0NUNjWDFFblNHajQ5YnBWSGljZGo0Ck5mT0JjQTRwbVBPUEVlVmFaUnQrUktJc25md0lxZ0FrelA0S1A2NS8zSjBHNDhjY2NxdE1iRFdjV2JuZXNWWWIKaStwK1VkaUhuaC8zc1VxOGh1NndLMzNWU2JEZndKUkEKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lRVE1uN1p1ZzE0RnU3QzF1VTdoM1QrakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek0wV2hjTk1qY3dOakV4TVRreQpOek0wV2pBUk1ROHdEUVlEVlFRREV3WnlaVzF2ZEdVd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3CmdnRUtBb0lCQVFDY0tLSFl2MXBzb1BBeWFvMUwxTWIvVEdPRFc1SDdPbkZ2RHlEQTlRVzlMdVlqeGlYUmRNTjMKV3RLa05QVXpkVlVuYURaUCtDUzc3ekNST1BzcVhncDN4Y1FxK1pOTk1USWJscENZWTVUdEhlaUhQWFdKR2Y4ago1UC9VY2Y5MGVnNWYyTlIwQjN3dzZKMW16NVpzNFJJV3hmb2RZSEpmVlhzbFN5UVQrZ0V0UXlDQWl1VFdab05zClpKeXRPVGdkWVJ4dHpnY3BLTTJHb1VTRUlMaHdjVnVzbEs4alB6WVJaVFJQd25wTnFqaldHQWkrdFdTcTMzMjUKUjJqMXVucGljaWNmL0lYR0FueENZQVBhSVpKNU95S2VkZHVpN0diY3VKaVZiMlBEMlpMVFdSMEVBS3JxWnJqagovMjU3MWpPRWNncHMrVG9RekVuMC9FRUcrRWc1Qy9PbkFnTUJBQUdqWURCZU1BNEdBMVVkRHdFQi93UUVBd0lGCm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWYKQmdOVkhTTUVHREFXZ0JTYzNISU14Vm1kUDViNTI4MHQyMHpNQTk3bGZUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBbldOaExCVG9RaHNZNFR2YzZ6ZHpkR0dnTkdJVHhXQkZ6Y1VOY05neGdFbWFmajk3L0ltQ1l2b2ozOEt4CklnSWk4Z3lPZUJ0WmVEUG8rV0V5dWZxdVR2bFNQcGFsekZ2NHFYbWMzVi96NUc5MkpCQWlYK1JYbWRkR2ZEcU8KSUEvK2VyTkQvVEl1YlVkcUlXY0tkTzNtWEltQVI2QkdmU0JieXU0bVVROCtzeGdJZVFIM24reTNYc21tUDFHdgpLWnU2bHpRazFqMnY2ZDYzWVkxT1V1MFZSTklnNkhrQnIxYjdSdmd5M0VVNzdqaFJuT3RiL0VlQ001OGdpdEo3Ck50RjgwczNUMks2K3pzek5DSitZamxNVE8xM01GZklTaVJTTW1YOGVWTUNyckcxd0FYOFM5V0RjcUR5ZFE2dC8KWktGVzdIU09CYWdpZTB5TU1idzBhQnUrVnc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBbkNpaDJMOWFiS0R3TW1xTlM5VEcvMHhqZzF1Uit6cHhidzhnd1BVRnZTN21JOFlsCjBYVERkMXJTcERUMU0zVlZKMmcyVC9na3UrOHdrVGo3S2w0S2Q4WEVLdm1UVFRFeUc1YVFtR09VN1Izb2h6MTEKaVJuL0krVC8xSEgvZEhvT1g5alVkQWQ4TU9pZFpzK1diT0VTRnNYNkhXQnlYMVY3SlVza0Uvb0JMVU1nZ0lyawoxbWFEYkdTY3JUazRIV0VjYmM0SEtTak5ocUZFaENDNGNIRmJySlN2SXo4MkVXVTBUOEo2VGFvNDFoZ0l2clZrCnF0OTl1VWRvOWJwNlluSW5IL3lGeGdKOFFtQUQyaUdTZVRzaW5uWGJvdXhtM0xpWWxXOWp3OW1TMDFrZEJBQ3EKNm1hNDQvOXVlOVl6aEhJS2JQazZFTXhKOVB4QkJ2aElPUXZ6cHdJREFRQUJBb0lCQUgxQnVsQjViTGFsZ1FWdgpvbGFwSGRXNkdEaE5ReE1aRmRQWGRwWlA4NEtFRStXdUVyZW55UUg3ditvbThHZU9QZmVXQjdxdGVBbW5HblhpCkZ0VXRDWWg1QVpqWEIraHJCWjVMYjBCTTREQXlSVW4xYWtuR3FIaktQc3JSaGU2UDJPZllyTkZGRDhETFZUWWEKWExhSThsR0NDOVYwZjBrbzc5WkNKM1krbXFNS2JDRFdxV2sxNksyUVNBOVFJZzdNMWRWcld5U2ZqejVvdmxNVwo3eFp4UURwdk5QOTI4ZDNNMXg5eE5vUDM2MnNQUFJ5UW8wUHlQbnhpb0JKMVdjM3NrNjdXQXRsREpBTllORnY3CmpneFM4cTI4M2RIQ3lDNlNTSUU5NzJ5emRxVS9Ncm9IMk9WWVVyaVYwNkgyMVJoaUpsUzY1eU9ycm94azNRTEwKR2ZkM3JJRUNnWUVBd1dnV1RnOStTYmpZT24yZVpmVnBEaUJyRWltSXp3RW9oZXRmc0FQNXMrMmJnYkQyamdheApvMmw0MVFMbW9NWGhrb0VrakVXWkdBZ21YQ0wvOGdvQVRhV0FFR1dpTWZveUNnWkV4dnB0SVB6bkNJWkkrU293CnVYS0dtYjJNMVZGL2hDeGFyZmIyaFFxQ3pmSUY1bHFXMWtQcXlHV0hLY21qMFFmeCt4ckpCQThDZ1lFQXpyS0cKWWQ4R3JxTzU4REdYT3VJZTZoa3M5UCttbVRMZzVlTkIwaXFmKy84YVM2VnErUTIxSTYwc0MvYUEwamIyelV1awpGNGFpMWRLZzVGdmdpUy9IZ3o3VTR5cXBVQTRtSllUdWpPT0NVRk0ycEpuM2ZpR3JRRDUvL0d5L2YxTTUrMTBtCkNFTkNiT0dXYjdsQStjR0hEdlc5eDZpYmFML3JNSDZkY0hFS251a0NnWUVBbjdrQktxZzY2RkZDS1ZQU3Uyc24Kdm1YaFp0ZHNSMkF5Z2g1M0lKcTMzZk10aUxhSGQ1VnBvSVdiSjNkRTFhTjEvWkt2aHpSM0VWU3hzVWVxVGM0YQpvQVU4dE0zcVhCRyt2MjZiNENPeWVockNCZFU0Y0tWNkpiekNFamRyRmtRKzVmM25TV0g2QnJjK2ZTd1IyVUlZCjdZeWJXYklYSk5pRWREMTJocVNCTzlzQ2dZQURrRngwejQyajhUckJnM2xpRUlnTDdVY3pLajFMSXU5eHgwdFoKUGxibjEyd3lwYldFZWRJSHZYS20raWNhZU13a21ndElSSkFHTTgyR1luY3FwbUpBUnhNUW42bXZzYTdDc3RvUwpIOUlkWkhIcXdLVGR6ZUxRQnNQYUxGM1k2aXh6d3hWbXl4SVlJb09maFlnelJqejM2eERNb29HYmVzT3BZR1dDCmpOQnNFUUtCZ0cyNVFLc1lLZXhPb0RZZCtHWmhPNXdjczd1Yi9GenVmdFhmWjRvNjR5ZEZ4aWZIcTFQRHdpcXQKSjVKRGp4ZEtKYkltaDRNd09MS2V4cGR3ODh0TEhWc3VhNmUxSEt4SjUyVlV3WHl4MjBLemVjSnRWYnAxbWFsSQpmYSt5aG41K2JFYnRCL3V3azJlMGlyUXhxeGlicGZGdFpWUmFkYlJhcEZqeWppSGdTMkg3Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUpIcFM3VXhWb3FpSmZQWVdmVnMwUGd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN6TTFvWERUSTNNRFl4TVRFNQpNamN6TTFvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF3WS9vQ2lMbEFLZHhDVjk4YWtEYW1mZkJsYllobm9vSzNsMC9wUmZqQ3V2Vm96MnEKcW4yK0xoRkt0WlJsb1dDQTBPcVN4K0V4VWtVYzdIUGRFcEtQbDNZVllkNnVxWEcxZCtPc1hoODFHazBrTmdFcwpIODdwckdyY3E5TmpuL2ZEUXhQRTlJbHRVMU1RdHJPSTkvZUE2RnA5TWlTbUJMdkd6bGQwSFZ3MUQwcXNhaG50CmlYRmRpVzRJMU5RNUlaVGREa3FHL2Z5RWNPbTlObjc3R0pOanBzZDRnRFBJRXNENEw3NXpTdGVRSk10LzJ5TGwKQ3llTlFlVGQ3WXZpYUx1Uy9lVFlBN1Z5eElWV1FaajRpTkhHT0pDMTlvZnlxSi9WUUxnQU80TzVxc2I4OXp3UAp0cmJ1L2RmeG1SbWFHdVFzT2tBODExVG9CaVZva0tQeXlTeFpPUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSnpjY2d6RldaMC9sdm5ielMzYlRNd0QzdVY5TUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQmN5SExkdnVWZnNuRDBRNTc1Q2wrdlJBZEFvbThKdjRHQnBNcU1DOTdZMGNBZzVXN1ZMbVd2CnFrM1hBRXpwWXBVc3cwVEJ2dzBlTFFJRTNjWnU2T2htWHRuSTJnTUdiVXlKbk94SEVGR3NMUzFOKzJiK1ZWOFAKbDNaenVQSHdvejZKRzh2Ynh3RVVDYUtYS2Y2Rno2K3Aza2ZXa1pLamU2alNta3l4SXNIOC9udXZjZlIyV0RZawo2RGhzbFpSUzY2L0tDZ2xrSkZydjdzejhkblNSQkFsSVFtRUlrSWVEckN0NUNjWDFFblNHajQ5YnBWSGljZGo0Ck5mT0JjQTRwbVBPUEVlVmFaUnQrUktJc25md0lxZ0FrelA0S1A2NS8zSjBHNDhjY2NxdE1iRFdjV2JuZXNWWWIKaStwK1VkaUhuaC8zc1VxOGh1NndLMzNWU2JEZndKUkEKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURxRENDQXBDZ0F3SUJBZ0lSQU81NGZubXZpT0ZqQW0yWS9RWUhoMk13RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN6TkZvWERUSTNNRFl4TVRFNQpNamN6TkZvd0tqRW9NQ1lHQTFVRUF4TWZZMngxYzNSbGNtMWxjMmd0WVhCcGMyVnlkbVZ5TG1OcGJHbDFiUzVwCmJ6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUpyNmh0MGJBVkVTMkt4WGFsQmcKTDRuL2w1Y0ltNXZHUVVOay9rRlAwVkRjTlYrUVhsa1YvcTJ2V1dCZEo5aUJOMndHUUtGZTVzV1RJSzhEQU9OUwp2WHZQTExsK1VtSlp0MldUZEFhSGpWcXlBRnVDRk5aYjI4b1ZTa1NDVGxTT3I5YjFJMHBPMTI3VGp1dUs4TkZ2ClhEd0h3UzJJUXIyVFBaZkFiQ2U4N0hiUFFNcC9mU2ZZVGV0RkFKWG9obHBDUjRFSWlxRW91SmVZbUpmQnlrUFEKd2ZZL3JibGRSYm1BVk1sYjN4N2dnUllEUFRVRGdOUVduV1FCWlFHSWxhQnZxVFlPNGhOLzNFUlhickFmQ0VZTwpjUE1HYkViNU53SG4yL1VOZDVKQ2lxTVhKVG41S29GUC9aQnR5K0VhdmtWdmZLWkNoUHJtdnNjR3RGUHpRM0ViCnI1c0NBd0VBQWFPQjNqQ0IyekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUgKQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3SHdZRFZSMGpCQmd3Rm9BVW5OeHlETVZablQrVworZHZOTGR0TXpBUGU1WDB3ZXdZRFZSMFJCSFF3Y29JZlkyeDFjM1JsY20xbGMyZ3RZWEJwYzJWeWRtVnlMbU5wCmJHbDFiUzVwYjRJUUtpNXRaWE5vTG1OcGJHbDFiUzVwYjRJbFkyeDFjM1JsY20xbGMyZ3RZWEJwYzJWeWRtVnkKTG10MVltVXRjM2x6ZEdWdExuTjJZNGNFZndBQUFZY1FBQUFBQUFBQUFBQUFBQUFBQUFBQUFUQU5CZ2txaGtpRwo5dzBCQVFzRkFBT0NBUUVBczFVNytpcUREeG5ERFBuY0pGMUtLTVVLMXpsZE00VXNIc0h6RUFiNXBJQmlGK0IzCmVaU1hCMXdObmFvOUZDWGpaMGdyVUdjeXB2Q3Yxcysxdm1YYWUwNWNMRTN5R2Mvc2loMERZcndBTGR2YStOT0MKUHFpOVdJbmZ3VHVBVUNsaVJWaEtPcC9OTzFIZkJkUVU1V3Z4L2pVczYxZ3dPeDYvQ1NpVTFmMlVaNjUxb1pPcwpCRlVIamNjcGovb3hscEFkak9vQThualRycHZzcDExUHV4MUp3dEZlRGZEUVkwTVZmUzRQQ1MvbTNhUUlieDcwCmdYYmVqQjBIbWE0RlR6cE1hZTNHQmxPTy9SQWl2Q1VkNTJGYlpUM1VxN1ZoTENoeGlIMWozaHRQT0VxWitiOUwKTEpOUmIrMWpWVlRKdWFnZnJOL2JIREF4RjVqYjVUNnplVTVJRkE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBbXZxRzNSc0JVUkxZckZkcVVHQXZpZitYbHdpYm04WkJRMlQrUVUvUlVOdzFYNUJlCldSWCtyYTlaWUYwbjJJRTNiQVpBb1Y3bXhaTWdyd01BNDFLOWU4OHN1WDVTWWxtM1paTjBCb2VOV3JJQVc0SVUKMWx2YnloVktSSUpPVkk2djF2VWpTazdYYnRPTzY0cncwVzljUEFmQkxZaEN2Wk05bDhCc0o3enNkczlBeW45OQpKOWhONjBVQWxlaUdXa0pIZ1FpS29TaTRsNWlZbDhIS1E5REI5ait0dVYxRnVZQlV5VnZmSHVDQkZnTTlOUU9BCjFCYWRaQUZsQVlpVm9HK3BOZzdpRTMvY1JGZHVzQjhJUmc1dzh3WnNSdmszQWVmYjlRMTNra0tLb3hjbE9ma3EKZ1UvOWtHM0w0UnErUlc5OHBrS0UrdWEreHdhMFUvTkRjUnV2bXdJREFRQUJBb0lCQUcyWlhJVERFMVJOZXJPdQpnajNqTjl0a3lNU0R6dUFEL2FWMnA2UnltUG1STWFHcWpENStJb1NiN0I0TTR4L21pZFk0T2I2bFNaaFI2eHc1CmlJZzZ2RXZ4Z0pTUnRCdGZqU1lsZURraDVhSk5IWm1aVGJrbWJ6SGppb2tXaWVTY245ZnB0cEpYWFYwLytlT3oKZDRqMU13bzFCYlY0bHBKUXJZOURBbm03enBKWjk2SXozUGFJeTlKSHd3MW84aTVIVlV5dldFd1R6S3BmeUp4bQpRbTRkL2piTENLSVVqcTdFeWwvdDlFQzlDR0g0T2wzMnlGWjhkU290RUs3OFh1TTh0MzJ0Mzl0Y2NRamVlWlFBClJVL1lLNzYzdTJ3WHMwRXlPKzIrT0g4WWdyYktQenBoeC9ZbnJROWxHSnQrQUIrQW5hZkRNRVNyVXcxdzc0U3EKYUxhZWJza0NnWUVBeUNPWHdoOW1vWVU1L2tBekRCMy81NmpVOUI5T2t2YkIyVUVBY0R0TzJWbGxJQ3lVdVJNMgpjNE5KWXhPMkpsN1RIUTYzQjJLL0hGVmNaaXhhT1J0ZTJtV1lQWWVySlVqQjhXOVA3TDFOVUgwTHpUUVpzOGMvCmFMVkhtTGVMaVNuUHFHYW0vcjJMendSN295bGxJYzF5V1BLTjNkRTlmUWUrbnVRWFZSa2FQSFVDZ1lFQXhqd2QKbXp5N05rYnM5WXY5SkcwQWRBRmhyVENzQnRtZnZuV3FjT0hRQ1pWK3QwMUVYSEdZeWVONE1FMEZhdTdHREtsVgpSWkJtNE1zY3dKZlVxa2hSNEhXNTMxbEFCNWQ3dkdyNG1yRHp2elBxS1JIT2JvK0NFbVk0dHdGMmFLeVNOektZCnZsT3pkZm9SYnZKQmRXWFoxbXQ5Mi9POHF3blZQOVVZVzBqYitjOENnWUFRaXVpYlVnOGdvS3QzZVlUK3BtZ2wKbE0zdFU3MGg1cVdGT0pzNXE1MUwxOWpFL1FwWjlkMlZWSyszTWNUbmpRVDBMT2d5QXhaNjJBOW9IcGhpaWdHZwpHYStvdmxNR0pPcHE4MkZ1MXdMUitWUUZaUjRPdnhSZHFrWTl1RVlmVTBabnkveFhxQUVyWGxwOTFRa1g3eXhaCmI4c01INlJ1ZGpwcVZiNGIrWlF5bFFLQmdRQ2dlc1JCQ3c1SDUyMG5iM2UwU0dYb2c4SE9VaXZCcytZRmF2NWIKT2dPUDdxMVJ1VVNSVGdreHoydGFOdEFlL0VQcXRoN3BIUGljSFBJZTNBdDIrdXNGdW1pSjdwZk9UWTBIUU5ZWApiUTgyaDlHV0ErdEpSL1kxN1BrVzlpRWtwaWdNZFhLQUNnU3JpcEVZYnhnYzhTSkQybXRlWjlnaDR1ajNMd3p6CndXMExzd0tCZ0FEend4MTFqczdPVDZIc3NybEZpMys4TnJkaSs5Z0lXMFpFU0lWcDVwcHBaS3Z4NDBZUHRBd3oKbUVDQjlkRFJKYnp4eXBWbU56TWlTVTN0VUdVcUdtMUkwYnQ2SE9JU3RmamNKeWQ4NzhmKzU1OTd5VXZGMklHQwptZ1ZRUitLSlhhNE8xWjl3N2h0VDJsU1hpSWMzRForRno0dWxRWE9IYldMblk5TVNGYjZGCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUpIcFM3VXhWb3FpSmZQWVdmVnMwUGd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN6TTFvWERUSTNNRFl4TVRFNQpNamN6TTFvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF3WS9vQ2lMbEFLZHhDVjk4YWtEYW1mZkJsYllobm9vSzNsMC9wUmZqQ3V2Vm96MnEKcW4yK0xoRkt0WlJsb1dDQTBPcVN4K0V4VWtVYzdIUGRFcEtQbDNZVllkNnVxWEcxZCtPc1hoODFHazBrTmdFcwpIODdwckdyY3E5TmpuL2ZEUXhQRTlJbHRVMU1RdHJPSTkvZUE2RnA5TWlTbUJMdkd6bGQwSFZ3MUQwcXNhaG50CmlYRmRpVzRJMU5RNUlaVGREa3FHL2Z5RWNPbTlObjc3R0pOanBzZDRnRFBJRXNENEw3NXpTdGVRSk10LzJ5TGwKQ3llTlFlVGQ3WXZpYUx1Uy9lVFlBN1Z5eElWV1FaajRpTkhHT0pDMTlvZnlxSi9WUUxnQU80TzVxc2I4OXp3UAp0cmJ1L2RmeG1SbWFHdVFzT2tBODExVG9CaVZva0tQeXlTeFpPUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSnpjY2d6RldaMC9sdm5ielMzYlRNd0QzdVY5TUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQmN5SExkdnVWZnNuRDBRNTc1Q2wrdlJBZEFvbThKdjRHQnBNcU1DOTdZMGNBZzVXN1ZMbVd2CnFrM1hBRXpwWXBVc3cwVEJ2dzBlTFFJRTNjWnU2T2htWHRuSTJnTUdiVXlKbk94SEVGR3NMUzFOKzJiK1ZWOFAKbDNaenVQSHdvejZKRzh2Ynh3RVVDYUtYS2Y2Rno2K3Aza2ZXa1pLamU2alNta3l4SXNIOC9udXZjZlIyV0RZawo2RGhzbFpSUzY2L0tDZ2xrSkZydjdzejhkblNSQkFsSVFtRUlrSWVEckN0NUNjWDFFblNHajQ5YnBWSGljZGo0Ck5mT0JjQTRwbVBPUEVlVmFaUnQrUktJc25md0lxZ0FrelA0S1A2NS8zSjBHNDhjY2NxdE1iRFdjV2JuZXNWWWIKaStwK1VkaUhuaC8zc1VxOGh1NndLMzNWU2JEZndKUkEKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTVENDQWpHZ0F3SUJBZ0lSQUo4NVprLzFwVDFCcHJtK0E5U3hORW93RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN6TkZvWERUSTNNRFl4TVRFNQpNamN6TkZvd0l6RWhNQjhHQTFVRUF3d1lLaTVvZFdKaWJHVXRjbVZzWVhrdVkybHNhWFZ0TG1sdk1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXdwVy8vZ3pJa3IvQnA5bzl0a3Fycy9yV2hTOGIKWnQ5Vk96Tno5UG9GbXFTMFJtTlFSVGdvOVFReXFHc0x3bjJkSk1hcUROVFUyZnpxZTN4c3VNZy9TQzFDUFQrcApxQW8zSUpEbzZhM0UwdG0wQ2dlM3FTaFVXMllJeGd2ejMvaGpCVkFWWU1wS1hJMTRzOXEwRUJvM0p2TVhQUjNwCnBRNnQxd0RIVzdVZDdMa293N0tPUUc2Z2xrOER0RE9mcjNZczhnWnJ6Z3RDYlNCUU84QStITUJrQmNnaERTTmMKaHExU2Fqdkh0aGdPa1luUTg5WUZ0U0tpbzZkR1pERHIvTUtBZjJtbk51amdmNWg2R2RxSHdyUjg0QVNuVkFxVgpxUGw4Y3ZmRzMvekhTTDUxL2ZtQ1ZNRTlwdGx1V0tNTktVU2R2UTdnNjFBdTdhc0t6MHNaUzZOYkN3SURBUUFCCm80R0dNSUdETUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUIKQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCU2MzSElNeFZtZFA1YjUyODB0MjB6TQpBOTdsZlRBakJnTlZIUkVFSERBYWdoZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d0RRWUpLb1pJCmh2Y05BUUVMQlFBRGdnRUJBTE5oVlpQckhUNTEvcHRDK204d1loYTd6UnJkOWlsRDI2cVpWaDhyalZwcisxMTMKVzVlOFQ5MUlSSEhVdWhCN2ExbU1acTJJb2R6TzZjRzErd1FiRVRQQmUrVFcyTDk3UVJRYUNvWWVqQTI2S2dLTQplbnZKTEZ0MUg1TGZNdUY1N2JWd1YzS2thRjVZTEJFWkNKOWM2WWpsditRZ1NMMGlZby9VRFVkSklYWk9UY1lqCm9aNE5VUVhzcjV1RGpTZzhCOVo3bU1RUS94dFF4bStvaFp4YVFCUnNNT1NxZm1GbFpNOTJiN1NrNFJUZ21KQXUKdllGN1FNcjE0N0FBd3NXVEcvVk1LSmJ4QmNYYmNJVFB2VGNyKzlDSDhQTFRDN1RFbkpUM28vU2NZR2dUSStCVgp2T09yVmJpZG1jNnRCSWN0TEZSZHV0OENYRUd1Sk51azJ3MDR3bW89Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBd3BXLy9neklrci9CcDlvOXRrcXJzL3JXaFM4Ylp0OVZPek56OVBvRm1xUzBSbU5RClJUZ285UVF5cUdzTHduMmRKTWFxRE5UVTJmenFlM3hzdU1nL1NDMUNQVCtwcUFvM0lKRG82YTNFMHRtMENnZTMKcVNoVVcyWUl4Z3Z6My9oakJWQVZZTXBLWEkxNHM5cTBFQm8zSnZNWFBSM3BwUTZ0MXdESFc3VWQ3TGtvdzdLTwpRRzZnbGs4RHRET2ZyM1lzOGdacnpndENiU0JRTzhBK0hNQmtCY2doRFNOY2hxMVNhanZIdGhnT2tZblE4OVlGCnRTS2lvNmRHWkREci9NS0FmMm1uTnVqZ2Y1aDZHZHFId3JSODRBU25WQXFWcVBsOGN2ZkczL3pIU0w1MS9mbUMKVk1FOXB0bHVXS01OS1VTZHZRN2c2MUF1N2FzS3owc1pTNk5iQ3dJREFRQUJBb0lCQUZmUVRQelJ1QkxDQnh0QgpHbWlSK2pzWEVJaTZZWnRqWG91QkJPdWhpYlhvYnBMMWJ0eE9JKzJ2SDAxeVFiUmNDL2IwMFBsSmMyV05CaVVFCldleHFNbVRZUi9Sc0xweHZQOEdxby9JUlFhb0dKWUlCU1psRllneDlWNmhJN0o0KzhqRUxteG83TUtQa0ZIelcKVGp5V0dCMnp4dUVHQnRNK2RLVjY3SDB1bDNxa3E1TEpBTWVOelNRaG9EbFl2QlRzRmlDVXUvZGZoaWlrbHF0WApNYnMvSWtXa1BRM0djekZ0UDVCQkIwZXEvK2hpdnh3UThyRVN4czEyRFllQTRLc1BVMktQZlJFLy8rLzdxRDJoClQyd2c4SWZncU9vQ2ErN0lTMFRmeldnU2RSWkRzTDFQK1k4ZlU5YW54ZUFHc3MzeWFrSUF4QVI0NEhEVUdhN3gKVld5dE84RUNnWUVBNGJsRHhpNitlcHpQcitFY1dBZThOREZ2ZWs2dHplNXdPMzF3WGdubWx2OXY4dTEwd3FzcAo1TzZZMDRiMnlpcXFhZzdRenFqaDRnclVUWFl2c29Pc1dpNGZZSENpZTNVQXp2Rnd4QVRVTERRNUhIRmg4Mkl0ClJvd0xJUkUyUmlWc1VzRTVlNTZXSFBJTys0Z3oxL3FvRlVzYWZlM0lRYTBZOWt0QkVyWWk5K1VDZ1lFQTNLOUUKS2k5V1hhR1JCRHhub0hLdTNiVExDN1M1Rm9jSzc5WVU1MUxCdVpoQjNCNnVxWEJSV3M3dS9UL01ZRWRHR04ySwpsNkNxNkJDVGxrYTR5dHFuTzJ2SlJvOTFRM1VoUWRNVzUwbG5CclhCa0hpZGdOSVZMV2pOVkR6Z2JVSWcxL1Y5CmozcWNIRXErdFBINmt2Z2pzcmMrT0NiQ1FoQWcreE9QQWhtcStDOENnWUVBaEVJSmRCWHZoZWhieUxJZDZYYWUKei9Zblc0SytVK3RoMTNtb1hYRnZxd29BamxhVUUzdzNEK3k5bnpOMVp2K1kyb3ZUelVNbkYwdEJHaUlsMEhOVwppWUI4NGdVZEx6bGZQK0k0TUtLanIwTHFNOEE3cEYvaUozUG5FWGtFVkJXWll1UFV5cG9oV3RSNTh1ZmJlTEZsCnl4UTJjWkxodzVtcEJxY1JlZVUrbUFFQ2dZQW9nSkpHRzhJQ0ZURUVVZ0hDMU1sN0x6OUV1cnB0aEFOaDJTeWsKOSs5T0hMK1pvcGZ6eVFWbFlTMURsWDN3L2FQRDFJVW5Kdm0yOWJQZ2xNSTltTHV3a0N1MG80ZW1CYzFBdzNrawpvYmdpNXlETFh4ZXBHT1dDSEFYek8ra0VwR3BhdUZkL0NjVzArNUxjcXJ5T1ZMUllqSUVDMVRvNTNiUHY0THNTCmE1dVJTUUtCZ1FDbjRDMGQ4b0dqa2I2dkVZMmRTNXJDUXVEbDBXVVNnVFBTNWMwVXhPRjVpS0hoT1RmRVhqbnEKM3dLRmFHajJyT0h3cFR5ZTVHc2ljdjk0SHl5MlNTSk9LRFk3NTZtbk1NOUw0bkxBclVmTCtseGRnc3ZJZEdvbAozSzM3NHFVbkZUWjdMMkRGVVkydmJjQXpPbzRCV0tmcGJSMndNT0dvVFFuRHRmRHMzL3hPMUE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUpIcFM3VXhWb3FpSmZQWVdmVnMwUGd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN6TTFvWERUSTNNRFl4TVRFNQpNamN6TTFvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF3WS9vQ2lMbEFLZHhDVjk4YWtEYW1mZkJsYllobm9vSzNsMC9wUmZqQ3V2Vm96MnEKcW4yK0xoRkt0WlJsb1dDQTBPcVN4K0V4VWtVYzdIUGRFcEtQbDNZVllkNnVxWEcxZCtPc1hoODFHazBrTmdFcwpIODdwckdyY3E5TmpuL2ZEUXhQRTlJbHRVMU1RdHJPSTkvZUE2RnA5TWlTbUJMdkd6bGQwSFZ3MUQwcXNhaG50CmlYRmRpVzRJMU5RNUlaVGREa3FHL2Z5RWNPbTlObjc3R0pOanBzZDRnRFBJRXNENEw3NXpTdGVRSk10LzJ5TGwKQ3llTlFlVGQ3WXZpYUx1Uy9lVFlBN1Z5eElWV1FaajRpTkhHT0pDMTlvZnlxSi9WUUxnQU80TzVxc2I4OXp3UAp0cmJ1L2RmeG1SbWFHdVFzT2tBODExVG9CaVZva0tQeXlTeFpPUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSnpjY2d6RldaMC9sdm5ielMzYlRNd0QzdVY5TUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQmN5SExkdnVWZnNuRDBRNTc1Q2wrdlJBZEFvbThKdjRHQnBNcU1DOTdZMGNBZzVXN1ZMbVd2CnFrM1hBRXpwWXBVc3cwVEJ2dzBlTFFJRTNjWnU2T2htWHRuSTJnTUdiVXlKbk94SEVGR3NMUzFOKzJiK1ZWOFAKbDNaenVQSHdvejZKRzh2Ynh3RVVDYUtYS2Y2Rno2K3Aza2ZXa1pLamU2alNta3l4SXNIOC9udXZjZlIyV0RZawo2RGhzbFpSUzY2L0tDZ2xrSkZydjdzejhkblNSQkFsSVFtRUlrSWVEckN0NUNjWDFFblNHajQ5YnBWSGljZGo0Ck5mT0JjQTRwbVBPUEVlVmFaUnQrUktJc25md0lxZ0FrelA0S1A2NS8zSjBHNDhjY2NxdE1iRFdjV2JuZXNWWWIKaStwK1VkaUhuaC8zc1VxOGh1NndLMzNWU2JEZndKUkEKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUakNDQWphZ0F3SUJBZ0lRTWpva2VTVXdhanpoZ2ZnMkFZSC92REFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek0wV2hjTk1qY3dOakV4TVRreQpOek0wV2pBbU1TUXdJZ1lEVlFRRERCc3FMbU14TWk1b2RXSmliR1V0WjNKd1l5NWphV3hwZFcwdWFXOHdnZ0VpCk1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ1lOUnRiRFZNVlVlZEd5K3VDQTBBNlo3WDUKZjFBeFZjRUZVTGYwZXhOekt0R0dyQmZpNllkcVRIKzFaT21SZGFYSUNkVXdrNFdnbXB3U2FteUZBVkhvUlZNcQpISmdBbnRCUk1tUnFtQnNnK3ZQdEZadG8rYmVWdytub0doVmticnNKWXp5bjdzL3lTc2lBaUNSdjlCZ25tYUZ0Cmc5NWltaVdaKzdnTlVHQW9CNmlza0N6S0V6aE5FQ3VXeFpiU2d2djBCZmlxdVFSdks4eWUrcGt1Z3N5blN0dGoKZHR4NURGQUZYOWtaNit4VmxYa3QrMDQzckI5NXJyem50cGlqWHZPWFQwelV4V3pMZmlONTZNS3lMUDFQb2lJagpJalZveU9rQXNXNUNCZElET1MwMEkrdTBUZk5OSnFEWUl1YmVFTXNUT2ZJaFkzeWRocGEyVVhIMzdGcU5BZ01CCkFBR2pnWWt3Z1lZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGSnpjY2d6RldaMC9sdm5ielMzYgpUTXdEM3VWOU1DWUdBMVVkRVFRZk1CMkNHeW91WXpFeUxtaDFZbUpzWlMxbmNuQmpMbU5wYkdsMWJTNXBiekFOCkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWkrNlE1c1hTdU44ZXFFUDJjTG1rTGpFL0FEanpzRHpOM0NKcnltSWUKQnVXSVZaT2MyQmVLdW9rZ0l1TU9lUVdnWnJ1Qlg0OXVVcnQyazQ1SXRHMDhibUVrNitPYTBaN2xUUUxFOWJETQpQRFhpYUdXd0J5Y2RoVmVMakE1QlUzZTcxYkFaNnp3YmVOZHZodVYxdDhZWVgvZ0ZHWS9QdVhqckVYTEtWb1RkCjZMVGFac2JpcWhjREx2R05pbGJyUkE0cUJaRlF6L0dJV0hteWZvbXZGODBmdVJuZkp3TTBSYU9nU0svWFBrU2QKMlJKcHZrV0JCSndpK1U4MElNaG0xTzJYdklvb2haSkFzTDFhMzBmVE43YytBY1pYZnJUcjVoZ0JNUkNxYXF6NgpjL2I5Z0J2V1d1TUNuS1RuRy9LNlRxYWdQaEUwam1BZ2ZKLzBFbmltVU1lZGdnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBbURVYld3MVRGVkhuUnN2cmdnTkFPbWUxK1g5UU1WWEJCVkMzOUhzVGN5clJocXdYCjR1bUhha3gvdFdUcGtYV2x5QW5WTUpPRm9KcWNFbXBzaFFGUjZFVlRLaHlZQUo3UVVUSmthcGdiSVByejdSV2IKYVBtM2xjUHA2Qm9WWkc2N0NXTThwKzdQOGtySWdJZ2tiL1FZSjVtaGJZUGVZcG9sbWZ1NERWQmdLQWVvckpBcwp5aE00VFJBcmxzV1cwb0w3OUFYNHFya0VieXZNbnZxWkxvTE1wMHJiWTNiY2VReFFCVi9aR2V2c1ZaVjVMZnRPCk42d2ZlYTY4NTdhWW8xN3psMDlNMU1Wc3kzNGplZWpDc2l6OVQ2SWlJeUkxYU1qcEFMRnVRZ1hTQXprdE5DUHIKdEUzelRTYWcyQ0xtM2hETEV6bnlJV044bllhV3RsRng5K3hhalFJREFRQUJBb0lCQURzcXljdUhUbmpITWVSdgplTWs5Z2tZeDhxZGVPa296VDZsRlMzMGFLdUZtRDdVT1NPcklaUCtKWlV1YVFzRnN2bGtZbVdzY3JhRlUrTDZmCjZEZDczOTh1czdsM0RBK1JyT0VqZWEyR0cyV2lxQmZOZ25BNFFvbFJjeWZxbTg1Q3pTcEZEVnNxbG1OVmRzT2cKS0tuc2RVZFBqVlVKSWZXcWZsdHhZb2FxYS9hakNnbkd0OWhPaVpkKzkxWFcyU0RzdnJ3alR2MUlFNjdWeE84UwpndFhDd01BOStVRjlBOFJJbWZ1WGdva003Vkp1cUR0MTRjTGd2T1ZybklTcVZIU0xIWVd6TngvUEJyOGJaTHFhCmQ2eDhMUGNDdG01STJydHdJdDNaSkExT29qZWRpRkMyVGF5VUtnbjZoV2pIcmtoenk4Z1hFN1dSVEdiaVFPM04KeFd4ZlJRRUNnWUVBd1RuV0ZxS213cGs3WWZVZUlnMmJ2WktZKzVUemVid2s1VERWSlBiNGVkd3Bxd1RJbDdlegpGUUdCa0ZPaVZWSG1zNFY3ZU9Qd3lra0hXVDhoYXUwUFdzckdEL1JSUWRJOUVoNVRmTW0zWnpaZUtpR3FsTFoyCm1idjhLbEhJT09nUVhwUTY5S1ZiQXVpUWhFcmQ3YldnQy9HdWprNTIwcmRwZ1BMQUovYmZBekVDZ1lFQXlhZmIKVDY2eDcvUk1RZ3Z5ZUVTMEhwUGp4Yys0d0F4eUVMM3dONDk0YVZwUTRvN3VodnVxMTlwVkNjaXFFdElLM3g3UApzQmxpV0EvNGNVZ2doYldzRUdrQnNXazI5ME1IdGkwVi9tbUdwNDBtYVVPczFkUzlVekFCK2x1SWtPSS9DUlhhCjZjUGpFM1liQ3FITVJ5eXVIeDM2aDhCaWRGdVRkZFFrRERRTlhoMENnWUI0eXpsRlNVVkszaFE3ZHNyeHF1UXoKck5PcVkwR2FWcjRSOFdjdUJwN3JQM0ZsRWtaOFlrQzMzd3NxT0w2QTdBUjNNZmt3Wi83OTFvMmJnMVhXeklBTwoyRGpkZkhUWDJ5Q0dsU0xJSGlwamdaOTRZemVLWkU3Y2FLS0pxanFyS0pnaktETjdBV3hWOHlGMU1vQnV2RjVqCldTRXdvV2l5N2lvc2pKVUg1dE1mNFFLQmdBL1dVZ0FKRFVwMkdrTVpveHBVOHZ4dnl2U3ZJcWhha2Q3RXZBZngKQ1pqa2tmT3BIQXlYMlV3SWhxTTFFajVXSnFwdFJneGpnZmkra0ZsOU82aWtvdlhLK1dvUWhGT1kvUk1PcVdxSQpxUjJobFVHeElmTE5PVzArR1BtcmxLY2tUYVVPQlZwVW14SGROYlI1RG8wTWNrUlpXMktyOWsrREhhcWtWWXhyCnpoejFBb0dCQUxka3dCZ280UkMvTWhBeERML1dkSGhpdWFsTUZNNjF2bnNHeFpMakRlL0gvUDltZlk3bUYrTGwKTEN2NndNVCtab0swYmhUNFh5Q2hWajlNeFFxYjVRKytXY1UvL21uVG1ZdU1LNkpPYkQyRnU1V0VIMHQzOGdSVgp2eStOc3pTMHVuQ3crdjFNWFpIWTd6N2ZaS3lIa3lxSkYvSXhtWXhDZGlkemtIN0dYQWRRCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  skip-cnp-status-startup-clean: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  policy-cidr-match-mode: ""
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"
  # If you want metrics enabled in cilium-operator, set the port for
  # which the Cilium Operator will have their metrics exposed.
  # NOTE that this will open the port on the nodes where Cilium operator pod
  # is scheduled.
  operator-prometheus-serve-addr: ":9963"
  enable-metrics: "true"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: c12
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "112"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  # Default case
  routing-mode: "tunnel"
  tunnel-protocol: "vxlan"
  service-no-backend-response: "reject"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-masquerade-to-route-source: "false"
  enable-wireguard: "true"
  wireguard-persistent-keepalive: "0s"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-local-redirect-policy: "false"

  kube-proxy-replacement: "false"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  enable-host-port: "false"
  enable-external-ips: "false"
  enable-node-port: "false"
  enable-health-check-nodeport: "true"
  enable-health-check-loadbalancer-ip: "false"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  bpf-lb-acceleration: "disabled"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  hubble-export-file-max-size-mb: "10"
  hubble-export-file-max-backups: "5"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  ipam-cilium-node-update-rate: "15s"
  cluster-pool-ipv4-cidr: "10.12.0.0/17"
  cluster-pool-ipv4-mask-size: "24"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "true"
  bgp-secrets-namespace: "kube-system"
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"

  k8s-client-qps: "5"
  k8s-client-burst: "10"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  # default DNS proxy to transparent mode in non-chaining modes
  dnsproxy-enable-transparent-mode: "true"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-xff-num-trusted-hops-ingress: "0"
  proxy-xff-num-trusted-hops-egress: "0"
  proxy-connect-timeout: "2"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"
  proxy-idle-timeout-seconds: "60"

  external-envoy-proxy: "false"
  max-connected-clusters: "255"

# Extra config allows adding arbitrary properties to the cilium config.
# By putting it at the end of the ConfigMap, it's also possible to override existing properties.
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: c12
    peer-service: "hubble-peer.kube-system.svc.cluster.local:443"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-hubble-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-hubble-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n\n        # Liveness probe\n        location /healthz {\n            access_log off;\n            add_header Content-Type text/plain;\n            return 200 'ok';\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumbgpnodeconfigs
  - ciliumbgpadvertisements
  - ciliumbgppeerconfigs
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  - ciliumbgpnodeconfigs/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumbgppeerconfigs
  - ciliumbgpadvertisements
  - ciliumbgpnodeconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumbgpclusterconfigs.cilium.io
  - ciliumbgppeerconfigs.cilium.io
  - ciliumbgpadvertisements.cilium.io
  - ciliumbgpnodeconfigs.cilium.io
  - ciliumbgpnodeconfigoverrides.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  - ciliumbgpclusterconfigs
  - ciliumbgpnodeconfigoverrides
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumendpoints
  - ciliumidentities
  verbs:
  - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumexternalworkloads/status
  - ciliumnodes
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumendpoints/status
  verbs:
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumexternalworkloads
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-bgp-control-plane-secrets
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: etcd-metrics
    port: 9963
    protocol: TCP
    targetPort: etcd-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: NodePort
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
    nodePort: 32379
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-agent: "unconfined"
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: "unconfined"
        container.apparmor.security.beta.kubernetes.io/mount-cgroup: "unconfined"
        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: "unconfined"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
          initialDelaySeconds: 5
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.memory
              divisor: '1'
        lifecycle:
          postStart:
            exec:
              command:
              - "bash"
              - "-c"
              - |
                    set -o errexit
                    set -o pipefail
                    set -o nounset
                    
                    # When running in AWS ENI mode, it's likely that 'aws-node' has
                    # had a chance to install SNAT iptables rules. These can result
                    # in dropped traffic, so we should attempt to remove them.
                    # We do it using a 'postStart' hook since this may need to run
                    # for nodes which might have already been init'ed but may still
                    # have dangling rules. This is safe because there are no
                    # dependencies on anything that is part of the startup script
                    # itself, and can be safely run multiple times per node (e.g. in
                    # case of a restart).
                    if [[ "$(iptables-save | grep -E -c 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN')" != "0" ]];
                    then
                        echo 'Deleting iptables rules created by the AWS CNI VPC plugin'
                        iptables-save | grep -E -v 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN' | iptables-restore
                    fi
                    echo 'Done!'
                    
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - CHOWN
              - KILL
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
              - DAC_OVERRIDE
              - FOWNER
              - SETGID
              - SETUID
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Unprivileged containers need to mount /proc/sys/net from the host
        # to have write access
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        # Unprivileged containers need to mount /proc/sys/kernel from the host
        # to have write access
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Unprivileged containers can't set mount propagation to bidirectional
          # in this case we will mount the bpf fs from an init container that
          # is privileged and set the mount propagation from host to container
          # in Cilium.
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-dbg
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      # Mount the bpf fs if it is not mounted. We will perform this task
      # from a privileged container because the mount propagation bidirectional
      # only works from privileged containers.
      - name: mount-bpf-fs
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        args:
        - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
        command:
        - /bin/bash
        - -c
        - --
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        - name: WRITE_CNI_CONF_WHEN_READY
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: write-cni-conf-when-ready
              optional: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
            drop:
              - ALL
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
      - name: host-proc-sys-net
        hostPath:
          path: /proc/sys/net
          type: Directory
      - name: host-proc-sys-kernel
        hostPath:
          path: /proc/sys/kernel
          type: Directory
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              - key: ca.crt
                path: client-ca.crt
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/port: "9963"
        prometheus.io/scrape: "true"
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.15.6@sha256:5789f0935eef96ad571e4f5565a8800d3a8fbb05265cf6909300cd82fd513c3d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        ports:
        - name: prometheus
          containerPort: 9963
          hostPort: 9963
          protocol: TCP
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      initContainers:
      - name: etcd-init
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - etcdinit
        # These need to match the equivalent arguments to etcd in the main container.
        - --etcd-cluster-name=clustermesh-apiserver
        - --etcd-initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --etcd-data-dir=/var/run/etcd
        env:
          # The Cilium cluster name (specified via the `CILIUM_CLUSTER_NAME` environment variable) and the etcd cluster
          # name (specified via the `--etcd-cluster-name` argument) are very different concepts. The Cilium cluster name
          # is the name of the overall Cilium cluster, and is used to set the admin account username. The etcd cluster
          # name is a concept that's only relevant for etcd itself. The etcd cluster name must be the same for both this
          # command and the actual invocation of etcd in the main containers of this Pod, but it's otherwise not
          # relevant to Cilium.
        - name: CILIUM_CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        # The clustermesh-apiserver container image includes an etcd binary.
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --auto-compaction-retention=1
        - --listen-metrics-urls=http://[$(HOSTNAME_IP)]:9963
        - --metrics=basic
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        - name: etcd-metrics
          containerPort: 9963
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - clustermesh
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt
        - etcd.config=/var/lib/cilium/etcd-config.yaml
        - --max-connected-clusters=255
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        - --controller-group-metrics=all
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: IDENTITY_ALLOCATION_MODE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: identity-allocation-mode
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        ports:
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir: {}
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "clustermesh-apiserver"
      serviceAccountName: "clustermesh-apiserver"
      terminationGracePeriodSeconds: 30
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: clustermesh-apiserver
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.15.6@sha256:a0863dd70d081b273b87b9b7ce7e2d3f99171c2f5e202cd57bc6691e51283e0c"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 3
          livenessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 3
          startupProbe:
            # give the relay one minute to start up
            grpc:
              port: 4222
            timeoutSeconds: 3
            failureThreshold: 20
            periodSeconds: 3
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          - name: tls
            mountPath: /var/lib/hubble-relay/tls
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Always
      priorityClassName: 
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 1001
        runAsGroup: 1001
        runAsUser: 1001
      priorityClassName: 
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.13.0@sha256:7d663dc16538dd6e29061abd1047013a645e6e69c115e008bee9ea9fef9a6666"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
        readinessProbe:
          httpGet:
            path: /
            port: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.13.0@sha256:1e7657d997c5a48253bb8dc91ecee75b63018d16ff5e5797e5af367336bc8803"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
