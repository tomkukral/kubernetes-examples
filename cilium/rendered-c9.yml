---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRVm85MVBvbHVpZG5pbVg2cWFBcVQvekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEV4V2hjTk1qWXhNVEl4TWpFMQpOVEV4V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ1hBQjR0V1ZSMDhjMDJPSmc3TG1GdjZTdm9HcHk3cStyUmI3ZUJwZGlXUHFESFRuQjgKa2FUUmxQbXd6QXVEQjF0R0JkdG9pcjdlQjhmbmRLR2dFNmU5RGNWMm0xTGhkNVo5MmRkUUlydEk4bGxIeVdHQgpnVUJqZy9SL3hYSVRQNTZ1UmVmaWY3b2N1TXFYTERDZXBSQTlrTGdpekpFcTVPbHFWQlRYVm5RSk9wODdNdTRwCjY2YTZGaDhxR0FSNWJUaDRzTC9nZStIQjlKQXhFN0YxbmRHTUx0UWRjZXowU1dBVWxZcERqMzMxZVZobVdGL3YKYzJOOXVYVXlNcHQvbXVNeTRIUWpXU2c5RXYySHp5M1RYQzdpQys3ZnJFWjlyVDBEaUdnWTVUN04yU0l1RVhUbApXMXNXaUx5OVpmSCtCUVMzMzA1OUJwMlMyR2pzK3UyN0V3ekhBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVV3K0poZUY1OVphWHJiSi9KNWw4cTZFa0N6NUV3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFFaTEwdFNLbW1BSXRNTDZQYzlLWWgxaURrRnhyZWlhQlkvUVRveVVmMG1YK3I3VnYrdXFYbENHCmg1b20yaDA0MzZvRlZ0U0h2UHdqWW96d3hZUmNrQmZuQlRianM5emx6QUlBZVhSQkVNQVVBM2RoTGthVnk0dnAKMGZsb1BWRVZ5d2JSWS9vSzJIVk1RbVYrYWJEUjhyTXRLT3grTFpQbzluRFhKNmdTT3o5V0xOb1U5VlJlNUJMegpNQ203SnBFZkhlS0FoT0l4c3VtRkdidGRrVzdxcmZVZk82THMvSTNTNXRhWUxxRWY0aHNFY2MrZ0FGK3g2dm9vCkEwbW92Zm5QRlNwdnAraXRsSkxsL3NDQlJNclpPYitUSVBEbWI4T25PeTlwQjMrVUNXMVkzYy9ZR29KRFNmd1UKbXFwb2szVGtxY2RGOW1CRDdjVDZvRjdMTzIvZmowdz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBbHdBZUxWbFVkUEhOTmppWU95NWhiK2tyNkJxY3U2dnEwVyszZ2FYWWxqNmd4MDV3CmZKR2swWlQ1c013TGd3ZGJSZ1hiYUlxKzNnZkg1M1Nob0JPbnZRM0ZkcHRTNFhlV2ZkblhVQ0s3U1BKWlI4bGgKZ1lGQVk0UDBmOFZ5RXorZXJrWG40bis2SExqS2x5d3ducVVRUFpDNElzeVJLdVRwYWxRVTExWjBDVHFmT3pMdQpLZXVtdWhZZktoZ0VlVzA0ZUxDLzRIdmh3ZlNRTVJPeGRaM1JqQzdVSFhIczlFbGdGSldLUTQ5OTlYbFlabGhmCjczTmpmYmwxTWpLYmY1cmpNdUIwSTFrb1BSTDloODh0MDF3dTRndnUzNnhHZmEwOUE0aG9HT1UremRraUxoRjAKNVZ0YkZvaTh2V1h4L2dVRXQ5OU9mUWFka3RobzdQcnR1eE1NeHdJREFRQUJBb0lCQUhYT1Y3elZwcmllTlpZSgp6V3JPb3FJbTdtUms3c2JVTjUweVpaNjJmeVdvc3RNTDlXS2FWbFpVdmdFYkVCZ24weVBzU2VOajY4bFpsTEtWCkljdTd5ZkFMSUhXS2RMMEhDZGdoN29QTXRRVVNYbWxOU2M4NXdieGlKSXpTeEU4VUlYNmhkMm9VY0dVY0hxS1cKalZBWVEzVmt4T1FSYVdobnMxdUxRYjlHNmJ5UVZ2NjFYV2hDSG5WenMwSkVMU1YyUkpGZWJRbUJXY2NEUjE4NQpoaXJQdHVrTzRRSVYwVWV6MmpWYXJHNkZScDh0ZUhuWHBhQk1vSWhQaWp5QkN4U0Y5RnRJNDNwekdic1Y5UzBSCnR1dWtWMUJOcEpGV1g2Z3o4Q1lkWndZYVBTNWF3dXV2b3FjMGptK2Zla1J0OWJ3cVplNlZMR2htME9BN2d5MzgKOEczWWFoRUNnWUVBeHlxblNzRHUvWGNpYUUxQlhkWEVpTitBT2FWenJabXRRYlM4bFdGelozVmljV1JMWnNOKwp3R3F5R2lraFpMdUIySVN0WC9lV21UMDQxZjZhZ2FRUUJkYUZNb25iZnFibGY4Yjh0Q3JJYlJuc2ExZW1RZFdZClFTbW42Y0Rob0wrV0VFT0JUckZjaXlPYzJ4U3VVWUFyc2pISXN3VGFwTzdyZGl4SFAxcWlOR1VDZ1lFQXdoYmYKVCtoblRhc2ZwcHhRSm1WUkRsUnBHWU1tRVhLMGUrS2dLYUFvWE8xYzMzTHVLNWxnK3MxY3pnNUQwS1VhVWFHNApUUHZZdlllbU93WThXUDcrNkxDbnpwMmRGYUluMTVuVm5BeDZPaTdnK1ZQV1kxcG9aV1VtU3hPQkQvK2ZUTGwwCkFsSGhVdU1VaHhETzk4OXpKdldWMFBiMWdCbXN0QTg5R05GOXU3c0NnWUI2Nkx1c3lqdXlkOTduOXlVcnYwdzIKRzVlSis2elRxVTdlaWFjSG1NZ2JSTG1udUhrL3hjMW0rWEZINjdJTDlCdEJmejl2UmQvT1daWEZtZ1hIazNPLwo1bzcwalZiRFprT2pBeTNZRWI3MmRWVU5PVjRFcXNmM0RybnM2M2RTT0dsblNBRjRpc1BOcWdDV3dzQ0EwMVFqCjk4MGZqUk5SVFpCSnNUR1d5MXZtY1FLQmdDWmczWEZ3bEJUQWxMYWVUQjc3ZzhhZ25GT21JajNxLzVOTG9iMzUKWkdIVHNieWhma1R5eEVGem9EbENpdGhUL1Z0TTdpT1MzUzNGQi9LOTdlcnZLVHFieStMSU9jcVFVTzZLQmJvZwpvWDZsekdpZzBsQzlETTJYN2JXRXVzMk9EMUxkalBuMGRPaXQ3RjQwemFna3hqRmErRy9rbFhEcUlzTk1EQm0vCk91eUhBb0dBZElsb0xGM1J1RDUvbGU3ZDM0dlgzQkNqeTdGMEZZN3VyOFZ0Z2MvRzZkeGN4TWFONjAwRWZXZ1EKeWZaT3FRMlZEbHpDTnVHWDArazAra3BPVzc0T2IrWWZ0SzVoM3RHWGNoNlpyYXRWU1NFdXRmOW94QW1NT2hqcAp2d3JqcUZYdkVwYTZxMXR2QjFuSVZONEYrV3NtQzE1L0hwUk5UeVowVWFWWlZ3bWRqQjg9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRVm85MVBvbHVpZG5pbVg2cWFBcVQvekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEV4V2hjTk1qWXhNVEl4TWpFMQpOVEV4V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ1hBQjR0V1ZSMDhjMDJPSmc3TG1GdjZTdm9HcHk3cStyUmI3ZUJwZGlXUHFESFRuQjgKa2FUUmxQbXd6QXVEQjF0R0JkdG9pcjdlQjhmbmRLR2dFNmU5RGNWMm0xTGhkNVo5MmRkUUlydEk4bGxIeVdHQgpnVUJqZy9SL3hYSVRQNTZ1UmVmaWY3b2N1TXFYTERDZXBSQTlrTGdpekpFcTVPbHFWQlRYVm5RSk9wODdNdTRwCjY2YTZGaDhxR0FSNWJUaDRzTC9nZStIQjlKQXhFN0YxbmRHTUx0UWRjZXowU1dBVWxZcERqMzMxZVZobVdGL3YKYzJOOXVYVXlNcHQvbXVNeTRIUWpXU2c5RXYySHp5M1RYQzdpQys3ZnJFWjlyVDBEaUdnWTVUN04yU0l1RVhUbApXMXNXaUx5OVpmSCtCUVMzMzA1OUJwMlMyR2pzK3UyN0V3ekhBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVV3K0poZUY1OVphWHJiSi9KNWw4cTZFa0N6NUV3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFFaTEwdFNLbW1BSXRNTDZQYzlLWWgxaURrRnhyZWlhQlkvUVRveVVmMG1YK3I3VnYrdXFYbENHCmg1b20yaDA0MzZvRlZ0U0h2UHdqWW96d3hZUmNrQmZuQlRianM5emx6QUlBZVhSQkVNQVVBM2RoTGthVnk0dnAKMGZsb1BWRVZ5d2JSWS9vSzJIVk1RbVYrYWJEUjhyTXRLT3grTFpQbzluRFhKNmdTT3o5V0xOb1U5VlJlNUJMegpNQ203SnBFZkhlS0FoT0l4c3VtRkdidGRrVzdxcmZVZk82THMvSTNTNXRhWUxxRWY0aHNFY2MrZ0FGK3g2dm9vCkEwbW92Zm5QRlNwdnAraXRsSkxsL3NDQlJNclpPYitUSVBEbWI4T25PeTlwQjMrVUNXMVkzYy9ZR29KRFNmd1UKbXFwb2szVGtxY2RGOW1CRDdjVDZvRjdMTzIvZmowdz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLRENDQWhDZ0F3SUJBZ0lSQU91RVZGbDRmNktNN1FCbHZZczJxNVV3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV4TWxvWERUSTJNVEV5TVRJeApOVFV4TWxvd0V6RVJNQThHQTFVRUF4TUlZV1J0YVc0dFl6a3dnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzNiNkNyS1NmQ2MySGxpenVkZVRxUkU1cUhNOWd5R0RhcjdXRHZ5OFRpNE00K1VVS2QKR0lJaWJnV1pTK1RXdFZ3SkJmK1hidGxSYUNOZDFXa0pZdG5WVzN4MHl3dTNLVWxZcGtBRDFTazhaWFIwUm1SQgplRDBieVlhSUtGZ25MOU1mUW5UZzQ0VU1UMmlyMEpyS0Y1Vyt2NmxEakt3MjBiMFNyYWdHU0s3ZDc4YXN4UktWCjJoNjhxNFZPa1k4QXNIYXdzclNiZ2xxMmRXelBBTytjV1Y0K21XbTdzcm5VQ3Z1RWNkVTBvZ052bWJTdXp2N2IKU1p3TXhYMXI2MmpNZjJGOFNmSTk5dEFKYlMvR0hvUHlSZlc0T0VwU0UvYlpwaW5nR3p6S1Q5S1dRS3FDWFZtQgpYbm5uZGhLU290QWNYTThyN1pZSFFSdlluMnVqQkR6ZGFBTFBBZ01CQUFHamRqQjBNQTRHQTFVZER3RUIvd1FFCkF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXcKQURBZkJnTlZIU01FR0RBV2dCVEQ0bUY0WG4xbHBldHNuOG5tWHlyb1NRTFBrVEFVQmdOVkhSRUVEVEFMZ2dscwpiMk5oYkdodmMzUXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBRWFPYmdlM3U5aVlWaXVQK09EckNBNXZNbElxCjQ3ckFXRVVsWHJPbVJIZ2g3N2F6OC9VNk53cHZtUnc5M08xakUvOWUzMHNCeFNwMzdFakZMcHhvZElWUzJ3TW8KQkZFb2hheU9ZZ29xbTlQV2hBclgycko5ODVWVDNGT3JPaXZhOHZtNitxczdNRUxnOE14TTdkeldjZUlRYm9KeAo1aGlEM3dlOGgvTnVDanBvWUQzRnB1a2NSRDI0RnlpbWEvNEdXdHNKZXB6QUMwVmpZMm9MbUVTTkFmNWE3NmJxCnlpMDgrYjVTaDY3M3pMUVlGYmJ5cUJUK0tUMEpTMGtXTXBKSkltdGtNckkrNkdBYkhwc3hNYyt2QVpYUU8rKzQKdDFSMzVhMXRwSGFHSGRpbGJVWU9RYkdtNnlJOXppWVJ0VnBjL2pPdkFKd3FzNG1tY3NmdmEzWXdjZDQ9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdDIrZ3F5a253bk5oNVlzN25YazZrUk9haHpQWU1oZzJxKzFnNzh2RTR1RE9QbEZDCm5SaUNJbTRGbVV2azFyVmNDUVgvbDI3WlVXZ2pYZFZwQ1dMWjFWdDhkTXNMdHlsSldLWkFBOVVwUEdWMGRFWmsKUVhnOUc4bUdpQ2hZSnkvVEgwSjA0T09GREU5b3E5Q2F5aGVWdnIrcFE0eXNOdEc5RXEyb0JraXUzZS9Hck1VUwpsZG9ldkt1RlRwR1BBTEIyc0xLMG00SmF0blZzendEdm5GbGVQcGxwdTdLNTFBcjdoSEhWTktJRGI1bTByczcrCjIwbWNETVY5YSt0b3pIOWhmRW55UGZiUUNXMHZ4aDZEOGtYMXVEaEtVaFAyMmFZcDRCczh5ay9TbGtDcWdsMVoKZ1Y1NTUzWVNrcUxRSEZ6UEsrMldCMEViMko5cm93UTgzV2dDendJREFRQUJBb0lCQVFDTUVaM3k5S01hbFRacwpxK3VpckY0dlIzUFl4NXJQYmJQWmhwSmRxUkEzV2dmQ2lCUkFsdVZQMndsRmJERmFUZlB3SS9kdUw4T2JxTlJRCm8xUG9TZVlpU0JCNXNrM0kxNnJkR1YyS1Q2dUVKY2hOdlM1eTI1aDE3bVZlOU1lVGJLNWVrVVZrTC9kNVZlMk0KUE9ibGFDcjlFNmJ4SUtxajFYWDFuRXJRT1pIbGZ4TzZ1OHpaUTlnR1N0dmNIVzZiMmVDZnpRR2piUStlb3dSeAprd1YzSUJlSm9kNjhsM05sWmZacWsxbm9KVVJtbzJteUlvNk5jTXRHL3U4bW5jM21wSE9vRFRQdTNDUmoxalF0CjRodDJXUmJPVi9uS1loeG9VZWdBU3VES1RmcExVYk12NDJSRWlTejUxRW5GQmNLbTkvbEVIV0RzS0hLd2hncjcKZzZKbm8rYUpBb0dCQVBRNXFuWktSczNNV2QwaFpzY0thWUJnSldSOTFyQ0crVm5ubkRNM3RRb2RGNDljZkpxNQphZUFSNjlveEVTM1lMUUdMWUkvbjc0ZjlPQjcwek02SHVva1VJd1FIMGJJcTFFdU5EOW8vcm04Q3IwckpvL1pYCjJ1dTRoaEkya3d5QWJ6aDVsdEMvdGtaQUFmSXlObDl1andBL1diMWYzSlYydTFlbVhuVTUwcEc3QW9HQkFNQkgKck1hT0MwVTVLN3YxWm9Sek1wclJsRjdIdGFVa252alkyNUkwT3VuR0dzNjk1blRSRWYwdmtsSnVrQkcvRDYwTQpUQjZhNEROYjdBUmdjOW40amc1RU5KbDNWU3ZkckdNUVVmNGVPS2dYWUpMeWg4dXptbGlqRnRpcmw3YWFtVVM0Cjd2Slh4RmNQSlQ3M1l5clB1amJmYUJ1VUd0OE5IZGRCdXdrYlo2ZjlBb0dCQUxwOWZra3RscnQzbS9kYmxodlAKTzVpbjBtWFdJYVpTcXYyWCtwS3hxekM1M2srK2svZWlOZExBWEpVVWVzWERHVHJncnkrME1CaHJwL3NiZTNrSgo4OHJROFp3V1RHMzhmbmZpazRSWXRGNVljbnB0VnlLNUc1WjhKUVNyWDhaZ0hJM0hhdjZrSmcrbXVOVzB1Z2hOCmFDME1NdjZFd08vdzVrV2I2TzBpNWtRWkFvR0FCeXVsR2RKNlFSNmNydW03NVB5V3lvYytUVHFOWDVjNkJuV3YKMm9md0duKzB5RGowdXk2QXlUeFk3SklLOVY1MnF6Rm1OVTM1Um5FTElDNm9vMXhOaitLalE0WGJ1ME1OQnJTNQpHZ3p1ZC9aSE43T3J0TUVCNUlSUWVjd01ZRmJybUZCOU9MUmxNZ255amFLVUpDaVMvVERmcFFlazZPU0lWRnF6Ckt1Zkd1ZEVDZ1lCc3REamZJM3dPTXg2eWxpK1ZCbVpyYnkvTURlaVJRN25lOSswRHUwNmVYSG8rb29rWXN6OFAKaExzMVY5UVJydlQwbVh6V3JRdXBMUWpRMFZxVXlrUGc1ZGFDOEU2ckpnSXBxVDlMa0d4a1BPdjB5anB1SXpSZwpUQVprbnNhMG8wT3BNeUVsV21SZDc1K3llZHNUZlAzNnh6SWxmcTBQRHBmVlcra3RieWdlaWc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-ca-cert
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRVm85MVBvbHVpZG5pbVg2cWFBcVQvekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEV4V2hjTk1qWXhNVEl4TWpFMQpOVEV4V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ1hBQjR0V1ZSMDhjMDJPSmc3TG1GdjZTdm9HcHk3cStyUmI3ZUJwZGlXUHFESFRuQjgKa2FUUmxQbXd6QXVEQjF0R0JkdG9pcjdlQjhmbmRLR2dFNmU5RGNWMm0xTGhkNVo5MmRkUUlydEk4bGxIeVdHQgpnVUJqZy9SL3hYSVRQNTZ1UmVmaWY3b2N1TXFYTERDZXBSQTlrTGdpekpFcTVPbHFWQlRYVm5RSk9wODdNdTRwCjY2YTZGaDhxR0FSNWJUaDRzTC9nZStIQjlKQXhFN0YxbmRHTUx0UWRjZXowU1dBVWxZcERqMzMxZVZobVdGL3YKYzJOOXVYVXlNcHQvbXVNeTRIUWpXU2c5RXYySHp5M1RYQzdpQys3ZnJFWjlyVDBEaUdnWTVUN04yU0l1RVhUbApXMXNXaUx5OVpmSCtCUVMzMzA1OUJwMlMyR2pzK3UyN0V3ekhBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVV3K0poZUY1OVphWHJiSi9KNWw4cTZFa0N6NUV3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFFaTEwdFNLbW1BSXRNTDZQYzlLWWgxaURrRnhyZWlhQlkvUVRveVVmMG1YK3I3VnYrdXFYbENHCmg1b20yaDA0MzZvRlZ0U0h2UHdqWW96d3hZUmNrQmZuQlRianM5emx6QUlBZVhSQkVNQVVBM2RoTGthVnk0dnAKMGZsb1BWRVZ5d2JSWS9vSzJIVk1RbVYrYWJEUjhyTXRLT3grTFpQbzluRFhKNmdTT3o5V0xOb1U5VlJlNUJMegpNQ203SnBFZkhlS0FoT0l4c3VtRkdidGRrVzdxcmZVZk82THMvSTNTNXRhWUxxRWY0aHNFY2MrZ0FGK3g2dm9vCkEwbW92Zm5QRlNwdnAraXRsSkxsL3NDQlJNclpPYitUSVBEbWI4T25PeTlwQjMrVUNXMVkzYy9ZR29KRFNmd1UKbXFwb2szVGtxY2RGOW1CRDdjVDZvRjdMTzIvZmowdz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBbHdBZUxWbFVkUEhOTmppWU95NWhiK2tyNkJxY3U2dnEwVyszZ2FYWWxqNmd4MDV3CmZKR2swWlQ1c013TGd3ZGJSZ1hiYUlxKzNnZkg1M1Nob0JPbnZRM0ZkcHRTNFhlV2ZkblhVQ0s3U1BKWlI4bGgKZ1lGQVk0UDBmOFZ5RXorZXJrWG40bis2SExqS2x5d3ducVVRUFpDNElzeVJLdVRwYWxRVTExWjBDVHFmT3pMdQpLZXVtdWhZZktoZ0VlVzA0ZUxDLzRIdmh3ZlNRTVJPeGRaM1JqQzdVSFhIczlFbGdGSldLUTQ5OTlYbFlabGhmCjczTmpmYmwxTWpLYmY1cmpNdUIwSTFrb1BSTDloODh0MDF3dTRndnUzNnhHZmEwOUE0aG9HT1UremRraUxoRjAKNVZ0YkZvaTh2V1h4L2dVRXQ5OU9mUWFka3RobzdQcnR1eE1NeHdJREFRQUJBb0lCQUhYT1Y3elZwcmllTlpZSgp6V3JPb3FJbTdtUms3c2JVTjUweVpaNjJmeVdvc3RNTDlXS2FWbFpVdmdFYkVCZ24weVBzU2VOajY4bFpsTEtWCkljdTd5ZkFMSUhXS2RMMEhDZGdoN29QTXRRVVNYbWxOU2M4NXdieGlKSXpTeEU4VUlYNmhkMm9VY0dVY0hxS1cKalZBWVEzVmt4T1FSYVdobnMxdUxRYjlHNmJ5UVZ2NjFYV2hDSG5WenMwSkVMU1YyUkpGZWJRbUJXY2NEUjE4NQpoaXJQdHVrTzRRSVYwVWV6MmpWYXJHNkZScDh0ZUhuWHBhQk1vSWhQaWp5QkN4U0Y5RnRJNDNwekdic1Y5UzBSCnR1dWtWMUJOcEpGV1g2Z3o4Q1lkWndZYVBTNWF3dXV2b3FjMGptK2Zla1J0OWJ3cVplNlZMR2htME9BN2d5MzgKOEczWWFoRUNnWUVBeHlxblNzRHUvWGNpYUUxQlhkWEVpTitBT2FWenJabXRRYlM4bFdGelozVmljV1JMWnNOKwp3R3F5R2lraFpMdUIySVN0WC9lV21UMDQxZjZhZ2FRUUJkYUZNb25iZnFibGY4Yjh0Q3JJYlJuc2ExZW1RZFdZClFTbW42Y0Rob0wrV0VFT0JUckZjaXlPYzJ4U3VVWUFyc2pISXN3VGFwTzdyZGl4SFAxcWlOR1VDZ1lFQXdoYmYKVCtoblRhc2ZwcHhRSm1WUkRsUnBHWU1tRVhLMGUrS2dLYUFvWE8xYzMzTHVLNWxnK3MxY3pnNUQwS1VhVWFHNApUUHZZdlllbU93WThXUDcrNkxDbnpwMmRGYUluMTVuVm5BeDZPaTdnK1ZQV1kxcG9aV1VtU3hPQkQvK2ZUTGwwCkFsSGhVdU1VaHhETzk4OXpKdldWMFBiMWdCbXN0QTg5R05GOXU3c0NnWUI2Nkx1c3lqdXlkOTduOXlVcnYwdzIKRzVlSis2elRxVTdlaWFjSG1NZ2JSTG1udUhrL3hjMW0rWEZINjdJTDlCdEJmejl2UmQvT1daWEZtZ1hIazNPLwo1bzcwalZiRFprT2pBeTNZRWI3MmRWVU5PVjRFcXNmM0RybnM2M2RTT0dsblNBRjRpc1BOcWdDV3dzQ0EwMVFqCjk4MGZqUk5SVFpCSnNUR1d5MXZtY1FLQmdDWmczWEZ3bEJUQWxMYWVUQjc3ZzhhZ25GT21JajNxLzVOTG9iMzUKWkdIVHNieWhma1R5eEVGem9EbENpdGhUL1Z0TTdpT1MzUzNGQi9LOTdlcnZLVHFieStMSU9jcVFVTzZLQmJvZwpvWDZsekdpZzBsQzlETTJYN2JXRXVzMk9EMUxkalBuMGRPaXQ3RjQwemFna3hqRmErRy9rbFhEcUlzTk1EQm0vCk91eUhBb0dBZElsb0xGM1J1RDUvbGU3ZDM0dlgzQkNqeTdGMEZZN3VyOFZ0Z2MvRzZkeGN4TWFONjAwRWZXZ1EKeWZaT3FRMlZEbHpDTnVHWDArazAra3BPVzc0T2IrWWZ0SzVoM3RHWGNoNlpyYXRWU1NFdXRmOW94QW1NT2hqcAp2d3JqcUZYdkVwYTZxMXR2QjFuSVZONEYrV3NtQzE1L0hwUk5UeVowVWFWWlZ3bWRqQjg9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRVm85MVBvbHVpZG5pbVg2cWFBcVQvekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEV4V2hjTk1qWXhNVEl4TWpFMQpOVEV4V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ1hBQjR0V1ZSMDhjMDJPSmc3TG1GdjZTdm9HcHk3cStyUmI3ZUJwZGlXUHFESFRuQjgKa2FUUmxQbXd6QXVEQjF0R0JkdG9pcjdlQjhmbmRLR2dFNmU5RGNWMm0xTGhkNVo5MmRkUUlydEk4bGxIeVdHQgpnVUJqZy9SL3hYSVRQNTZ1UmVmaWY3b2N1TXFYTERDZXBSQTlrTGdpekpFcTVPbHFWQlRYVm5RSk9wODdNdTRwCjY2YTZGaDhxR0FSNWJUaDRzTC9nZStIQjlKQXhFN0YxbmRHTUx0UWRjZXowU1dBVWxZcERqMzMxZVZobVdGL3YKYzJOOXVYVXlNcHQvbXVNeTRIUWpXU2c5RXYySHp5M1RYQzdpQys3ZnJFWjlyVDBEaUdnWTVUN04yU0l1RVhUbApXMXNXaUx5OVpmSCtCUVMzMzA1OUJwMlMyR2pzK3UyN0V3ekhBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVV3K0poZUY1OVphWHJiSi9KNWw4cTZFa0N6NUV3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFFaTEwdFNLbW1BSXRNTDZQYzlLWWgxaURrRnhyZWlhQlkvUVRveVVmMG1YK3I3VnYrdXFYbENHCmg1b20yaDA0MzZvRlZ0U0h2UHdqWW96d3hZUmNrQmZuQlRianM5emx6QUlBZVhSQkVNQVVBM2RoTGthVnk0dnAKMGZsb1BWRVZ5d2JSWS9vSzJIVk1RbVYrYWJEUjhyTXRLT3grTFpQbzluRFhKNmdTT3o5V0xOb1U5VlJlNUJMegpNQ203SnBFZkhlS0FoT0l4c3VtRkdidGRrVzdxcmZVZk82THMvSTNTNXRhWUxxRWY0aHNFY2MrZ0FGK3g2dm9vCkEwbW92Zm5QRlNwdnAraXRsSkxsL3NDQlJNclpPYitUSVBEbWI4T25PeTlwQjMrVUNXMVkzYy9ZR29KRFNmd1UKbXFwb2szVGtxY2RGOW1CRDdjVDZvRjdMTzIvZmowdz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lSQU5sLzlXSFh6ZlFNOXp0M0M4aE1idll3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV4TVZvWERUSTJNVEV5TVRJeApOVFV4TVZvd0VURVBNQTBHQTFVRUF4TUdjbVZ0YjNSbE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBCk1JSUJDZ0tDQVFFQTI4MUoybzJ6dExQR2Zma0hVU1AxdEJNeDVBM0grMGJEcG1IZml1MVAzNmtsbk5UL1hSK0oKYXRKVnRMb0FwakVHSVY5TU5FOEttcXdkcUF2cFIrakEzak1OZjZCN0tMZ0U2TkNXNXNxR0xFVFp4Y0ttSjBNbgprVmxwTy8zZ1o5UW01YitNSk83L3d5MVA1N2s5MVRjT0J5czM0aHZ2KzNUdDZtQkdLUDRGYWtiNGpNNW9mNWNvCmQ2WnZ3NUhHT1VSQWJWTksrakUwQ1g4SlRjUWN6ajhVUVlNYTl0Tjh6V0lTcFJWTElpekhWeS9mbHI5SkZ1Q3EKMVJGbkdTSFcvanpzSXlGRHVoU3VEblBsZjArOTZBODE1SGdqb2JmNFZOdUt1SjQwbUlZVXFwOWh4N2VZcEk2ZgpHWmNHOWpZWG8rcmM1aFBrNWhhNkxOZUZYVUtDN2g2djZ3SURBUUFCbzJBd1hqQU9CZ05WSFE4QkFmOEVCQU1DCkJhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXcKSHdZRFZSMGpCQmd3Rm9BVXcrSmhlRjU5WmFYcmJKL0o1bDhxNkVrQ3o1RXdEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUF1ekovd29laG9BOHpCVTRHY3NSTVJ3MjJkY3BRdkV0QnIweTNtMzRXV3hPUnEvYWRNeFBnQ2JDdm11CjZUSU9rSDU2UGk0M3VWdFFBUVN5dC93cmFwQnU1MWloNUtIMFpKL0ttYXhmSU5DNEdHbmtINnRrVEwwZGtUU2EKYUs5b2xWY0xIdDJWeVlQKzZCcGNnOURlbWsyOGNROWE3S1NUemRHSjVYYVZVRFF2T2V3RlNyKzJLNVdaOWExTgpOSTN3Q2NrS3ZCRHdsblZkQWtpSWlXZDZuM0p1UWhxRXc3dzh1YSt0Tlg5b2FYcS9CSVJNeFhuYllNdXh1b21ECnZXVHgyTllRTnE5ZCsxb1VFcjVFQkkza21iamk5RGtkSVU5US9WR1hncy9XY3lqMVdTVEZESnFJKzlHaVBtWXEKeEEyeFI1VjQzY1VzRUJza3c0V1BzSWNGWitrPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb0FJQkFBS0NBUUVBMjgxSjJvMnp0TFBHZmZrSFVTUDF0Qk14NUEzSCswYkRwbUhmaXUxUDM2a2xuTlQvClhSK0phdEpWdExvQXBqRUdJVjlNTkU4S21xd2RxQXZwUitqQTNqTU5mNkI3S0xnRTZOQ1c1c3FHTEVUWnhjS20KSjBNbmtWbHBPLzNnWjlRbTViK01KTzcvd3kxUDU3azkxVGNPQnlzMzRodnYrM1R0Nm1CR0tQNEZha2I0ak01bwpmNWNvZDZadnc1SEdPVVJBYlZOSytqRTBDWDhKVGNRY3pqOFVRWU1hOXROOHpXSVNwUlZMSWl6SFZ5L2ZscjlKCkZ1Q3ExUkZuR1NIVy9qenNJeUZEdWhTdURuUGxmMCs5NkE4MTVIZ2pvYmY0Vk51S3VKNDBtSVlVcXA5aHg3ZVkKcEk2ZkdaY0c5allYbytyYzVoUGs1aGE2TE5lRlhVS0M3aDZ2NndJREFRQUJBb0lCQUNoTEU5VGEwU3k1SUJRTAp5TW1aRy91czRTSjdYRU8yRHp1N0NXM0FYem9UR2ZBTUk5d0FZZ0tSR0dFUEQvdG5WVVpjMysxZTZBUyt0SmtQCnhlNEd2d1I4dTJiQUZwTzZXRHdOc1B3UitGSzVOR3JLYWdjY2ltNWN3NnZadUgrUUpxbExXZmVUVUpPSkJQTG4KeEd3SHNheWl3WlhUcFVTbGhNL0lZbFExYk95MFN1WTA0WnQxTkdtcjVvTzdXNWhKZERDZVhmMmdGaC9LdGl5NApYWXl1OHUwYmFFbGVMNDJRVGpBdnF5OE5wbFlMSlY4TWN3dGRlUzVpQ0IrYXk4M1B6RmF6Y24rYUxqMVB1NDI3Cll6QitzZ05wdkVwNk5YNURoQzNsbEpQSDhrRlMvcDJTR2JIbDFRSlI0Vk1TZTBqRnZ6M05QcXdicEdjQzVpZzgKVUwxRFR2RUNnWUVBOXNPV3ZHZk9EK1VZL2dCNS94ZmVpcnZJdjNPYzFqa2d0cEV4RXlJQVdOMmc5NHk1Z0F2cAo2NVVIK01Vd2ZINmdmYmQzS2ZxRmJDemtDMHVZZzJ3M0VXK3UrYUlXMjJpeW5WdkYwakwrbDJhVG1FYndEZjQ1ClhRS3k2bzNCMjI3bzMyU1h3azR6ZEh4T1hlUVlsNUdPdlA3cWp4THVhR1FHcGNCMXVCaU51SGNDZ1lFQTVBZGIKajBiUlBST1hCM3UyVThZaHo0OTZkeWVyZzBiZVRYYlhicWNUNlFnZk9LbnVmNWhZMVp4NldXd1l4Z1AwaGxrZwpuUmNsYUd5ellNdjdqVzVuVU9qa2hSaUg4cDc2d08wNWhvbURTbDBWUXdkMFFrb3ErREk4NC96eWpDT0Z3YjhlCmZUbXZXN1MwUnByMlhzM0VhSEpXaXE4QytlVDFQbE5uVFBQb2xTMENnWUFhVkpwejlodWR4Sk5iSHcvbGNWV1UKdGg3Z2x1U0lVMFl6Vk9ESXF0c2dvRjE1ckxGcWdWcnZnVko5Y0FVUmM2MktYSlpCaTNMTExTc1VMWGZUcGl0bQpGK1d5eTJIbS9ZLzVqSDVhUklpMy9RRUl3YUVCelR1dnVnYi9VaXI2VUNaWEYvTzlqdnljbEZzRVY3OXNCT01YCk5aZ3Z0aFJzWFNmOGJjSGg1L1RQVndKL1VmSlM5U3ArQjNVQzBhMmoySGRicnp2Z3h2RjZzYkxHTVJDRVd6K3YKNkE4REtWbm9XL0pqK21CQmwrRkJCZWhsOStJUDFtUjdEUXdEYXNYam9QQU1NUWVCR0ZPNGgzaWFwTHFiOGIxNQpjVUFDWkJSSnM0ano2RDRsbzhsRFlSbGkrRDIydDBvRHV2RTEyQ25ZWURtU1cvYTdJeHZCOWd4U0ZoUGpDOFNiCjBRS0JnREI2Y2hlbmtMNnRvdnZQRzV0UXRmWnhhMDQyalNiTW8vakE2emhCdElRRjUyU1AxTytKdkhiYUNNTkYKZ0tSaVJaRVB3b1RLQ0Vmek9QalJxeDNnTmxwd3QxRjdkODJxVzQ2a0Jna1NCWW5UNmtrOHp6TUw4S3JxTEludwowd2dtU0V0ZTVlNG8rU3JHMzlqc1hEVTBNeHc1U0JxenA1UG5ZeE1lem5Bci9rOWkKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRVm85MVBvbHVpZG5pbVg2cWFBcVQvekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEV4V2hjTk1qWXhNVEl4TWpFMQpOVEV4V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ1hBQjR0V1ZSMDhjMDJPSmc3TG1GdjZTdm9HcHk3cStyUmI3ZUJwZGlXUHFESFRuQjgKa2FUUmxQbXd6QXVEQjF0R0JkdG9pcjdlQjhmbmRLR2dFNmU5RGNWMm0xTGhkNVo5MmRkUUlydEk4bGxIeVdHQgpnVUJqZy9SL3hYSVRQNTZ1UmVmaWY3b2N1TXFYTERDZXBSQTlrTGdpekpFcTVPbHFWQlRYVm5RSk9wODdNdTRwCjY2YTZGaDhxR0FSNWJUaDRzTC9nZStIQjlKQXhFN0YxbmRHTUx0UWRjZXowU1dBVWxZcERqMzMxZVZobVdGL3YKYzJOOXVYVXlNcHQvbXVNeTRIUWpXU2c5RXYySHp5M1RYQzdpQys3ZnJFWjlyVDBEaUdnWTVUN04yU0l1RVhUbApXMXNXaUx5OVpmSCtCUVMzMzA1OUJwMlMyR2pzK3UyN0V3ekhBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVV3K0poZUY1OVphWHJiSi9KNWw4cTZFa0N6NUV3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFFaTEwdFNLbW1BSXRNTDZQYzlLWWgxaURrRnhyZWlhQlkvUVRveVVmMG1YK3I3VnYrdXFYbENHCmg1b20yaDA0MzZvRlZ0U0h2UHdqWW96d3hZUmNrQmZuQlRianM5emx6QUlBZVhSQkVNQVVBM2RoTGthVnk0dnAKMGZsb1BWRVZ5d2JSWS9vSzJIVk1RbVYrYWJEUjhyTXRLT3grTFpQbzluRFhKNmdTT3o5V0xOb1U5VlJlNUJMegpNQ203SnBFZkhlS0FoT0l4c3VtRkdidGRrVzdxcmZVZk82THMvSTNTNXRhWUxxRWY0aHNFY2MrZ0FGK3g2dm9vCkEwbW92Zm5QRlNwdnAraXRsSkxsL3NDQlJNclpPYitUSVBEbWI4T25PeTlwQjMrVUNXMVkzYy9ZR29KRFNmd1UKbXFwb2szVGtxY2RGOW1CRDdjVDZvRjdMTzIvZmowdz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURxRENDQXBDZ0F3SUJBZ0lSQU5ZLzdrSTRBK1J1aUtRSHREbjZOM3d3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV4TVZvWERUSTJNVEV5TVRJeApOVFV4TVZvd0tqRW9NQ1lHQTFVRUF4TWZZMngxYzNSbGNtMWxjMmd0WVhCcGMyVnlkbVZ5TG1OcGJHbDFiUzVwCmJ6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUtvUjRFUGRPV0MzU1lXZGNVeXoKdlpIWjYvQmdRbUQyV2IwRmZJTXdGR2d0ZXBET3pieFZhVmZmNkJYR0Y4RDJ4T0IweSt1RXFWRE5JaGhWbmFVMwpxd2tmN1lvTU5EN0hDMmYxRllrdXF3bVNGRmhPa0txZU5OL3lmMG52U1c0eGl5MHJidkJJNUQ0S1RuZTdJNDdNCnpKS2IzdUlRS0NPdytXaUZPcm53L2VRYW04dTV0WFVPQUFBYmEyaTkyek95UUV5Z2lWRzJteUVFT1ljUmpnWjMKMnh6RDRNMDdwU2dUOVBSNndJanFwcE83di9mTnFJN2JyMnRpN2MyY2JDRlFIK2R5Wkl1L1RpR1FiVDFPQTlqYwpQMkFmYzhUaGlGNXh1ZThnVllaOVpNZ1owL3JlcjVYRGtyUlY2UDBqZHVDNi9SZXM0azlZd0VINkViZ3RFaUcrCkVSc0NBd0VBQWFPQjNqQ0IyekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUgKQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3SHdZRFZSMGpCQmd3Rm9BVXcrSmhlRjU5WmFYcgpiSi9KNWw4cTZFa0N6NUV3ZXdZRFZSMFJCSFF3Y29JZlkyeDFjM1JsY20xbGMyZ3RZWEJwYzJWeWRtVnlMbU5wCmJHbDFiUzVwYjRJUUtpNXRaWE5vTG1OcGJHbDFiUzVwYjRJbFkyeDFjM1JsY20xbGMyZ3RZWEJwYzJWeWRtVnkKTG10MVltVXRjM2x6ZEdWdExuTjJZNGNFZndBQUFZY1FBQUFBQUFBQUFBQUFBQUFBQUFBQUFUQU5CZ2txaGtpRwo5dzBCQVFzRkFBT0NBUUVBTTlGeG1ZdzN2Vys0amRqdUQwVkVBSWJyV2p5ODFZaXpUYXlPaDRQWjBlSysyVVhwCnorVzlQdEsxeWIwNk5sTERod0NtTXZqTzhMSXNYN21OMzZlYXdZWUoyVzgzU09XNnJ4V2dqUWt0ajJ5ZVdTZkoKNnVwUGxOZFEvVjhpTXRRTTJuMThNbGtDU3QwdUpDUjN1L1pLY05SSXRLbW1nSk5IQnhvb1B5Nlg3QWpLQW5uYgowRk05VjNMeDZlNllaUkNYMS9OQ21MVzhpUDlrdE5FTjg2Nk5VbG4ydkZyS1VJdE9rWC9HTDJpQW1DZHZ4VHBhCjRSRnpJZlRMSCtvVWpwdlVINDVlR25BaXorV1J4STlrSTRkdjRvUUZUSzV0dXplYStERVdjekczS0tZT08wWFgKcEJOUHd4UFhqQzBQTDNYY2lrZmFEK2ZYbU5WLzV5ZkhlSnFnQlE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBcWhIZ1E5MDVZTGRKaFoxeFRMTzlrZG5yOEdCQ1lQWlp2UVY4Z3pBVWFDMTZrTTdOCnZGVnBWOS9vRmNZWHdQYkU0SFRMNjRTcFVNMGlHRldkcFRlckNSL3RpZ3cwUHNjTFovVVZpUzZyQ1pJVVdFNlEKcXA0MDMvSi9TZTlKYmpHTExTdHU4RWprUGdwT2Q3c2pqc3pNa3B2ZTRoQW9JN0Q1YUlVNnVmRDk1QnFieTdtMQpkUTRBQUJ0cmFMM2JNN0pBVEtDSlViYWJJUVE1aHhHT0JuZmJITVBnelR1bEtCUDA5SHJBaU9xbWs3dS85ODJvCmp0dXZhMkx0elp4c0lWQWY1M0praTc5T0laQnRQVTREMk53L1lCOXp4T0dJWG5HNTd5QlZobjFreUJuVCt0NnYKbGNPU3RGWG8vU04yNExyOUY2emlUMWpBUWZvUnVDMFNJYjRSR3dJREFRQUJBb0lCQUUvaWxiVks5T2k1TDQvVApwS1NpeVNqNWRCbzFIUGp1dnJoTEczR0Q1QklMU3NjNlhPbGFOV0ZSaTNLdTJmbUo4SEIrYkVyMHhaTnV4OVVtCllpWjVQNTNKb1lwMnNSUEw2MCtwajdRZ2Q3YkhKMGRUb0NDRXI5R0Ixc2lqM1pvbEszck1MQkF5TFFQM1UyUnEKUXdtUXFZYzBNRDEvMlZycWhqelNXQU4vYjhMMCtLSW9xMGV3LzRjeTlGMzRnb1g5V3J4M1c0dlFJVUM1ZkZhWApxQy9EdTg4Tk1DTFZka1UrWmYvSjlMdUdmNlJmcnR1aHBvYTB0MmdRaVhGTy9mbm1YQUlPMVhrMFRTTjNRbFhHCmd0eWozaUpGWDdmS29OZ1BudTdWOWpjV0tTbkpNelhUelJMUzh4SDdMWEVrZFlVSCtscGU5eXd2Y0tPcWQ4SisKQjBQOGRnRUNnWUVBMWpLRS9DekZWNWlhUVVMVENpOTBWeTRtQkRwcXcwcGxzR0R4OXNZUHljamZIYUp1V1pYOQpWSVI3SEx3VDNabUVub0cxR3RCaEVCVHd5RTJTQWNCNEIyR0xkUzRkOGNzQmZnU2ZZWDNMNlVPK2xIeDdJMjYxClZTRkJnWWhMKzVUa01JNDdldE05R0lRVVdSQWJqNGNpV1J6c3hBdXgzKzZiKzVqWjZITkZLelVDZ1lFQXkwSzEKYVF2b1ErRDIwcmo0WWxPTFY5K0dqN1dKTk5abG5MVWdJaG00bW54RWtjMmR0K3dnNlY0SlVMcEFOS21XeFd6cApLdkpwRXgrUGloTkRnS2hrYTc4R3JEMFZWVGkzbWZVRUhoSmI5S21ucERxK0FhZDdpWXBleVQxc3dIdzgyUy9uCjFzUmpUU3l0bTh4cWszSVpjYW9zaTg5T1NZd1hFbzRjeTNZR2hROENnWUJXTVZZYU05bmxlZDc0eSs4b2RoZ1cKek5jM2RGcHA0NUl2KzVMaWZxanp4Z1VpWTY2TUZqTXV3M0RYQzBmak1GZVJnUmhqaGQ3SkhlUVdka0IrdS9pUQozOHZDaDZBOUlEZWxnaTZ3aUhKNWwyMGxTMEl4NitiRUx2R3hNaXVCUFZUbHhSWmlRb2FmU3ViMVArb1hRNFdxCjNsellOdXlJOC9lSXN1VmRDS1dZMFFLQmdRRENZTVA5ZGg2ak16SzNKNTZZNFU0ak5hYUlMZEhOanE1VG96N2MKZlg1MWRodFkxNnBaWmQyL2JtYzRKVFViWjRiQXZEdHJEN0QrVWJOQ0Z0UDU2STlJSHNFeDI2UllBRXBNVit5ZApHVytJMU9sMWU1dVRGMmhqaXNqRWFCSmxMU28vaExtUVAvUzZxOXhHWHNFWXlnZWRGR0ZQUG11ZWwvTEVrdFRrCm1iVDRid0tCZ1FERlVlRXpMZzk2bDBDNERDcTNlVzh3dDVRWUNxdnhJOFJkWjM4ZFMyTTQzbUMwQ25oc1ZsaTQKN0lmWjFQV0dHNjF0Nit3OVh5bnRyMVhaNWZZZkpuZVZKbGhhd2JLWllaNjFoUFoweU84cGo4ck1aRnE2WmhBQQpZeFRPbitTWHl0ZUdsQzJrSUtwdGtyVHQ1eGRGdk41Rm5rNGRDdVM4R0xsUk42YnhJd09MQlE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRVm85MVBvbHVpZG5pbVg2cWFBcVQvekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEV4V2hjTk1qWXhNVEl4TWpFMQpOVEV4V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ1hBQjR0V1ZSMDhjMDJPSmc3TG1GdjZTdm9HcHk3cStyUmI3ZUJwZGlXUHFESFRuQjgKa2FUUmxQbXd6QXVEQjF0R0JkdG9pcjdlQjhmbmRLR2dFNmU5RGNWMm0xTGhkNVo5MmRkUUlydEk4bGxIeVdHQgpnVUJqZy9SL3hYSVRQNTZ1UmVmaWY3b2N1TXFYTERDZXBSQTlrTGdpekpFcTVPbHFWQlRYVm5RSk9wODdNdTRwCjY2YTZGaDhxR0FSNWJUaDRzTC9nZStIQjlKQXhFN0YxbmRHTUx0UWRjZXowU1dBVWxZcERqMzMxZVZobVdGL3YKYzJOOXVYVXlNcHQvbXVNeTRIUWpXU2c5RXYySHp5M1RYQzdpQys3ZnJFWjlyVDBEaUdnWTVUN04yU0l1RVhUbApXMXNXaUx5OVpmSCtCUVMzMzA1OUJwMlMyR2pzK3UyN0V3ekhBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVV3K0poZUY1OVphWHJiSi9KNWw4cTZFa0N6NUV3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFFaTEwdFNLbW1BSXRNTDZQYzlLWWgxaURrRnhyZWlhQlkvUVRveVVmMG1YK3I3VnYrdXFYbENHCmg1b20yaDA0MzZvRlZ0U0h2UHdqWW96d3hZUmNrQmZuQlRianM5emx6QUlBZVhSQkVNQVVBM2RoTGthVnk0dnAKMGZsb1BWRVZ5d2JSWS9vSzJIVk1RbVYrYWJEUjhyTXRLT3grTFpQbzluRFhKNmdTT3o5V0xOb1U5VlJlNUJMegpNQ203SnBFZkhlS0FoT0l4c3VtRkdidGRrVzdxcmZVZk82THMvSTNTNXRhWUxxRWY0aHNFY2MrZ0FGK3g2dm9vCkEwbW92Zm5QRlNwdnAraXRsSkxsL3NDQlJNclpPYitUSVBEbWI4T25PeTlwQjMrVUNXMVkzYy9ZR29KRFNmd1UKbXFwb2szVGtxY2RGOW1CRDdjVDZvRjdMTzIvZmowdz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTVENDQWpHZ0F3SUJBZ0lSQUx0OVRXTGlzbEJkc0pLNi9JMi9Dd3d3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV4TVZvWERUSTJNVEV5TVRJeApOVFV4TVZvd0l6RWhNQjhHQTFVRUF3d1lLaTVvZFdKaWJHVXRjbVZzWVhrdVkybHNhWFZ0TG1sdk1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQW95elBSclJYME9kV2lLUnRUVHlienE3VTQzbTcKWlpHa05VcHRzZnVydVBEZU1lQm5UUE50TEM1Z01WU1pUeFdObGhRNW9IWHNuRlFkYkJ3c2w0RktRK0ltOFFYeApUOHl5RXAzQS80NTNMbitzS09rSVF4d0huU3lCTjBhV04xOGhkK29SeUF4REhZa1lXeGc0YVhFenZQN1MweTNMCm5RaTB3SWhsS2NyYlM4RklLY3ZuRE1VU2tuWStJd3pvL2YxODFrR2l1OUNiaHhtdDlseFhjbEFLcExtTGNVQUgKUUl4SEV6MlZvRmkyQ1ZMTFQyM1NOamx0c1E4Ykc2eGlxc3Y1djJsaFBIZUVNOGlza1hxVi9LY0JpSVhkSmViNQp2Z0xVakowQXlWbXBRUW5jWHJWMFpxRUY4SDJLTjJDWnhHU002R2ZqdGNCemdsRmFMcVJEUGx6Z0R3SURBUUFCCm80R0dNSUdETUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUIKQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCVEQ0bUY0WG4xbHBldHNuOG5tWHlybwpTUUxQa1RBakJnTlZIUkVFSERBYWdoZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d0RRWUpLb1pJCmh2Y05BUUVMQlFBRGdnRUJBQVE0TWhRWTNVRGdadGFxUHFmUGxaL3g0Z0szcWJHbjNYdEVUUWRHYXlsczBTNUoKSWJLU2lFSDZZZ2pTc0RpQnlKaGJ0Qm5TcWFEekc4dTl0UGdTaUwyc2w4a3VQS0RTZm1peExQVUVjbFNIOEQ0RQpINVM0T0V3UGd1ZUE2anNxeWxEZHlOWkFLY3BTUFlkRkZ3UkRCUzVyeGU1WHNaSFBxTmZmSi9KSHVrUy9mbGdQCnVWSHFwL2xGL3ZncTF3VmU4MFRGYUxFL09sRzZHVlcwcWdxck5ta3FjU2JLMVVHcnNybUhzOWx3OUt6THlSS2IKY25Gb0pZeEtFUngrM3E4bTVRU0dWeldJbS9yVG1hL0dGd3czWWdObTdqSGVZNWdlUzJRQ3RUYzBpczZ6Rzd1YwprWVJIUUZDZEhTR3Z2aGpjRGM0Zlo4a2gySlFkRGpnZkQ1anQxYVk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBb3l6UFJyUlgwT2RXaUtSdFRUeWJ6cTdVNDNtN1paR2tOVXB0c2Z1cnVQRGVNZUJuClRQTnRMQzVnTVZTWlR4V05saFE1b0hYc25GUWRiQndzbDRGS1ErSW04UVh4VDh5eUVwM0EvNDUzTG4rc0tPa0kKUXh3SG5TeUJOMGFXTjE4aGQrb1J5QXhESFlrWVd4ZzRhWEV6dlA3UzB5M0xuUWkwd0lobEtjcmJTOEZJS2N2bgpETVVTa25ZK0l3em8vZjE4MWtHaXU5Q2JoeG10OWx4WGNsQUtwTG1MY1VBSFFJeEhFejJWb0ZpMkNWTExUMjNTCk5qbHRzUThiRzZ4aXFzdjV2MmxoUEhlRU04aXNrWHFWL0tjQmlJWGRKZWI1dmdMVWpKMEF5Vm1wUVFuY1hyVjAKWnFFRjhIMktOMkNaeEdTTTZHZmp0Y0J6Z2xGYUxxUkRQbHpnRHdJREFRQUJBb0lCQVFDYVBudFl2SlRlTmkvSQpUcFc3a3ZVOU5HcXM5Sjg5N2FRcGM4ZXBuTnJBb1grSDZqWDd1WWVUWWVzdjltWk5LWFNEVDI4QnpUYnl0MWh3Cm4xbFBoYm1yM1pVdDlJNGMvc085Y1QzRTFPaTRIWnVodUZaRkNiUHcwT2I4VjA4YjNHTUl0VXhGcThHdG83QlEKTzk3blhVaW8rTUJWTzA3ampCMUFlaTRXaVZrdWkyMUZXaHZnbFoxK1N3V1YvMDNMMEh3R0xzN3ZWSUNOR2JORgpYb1F1NjZmTFdVMG9LdXpwRDVpWWdvVG9pVG94WjdaZEZwdkJoOWEreExPYVJ2bHBBK2RSNkNzOWVBYy83ZVUrCnBXSkN1ZVF5ZjJHeWc0T0N2RXkxSHRDOGVKazBJbHUvbDRPSFkwbGtxUkFDcXozcEZ1WUJiQmRvcWlsLzZOT0QKRDI3RU4vS2hBb0dCQU1KWUNxTnpQREpmNW85UGhTbStrTFRZd0ZrK3VBaGFraU9VckVFTXZFMTlnQ1pSNmlHTApWemFnSGVqNFlFUTZLZFdYMnZvdlRJTEZwcTFSMFBBd0FSZzhHc0E2OUx4NVN6SDMrSWptMjJPdkdoNjdoREozCnpKd2sxc2xFNEdIaGhBQlMyRkk1NURwZkZNYnBEVmVlWVF5bkNJbENERm1TRlFjRVVnNWVQTTlYQW9HQkFOYngKVmtmREpsR01kR0J5bVF2R1I0UW1qWENhNUlZczE2eUFrdktwbEhpeldTRWxycmpmS2t2MnJWV1ZOWUJhUDEzUQorYkhtdWsybHcybnFwQmwrVExHUjY5bzNRbWxZYnNOSkk2R1BnRXZhY290OUhmTWIveEJYSVk4cStrMEQwYnJ5ClFTUHVjVjQzczdSbjMrV2JZTFRDaG1hVytJeVVCRFd4bWtKWk0xb0pBb0dBWk44TnBvakpWZHd3NzNGMnpKUDgKeCtFNDlSbDRxOTFXdk9FT0J6VjFCME44b0djai93VXozMFo4UDgrcko3Nkl1RFI1bENHNHRLZWlPNU9idnc4cgpna2l3R2RaLzhOT0VGQXVCRkkyK2taN3hEOEtFZXkxekpoaDQ0ejY4dUJFMVVuV3RrZ0E2VlpIRVZ2bmYwdnFCCnBPK05uckNKZUhRNk5jb29UUXpjdzBFQ2dZRUFxdGY2aDJHeXhHREtZNXJTMFF3UjdoVWltUjFVaE4yQnMrZ2kKWk9TclVXRGtlRGRXY0RWWmpqV013cGl0aE02MnpSLzhTQTRuaU80M3E2bElNOGN5dUhWT3JRejlLWFNUM1g3MQo1a1dFYVVaQmcyTzRlWEtJUXZtdWYvaGVLUGJmTGlPOTZReHVhY0FHZzErSkZCeHpPbG5mc0ExUms1Tlc0VUxBClpQbzNtZGtDZ1lBeHYvQ1pXWUNwY3BCSlRWMmpsYnNmdTBJTkRndENsMmlwRzNybzRkb2JjQytYMGRIQ0pUNWYKOG1NU3lSRFI0Y3M5bytvTng3VDUzdUppOFEvK3YzS1ZKbWJ6VS9RSk0zTjBNTnJpbEZUbUxyeWpsTGxTNm1QOQpDMk1LbTZJOUwwbnY3MEgzaU1aUlN0UisxSHkxL3paWEduajhoMDdndmJHSHdWckFFUTFYcVE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRVm85MVBvbHVpZG5pbVg2cWFBcVQvekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEV4V2hjTk1qWXhNVEl4TWpFMQpOVEV4V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ1hBQjR0V1ZSMDhjMDJPSmc3TG1GdjZTdm9HcHk3cStyUmI3ZUJwZGlXUHFESFRuQjgKa2FUUmxQbXd6QXVEQjF0R0JkdG9pcjdlQjhmbmRLR2dFNmU5RGNWMm0xTGhkNVo5MmRkUUlydEk4bGxIeVdHQgpnVUJqZy9SL3hYSVRQNTZ1UmVmaWY3b2N1TXFYTERDZXBSQTlrTGdpekpFcTVPbHFWQlRYVm5RSk9wODdNdTRwCjY2YTZGaDhxR0FSNWJUaDRzTC9nZStIQjlKQXhFN0YxbmRHTUx0UWRjZXowU1dBVWxZcERqMzMxZVZobVdGL3YKYzJOOXVYVXlNcHQvbXVNeTRIUWpXU2c5RXYySHp5M1RYQzdpQys3ZnJFWjlyVDBEaUdnWTVUN04yU0l1RVhUbApXMXNXaUx5OVpmSCtCUVMzMzA1OUJwMlMyR2pzK3UyN0V3ekhBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVV3K0poZUY1OVphWHJiSi9KNWw4cTZFa0N6NUV3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFFaTEwdFNLbW1BSXRNTDZQYzlLWWgxaURrRnhyZWlhQlkvUVRveVVmMG1YK3I3VnYrdXFYbENHCmg1b20yaDA0MzZvRlZ0U0h2UHdqWW96d3hZUmNrQmZuQlRianM5emx6QUlBZVhSQkVNQVVBM2RoTGthVnk0dnAKMGZsb1BWRVZ5d2JSWS9vSzJIVk1RbVYrYWJEUjhyTXRLT3grTFpQbzluRFhKNmdTT3o5V0xOb1U5VlJlNUJMegpNQ203SnBFZkhlS0FoT0l4c3VtRkdidGRrVzdxcmZVZk82THMvSTNTNXRhWUxxRWY0aHNFY2MrZ0FGK3g2dm9vCkEwbW92Zm5QRlNwdnAraXRsSkxsL3NDQlJNclpPYitUSVBEbWI4T25PeTlwQjMrVUNXMVkzYy9ZR29KRFNmd1UKbXFwb2szVGtxY2RGOW1CRDdjVDZvRjdMTzIvZmowdz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURURENDQWpTZ0F3SUJBZ0lRRW04NEtSY2Y4THlTKzRsWEdKUndlekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEV4V2hjTk1qWXhNVEl4TWpFMQpOVEV4V2pBbE1TTXdJUVlEVlFRRERCb3FMbU01TG1oMVltSnNaUzFuY25CakxtTnBiR2wxYlM1cGJ6Q0NBU0l3CkRRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMTzljN2Qvc002SEtXeStPSHBtMytNUUdtODkKZWhrWDFHL1VMVW9kZWdCT2k5RVBDbUxTc3E1Unl5TjVmRFVEM0s4VDR3dWdCdDlYaE81M2xqWWEwRnpUK21BTApiSjZOSzNib2l2WVN4SjNpUDZTK213VVhkR0ZTMDdpaWdhazQ3Vmp0dlY2TmJkS3JnRS8vNUFjdElSZ00xcFZkCkpOY1djcVo3UkxEWjI0NHRMSWl1dkRPUW1Xd0s3RUxBQVdsL0RDcjhtRWRib3RRWmpSbFJkb0FWUnJKT1R1Z1EKcE9DU3lHN2FxWXh6N2h5Tk95QmM4SFA1bGVCNUI1cElXRGxuUzJ2eEwwZU9KbVNST1d6SStmaXJUeFZFdURuOQpCRkxGemxNK0VEcWR3c2xjS3g3Ky9EcHBZU3duT3lwdzQ1NWo2RW5zcTNCR0J3SURsbThiTFUyeXRJc0NBd0VBCkFhT0JpRENCaFRBT0JnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0cKQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBd0h3WURWUjBqQkJnd0ZvQVV3K0poZUY1OVphWHJiSi9KNWw4cQo2RWtDejVFd0pRWURWUjBSQkI0d0hJSWFLaTVqT1M1b2RXSmliR1V0WjNKd1l5NWphV3hwZFcwdWFXOHdEUVlKCktvWklodmNOQVFFTEJRQURnZ0VCQURoY1V6NjRvRVBQdFhVakNSbzBIY2VtQlR6MktPaHpERFVYVHVMWTFHZUcKc3JXeVBubVFIZzdBTW1CcnRSVGtLOFJra0hIK3p5RytWZGtWSVJvNUFIa0paYmhGTGRza1RCbFFId3Uzb1IycwpLL0FMMkxEQjF2bm5SbnBudkc0azRZM2JYRXF6SS9qd09SM2JtQVFCODVyRFpqT29PUWUwdDhneE56NkpHUEF1Cks4SmJHSVNDUFNSL0kxTExDN1ZXeVhlVEMxdW5mcytPUmxnUWZvZzFsL1VuT000WHZtWGFHZUFXSWZEUFk2WmoKN0F3TE1STE93bEJpRCtXNnYzWUxQMDd0d1dLQk03Z1NpKzBBYXhiSlllMGoraDJQQmhFL1kwUEdVbVRGejNuUgpDSTZ3UDNYWW5pRFN6d3lIbDhHUVBlNXMrZGVEQUJlbHEvRUowaS93Z240PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBczcxenQzK3d6b2NwYkw0NGVtYmY0eEFhYnoxNkdSZlViOVF0U2gxNkFFNkwwUThLCll0S3lybEhMSTNsOE5RUGNyeFBqQzZBRzMxZUU3bmVXTmhyUVhOUDZZQXRzbm8wcmR1aUs5aExFbmVJL3BMNmIKQlJkMFlWTFR1S0tCcVRqdFdPMjlYbzF0MHF1QVQvL2tCeTBoR0F6V2xWMGsxeFp5cG50RXNObmJqaTBzaUs2OApNNUNaYkFyc1FzQUJhWDhNS3Z5WVIxdWkxQm1OR1ZGMmdCVkdzazVPNkJDazRKTElidHFwakhQdUhJMDdJRnp3CmMvbVY0SGtIbWtoWU9XZExhL0V2UjQ0bVpKRTViTWo1K0t0UEZVUzRPZjBFVXNYT1V6NFFPcDNDeVZ3ckh2NzgKT21saExDYzdLbkRqbm1Qb1NleXJjRVlIQWdPV2J4c3RUYkswaXdJREFRQUJBb0lCQUFOaHNCaW10VnZkWFNFbgpud1ptZ3hYUmlyM0hDVklKaWJ5azRFbEJycmJzdzJLbWhzcC9MazlyU0lnZFZBSG5WYktSakRiK3hzSlM4alJPCldhd2c2d1NrRkZUVVFqSGxkQWpqclNHZURzYnRwOGJnc3lmd1hnY3F1TU1EZzY3OFhETE5Iai8ySnpmTWREaU4KRnV3dnBDekFxUlRjVU1JZk1QOEMyTEwvRmt0aGRCNlBKRnc0ZWVIRjZtZXJNL3ZoUDI1eG1Wai9IRk9US0NUegplQTBBVTZtRjNpTVFBVlQ2Tml6VFI2cFd4ZlBEbTE1RElZVHNrSTBRdXVRNnFra3ViWi9QS09XcFc1VVY3WENvCmZnZE1hOEJUMDAxNjlwMmZhWkRzOVhWR0d5Qm5hWHVRYlRSN3dHUllSQkdUM2xXaTQ2QXVPMURPYkJDcmVtaUkKM2tqVmJORUNnWUVBejJoajhwQXV1V2lsUGx5YW52bHAwNGtrNjhLUXdqV3N0cTAyakxTYUhMelYxVVZvK3RrWApJUlRaRVJmb2FYL2V6bG9ZZVdxR3JtalJGMG4yTHozSDVINnBUVVBhMFZzQ1ZVNlNJUnhNUzFlV3NmZkFRUTJRCnBKeUlkeVRyc3JEWExNeGRYUkVRdzNmT2lvUkRmMUxiS3N6aXVWS2VINjNQdEhsS3B6bnhkS2tDZ1lFQTNkbWwKVkF4RUtlQWtwL2JXV2gyYnNsMGMyeHhETzJwclBDS3Z4M0IycW9KV1NiQlVIaGd3REFxWmVXUU5PT3pxWnBLcwpVbnZWQXZOWFk4TFFTZEc5OW8yY2NsbWFrd1pXaEJNRVFJSXJUbFNBb2JTVk1NWWkybFRQUTM3WCtaRUpleHdMCmpzY21NSGx6ellxVGo1Vm0xOWVYcGxORytGWEFPRlE1MDVVcUxCTUNnWUJGTk9RRTBDK0hGbS9zK3lGczRuUjUKYlUyd2pWK1lMaWpQVzhUVDluOW1EMnlhbVdxS0tWNGFYOForZWFmSGJDK0FVM2ZQSzhoODhlU3pESzdrM0l5UwpwZUVBTXlBVXMzVjMyWnZSQ0l3OHA2RlZDUUpSc3FFTkRGNU13emtTaXdlQm56K1lDbFc1bzRSN205Nlo0Wi9ZCkREMnE4UEpxUjZrQzQyWVJucmYrNFFLQmdRQ2xYM2xyZHAxVkxkMkZTMjRyek1oa0pCNi9nb2puZ0lPaFZ5WDcKSUcyRTJ4V2hab3k5eGtBQ3FlQVA2aklsRGc0SkdpclViYlN5dDF5Y1kvdEtHOHhrUHRteEwvUVd4dkcxRUV2cQpIbDVUekkvNmVwZC92U0w3NTU1ODdNL29IR0taMzZVSjhKQWFNRjdQaUE1SlNSQlpzejg3WC9hV1phMmREOFB2CllkRUcrd0tCZ1FDZFlVYTBYN1ZDS2lpT3oxTVlac0pJREFndmZRZFRyQlpsaTAvT3JkUWFybm5RelVDOEZlVkgKcnVCM1BHS1hnaWtEMWJkSjFuSGNIMTV5ZXpBL0dWWi85RkNETUIrWEJEZVByYTZnblIwN20rVTdlQkh5ZjBPTwpoRjN3ZWtGOHpTbkxZR1NTTVBDYmp3b1VYSFFkcHRidDlCYTFzbDdvdXBTdHc0L3ZYRFF0ZFE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  skip-cnp-status-startup-clean: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: c9
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "19"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  # Default case
  routing-mode: "tunnel"
  tunnel-protocol: "vxlan"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-wireguard: "true"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-local-redirect-policy: "false"

  kube-proxy-replacement: "false"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  enable-host-port: "false"
  enable-external-ips: "false"
  enable-node-port: "false"
  enable-health-check-nodeport: "true"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  ipam-cilium-node-update-rate: "15s"
  cluster-pool-ipv4-cidr: "10.9.0.0/17"
  cluster-pool-ipv4-mask-size: "24"
  disable-cnp-status-updates: "true"
  cnp-node-status-gc-interval: "0s"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "true"
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"
  k8s-client-qps: "5"
  k8s-client-burst: "10"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-connect-timeout: "2"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"

  external-envoy-proxy: "false"
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: c9
    peer-service: "hubble-peer.kube-system.svc.cluster.local:443"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-hubble-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-hubble-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumendpoints
  - ciliumidentities
  verbs:
  - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumexternalworkloads/status
  - ciliumnodes
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumendpoints/status
  verbs:
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumexternalworkloads
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: kvmesh-metrics
    port: 9964
    protocol: TCP
    targetPort: kvmesh-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: NodePort
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
    nodePort: 32379
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-agent: "unconfined"
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: "unconfined"
        container.apparmor.security.beta.kubernetes.io/mount-cgroup: "unconfined"
        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: "unconfined"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        lifecycle:
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - CHOWN
              - KILL
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
              - DAC_OVERRIDE
              - FOWNER
              - SETGID
              - SETUID
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Unprivileged containers need to mount /proc/sys/net from the host
        # to have write access
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        # Unprivileged containers need to mount /proc/sys/kernel from the host
        # to have write access
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Unprivileged containers can't set mount propagation to bidirectional
          # in this case we will mount the bpf fs from an init container that
          # is privileged and set the mount propagation from host to container
          # in Cilium.
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - cilium
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      # Mount the bpf fs if it is not mounted. We will perform this task
      # from a privileged container because the mount propagation bidirectional
      # only works from privileged containers.
      - name: mount-bpf-fs
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        args:
        - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
        command:
        - /bin/bash
        - -c
        - --
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
            drop:
              - ALL
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        resources:
          requests:
            cpu: 100m
            memory: 100Mi # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
      - name: host-proc-sys-net
        hostPath:
          path: /proc/sys/net
          type: Directory
      - name: host-proc-sys-kernel
        hostPath:
          path: /proc/sys/kernel
          type: Directory
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              - key: ca.crt
                path: client-ca.crt
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.14.2@sha256:52f70250dea22e506959439a7c4ea31b10fe8375db62f5c27ab746e3a2af866d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      initContainers:
      - name: etcd-init
        image: "quay.io/coreos/etcd:v3.5.4@sha256:795d8660c48c439a7c3764c2330ed9222ab5db5bb524d8d0607cac76f7ba82a3"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
        - |
          rm -rf /var/run/etcd/*;
          /usr/local/bin/etcd --data-dir=/var/run/etcd --name=clustermesh-apiserver --listen-client-urls=http://127.0.0.1:2379 --advertise-client-urls=http://127.0.0.1:2379 --initial-cluster-token=clustermesh-apiserver --initial-cluster-state=new --auto-compaction-retention=1 &

          # The following key needs to be created before that the cilium agents
          # have the possibility of connecting to etcd.
          etcdctl put cilium/.has-cluster-config true

          etcdctl user add root --no-password;
          etcdctl user grant-role root root;
          etcdctl user add admin-c9 --no-password;
          etcdctl user grant-role admin-c9 root;
          etcdctl user add externalworkload --no-password;
          etcdctl role add externalworkload;
          etcdctl role grant-permission externalworkload --from-key read '';
          etcdctl role grant-permission externalworkload readwrite --prefix cilium/state/noderegister/v1/;
          etcdctl role grant-permission externalworkload readwrite --prefix cilium/.initlock/;
          etcdctl user grant-role externalworkload externalworkload;
          etcdctl user add remote --no-password;
          etcdctl role add remote;
          etcdctl role grant-permission remote --from-key read '';
          etcdctl user grant-role remote remote;
          etcdctl auth enable;
          exit
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        image: "quay.io/coreos/etcd:v3.5.4@sha256:795d8660c48c439a7c3764c2330ed9222ab5db5bb524d8d0607cac76f7ba82a3"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/local/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=clustermesh-apiserver
        - --auto-compaction-retention=1
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.14.2@sha256:0650beac6633a483261640b6539c9609f5a761f4ab4504fd1e6ffe7f2bb82e9a"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt
        - etcd.config=/var/lib/cilium/etcd-config.yaml
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: IDENTITY_ALLOCATION_MODE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: identity-allocation-mode
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        ports:
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir: {}
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "clustermesh-apiserver"
      serviceAccountName: "clustermesh-apiserver"
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: clustermesh-apiserver
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.14.2@sha256:a89030b31f333e8fb1c10d2473250399a1a537c27d022cd8becc1a65d1bef1d6"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            tcpSocket:
              port: grpc
          livenessProbe:
            tcpSocket:
              port: grpc
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          - name: tls
            mountPath: /var/lib/hubble-relay/tls
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Always
      priorityClassName: 
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      priorityClassName: 
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.12.0@sha256:1c876cfa1d5e35bc91e1025c9314f922041592a88b03313c22c1f97a5d2ba88f"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.12.0@sha256:8a79a1aad4fc9c2aa2b3e4379af0af872a89fcec9d99e117188190671c66fc2e"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
---
# Source: cilium/templates/cilium-secrets-namespace.yaml
# Only create the namespace if it's different from Ingress secret namespace or Ingress is not enabled.

# Only create the namespace if it's different from Ingress and Gateway API secret namespaces (if enabled).
