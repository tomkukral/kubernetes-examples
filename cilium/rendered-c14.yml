---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRSHllZFpaeThyTTh0S2lVY1hsVWROREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek0xV2hjTk1qY3dOakV4TVRreQpOek0xV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ280NXNlZ3BTK05UT0NVTTQ1K2FLVmF1NmRrWXRQRTEzSjN1ZEZsejFhSTNPc2JJR3MKcmRPT2hDL0hsK081SnZtaTJZZWtaWHNpYkdEUHJwL21rQ2ptUmZoZGRQc1djaDdNYm94RzgrMWdyaEpDYkFTeApBUFNaTVRyWjNQMFkyWnowRU5SdWZQQTdwQWJ0M1hBWkJ4MFVmZGZtQTQ3dDgzNE40dThuUmIyblRtUkpTNkNkCkRPOXJNU2lHZFQwdUlKUTJTeU1IOVVEVFdNKzF4UjRXWTN0UGJYdWN3di9rZTJkT2xoYmFLbGwzd1pVTXVuMDkKWjA1d3lEODZhRGFTWU5STEdQTDUvTk53WXJFSDhCTU10THpSeW5uRkJxdmdiK2tqNTFRdXh1c0h1a0Nzb1hjNwoxZVovZ1JGT1d0N0gveStLb1p3TXlEUUR0U0hTeWV3WDlNekRBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVV3VTV6NHF5TXNrK3YwTVc3V0M5MTBQODdLdTB3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFJMGV1NHliK0dzdVAyQVpqRHc3ODBkems2eWI5b1o0MzUwNDZuNlVGM3liRFNMellPTGNWN295Cisrd0wyaG5GcUNUb1NFRHhvcjMwUFVpZXkzMVlMRTFGQjlhSkMzNmt2dzIwUXEyaXN3WnhkODNhSjBRY1N5ZlUKMUJMeUpsbG9TYjJZOG9Ba041MzZkbi9Dcko0cEtTdnRMY2QvTUJLaVpKckJ6VkkzU3pJQ01zcHlxclZZR0VIVApoVkxEV0tvVmpMQzZHdUJIZCtMenZHQklBVlRCVGR0YkpKZnNpU3IyVlluM3FRNjB6aUMyc1ZVU3ZsM3FIRDUzCkovYVJ0cEJ4UTZIOHpHQmxVc0pyR2hQWitJUUl5ME4yZE05dDR6QUllejBoc3BjL3JYZDkxSXZzOXRVa01yb1IKRkp3QTRLVzJFSHlDOFVUZkxGWU9uRTZDcVY4Qm9kND0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcU9PYkhvS1V2alV6Z2xET09mbWlsV3J1blpHTFR4TmR5ZDduUlpjOVdpTnpyR3lCCnJLM1Rqb1F2eDVmanVTYjVvdG1IcEdWN0lteGd6NjZmNXBBbzVrWDRYWFQ3Rm5JZXpHNk1SdlB0WUs0U1Ftd0UKc1FEMG1URTYyZHo5R05tYzlCRFVibnp3TzZRRzdkMXdHUWNkRkgzWDVnT083Zk4rRGVMdkowVzlwMDVrU1V1ZwpuUXp2YXpFb2huVTlMaUNVTmtzakIvVkEwMWpQdGNVZUZtTjdUMjE3bk1MLzVIdG5UcFlXMmlwWmQ4R1ZETHA5ClBXZE9jTWcvT21nMmttRFVTeGp5K2Z6VGNHS3hCL0FURExTODBjcDV4UWFyNEcvcEkrZFVMc2JyQjdwQXJLRjMKTzlYbWY0RVJUbHJleC84dmlxR2NETWcwQTdVaDBzbnNGL1RNd3dJREFRQUJBb0lCQUhrRGRZK2NBMVp6S25CUwoxQ0lJZEczWnpCWk5SbU9udmNrN0ZiM3dpMzU5N3BGNndrUG4zYkc5bDdyTlk5ZTBUS1ZhZHUzZDVTZ2FQaGd4CnlOTmRNbUVsZTd3RGFUS0JIUDVncTlUZlRaUzd4Y3VnT0pCWDNldXlzYmVQdUM3SkpzUmZGc2dBYitaY05yYlQKdDFISG5oZWp3RUpKQkc0TnphSEhuSk1vVHFlRXdyd3JIdU1xSGVKZXNQbHFGQnRLdVZmNURkdmYyYm9oNnV5MwpUeXErK25PTlBzZDNKTmpXYVMzNlUwcWRLTVJUbVVHQXpMazJNOTVYeUpRUkV6dE0rekI1K0s5d3dzNG1KT3p4ClBZR2pPQlFxOFc0ZzlOc0VwTCtVb3VVdkd0MmdGZVRCK2t2YmdiWTFpcjRmQ2hlMzE2KzQzRXcrWktNMTZuRXYKRVNONk8wRUNnWUVBeE9OMWZLcURDQzRuN245L0RpY2taZUtLZlRWcW1RQ0s3NVN0V0J0K2JmZjlyc0VnUkxrSAo2SEl6eVNCU0lHZWdEWDVnYUk4VmNJRXpYWW9rQnhuMWxYTE1aT3FLYjFUNEZKWWpqZlNRaEJ2OUsycS9sSHptCmVtTm5WQlF6ZEpuMnl6SjVBNmNyWmNyY1l1S05EYnoyRS9ud2Rpc25SUEJtLzBMNHZyMWgvbUVDZ1lFQTI1Z24KdTlJc044YjFIUzFMK04wdGpzbnQ2eCtEaXg3OTR4bzB6YmNzczNFKy92c3drdHhvVTBCdkRhalZVaEozdTE5awpUUjJQTWxRY1BTbEJPcU42eTg4WWpwa0pVOEM5cU9yUDA1ajFQemViNnNZajVzOWdnT2p1b2NFcm5aRW53OHozCnpTck1ON01vdVZONWpsZ3o3QXZaeWczOVhhVnRDVTlCeEQwOTlhTUNnWUJlVDlxNmNlODhYdWV2M2hEZGxiQmcKd2FpM0czeEplRElWVzNIQmo4SDdLVnl5ZGo1ZnpRWlZ1VWJISkIxUytuQjNwajdHTnl2ODdWYk9pdHFCTUZVcwpWb1pFSFBsZEpTV0VydnF2Q0NTbHM4YU5JcUJNbjV2RHFwUVhlV25BZy9QdEYrdFI3YVRqS001eTY3VEhqT21QClhoMXFiWGR0Rlg4dzdVSzhFM202WVFLQmdRQ2JTb3krekRDcytTd2FDQkJ6MjZYK0Zsc0VMWE1QRFVtcU1yd28KeG1MOE94ZTdwZE9CNkJCMjMxZ3BwcjNFbm43QnFRSDdidTMzUDNnQTRJM2FkQVhBMzZHVUpqRnNZeDg4dDJGbApXQVFIUXNJbVV4ek1ldGJhRXQrKzBDYVI5VGJUeHIxdS85Y1BoTWxGMWZ4ZVo0M0FYZGtVaExRcVozUW1ZMEExCkVNSWlWUUtCZ0dMQzRxVFVoa0UwZVA5T2t1MktRUUVaVGhYSTNTWGtBb2xFMUl0OXA0VUN6eW4zMHVaZ3NYQXkKNU5Zemw5aUNsc3laRWE3TVYwbHdDZDJaSmJlOXBCMTZWYlFlR204VTFsN0Y4STFkR3ZhQXQ2YTNaVjNRTHFwNQpDL3RsaWpzMXJ6cGNaTjhXa1hEbnhEVDFtVHl2UGNrRHZ1WnJnOWk5cWtxZG0yYk1mNEpICi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRSHllZFpaeThyTTh0S2lVY1hsVWROREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek0xV2hjTk1qY3dOakV4TVRreQpOek0xV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ280NXNlZ3BTK05UT0NVTTQ1K2FLVmF1NmRrWXRQRTEzSjN1ZEZsejFhSTNPc2JJR3MKcmRPT2hDL0hsK081SnZtaTJZZWtaWHNpYkdEUHJwL21rQ2ptUmZoZGRQc1djaDdNYm94RzgrMWdyaEpDYkFTeApBUFNaTVRyWjNQMFkyWnowRU5SdWZQQTdwQWJ0M1hBWkJ4MFVmZGZtQTQ3dDgzNE40dThuUmIyblRtUkpTNkNkCkRPOXJNU2lHZFQwdUlKUTJTeU1IOVVEVFdNKzF4UjRXWTN0UGJYdWN3di9rZTJkT2xoYmFLbGwzd1pVTXVuMDkKWjA1d3lEODZhRGFTWU5STEdQTDUvTk53WXJFSDhCTU10THpSeW5uRkJxdmdiK2tqNTFRdXh1c0h1a0Nzb1hjNwoxZVovZ1JGT1d0N0gveStLb1p3TXlEUUR0U0hTeWV3WDlNekRBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVV3VTV6NHF5TXNrK3YwTVc3V0M5MTBQODdLdTB3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFJMGV1NHliK0dzdVAyQVpqRHc3ODBkems2eWI5b1o0MzUwNDZuNlVGM3liRFNMellPTGNWN295Cisrd0wyaG5GcUNUb1NFRHhvcjMwUFVpZXkzMVlMRTFGQjlhSkMzNmt2dzIwUXEyaXN3WnhkODNhSjBRY1N5ZlUKMUJMeUpsbG9TYjJZOG9Ba041MzZkbi9Dcko0cEtTdnRMY2QvTUJLaVpKckJ6VkkzU3pJQ01zcHlxclZZR0VIVApoVkxEV0tvVmpMQzZHdUJIZCtMenZHQklBVlRCVGR0YkpKZnNpU3IyVlluM3FRNjB6aUMyc1ZVU3ZsM3FIRDUzCkovYVJ0cEJ4UTZIOHpHQmxVc0pyR2hQWitJUUl5ME4yZE05dDR6QUllejBoc3BjL3JYZDkxSXZzOXRVa01yb1IKRkp3QTRLVzJFSHlDOFVUZkxGWU9uRTZDcVY4Qm9kND0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLRENDQWhDZ0F3SUJBZ0lRQ3dmdWxDYWdwUnhHOWx0YTRnakhoREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek0yV2hjTk1qY3dOakV4TVRreQpOek0yV2pBVU1SSXdFQVlEVlFRREV3bGhaRzFwYmkxak1UUXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzZhMmluVVpyMWN3RktmUytVb3lPalF2cGNoVVhhRDlZZDZ6TlkxS2RRaTBLYlIvTzkKUERMMnZNWEVHV3h6VllhVHRBT0hXSWgra1MxMDJmZUlXWExtTTVROTRhMi9OeExUWTBWZmN2bm0wM3pnQlFRZQpseWMwSURqVUFGbzVLSHh4cTRKUmFrbk1jT3g4YlJ4NGhRMHNEbHVjVDRETDlqbFV3YjhqUFZYQUVFbjJmUkt4ClJ5R0hJd1BUVjdwbjUzSzRFVzd3QklJc1Fic0k0ZVVkMEEvaHphTkN2cS9nbUZDd1VWQmtIMUxaS1QxbFlFY2gKMkVnZkJpTS9aN0xCT3NTYVRrZWNTWjJoTis1SjJQS2R1RC9HQnVDQS9zK0dRU3FHRWVhZm0renFKNDdPV2ppKwovelRDNkRBdkk3TkY3czJTZm42OHJ0bEFYcVVWU21iSTFUdmJBZ01CQUFHamRqQjBNQTRHQTFVZER3RUIvd1FFCkF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXcKQURBZkJnTlZIU01FR0RBV2dCVEJUblBpckl5eVQ2L1F4YnRZTDNYUS96c3E3VEFVQmdOVkhSRUVEVEFMZ2dscwpiMk5oYkdodmMzUXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSHVDeFo2ZnplcnpNQ3gybk5PM3U4LzJtQUxVCjRXQzVRdHJXQnEvV0tVYXZUQ3RBck0vWGRLd0xaS2syL0QxK2w5dDNTUWZkbUxWam5NZU9raHl3cFh4dHEzMHMKSDFOREMxMGRjT2tMakhPSEtmWXRrb21RQkkwZ3ZYZDAxWEhJdzhLaGMvUVdxeEw3dWRWMzQzS1diSGJ1UjBNWgpGN0dPOVRaWXdwdjB6dlRqemFZWk5oTlFEai9KMGFsRzdOd0hvcDRORldaS1ZJUWlsMjBiOXorRWx0dHVEUnFvCmZPWjc2Tk9haytWRWZyL1Nhc2hLTG1yT05EL2tLcU1nVGVUaTFMQjlMNXVGNTAwMlpwWnpxOTY0L2xEclV0TjAKWVJadVdGNEF6ZmpEdVRJUXZXSzZ5eGpKak1GRFVCemE2a09WeExsYXlzY2s2VlBoS3N1VkR0YmQzV3M9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdW10b3AxR2E5WE1CU24wdmxLTWpvMEw2WElWRjJnL1dIZXN6V05TblVJdENtMGZ6CnZUd3k5cnpGeEJsc2MxV0drN1FEaDFpSWZwRXRkTm4zaUZseTVqT1VQZUd0dnpjUzAyTkZYM0w1NXROODRBVUUKSHBjbk5DQTQxQUJhT1NoOGNhdUNVV3BKekhEc2ZHMGNlSVVOTEE1Ym5FK0F5L1k1Vk1HL0l6MVZ3QkJKOW4wUwpzVWNoaHlNRDAxZTZaK2R5dUJGdThBU0NMRUc3Q09IbEhkQVA0YzJqUXI2djRKaFFzRkZRWkI5UzJTazlaV0JICklkaElId1lqUDJleXdUckVtazVIbkVtZG9UZnVTZGp5bmJnL3hnYmdnUDdQaGtFcWhoSG1uNXZzNmllT3psbzQKdnY4MHd1Z3dMeU96UmU3TmtuNSt2SzdaUUY2bEZVcG15TlU3MndJREFRQUJBb0lCQUZBUVgzTTFIanQ2dUR3NAp4ZDJ0cjFtb0k0VG5ERmdhWXhpWWNvWWRWdnJGeE1hU1FZR3R3Q211YTdYTVFZTExZYkJBS1IvUkMxWm9uY0JJCitRSUxnTWlUc0lCZlU5TURJVWUrcEFYWmlMRDFkZlYwMGc4ZFZnNFNKTFlRcks5Tnp4eTJ6NUtOOXNJaVliOFMKMFo2RmJtSFVqTTMyYTFldUdYTm9mdUh3cnNwOHVDak9JckNiLzV0SVJhc2F0SVREQzVSZEczcUZoWi9TZERlVgpROGs0RDRpQ0c4RGZWWmo5KzBlRTA4OURESE1DS1VXbmN1MnVYbldLNkVYMnZFd0pmRWdtcXRTcDdYQmNFV0pJCko5b3MzRVZlMDVQRjJaOHJTWlNOR3MwbllPR00yODFHVEpJNDFQSHJtQ0MvUmsvNE1LOUViSkIwakNMTGVlMFYKYmg0MnRPa0NnWUVBeU90ay8rN2NBTVVrdWFIdEljaWpnYXhlMVpiY3RLbEdYV0U0TGsvdG1UdE1BaHlyOXJidApKSXpFdlNzL0RNaFBpV1hNanEwYmwxMjlHM0VSNGN2YVBzbklzYmc0SVVQbDZJSmIrWTBzY2dsbGU4Si9lRXdxCmhZM3l3TjQwTVdtWWkycFFjOXY2eVlENjJERzI4d3hXOHlQN0w5WTJ0QjdKQnJkZmRaRmdFQVVDZ1lFQTdZWm4KSDVxanFVT0NQZm1SckJUWGdiREpLbGlKZVV3Q3BwSHdmM2xyZE15RzlQT0RQQTU4dUtLeW9FT0V4VHVzZUhqNAowMWNIblZzZ0xVd1ZoNWNnWE9oMTZqREFXTys4NlI0TTdkYVlQZUNlY0NjdG9HN3A1aFVqVDFGYUVqNHRBcUFsCmxWVXo0b1BNVDFHMjhHcndUQmJPekpQYmdQUEk5b254cEwwMlFsOENnWUVBcDFKeHNEb0plWkswZk90L0FlMkgKVFV4eFJjcjNUblRTSnAzNkhZZHV4WGQrV3h2cGtmTFJGdWtzUnFXblFrdm5BUE9JSVNIRW9vL3NGdGhaSGdPWQpZMFhFSDB6ZFljYWJ4c0FaUEgvM0Raa0pyTUZUU3FtVGw5bVkya215aVp2NDc5Ry80bHpHUTkxb0NYZU5kbWRHCldnSVRBOG1Qa1AwNlNKK1puZDFOZE1rQ2dZRUFqTDBHZllOelZlZmFWRDU4UWlwWFIxRW80UjUwMXBwak42OWgKZ1NiQXRRUTdNd2pXeWM4THQ1c3ZuQ1psbFRnMmlXdWtoQlVkUGUrd3NTWlQyM09BaVl4ejBiL3hPTUZVZmd5QQpQS3phcUU5ZmtiU2xKRnFUM1BESmEwWVl5Slp1dFErUE5WeTIwWkNtanBrc2ZHZmcyalRwYys1b01aQkJrMU5KCkN3UFNFcUVDZ1lBSnRjYXlDWlhUR285aVhQTW5GR2tOSlV1dlZlNkh3eEJHRzAzdGwzL1h6OVBMaFhxajV3VEYKZmMyKzNZYUVFcnlvbitrbDJBd3cwdG5Ga29HaVFIN1g0TlV6OW5tVysvbHdqTHc2Q0xPS2ZlNjcvL2E0V2lxRQpRWW5hOWhUY0hJNHlCMlVWK1Y5TUNSNVNiRXZCWVJJU0VYWHdnT2s5RFZibS9ENEYxRkVyR1E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRSHllZFpaeThyTTh0S2lVY1hsVWROREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek0xV2hjTk1qY3dOakV4TVRreQpOek0xV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ280NXNlZ3BTK05UT0NVTTQ1K2FLVmF1NmRrWXRQRTEzSjN1ZEZsejFhSTNPc2JJR3MKcmRPT2hDL0hsK081SnZtaTJZZWtaWHNpYkdEUHJwL21rQ2ptUmZoZGRQc1djaDdNYm94RzgrMWdyaEpDYkFTeApBUFNaTVRyWjNQMFkyWnowRU5SdWZQQTdwQWJ0M1hBWkJ4MFVmZGZtQTQ3dDgzNE40dThuUmIyblRtUkpTNkNkCkRPOXJNU2lHZFQwdUlKUTJTeU1IOVVEVFdNKzF4UjRXWTN0UGJYdWN3di9rZTJkT2xoYmFLbGwzd1pVTXVuMDkKWjA1d3lEODZhRGFTWU5STEdQTDUvTk53WXJFSDhCTU10THpSeW5uRkJxdmdiK2tqNTFRdXh1c0h1a0Nzb1hjNwoxZVovZ1JGT1d0N0gveStLb1p3TXlEUUR0U0hTeWV3WDlNekRBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVV3VTV6NHF5TXNrK3YwTVc3V0M5MTBQODdLdTB3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFJMGV1NHliK0dzdVAyQVpqRHc3ODBkems2eWI5b1o0MzUwNDZuNlVGM3liRFNMellPTGNWN295Cisrd0wyaG5GcUNUb1NFRHhvcjMwUFVpZXkzMVlMRTFGQjlhSkMzNmt2dzIwUXEyaXN3WnhkODNhSjBRY1N5ZlUKMUJMeUpsbG9TYjJZOG9Ba041MzZkbi9Dcko0cEtTdnRMY2QvTUJLaVpKckJ6VkkzU3pJQ01zcHlxclZZR0VIVApoVkxEV0tvVmpMQzZHdUJIZCtMenZHQklBVlRCVGR0YkpKZnNpU3IyVlluM3FRNjB6aUMyc1ZVU3ZsM3FIRDUzCkovYVJ0cEJ4UTZIOHpHQmxVc0pyR2hQWitJUUl5ME4yZE05dDR6QUllejBoc3BjL3JYZDkxSXZzOXRVa01yb1IKRkp3QTRLVzJFSHlDOFVUZkxGWU9uRTZDcVY4Qm9kND0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lSQUpHSTBwYUJydGQvRDlJamlxUlJkQkV3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN6TmxvWERUSTNNRFl4TVRFNQpNamN6Tmxvd0VURVBNQTBHQTFVRUF4TUdjbVZ0YjNSbE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBCk1JSUJDZ0tDQVFFQXVLY05pcXdSZUlOQkVaeUhpUlZKZnZvbVc3aVN0YlBoWVQ1RjFnZ3FPZm4veHVmNlRWYlMKTDlrWVArYjZJOWM5ZnFObFJmVFlIdU5Td3pBMDRhSE80bjVVT2RzT25HK0dmUTJlbTVGNlRud096aDNvclFIcgpvQzFta3BWNUgzb3pybVNrcTlyc3VYUlp3ellQaGdJc3hrMGEydVBFSzhJSEFqNVFET3Fta01BKy9oVExVMSt4CnQ2T0t3b2ZudjdnZmFrSncra3M4SWpMS3J4SkM5ZHpqNmJzQ0x6MWVrWVdadHFLSFBJaHFZeDZJRU9lSy9NclAKSHUrZW5DNFprMER3TERmc2FvZ0RpRUZ5QktVVWVxRytRUXVPSHBvTS9rY2cvaVdyTnBxb09POUJtbjdNaXJINQplR1pDc0t4SG1xZkJLU0ZHNmRNc01RaUF3N2ZDQ3VSTThRSURBUUFCbzJBd1hqQU9CZ05WSFE4QkFmOEVCQU1DCkJhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXcKSHdZRFZSMGpCQmd3Rm9BVXdVNXo0cXlNc2srdjBNVzdXQzkxMFA4N0t1MHdEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUR1TzVLSVY5WGFuQ3RmcHRvMnBqblRVK3dVOVY4V3hGNGxJTGRERUFVTXdZL1RqUjRXZzB2TytGMmR6CkpqVVhUWHBoNStHNWd1WEFNYlZ3TjVNVTBQNHUyUFVISGQ1Q2RNeG5kSFgyMHJZQ09zaVpDbWlleUt2aTJLK0UKSk55RU55c3RMSGRabjR3cTlNYjl4ZmxyYmJ6akRoVmZvQ2pZeG0xUjJGQStvS204S3k4L2pFY0RhWnpYdmlMTQpNU3M0aXpBbXYwaTFDaCt1V2JGM3dwc3Y1dy9QUWxmbXBybyt4MXl6TzBWdlBBWWFXQ1RadUY2OGRXaEozVWRlCmlPcG1LY2d6ZHpYSFBJbXF3cDcwSUsyZERMMDJKeGxEOTVHYlRNbTNydGlzZHBjQlVMbm1ibWV4RFF3UGZFSWcKdEtkbkZ1ZjJxN1FPWFZWYURiQlhod1p1TnJnPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdUtjTmlxd1JlSU5CRVp5SGlSVkpmdm9tVzdpU3RiUGhZVDVGMWdncU9mbi94dWY2ClRWYlNMOWtZUCtiNkk5YzlmcU5sUmZUWUh1TlN3ekEwNGFITzRuNVVPZHNPbkcrR2ZRMmVtNUY2VG53T3poM28KclFIcm9DMW1rcFY1SDNvenJtU2txOXJzdVhSWnd6WVBoZ0lzeGswYTJ1UEVLOElIQWo1UURPcW1rTUErL2hUTApVMSt4dDZPS3dvZm52N2dmYWtKdytrczhJakxLcnhKQzlkemo2YnNDTHoxZWtZV1p0cUtIUElocVl4NklFT2VLCi9NclBIdStlbkM0WmswRHdMRGZzYW9nRGlFRnlCS1VVZXFHK1FRdU9IcG9NL2tjZy9pV3JOcHFvT085Qm1uN00KaXJINWVHWkNzS3hIbXFmQktTRkc2ZE1zTVFpQXc3ZkNDdVJNOFFJREFRQUJBb0lCQUFDdDFKWHE5aEY4WWhQZgpnSHdYa1BLZmx0NkZlanlpMGJSYTEwVG5PTWlIeTlIK2JtUTBhb2QwZyt0UVBTRStuR0pIMVlxQlVQNGtGZHpUCjQ0M2syMjdueWdXQWNiaFBqSzRQQzhORXNLOXpNMWE4czJ0WGMzZGVVMTg4bjNwbko2Ti9pVDk4aVp4UStqZUcKamw0T3lmMWNzVG1XMXRUV1hOSThTbTBSdTlVU2JrOVV3dDNDaWF2S0xuY1BDTDMxaFgweFZ5Sjc5eE5QOGcrago0SkkyVGN2OFJrc1B3K001NmZaOFIvSXFaQXluTlRuVDdxTWxmYlBaZEs1Sk5wSXh3TkdaL242OEgrbWlESnJXCm5aV1liZlltaDBIVkZjUnVUUmFHbDBiR3JQS2wvemhWbXhXV1hWYkVaSUwyVG9NTHNIZ1hZT3NwUURldTBQa0wKczNZRzBmRUNnWUVBMHhBaEVjaU5uVlZGd3l4dSsrYXZKWmx6d0h1dTdFNjA1ZjJCcXhvK1NvdTFvdzFhOVcrQgp6UENBS2gyb2p0NTZuY2QxYlZ3WXlMYTlJc0dxM2R6Rkd6MmtKYWtNaEtFZ0hhdWxrZ1lBQkUxK1hLVTVxVlZSCmoyREloWDc2c1JZeTloSWdsWGNlMVRPS3owWEt4Y0prYU9EWFpmNFB6dHQwaU9DK3dTR3FDSjBDZ1lFQTMvZHYKekJ2ckhaaXlmUGxxN09yUU0zcnlkVElGOFAzMWg2Z1I5azFwZWtGRHYzQnRua0VIMlJpNjNqMVNXZURJS092TQorVzJTVVhibWdHQjNzMUFxQm5yOTVkbEJjbW5UaUlSUTJtVys0S05jOVpzQk5uOTFqSHpHaE8zWm5xQWplTnRvClpJd3hmbXRpRHpDbWxKZEFyRzZ3NThpSGVoWE93ZHZpS0lEVVUyVUNnWUFiQWR0WmJUSkJ5YUdOb2VmcHI5RUYKbktjbElDNTM2bkpYWTZMdUJBT29na3dSdXluQ2NpeEh6eFozVFNnK2I5Vjh6d01GcFYwK2diT2QrTzRtU1pPbgpNcklJWjZORWJXR3dxa0FiZVUwVFA5OUZkNWJ6UmdtVHNTeTNlRklYeXVGbWYxZFFDTmdYSytzOUxvOE4weHdLCkY0czRiOVFTQWg3ZFRQVGJ2YlVHT1FLQmdBZUJMd25UMWFrRU9OYmZOS29EcEQ1VlhGSjQvcUg0b0lXUEtDcnMKcFNBbmw3R09mdDNTcUFTcVEzaTI3VTk5ckxkU1QyZjhOKzdxNFFaa05SNlpEUTl5aDVkd0ZEVlZQblZRbWJUMwp1OUdqSjdaREgyTklHaFEvQ2hmaU1HeVVTUnYvbmh2Z1pyZ3B1UHR4VWVPZ3ZkWUpUM3cweC9WYlRiWkpPK2JICmlsWFJBb0dCQUlNRytnL2Q2M0k4bWtycDVJUW41clI4cm9uT3NsWGZHdFdYRWVKS3o1NCtCa0RibkQ3VVllR1QKbmVzZTVaRUUwMnFPc2FuRzJPdmVUM2x4UnEzMnBpaS9TWWFPYmk1TGJBbmhJdTFROVVXTi9ZT3FZL05sQU81ZApyYTJSTUZpVUJZekRPMzZ4VHdBSUpoRFJLWEhzblV1bDgwdXZkQ1FsOVdsV1BwSmU5ZVVKCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRSHllZFpaeThyTTh0S2lVY1hsVWROREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek0xV2hjTk1qY3dOakV4TVRreQpOek0xV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ280NXNlZ3BTK05UT0NVTTQ1K2FLVmF1NmRrWXRQRTEzSjN1ZEZsejFhSTNPc2JJR3MKcmRPT2hDL0hsK081SnZtaTJZZWtaWHNpYkdEUHJwL21rQ2ptUmZoZGRQc1djaDdNYm94RzgrMWdyaEpDYkFTeApBUFNaTVRyWjNQMFkyWnowRU5SdWZQQTdwQWJ0M1hBWkJ4MFVmZGZtQTQ3dDgzNE40dThuUmIyblRtUkpTNkNkCkRPOXJNU2lHZFQwdUlKUTJTeU1IOVVEVFdNKzF4UjRXWTN0UGJYdWN3di9rZTJkT2xoYmFLbGwzd1pVTXVuMDkKWjA1d3lEODZhRGFTWU5STEdQTDUvTk53WXJFSDhCTU10THpSeW5uRkJxdmdiK2tqNTFRdXh1c0h1a0Nzb1hjNwoxZVovZ1JGT1d0N0gveStLb1p3TXlEUUR0U0hTeWV3WDlNekRBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVV3VTV6NHF5TXNrK3YwTVc3V0M5MTBQODdLdTB3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFJMGV1NHliK0dzdVAyQVpqRHc3ODBkems2eWI5b1o0MzUwNDZuNlVGM3liRFNMellPTGNWN295Cisrd0wyaG5GcUNUb1NFRHhvcjMwUFVpZXkzMVlMRTFGQjlhSkMzNmt2dzIwUXEyaXN3WnhkODNhSjBRY1N5ZlUKMUJMeUpsbG9TYjJZOG9Ba041MzZkbi9Dcko0cEtTdnRMY2QvTUJLaVpKckJ6VkkzU3pJQ01zcHlxclZZR0VIVApoVkxEV0tvVmpMQzZHdUJIZCtMenZHQklBVlRCVGR0YkpKZnNpU3IyVlluM3FRNjB6aUMyc1ZVU3ZsM3FIRDUzCkovYVJ0cEJ4UTZIOHpHQmxVc0pyR2hQWitJUUl5ME4yZE05dDR6QUllejBoc3BjL3JYZDkxSXZzOXRVa01yb1IKRkp3QTRLVzJFSHlDOFVUZkxGWU9uRTZDcVY4Qm9kND0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURwekNDQW8rZ0F3SUJBZ0lRSVJ0TnhDTE5qUTY4UWQ3RFpZWE9uakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek0yV2hjTk1qY3dOakV4TVRreQpOek0yV2pBcU1TZ3dKZ1lEVlFRREV4OWpiSFZ6ZEdWeWJXVnphQzFoY0dselpYSjJaWEl1WTJsc2FYVnRMbWx2Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBcm51bWpOTVJuditLd2ZidnhBb3IKNVNjdVRHbFNERG56WHJSYlNtZlNPZzc2SFk5cG9QZFRCdlkyZkh6bjFSektkd1J3ekNVOHNrR2dJU1NLQzY0cQpzNUhSYVZTOG5uVXBnM3lzUVVaL21JWDhNNzgwSmZjN21tanM5UGplVWhicTZMSDhqbmZqTWUwVkl6NWdvQ3JICk5STzR4eDlOcHB5V3RBVld3eWdDMlRZVE5KQy8rK3UvemYxQnBmeWoyeS94SlVUVUpmNTV1cm9OSkxVbG9yc1YKelJTUTUvYVIzSGpUcFE0alF0ZDRXbkp1TnRMc3dObkc3dnY2NzIvaTNRb2xOelFvOWdJZUVmYjdIdXl6MEt1eQprTlhlMEpBS2JQaVdhT2lHUHE3MDZHaXB5SGFWOG1uSzQ2V0huQjBGOWg4WnIxeVA0SFFLcEtjWGcwQ0RzMUVHCmVRSURBUUFCbzRIZU1JSGJNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0QKQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JUQlRuUGlySXl5VDYvUQp4YnRZTDNYUS96c3E3VEI3QmdOVkhSRUVkREJ5Z2g5amJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXVZMmxzCmFYVnRMbWx2Z2hBcUxtMWxjMmd1WTJsc2FYVnRMbWx2Z2lWamJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXUKYTNWaVpTMXplWE4wWlcwdWMzWmpod1IvQUFBQmh4QUFBQUFBQUFBQUFBQUFBQUFBQUFBQk1BMEdDU3FHU0liMwpEUUVCQ3dVQUE0SUJBUUE2emZuaHY0eGpmNm52RjkwNi9QZGUwQVlBTTJmTmxVRno0V1FodC9RRTlvcUhTdlBlClRpVnhNR1J3Sy9KM1JZRXd6WVVtWG1GeGJLeUM1NHVBSHc1eW5ZNHFqNyt1T3kydE9KMVUvS3RoT0lLL1RadTIKY1g2dlRFaEJhQ01zOTZDN0xUSG9ubXVPTnRuU1RFeDRvbjFvQWlZaHNSa29pQ283MGQ5blNZc25yNXdDTGlIRQpyTExQaDdvckVnMXNKemQvVEhBdkh0eEhxQ0V0S3RqK1I4NUV4NGY3YlVRSFBEb1hIUjZmRE5wYjJjTnFaRUJJCmJhUEFjTTBidXYrQUs2SGlvdGNaSlZBcEJ4ZXFydmZWbW0rUGRhSy95dllnZzN5aFhCTVRmcXpOSjlhdzJHcWwKTU1QaHNUMDdMUUpQZmh6MlZnTndPc3VvZUVmMFpneDJqanRLCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcm51bWpOTVJuditLd2ZidnhBb3I1U2N1VEdsU0REbnpYclJiU21mU09nNzZIWTlwCm9QZFRCdlkyZkh6bjFSektkd1J3ekNVOHNrR2dJU1NLQzY0cXM1SFJhVlM4bm5VcGczeXNRVVovbUlYOE03ODAKSmZjN21tanM5UGplVWhicTZMSDhqbmZqTWUwVkl6NWdvQ3JITlJPNHh4OU5wcHlXdEFWV3d5Z0MyVFlUTkpDLworK3UvemYxQnBmeWoyeS94SlVUVUpmNTV1cm9OSkxVbG9yc1Z6UlNRNS9hUjNIalRwUTRqUXRkNFduSnVOdExzCndObkc3dnY2NzIvaTNRb2xOelFvOWdJZUVmYjdIdXl6MEt1eWtOWGUwSkFLYlBpV2FPaUdQcTcwNkdpcHlIYVYKOG1uSzQ2V0huQjBGOWg4WnIxeVA0SFFLcEtjWGcwQ0RzMUVHZVFJREFRQUJBb0lCQUE4VVlMQ0xEVnJRZXcySQphZkJuY0tPOVh5TDdkenZYUmxGSkJSckpIa0ltU1RlRXpYdzc0OUVXTmw5TDdEMWUzNkNwb1pZRElkdkdFREROCkY2RXF6RVg0dEVDR01rYi9tVGJqNzM4MHVKSldBaFgyMEdyM2t3OGxRbFZwck0wcmJlSHVnQVZRRnpLWmF0cEEKNmRqdDJZbWN5cnRxMlNzdEhWa3huTzRBNXo0ZWFhMXNEdXRnR0tYTWNDR1VLUzlTbUozNnpySG5QYm5FMlp0MQpSdUoxaWx5bVc3bUlWWXRGVCtidlM0YkVmYU1INVpMZUFHWFUyUXhTVmtBdzBuYmhDbjFtWTNNK0t1Z1BJSnlXCk4yQk5vL1FNeVVodytrM2Y0M2dKWU5TSFlMNmRaOUllcUNvdXdaV1UxOUpUNThIaFVTR01OVGlXZDJvRGhISVkKSFluOGNnRUNnWUVBNGZ0UFJWTVl6Zk51dFM3YWJOcVlwUEkrSytCUzZicmtUdjFidVZ6a3R6cU4vNTc4bmlGZwp0djdqVnVqR1dUNXB6N3VabitxenlCblJOZWhSMVpFWGtWcmhjMUVCREtYNHlhNkZXcGZzUis0amFmVEhrREQ0ClYzVFgyVGpUZk9scWljQTJRbWhVYjlHcisrT3dDaTVGUjdvcEUzTHdKRzRkTDZ6L0tPaXlvTFVDZ1lFQXhha1cKUVRHTDVKSUN0Y1o4Mk5Wa1VUeEZ1UTIzMzRCeEVnYmJmSTVRdWxDdmFNcjJZTVFCTUZnYURlSytlMVdpL0xxegpYZ1RxdnlRelZOSzYyOFlBK3A3UWdHc1Q5RGEvbS9BWVdEUXVsMlV4MnBhZWFPNHBaOURGeWd0RmlSVEZiVzZsCjA5enZPQ21NZHlYUkRDYmwrbE5WS3pkNURUMy8yZGZiWjdha1hUVUNnWUE4MmwvT1cwSWlzNXJzVDJHaVRuc3MKYjg4dUlZb3lScEdVYzhWdmRRUmlFdktLRTFZVGZ3bDhQY2NhY0RSNWM4VXFtMm9URmpDemdjQkVzL3JWZCt6UQp4NWhPWlZIVEJoNm9zTVpZVHZEaHJjNzdpVjcwQlR2YTBTd080cTZReElwYjdkYXVxMG1Sa3ZTdEwvTUh5czM5Ck1yUTgrSWFTU05Tek1mTEVJV1Y0d1FLQmdIQzNyUDQrZi9VM29wNEFjOSsvU1BiZWRUQkRkM0RZTVNMRGtGVG0KWDNqd1hDZFpYc2p0M1hPeE9pSmpCSmNXemR4cnA2L2RBL1UrY3B0VGxNV1JrNnRYOTdUVDIwd3dFSEtmcDNKZApSNWlFVjdxOG05ZGd3WEgzWjJPQnJBU3hPS2pnS1dhNUhoNGI2NE5pcUdUU3BlRnJ0aXp2OUhNdHdRSjhpeDBJCjFaQmxBb0dCQUxsMzJNREFJMlJVTXV5ZTVnQzR0Q20yc2tHbXJpcVoxcStldjZFbkV3NEN4QkdVd0JJZjIxRXIKZUZFOVh4OFJBVFdTVFhBSG1NMXl1cEp3bVZUaDBXTlEzU01aQXkzQ1hZdFZkWkw2MVJHK2pWQjVGREd6aXA3OQpsT09OUXIyM0dKTUNzejRQZ0l1SkRQM3dSSDkxTjYrZnhzeDBsNXlxb29vdDFqbHEweFN3Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRSHllZFpaeThyTTh0S2lVY1hsVWROREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek0xV2hjTk1qY3dOakV4TVRreQpOek0xV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ280NXNlZ3BTK05UT0NVTTQ1K2FLVmF1NmRrWXRQRTEzSjN1ZEZsejFhSTNPc2JJR3MKcmRPT2hDL0hsK081SnZtaTJZZWtaWHNpYkdEUHJwL21rQ2ptUmZoZGRQc1djaDdNYm94RzgrMWdyaEpDYkFTeApBUFNaTVRyWjNQMFkyWnowRU5SdWZQQTdwQWJ0M1hBWkJ4MFVmZGZtQTQ3dDgzNE40dThuUmIyblRtUkpTNkNkCkRPOXJNU2lHZFQwdUlKUTJTeU1IOVVEVFdNKzF4UjRXWTN0UGJYdWN3di9rZTJkT2xoYmFLbGwzd1pVTXVuMDkKWjA1d3lEODZhRGFTWU5STEdQTDUvTk53WXJFSDhCTU10THpSeW5uRkJxdmdiK2tqNTFRdXh1c0h1a0Nzb1hjNwoxZVovZ1JGT1d0N0gveStLb1p3TXlEUUR0U0hTeWV3WDlNekRBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVV3VTV6NHF5TXNrK3YwTVc3V0M5MTBQODdLdTB3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFJMGV1NHliK0dzdVAyQVpqRHc3ODBkems2eWI5b1o0MzUwNDZuNlVGM3liRFNMellPTGNWN295Cisrd0wyaG5GcUNUb1NFRHhvcjMwUFVpZXkzMVlMRTFGQjlhSkMzNmt2dzIwUXEyaXN3WnhkODNhSjBRY1N5ZlUKMUJMeUpsbG9TYjJZOG9Ba041MzZkbi9Dcko0cEtTdnRMY2QvTUJLaVpKckJ6VkkzU3pJQ01zcHlxclZZR0VIVApoVkxEV0tvVmpMQzZHdUJIZCtMenZHQklBVlRCVGR0YkpKZnNpU3IyVlluM3FRNjB6aUMyc1ZVU3ZsM3FIRDUzCkovYVJ0cEJ4UTZIOHpHQmxVc0pyR2hQWitJUUl5ME4yZE05dDR6QUllejBoc3BjL3JYZDkxSXZzOXRVa01yb1IKRkp3QTRLVzJFSHlDOFVUZkxGWU9uRTZDcVY4Qm9kND0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTRENDQWpDZ0F3SUJBZ0lRWXJpOEd1dHhLUlA4ZDNBSmxiUTlUREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek0yV2hjTk1qY3dOakV4TVRreQpOek0yV2pBak1TRXdId1lEVlFRRERCZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDNEdBZ2VrNTd2ZE9iSWVXWGsvdjlvN1NHaTlZSHkKL3dzdjFMbnVVSlNxZmVrRzRTaWNtdzRrMElJRFBCTGFCVFJIdlF5NUJvY0JSVDNzdjFtUEoyZkhsWDI4dHdBQwprQllUK0JYcDhxWFZLeXZqREZqVDQrOTQvWEJUUzFYVWkzS01BVTZubWM3L1lSd0RmR05reThPMUkzRjNyK3ZMCnkzR05PRTF0YjBFQzJRc2gvM0oraGxHbHJVT215OHNjYlRmbTdXVEJ4Qng3dGxrbmZSdWxtTHI5WldvRGdRL1QKd1NXalJMekZ1YisxTXl3ZGk2ZFVBZGhRNnYzOGpEWjhJOVQvcEZQeWtzWCtNNkhDUFhwYlA0MXc2aTFPUmFDNwpUVlR6U2xqbUlNK2dIV1RkcXhFMTdRNWNaUDZhRzB6T21LTTJJc3M0NUxPY3g5b0p0cUlSZlh6bkFnTUJBQUdqCmdZWXdnWU13RGdZRFZSMFBBUUgvQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUYKQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUI4R0ExVWRJd1FZTUJhQUZNRk9jK0tzakxKUHI5REZ1MWd2ZGRELwpPeXJ0TUNNR0ExVWRFUVFjTUJxQ0dDb3VhSFZpWW14bExYSmxiR0Y1TG1OcGJHbDFiUzVwYnpBTkJna3Foa2lHCjl3MEJBUXNGQUFPQ0FRRUFqajdkMGZDNktIZjBCMXl6bTBUVUl1STU0enBONm9yUWRwaWxpc3BzeHE4Q3hqbmwKelIrYUlKWlprQjhES1g2UUdSbFNSVWJ2L01Gb3RUcUlvb2JaMnRwNE9wc1MwbmNtSjNwRmtsNkJMbWV5MFFlRgpmdTBEdVQzYWJDUDV5Yk5JRU00V2NBSDdLcEtTdlBHLy8xV3JNa09Nelc3dUdNVm1SUWh1WE1Wa3BvRVphSFp6CjQxRVdQaGthTUpkT1pUcGkwekpEdWZabEVJZEZ4eGZyOEI5aDc4eU1IL2pFYmtZZUVOci83ODlkWW04OEdWalgKM1hIaGxnTys0UExWaGJmbWEyY21ESEZYUFhORGZXbllYVUdVNWtkS0JGUC9wWmpOaFlUUzM3NC9kaUVWNjR6OQpQcWtXQTRnYXBKTUVwTzYrL0JPcUVTYUlBbGl2MjVnSWRla253QT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdUJnSUhwT2U3M1RteUhsbDVQNy9hTzBob3ZXQjh2OExMOVM1N2xDVXFuM3BCdUVvCm5Kc09KTkNDQXp3UzJnVTBSNzBNdVFhSEFVVTk3TDlaanlkbng1Vjl2TGNBQXBBV0UvZ1Y2ZktsMVNzcjR3eFkKMCtQdmVQMXdVMHRWMUl0eWpBRk9wNW5PLzJFY0EzeGpaTXZEdFNOeGQ2L3J5OHR4alRoTmJXOUJBdGtMSWY5eQpmb1pScGExRHBzdkxIRzAzNXUxa3djUWNlN1paSjMwYnBaaTYvV1ZxQTRFUDA4RWxvMFM4eGJtL3RUTXNIWXVuClZBSFlVT3I5L0l3MmZDUFUvNlJUOHBMRi9qT2h3ajE2V3orTmNPb3RUa1dndTAxVTgwcFk1aURQb0IxazNhc1IKTmUwT1hHVCttaHRNenBpak5pTExPT1N6bk1mYUNiYWlFWDE4NXdJREFRQUJBb0lCQVFDMVo5ajRhSGRCZDJ6RApOLzFVZm9Lb25xTjZ0WHBzUFM2RTM1YW9ZL2RiV2Q5Nnkvejg5VDRtd09DYzEyR3NQVnliSkl1WTkvbXBJdFkyCnFRaFRySHp6aXpmdjhsU3NNZGZQcmJQS2FUVklyZFg5VW5sbHMwS1Rjd3B3eWRlMkxnT2VPdHVMQkdHWi9kTmgKQy8zVm9ZVWt4ZHhXR0tDK25hY3poYnVtanU3OUliNXNJWmVWZ3dkL043U3dhbElaMG9ZLzJXaGpXOXNLelJ2Ngp6UXlsYlBEQWhHbnBGdVEzdGNSU3VLdzFIOUJETXlocVFJSXZoanFnVWl1Y3MzanlVYTNLNWRkdUxZcGo4ZmpuCjhlZllPVzdsV0ZXWVJ3ZzloVlBUZFJZQmNoaFRlcy9pYWFLNzFOd1RkWmNnbGZsVmdsZTA3eDdIT1hGQ1YyY0IKNElQSUh2K0JBb0dCQU1sY3Fudk1lUE53dVZZZi9lN0RCcmZLa29HLzR2R1JxSWdrSk9qYzhGeStub2YvRnlDOAo2MXNWWVRRWnVhZTdsY0ZTZlRCRlFYMjR2ZVllS1MwTXFNaE5oWDhyV0szT1A2YzRSQ1VhWDlTaktybmxkNVR4CjFQSTA3MlRneG5BeWNZRk5DTDNCOEF4UTNPOFAzeDVFdzd0UUk2TjJsWVozbFhmVGgxTS9BdUUzQW9HQkFPb0wKM0ZSOU5XckJrZGRUeUZFaFhKc1d1amJCM2VBNGRua08rcDNlRXNGYmNNSDNOOXJFVjcvVlhYVU03Z3N1MUxtNApZOVZyR01xMFNVVW9wVU1aQlkzUHRiSFVzM0RGUlRrVm9BZjZLbVNJUk1KS3hVSjFFNmxBNFhqbkRSMGtqN3NNCkdlRENOWVVzNXdPTFF1bkJmUkt1ZlFvbFlPcnFGUGNBaTNsWXBOblJBb0dBTkJLV3MvVW93aXZBZ2hrNzNlYnAKY2RZZEZSaStZNkk3WnhtUndmYUE0anNaWENvSG5SdTk4WXdSMnh0Yis1aHpIYzlyT0hSd2YwYXJOVHRQZ3Fybgphd1ZCSktYZEJQVjFXSlVnYWtmcnlGMTV5eUVnVDVCS2RXaGpFRDlna2RzNXB5cDR2RG5QRGlCTFFqZGtoN3RZCnNyUUN3MThEUkFiZ3pHQVRldCtzcXZrQ2dZRUEyaEdaQmlQdmpIdTFMbU5EQnN6RjR6OEczQlJBYmpWTnRiZ08KTE4rSXJCNU43bnd3ejZZWGVJY040QXpmRXc1Y2FIcjBraHFLYS93Vk5Ob05PWHByNFZrQ0d5SnEydzBEVlkvZgpudThwWnFoTklKYllPdmFwRGcrRXhjaktRRGdicjVVejIyWTR4ZEF6b3VxenV1ZHNhT2FwWExXOUdzUm1La3FZCnFjUzlQTEVDZ1lFQWlIWXZmRW9zUTFSNmJ6VFY0MFVBNmI3MStPNzFPRDM3VGFIWEJBVW9IZ2dkNVJsRHlEeUQKUzFzSGJaS09uU1R1NmxGVVVmV0N1YWEzM1ZoZ2JvZzJCM21TaU5sUWQ1YUYvZG5NOEcvTmdQMFI5Uk4xRUpqSQprL0gycHVzMEhWSG5yOGxVeGNwYnZFUDJTSllDdXJkMG1DdlBrNmlDcXAwM3NEWEQrYVg5YkxzPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRSHllZFpaeThyTTh0S2lVY1hsVWROREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek0xV2hjTk1qY3dOakV4TVRreQpOek0xV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ280NXNlZ3BTK05UT0NVTTQ1K2FLVmF1NmRrWXRQRTEzSjN1ZEZsejFhSTNPc2JJR3MKcmRPT2hDL0hsK081SnZtaTJZZWtaWHNpYkdEUHJwL21rQ2ptUmZoZGRQc1djaDdNYm94RzgrMWdyaEpDYkFTeApBUFNaTVRyWjNQMFkyWnowRU5SdWZQQTdwQWJ0M1hBWkJ4MFVmZGZtQTQ3dDgzNE40dThuUmIyblRtUkpTNkNkCkRPOXJNU2lHZFQwdUlKUTJTeU1IOVVEVFdNKzF4UjRXWTN0UGJYdWN3di9rZTJkT2xoYmFLbGwzd1pVTXVuMDkKWjA1d3lEODZhRGFTWU5STEdQTDUvTk53WXJFSDhCTU10THpSeW5uRkJxdmdiK2tqNTFRdXh1c0h1a0Nzb1hjNwoxZVovZ1JGT1d0N0gveStLb1p3TXlEUUR0U0hTeWV3WDlNekRBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVV3VTV6NHF5TXNrK3YwTVc3V0M5MTBQODdLdTB3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFJMGV1NHliK0dzdVAyQVpqRHc3ODBkems2eWI5b1o0MzUwNDZuNlVGM3liRFNMellPTGNWN295Cisrd0wyaG5GcUNUb1NFRHhvcjMwUFVpZXkzMVlMRTFGQjlhSkMzNmt2dzIwUXEyaXN3WnhkODNhSjBRY1N5ZlUKMUJMeUpsbG9TYjJZOG9Ba041MzZkbi9Dcko0cEtTdnRMY2QvTUJLaVpKckJ6VkkzU3pJQ01zcHlxclZZR0VIVApoVkxEV0tvVmpMQzZHdUJIZCtMenZHQklBVlRCVGR0YkpKZnNpU3IyVlluM3FRNjB6aUMyc1ZVU3ZsM3FIRDUzCkovYVJ0cEJ4UTZIOHpHQmxVc0pyR2hQWitJUUl5ME4yZE05dDR6QUllejBoc3BjL3JYZDkxSXZzOXRVa01yb1IKRkp3QTRLVzJFSHlDOFVUZkxGWU9uRTZDcVY4Qm9kND0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUakNDQWphZ0F3SUJBZ0lRVngxUFRXNmFLNkNJTTMyODhJK2xCREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek0yV2hjTk1qY3dOakV4TVRreQpOek0yV2pBbU1TUXdJZ1lEVlFRRERCc3FMbU14TkM1b2RXSmliR1V0WjNKd1l5NWphV3hwZFcwdWFXOHdnZ0VpCk1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRREdvakFXZjZGY2NuWDQzaDRXUHJuUXpXa2gKUFNpZmswOTVyb0pha2RLcTNudjhUSHlxUUYwK1lmczVqekpYZ2swWFNuU0trMjJPNHNEUUxhK2wyU1dQQXJZWgpQeE13TjN5UlRJZ0VwSUNFTzZadmRlN1JmbXc4eDZ3SENVM2hVS2kweHRXNk95bHdSV0FxbW0zNUszNkJ5UGhJCjZHbmdIbnF5Vk1xbkY1MUh3WndjUjFqRW02aGszS3BFQkZLVEt5V1p1WUNqelVDMjJjUTRzVmxvemtDSkRadGMKT29Ud00yT2FSc0hLcFY4ZDBDaFdXUFg5WEVqWXdLSXJ5YXN0V2RMSXJRU3R1V0JnQSt4ODF5MUxzNWZFR1VaNQppSjYzNFdJaVNHNUVPL0NJeXpVUGlidk1QUGF4QTFsR3drdmN3Nmpjc3BnZFVoWXBFRHBPKytQMkNVT1JBZ01CCkFBR2pnWWt3Z1lZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGTUZPYytLc2pMSlByOURGdTFndgpkZEQvT3lydE1DWUdBMVVkRVFRZk1CMkNHeW91WXpFMExtaDFZbUpzWlMxbmNuQmpMbU5wYkdsMWJTNXBiekFOCkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQVpHeC9wSnZCM0JuZjgyYzNFYWJZejE4dnJ6WmF3SVhwa2pORmxUUzAKOGhHaWpWMkgwUVg0VnhHQUNsRCtVQVR3N0JtVytDNHQ3TmN0RVZlbVlTclR3N0dReTNnQ3lLZlZoZndSUzJSYgo2S3lQRXQvUFlJckFLNzVXWDNDNkFXQ01iWE95bWZyb3JEZEE4RDlJc0NtZnRCZFBBMDJUYVd0V2tIV2Q3R1JmCnp1dnZYVmV4YjljVUNvQzAyYmQ5MUxDMThPTllXemdONitFV3BoV1VvS1JocUtkQjZKTTRWbXRMMFJqV2hUMjEKLzhHaktPVXNoaUY3WllCS1krYkpnMnhkQjNGZTg2ZXBMcGN3UEFoVlFOczVXamtqcWthNW5zNWF2WUJiYXdyaApZbGs4Qyt4VTdBNWYrUUg3SDNRVkx5Q3B0UjhpSjl5MEtYRFZvUVFTZ2lrK3ZnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeHFJd0ZuK2hYSEoxK040ZUZqNjUwTTFwSVQwb241TlBlYTZDV3BIU3F0NTcvRXg4CnFrQmRQbUg3T1k4eVY0Sk5GMHAwaXBOdGp1TEEwQzJ2cGRrbGp3SzJHVDhUTURkOGtVeUlCS1NBaER1bWIzWHUKMFg1c1BNZXNCd2xONFZDb3RNYlZ1anNwY0VWZ0twcHQrU3QrZ2NqNFNPaHA0QjU2c2xUS3B4ZWRSOEdjSEVkWQp4SnVvWk55cVJBUlNreXNsbWJtQW84MUF0dG5FT0xGWmFNNUFpUTJiWERxRThETmpta2JCeXFWZkhkQW9WbGoxCi9WeEkyTUNpSzhtckxWblN5SzBFcmJsZ1lBUHNmTmN0UzdPWHhCbEdlWWlldCtGaUlraHVSRHZ3aU1zMUQ0bTcKekR6MnNRTlpSc0pMM01PbzNMS1lIVklXS1JBNlR2dmo5Z2xEa1FJREFRQUJBb0lCQUd1RVN1ZEN1b01oNmIyRgo3Vjg1SUxkbkdHckhnZit1YXl5QVMwcmU5OXRKaG04d3I2SXdLTWlsbktpeFhCeUdDVmg4RXMwWHRBdk5yWFNCCjVqdXRhR2thbkpyWnkzY2o4YWRzZDR1Yngzek1GUERzTXhMdWpZUHd5S3NlWEN1RHoyM2Eyc0Z0V0tiT3hwa0kKOGxJWE91amhjWk4xU2lub0ZaNEZ5NVBhY21YdDd5OWU1SVVNR280V0lKd2poSlkyc3diV1VnWkRkakFLV0Vndwp3ZXB3VU5CYksrdDllbU1sSFEzUElkSm9xSjhsc2VzUitZb3ZQWiszVjUxN3FTaE9WYkpUcWRLdHNhVDlBTEx5Cmx0c3ROK1IxWmF4SVA4R3pLemNVYUw0cTA1U2gvRlR5VkIrZ2ZUaUgwbjE5WUlLQVRrNll0d21YcFlFL3BzYmkKVjd2VlRvRUNnWUVBK2xtRWhTQjFhNlJBTytOZlRjQTRDd1JEY2J6QUozRStEVXY0bnYycjExOTlIbWtqMWEvWQoxNzc0eFNKdXFkSWtraDFUa3RVcm1qTUkrTnFRNG94WDZtcS9OdE1mNHlrd1AxSHFKSXFkdXJwNEswVytTVWpiCmRpak9WaGdzRGRSbnVPWElhUGE5UmlIT1NhMnY5cStHRmEvajU5Rmh4YmZ0R2UyRXNaSk9WUGtDZ1lFQXl4M2MKdkNVQTdqd2ptMHFhdFZmRXFlRUpvV2ltVk8xeWJ2eDVuSWlJY1oyRkpFU05yQWMrMlFZWThxdzFUUDBxazNYaQozNVZxRGlFK1VBcmsvcklTTUM1bncwV2Y0WEo1WmswdVNhV3RLSEJBK3hkSkdYTTNhN1NwbjdsRHBQNGFBM2Q4CnMydXZiYVBoNDlkN045WEkwZFpKdUJhYWZLLzRlZnBDeFhZdXdWa0NnWUIwV0UvTzhxTy9MNmt1YTkrcHFaQWkKQm93MWVtdXVxT0VXbXR6alBxNnl1OHpRNmpuZUlBZmRWQUlXMDRhc1kxM2RqY1YrTXBVOTUwUGZLdXcwYk5hYQp1WnM5cG1abVVvajZsRjRGTjJwUUVrS3drWXY2VU9LMUNnZkNXUjk0R2VOT09YT20zQ3hnUUd1M01BSGIyZnl0CmJYMjBDVW12OG1jOUtuWUZkQ0gxT1FLQmdRQzdJS1h1Q0VGVk9yNnJJUTVySjVNZDF4K2lQdUdPdUx1R21NQUoKZ0pnRDVGVjNWbGtYTmcybXI4Rm9RVk5SdktQdSt0cXJsZUlCWm9zYi93MTl3TnlVMnd2cGtVbDgwSlFidGR1QgpLa3ZmUjV2Mk9EdTJZTG1jVnZNM0hkMitNZ1FSVVpIblVyeHFUR09lSHpWNytVOXNVdm5UeWE5R1ZIQ2RILzFJCklsdHM4UUtCZ0c3Q1JYY25JRlQxNEVBenZnMkpnWUN1N3pkQUEwK1FWOEV2WmU2UnhNb0ZTK0YrUTJpb1pnRGIKdTY4dzZ1MjExK2R0aXowSWhHckwvOG95WWtCcFFNSnJBcHZBMVlTdy92Q1ZpYjRrcWJESnpjOGhkVzJ1ZTloLwpqUVhwSVNWdGdYWCtkenRkcXU2a2J1aGpYUVU3VDAyY1RnYTlhSG9EQ1hQd1FUNnVNZmNHCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  skip-cnp-status-startup-clean: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  policy-cidr-match-mode: ""
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"
  # If you want metrics enabled in cilium-operator, set the port for
  # which the Cilium Operator will have their metrics exposed.
  # NOTE that this will open the port on the nodes where Cilium operator pod
  # is scheduled.
  operator-prometheus-serve-addr: ":9963"
  enable-metrics: "true"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: c14
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "114"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  # Default case
  routing-mode: "tunnel"
  tunnel-protocol: "vxlan"
  service-no-backend-response: "reject"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-masquerade-to-route-source: "false"
  enable-wireguard: "true"
  wireguard-persistent-keepalive: "0s"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-local-redirect-policy: "false"

  kube-proxy-replacement: "false"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  enable-host-port: "false"
  enable-external-ips: "false"
  enable-node-port: "false"
  enable-health-check-nodeport: "true"
  enable-health-check-loadbalancer-ip: "false"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  bpf-lb-acceleration: "disabled"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  hubble-export-file-max-size-mb: "10"
  hubble-export-file-max-backups: "5"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  ipam-cilium-node-update-rate: "15s"
  cluster-pool-ipv4-cidr: "10.14.0.0/17"
  cluster-pool-ipv4-mask-size: "24"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "true"
  bgp-secrets-namespace: "kube-system"
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"

  k8s-client-qps: "5"
  k8s-client-burst: "10"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  # default DNS proxy to transparent mode in non-chaining modes
  dnsproxy-enable-transparent-mode: "true"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-xff-num-trusted-hops-ingress: "0"
  proxy-xff-num-trusted-hops-egress: "0"
  proxy-connect-timeout: "2"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"
  proxy-idle-timeout-seconds: "60"

  external-envoy-proxy: "false"
  max-connected-clusters: "255"

# Extra config allows adding arbitrary properties to the cilium config.
# By putting it at the end of the ConfigMap, it's also possible to override existing properties.
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: c14
    peer-service: "hubble-peer.kube-system.svc.cluster.local:443"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-hubble-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-hubble-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n\n        # Liveness probe\n        location /healthz {\n            access_log off;\n            add_header Content-Type text/plain;\n            return 200 'ok';\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumbgpnodeconfigs
  - ciliumbgpadvertisements
  - ciliumbgppeerconfigs
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  - ciliumbgpnodeconfigs/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumbgppeerconfigs
  - ciliumbgpadvertisements
  - ciliumbgpnodeconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumbgpclusterconfigs.cilium.io
  - ciliumbgppeerconfigs.cilium.io
  - ciliumbgpadvertisements.cilium.io
  - ciliumbgpnodeconfigs.cilium.io
  - ciliumbgpnodeconfigoverrides.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  - ciliumbgpclusterconfigs
  - ciliumbgpnodeconfigoverrides
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumendpoints
  - ciliumidentities
  verbs:
  - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumexternalworkloads/status
  - ciliumnodes
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumendpoints/status
  verbs:
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumexternalworkloads
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-bgp-control-plane-secrets
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: etcd-metrics
    port: 9963
    protocol: TCP
    targetPort: etcd-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: NodePort
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
    nodePort: 32379
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-agent: "unconfined"
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: "unconfined"
        container.apparmor.security.beta.kubernetes.io/mount-cgroup: "unconfined"
        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: "unconfined"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
          initialDelaySeconds: 5
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.memory
              divisor: '1'
        lifecycle:
          postStart:
            exec:
              command:
              - "bash"
              - "-c"
              - |
                    set -o errexit
                    set -o pipefail
                    set -o nounset
                    
                    # When running in AWS ENI mode, it's likely that 'aws-node' has
                    # had a chance to install SNAT iptables rules. These can result
                    # in dropped traffic, so we should attempt to remove them.
                    # We do it using a 'postStart' hook since this may need to run
                    # for nodes which might have already been init'ed but may still
                    # have dangling rules. This is safe because there are no
                    # dependencies on anything that is part of the startup script
                    # itself, and can be safely run multiple times per node (e.g. in
                    # case of a restart).
                    if [[ "$(iptables-save | grep -E -c 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN')" != "0" ]];
                    then
                        echo 'Deleting iptables rules created by the AWS CNI VPC plugin'
                        iptables-save | grep -E -v 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN' | iptables-restore
                    fi
                    echo 'Done!'
                    
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - CHOWN
              - KILL
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
              - DAC_OVERRIDE
              - FOWNER
              - SETGID
              - SETUID
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Unprivileged containers need to mount /proc/sys/net from the host
        # to have write access
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        # Unprivileged containers need to mount /proc/sys/kernel from the host
        # to have write access
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Unprivileged containers can't set mount propagation to bidirectional
          # in this case we will mount the bpf fs from an init container that
          # is privileged and set the mount propagation from host to container
          # in Cilium.
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-dbg
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      # Mount the bpf fs if it is not mounted. We will perform this task
      # from a privileged container because the mount propagation bidirectional
      # only works from privileged containers.
      - name: mount-bpf-fs
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        args:
        - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
        command:
        - /bin/bash
        - -c
        - --
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        - name: WRITE_CNI_CONF_WHEN_READY
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: write-cni-conf-when-ready
              optional: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
            drop:
              - ALL
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
      - name: host-proc-sys-net
        hostPath:
          path: /proc/sys/net
          type: Directory
      - name: host-proc-sys-kernel
        hostPath:
          path: /proc/sys/kernel
          type: Directory
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              - key: ca.crt
                path: client-ca.crt
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/port: "9963"
        prometheus.io/scrape: "true"
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.15.6@sha256:5789f0935eef96ad571e4f5565a8800d3a8fbb05265cf6909300cd82fd513c3d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        ports:
        - name: prometheus
          containerPort: 9963
          hostPort: 9963
          protocol: TCP
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      initContainers:
      - name: etcd-init
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - etcdinit
        # These need to match the equivalent arguments to etcd in the main container.
        - --etcd-cluster-name=clustermesh-apiserver
        - --etcd-initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --etcd-data-dir=/var/run/etcd
        env:
          # The Cilium cluster name (specified via the `CILIUM_CLUSTER_NAME` environment variable) and the etcd cluster
          # name (specified via the `--etcd-cluster-name` argument) are very different concepts. The Cilium cluster name
          # is the name of the overall Cilium cluster, and is used to set the admin account username. The etcd cluster
          # name is a concept that's only relevant for etcd itself. The etcd cluster name must be the same for both this
          # command and the actual invocation of etcd in the main containers of this Pod, but it's otherwise not
          # relevant to Cilium.
        - name: CILIUM_CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        # The clustermesh-apiserver container image includes an etcd binary.
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --auto-compaction-retention=1
        - --listen-metrics-urls=http://[$(HOSTNAME_IP)]:9963
        - --metrics=basic
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        - name: etcd-metrics
          containerPort: 9963
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - clustermesh
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt
        - etcd.config=/var/lib/cilium/etcd-config.yaml
        - --max-connected-clusters=255
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        - --controller-group-metrics=all
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: IDENTITY_ALLOCATION_MODE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: identity-allocation-mode
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        ports:
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir: {}
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "clustermesh-apiserver"
      serviceAccountName: "clustermesh-apiserver"
      terminationGracePeriodSeconds: 30
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: clustermesh-apiserver
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.15.6@sha256:a0863dd70d081b273b87b9b7ce7e2d3f99171c2f5e202cd57bc6691e51283e0c"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 3
          livenessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 3
          startupProbe:
            # give the relay one minute to start up
            grpc:
              port: 4222
            timeoutSeconds: 3
            failureThreshold: 20
            periodSeconds: 3
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          - name: tls
            mountPath: /var/lib/hubble-relay/tls
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Always
      priorityClassName: 
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 1001
        runAsGroup: 1001
        runAsUser: 1001
      priorityClassName: 
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.13.0@sha256:7d663dc16538dd6e29061abd1047013a645e6e69c115e008bee9ea9fef9a6666"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
        readinessProbe:
          httpGet:
            path: /
            port: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.13.0@sha256:1e7657d997c5a48253bb8dc91ecee75b63018d16ff5e5797e5af367336bc8803"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
