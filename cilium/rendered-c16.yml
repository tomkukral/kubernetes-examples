---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRRnpiWThyalFUaDkxTjZwSk9KODZyVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEl3V2hjTk1qWXhNVEl4TWpFMQpOVEl3V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ20wd2M4Y2tyWnNSVHo1WGkwNDhwTGRad3BvL2xiNnFMdlFwVnRmcXZqUFZSMlRkUGgKK1Z3cjB2ZDdidC9peDVEVU83K0MvclIvY1JxeXlTRjRFOW1vWjdWaUhiV08wWTV0SGtrWlhUbWl1a1RtaXdmQwpaNGNMTTh3MVdoU2Y0ZTgwd01hcElTRUJuV204elQ4NUJJeW9TVVBhNSsrZkowL2ZxTGNacGcvZWxYV0djT1BRClgzQk00N3M5Zm11dU9ydC9WdDhkbjIxSll4WWQrYW41RjdNYm5aa2xDVDlvMmNvQ2hwaDhBWTBwN3B2RE4yRW0Kc3Rwa29GalQ0VDMzK2hVNnJ4bUlnZDEzdHhzZlpBbHk2YjBoUTE0TFVpMVBGR2w0YkMxbU9QNGJ2WnRzTkZBcQpocG5vR3c0WVNLNFUwQStHdWpWdE1xWWFBSTlucndrKzNRMy9BZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVmMTVvS3dJL2tMNEk2enFlNVdKVnFEcktWVDB3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFEQmlPM0RUUVBsOWR1MjQvVzlDS1pBTUlRNDVmV3BIcU1LSVZVT2lnNUlPbHVFUVFtL3Q5NEZRClRQQW44anV5U1I4ekwzQXZVTGtnbHoxYk92SEY2dXpsQnR2T2Q2cS9ZMkdXMDd4THpFRTlkUUorRzB0QlBDekcKVzVnZ3NiWGlMdVVxVmNWcFdKWENNeS92RmNYbXl5WWV3dXZCdjl2cCtiZDdBemQzdnR0d211MDE4MEVobTF5NQp3RjhacVcrM1lRRHFUTzREZ0xlSWxKWkdmRk5uMXpqYnJzbXErV0hxSTNpd0Y2Qk5TUmRsSy9DLzl0RFFxUGc1CktBa2U3eDRXVkxicWtKbWhLU09KU3d3N1hJV2VYSTNQanRlcUtxZnFtMVhiY2c1Ry82YTgxQ1UwQWFONHB0MFoKeUwxbjBQZ0d2d0U3YXRXRDRTZFF4Zm9xWEc2bnJOYz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBcHRNSFBISksyYkVVOCtWNHRPUEtTM1djS2FQNVcrcWk3MEtWYlg2cjR6MVVkazNUCjRmbGNLOUwzZTI3ZjRzZVExRHUvZ3Y2MGYzRWFzc2toZUJQWnFHZTFZaDIxanRHT2JSNUpHVjA1b3JwRTVvc0gKd21lSEN6UE1OVm9VbitIdk5NREdxU0VoQVoxcHZNMC9PUVNNcUVsRDJ1ZnZueWRQMzZpM0dhWVAzcFYxaG5EagowRjl3VE9PN1BYNXJyanE3ZjFiZkhaOXRTV01XSGZtcCtSZXpHNTJaSlFrL2FObktBb2FZZkFHTktlNmJ3emRoCkpyTGFaS0JZMCtFOTkvb1ZPcThaaUlIZGQ3Y2JIMlFKY3VtOUlVTmVDMUl0VHhScGVHd3RaamorRzcyYmJEUlEKS29hWjZCc09HRWl1Rk5BUGhybzFiVEttR2dDUFo2OEpQdDBOL3dJREFRQUJBb0lCQUR6Z0p2VFUxQ0dLTUJZcwpONWJ5eE1BeWc3RGlTRDFWYXUyYVE0TDRSV3NmMXpGd2h4QWYrWlY0WDV6b1FjUzBoRkllRjIySzJuemkzaFk5CnRQdm5hbmE4bVlEYlRJUjRUZHZkd0ZrRUh1TVZ5OHpCRVN6TXNJZlMrQUxFQTJDd2hxU2VjQ0FKbWN6SUQyeTUKRFFnV2MrbDVDc3pYOUNZRXAyMzdXQTJBL3F0L0VaeW1qd2xkVzBYUHpoV2V1T0o0QkRvdTdPUFNrSVROcmdLZAo0a3RjWHQ4M1I5dlc3SVF4b0h4cGdnd1JtYlhKbnV3ajZnQ1FaMGZCV1ovS0cyYzByQUdvUWxmSWdGWGUzc3QvClJWS2dHTEk4dzR4NUw2UE9HTkYyeDI1UzVvN2sxRmFLbjF5RWVJd2UrbkY3VHF4cThtT294Z0p4bTM0RnhRcGcKTkd1Q3pyRUNnWUVBMm05U0hvZ2JJd2VCSERhenZXTWxqekI3VTZDeExYVE1iYSsySHhUc2xnU29qT2ZlUURkWgpiUloxMHdVRm4zMjA0eXArcklBL29JejlMNzVxN251anFsa3ZZaGJIY1BGSEg0cWJWTUIyNGIrOGlJYzFYK1I2CjB1YldIRkJiMmJxbFQ5Z2gzMHZqM0lrNitWSDdDTXEyZVRDSTNNZDJQMW1CbjEycjRXeDNraGtDZ1lFQXc0T0kKeXNrSEtVSlA2K0Yvd1F1dzljYmFzc3hFcEhCV2gxOHVwZTJ0ZTNHNi9FRjJlMUtJd2tCU1FjMlJCaTZkU1plMwpqd28yWWY1V25tSVQ0L25zUWdkV05FZlZDTVBqNVQ5Y1d5VEhuNEcxMzB3cG1wZFdVeG81UjlQWVc4R2FiYVdvCit2MUdKUGxRdXVlZVhnSzNGZlg5TFBzcG52RzVNUGkyQ3IyVms5Y0NnWUVBajk1MFN2SEFWZUVTYzUrLzRNUlYKcjZyeC81RytRTDlHQ2hTS01veVlpdktFaFZJT3UyTDVQblZsbzFnU2JRcmh3aUZ5RDNIazluMEdJWlVjWHZrRwpRaU85cHJCMEtmcHdxdUNqRUQ0M3p0WjNlY0Q4TWEyT0RDekg1eHd5Y3dTUTd6YmVrSEV1b2ttc2t4d2c2SmlECmVPeXpxQjZqem5QSWdVdXo4cVI3V0xrQ2dZQkdsd0VXcGtwTm5VR1oyc3J6ZWpNa0tlM2dURndrT3VNaThUeTQKYi80STZlRW5Ic09XZHhBbGdtK3dqblhrRTRSNmc2cWtuSDFTR0RCUjh2dFhmbTdNMERWUm52WE51bHhYOHU1MwpnZW9KTHgzcFIyaG1CbW9HaXh0UFVhOTJRWXB1T0Rld2x5MXlRQW5qMGFpZUxNREp6d3pmNXJiNlNqQWcvRXROCnlYRnQ5UUtCZ1FDb1BqSTBud2tvMEtlTzdCbmhHZjhEU01TTEprR1YxMVRZMzRaQXRuVnljZHViVzlMSWhva2oKY1FUYlVEeC8wek5NVEZnRlZ6L1FPeWU3Z0pybmZxQ2tBaloyK0NUTVZZTTFHNnR4M2I0T2NwM01WMEhwUHBDVgpaY1hobGpMQ2w3YVdhcklyN2VzbkpFREJGZmlwTlhPQnlObGIyaFdicmI1Z3lTNmtMMUxKVVE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRRnpiWThyalFUaDkxTjZwSk9KODZyVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEl3V2hjTk1qWXhNVEl4TWpFMQpOVEl3V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ20wd2M4Y2tyWnNSVHo1WGkwNDhwTGRad3BvL2xiNnFMdlFwVnRmcXZqUFZSMlRkUGgKK1Z3cjB2ZDdidC9peDVEVU83K0MvclIvY1JxeXlTRjRFOW1vWjdWaUhiV08wWTV0SGtrWlhUbWl1a1RtaXdmQwpaNGNMTTh3MVdoU2Y0ZTgwd01hcElTRUJuV204elQ4NUJJeW9TVVBhNSsrZkowL2ZxTGNacGcvZWxYV0djT1BRClgzQk00N3M5Zm11dU9ydC9WdDhkbjIxSll4WWQrYW41RjdNYm5aa2xDVDlvMmNvQ2hwaDhBWTBwN3B2RE4yRW0Kc3Rwa29GalQ0VDMzK2hVNnJ4bUlnZDEzdHhzZlpBbHk2YjBoUTE0TFVpMVBGR2w0YkMxbU9QNGJ2WnRzTkZBcQpocG5vR3c0WVNLNFUwQStHdWpWdE1xWWFBSTlucndrKzNRMy9BZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVmMTVvS3dJL2tMNEk2enFlNVdKVnFEcktWVDB3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFEQmlPM0RUUVBsOWR1MjQvVzlDS1pBTUlRNDVmV3BIcU1LSVZVT2lnNUlPbHVFUVFtL3Q5NEZRClRQQW44anV5U1I4ekwzQXZVTGtnbHoxYk92SEY2dXpsQnR2T2Q2cS9ZMkdXMDd4THpFRTlkUUorRzB0QlBDekcKVzVnZ3NiWGlMdVVxVmNWcFdKWENNeS92RmNYbXl5WWV3dXZCdjl2cCtiZDdBemQzdnR0d211MDE4MEVobTF5NQp3RjhacVcrM1lRRHFUTzREZ0xlSWxKWkdmRk5uMXpqYnJzbXErV0hxSTNpd0Y2Qk5TUmRsSy9DLzl0RFFxUGc1CktBa2U3eDRXVkxicWtKbWhLU09KU3d3N1hJV2VYSTNQanRlcUtxZnFtMVhiY2c1Ry82YTgxQ1UwQWFONHB0MFoKeUwxbjBQZ0d2d0U3YXRXRDRTZFF4Zm9xWEc2bnJOYz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLVENDQWhHZ0F3SUJBZ0lSQU1lY1VjQ2NIVmlTc1k2Rm9pbllBSUl3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV5TUZvWERUSTJNVEV5TVRJeApOVFV5TUZvd0ZERVNNQkFHQTFVRUF4TUpZV1J0YVc0dFl6RTJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFwdmE5YWozL1dibGNSM0xZL1g2TlBFbHNuY0NNc0FhTHpqZWZXbEpJbUFGd0pJQlMKNXZaTjI4dDY0VUZUUUhTbFQyQUtKbVVQUEd3VC9Sck9wWVJjZDhOTGNBMVNjbzJ5VmprdTFQT0NRL2xBRXRiawpzY3FUdmdLamM5cElvbm9DcDJiYTdBWWZnWVdtNmZ1WmlvdFlIUnh3a0lQNTQzdEZkOHhGNE13U1RvdlZwck9mCjVKbEZvaC9ueU9kQkFsajgrNHcxVkxQWGFXdnA2WFNQNVhwdnQwTzJ6Tlc4YkhwdkFXcVhPcER5T2RpZkNMc2IKNS9MYTIxbnBjRGFOMVJrbWI5NWpFbzBXYTV0Q2pkMkZFZTFpTkwwY0x3Ni81WHdHTUtsTHlsTmJkWkR0VWl1eApnTGE5VmRMSnVsb0cvYWVDbDcyeEN0OGdhUWNROUhhWlMvSTh1d0lEQVFBQm8zWXdkREFPQmdOVkhROEJBZjhFCkJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUMKTUFBd0h3WURWUjBqQkJnd0ZvQVVmMTVvS3dJL2tMNEk2enFlNVdKVnFEcktWVDB3RkFZRFZSMFJCQTB3QzRJSgpiRzlqWVd4b2IzTjBNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNKWFZETDFQM0lYcEFvc0lENHRZY1c3SmIzCkZhUDR2N3h0eUtSY2Z4V3EvZVU0M3hFUEF6U0Z0Y3B4SmVwZjdjY3dHd3N0TklCRUFPQ1hrN1FrcUE2TlR3dmYKcjY1U1phZWQvam51bklpU2RWelZDZk9HNTBWbzZCQjlsY3M1ZUs0TDhoQ1F5V1VtanVrRGp1UllJMG9VZ3B6NwpzUS8zVGRSUEVGcEh4ak1UeEdUOUtMS1NFSUw2TmtGUmJHNHh1LzNNTWttdUxPVVA5VU42bGxIRHY5cTVWN0FRCnU4aVdOZUhTenpEcmhoOTdDbmxrZ3VjUlBGeW1hWCtMY0U4elczNS9jWHREdGQvaE00TVd1a1VZVnpwYjBJeU8KQU96clR4QmhPeXV3ajFtSldpTy9WbnNpUWo4NVEyRmVtc3hmU1ZsdDlCRWlPU0JqRzMrb1llaDBMdzcvCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcHZhOWFqMy9XYmxjUjNMWS9YNk5QRWxzbmNDTXNBYUx6amVmV2xKSW1BRndKSUJTCjV2Wk4yOHQ2NFVGVFFIU2xUMkFLSm1VUFBHd1QvUnJPcFlSY2Q4TkxjQTFTY28yeVZqa3UxUE9DUS9sQUV0YmsKc2NxVHZnS2pjOXBJb25vQ3AyYmE3QVlmZ1lXbTZmdVppb3RZSFJ4d2tJUDU0M3RGZDh4RjRNd1NUb3ZWcHJPZgo1SmxGb2gvbnlPZEJBbGo4KzR3MVZMUFhhV3ZwNlhTUDVYcHZ0ME8yek5XOGJIcHZBV3FYT3BEeU9kaWZDTHNiCjUvTGEyMW5wY0RhTjFSa21iOTVqRW8wV2E1dENqZDJGRWUxaU5MMGNMdzYvNVh3R01LbEx5bE5iZFpEdFVpdXgKZ0xhOVZkTEp1bG9HL2FlQ2w3MnhDdDhnYVFjUTlIYVpTL0k4dXdJREFRQUJBb0lCQUEzZWlUVitHT3dYSGJkQgpyd3kvcW5QTGxaNDFGSHE2MEhvODNKdmdJZStlanZZNVFxbTA1QnJSK0U4bDRnaUVxQWJENzVQbzZTOFh1MEZYCkxMdExGM05MWWNUWkZuUTFtUTdZaVM5Zld2N1NnYVFPL2NoWEQ1YkZHVmJTVng1SURGaGpqdVAwVGtHd0hJRnIKU1FIZE9XQ1JzRGdRL24wTERHWTdMY0xTc09LZFVLVU1QUEtOS1FXYytJRWczeXBOZFhEWkYwOFcvSWh5UU05UQpySnh1RkdiL2hCU2hVS1NNclRPNm5Mb0g3U3N4ZFduVHBiLzV4QmtBamRYbHF3RkVLYnNaNWFxRURCTno3RFhvCm1yYmRUN0QxWlphVDBxTXdnd280L0NaZk5oUTRWbVE1eGtmb2NqWWk0bFJFYVVELzhndW1VUFV3TWdXSnZGUkQKeHJWVXR5RUNnWUVBd3FLakhrVWd6RzlhNWQ0bDM4czhKNkQ5K2lnNWRYblF4TzZtdytjVGZCdEFyaTkwK1A3Tgp3MDJydUZkYkR2S2M0bjFtOUhlRWp3NjR4SnVUZFVmWjZhemF1NVQyQUVrMFlPcEwwaTJVVGQzRlRZdFNPZ1A4Cm5udEhMdlFOZDd0clpqUmhqOFZrWVhrYnRsZ3lVbURuTlNpUTkvOU56WkJTT0VqVWpHVGZRU2NDZ1lFQTI1cXcKUzRJSFFsVG8xWjJTSjFIN0xSWW9Sbk40aFBMY1d1UEpTVGJrajYzaWlVUW5oYVVaMzJqa1I5Qy9ERk1sNDRPUgpIZzFUbFRjUHpLK2E5eDdmaXd0eStMcWtJYUcrWE1HZ1YxQlFmcklrMUtqdjBQcGQwYXFwR2d1NCs5U04vS2FIClBVMklibHpCOXFUOUg4TGc0MTNhVHNzdkxKVFFtTSsrSUFsVnZFMENnWUVBdEMvYzB5a3NOQmJqRCt1WkpKWUMKR3Ezd2NxYktpdmM3VHhXaFRidWZUa1hzbTFWVDlTL3ZUZCthR2c3RlBoRmRMRkRyLzJhbVVjcFBRN1REenMrMQo3WjhZNEpBSExqeVhRU0duRCswaVh2UHd0TmxHUm05cWIwMnhtTVpYc1lEUTdNMlJoSWc1WmdPNHBCY0NmMEUyCnl2L0ROZFFsTXlsbzlMSjRFNEZQTGdFQ2dZQUU0UHJwc29uV3Yyd3Mwc05jZkVYSVNxVzZhdlpTZmRMSGNpZ1cKcUZHTG42Rll5MXJWYlVXVjRRNnhTY0gwMUNRVFdlanZjZnhaWkUvRmpHRTAvRXFiSERZQnNLUFUyM01QUEg0RApjcFZYT3ozMk80cVlhZmVMb084QTFTSFc5bkh4R3dJR0txTE5VT0krU0l3WEdJMUdmOTlKd05uYmM3THVzaTdYCkoxM3dRUUtCZ0M1NVVucTcxbnNNUGRvNWUwU1o2YmNGZDFHTWpGbUVqSnZ1WmV1VXgyNmR5Vkp0WmhrR2xzMlEKSXdzaUFLaS9DSlZmMjY4NGNIaXA1V0RHbEVsRTl4VWxPeEsyUzh1anQ2OGF1Tm9DRkhJQjJUQnd4NUNWWVh4OQp5dmxnOVhmUTZRZlBtV0dvOVl3Rmo5a05Gd2c1WEdub3MzdzUrdUZGcG9JMm9CZFJSVHlUCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-ca-cert
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRRnpiWThyalFUaDkxTjZwSk9KODZyVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEl3V2hjTk1qWXhNVEl4TWpFMQpOVEl3V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ20wd2M4Y2tyWnNSVHo1WGkwNDhwTGRad3BvL2xiNnFMdlFwVnRmcXZqUFZSMlRkUGgKK1Z3cjB2ZDdidC9peDVEVU83K0MvclIvY1JxeXlTRjRFOW1vWjdWaUhiV08wWTV0SGtrWlhUbWl1a1RtaXdmQwpaNGNMTTh3MVdoU2Y0ZTgwd01hcElTRUJuV204elQ4NUJJeW9TVVBhNSsrZkowL2ZxTGNacGcvZWxYV0djT1BRClgzQk00N3M5Zm11dU9ydC9WdDhkbjIxSll4WWQrYW41RjdNYm5aa2xDVDlvMmNvQ2hwaDhBWTBwN3B2RE4yRW0Kc3Rwa29GalQ0VDMzK2hVNnJ4bUlnZDEzdHhzZlpBbHk2YjBoUTE0TFVpMVBGR2w0YkMxbU9QNGJ2WnRzTkZBcQpocG5vR3c0WVNLNFUwQStHdWpWdE1xWWFBSTlucndrKzNRMy9BZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVmMTVvS3dJL2tMNEk2enFlNVdKVnFEcktWVDB3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFEQmlPM0RUUVBsOWR1MjQvVzlDS1pBTUlRNDVmV3BIcU1LSVZVT2lnNUlPbHVFUVFtL3Q5NEZRClRQQW44anV5U1I4ekwzQXZVTGtnbHoxYk92SEY2dXpsQnR2T2Q2cS9ZMkdXMDd4THpFRTlkUUorRzB0QlBDekcKVzVnZ3NiWGlMdVVxVmNWcFdKWENNeS92RmNYbXl5WWV3dXZCdjl2cCtiZDdBemQzdnR0d211MDE4MEVobTF5NQp3RjhacVcrM1lRRHFUTzREZ0xlSWxKWkdmRk5uMXpqYnJzbXErV0hxSTNpd0Y2Qk5TUmRsSy9DLzl0RFFxUGc1CktBa2U3eDRXVkxicWtKbWhLU09KU3d3N1hJV2VYSTNQanRlcUtxZnFtMVhiY2c1Ry82YTgxQ1UwQWFONHB0MFoKeUwxbjBQZ0d2d0U3YXRXRDRTZFF4Zm9xWEc2bnJOYz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBcHRNSFBISksyYkVVOCtWNHRPUEtTM1djS2FQNVcrcWk3MEtWYlg2cjR6MVVkazNUCjRmbGNLOUwzZTI3ZjRzZVExRHUvZ3Y2MGYzRWFzc2toZUJQWnFHZTFZaDIxanRHT2JSNUpHVjA1b3JwRTVvc0gKd21lSEN6UE1OVm9VbitIdk5NREdxU0VoQVoxcHZNMC9PUVNNcUVsRDJ1ZnZueWRQMzZpM0dhWVAzcFYxaG5EagowRjl3VE9PN1BYNXJyanE3ZjFiZkhaOXRTV01XSGZtcCtSZXpHNTJaSlFrL2FObktBb2FZZkFHTktlNmJ3emRoCkpyTGFaS0JZMCtFOTkvb1ZPcThaaUlIZGQ3Y2JIMlFKY3VtOUlVTmVDMUl0VHhScGVHd3RaamorRzcyYmJEUlEKS29hWjZCc09HRWl1Rk5BUGhybzFiVEttR2dDUFo2OEpQdDBOL3dJREFRQUJBb0lCQUR6Z0p2VFUxQ0dLTUJZcwpONWJ5eE1BeWc3RGlTRDFWYXUyYVE0TDRSV3NmMXpGd2h4QWYrWlY0WDV6b1FjUzBoRkllRjIySzJuemkzaFk5CnRQdm5hbmE4bVlEYlRJUjRUZHZkd0ZrRUh1TVZ5OHpCRVN6TXNJZlMrQUxFQTJDd2hxU2VjQ0FKbWN6SUQyeTUKRFFnV2MrbDVDc3pYOUNZRXAyMzdXQTJBL3F0L0VaeW1qd2xkVzBYUHpoV2V1T0o0QkRvdTdPUFNrSVROcmdLZAo0a3RjWHQ4M1I5dlc3SVF4b0h4cGdnd1JtYlhKbnV3ajZnQ1FaMGZCV1ovS0cyYzByQUdvUWxmSWdGWGUzc3QvClJWS2dHTEk4dzR4NUw2UE9HTkYyeDI1UzVvN2sxRmFLbjF5RWVJd2UrbkY3VHF4cThtT294Z0p4bTM0RnhRcGcKTkd1Q3pyRUNnWUVBMm05U0hvZ2JJd2VCSERhenZXTWxqekI3VTZDeExYVE1iYSsySHhUc2xnU29qT2ZlUURkWgpiUloxMHdVRm4zMjA0eXArcklBL29JejlMNzVxN251anFsa3ZZaGJIY1BGSEg0cWJWTUIyNGIrOGlJYzFYK1I2CjB1YldIRkJiMmJxbFQ5Z2gzMHZqM0lrNitWSDdDTXEyZVRDSTNNZDJQMW1CbjEycjRXeDNraGtDZ1lFQXc0T0kKeXNrSEtVSlA2K0Yvd1F1dzljYmFzc3hFcEhCV2gxOHVwZTJ0ZTNHNi9FRjJlMUtJd2tCU1FjMlJCaTZkU1plMwpqd28yWWY1V25tSVQ0L25zUWdkV05FZlZDTVBqNVQ5Y1d5VEhuNEcxMzB3cG1wZFdVeG81UjlQWVc4R2FiYVdvCit2MUdKUGxRdXVlZVhnSzNGZlg5TFBzcG52RzVNUGkyQ3IyVms5Y0NnWUVBajk1MFN2SEFWZUVTYzUrLzRNUlYKcjZyeC81RytRTDlHQ2hTS01veVlpdktFaFZJT3UyTDVQblZsbzFnU2JRcmh3aUZ5RDNIazluMEdJWlVjWHZrRwpRaU85cHJCMEtmcHdxdUNqRUQ0M3p0WjNlY0Q4TWEyT0RDekg1eHd5Y3dTUTd6YmVrSEV1b2ttc2t4d2c2SmlECmVPeXpxQjZqem5QSWdVdXo4cVI3V0xrQ2dZQkdsd0VXcGtwTm5VR1oyc3J6ZWpNa0tlM2dURndrT3VNaThUeTQKYi80STZlRW5Ic09XZHhBbGdtK3dqblhrRTRSNmc2cWtuSDFTR0RCUjh2dFhmbTdNMERWUm52WE51bHhYOHU1MwpnZW9KTHgzcFIyaG1CbW9HaXh0UFVhOTJRWXB1T0Rld2x5MXlRQW5qMGFpZUxNREp6d3pmNXJiNlNqQWcvRXROCnlYRnQ5UUtCZ1FDb1BqSTBud2tvMEtlTzdCbmhHZjhEU01TTEprR1YxMVRZMzRaQXRuVnljZHViVzlMSWhva2oKY1FUYlVEeC8wek5NVEZnRlZ6L1FPeWU3Z0pybmZxQ2tBaloyK0NUTVZZTTFHNnR4M2I0T2NwM01WMEhwUHBDVgpaY1hobGpMQ2w3YVdhcklyN2VzbkpFREJGZmlwTlhPQnlObGIyaFdicmI1Z3lTNmtMMUxKVVE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRRnpiWThyalFUaDkxTjZwSk9KODZyVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEl3V2hjTk1qWXhNVEl4TWpFMQpOVEl3V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ20wd2M4Y2tyWnNSVHo1WGkwNDhwTGRad3BvL2xiNnFMdlFwVnRmcXZqUFZSMlRkUGgKK1Z3cjB2ZDdidC9peDVEVU83K0MvclIvY1JxeXlTRjRFOW1vWjdWaUhiV08wWTV0SGtrWlhUbWl1a1RtaXdmQwpaNGNMTTh3MVdoU2Y0ZTgwd01hcElTRUJuV204elQ4NUJJeW9TVVBhNSsrZkowL2ZxTGNacGcvZWxYV0djT1BRClgzQk00N3M5Zm11dU9ydC9WdDhkbjIxSll4WWQrYW41RjdNYm5aa2xDVDlvMmNvQ2hwaDhBWTBwN3B2RE4yRW0Kc3Rwa29GalQ0VDMzK2hVNnJ4bUlnZDEzdHhzZlpBbHk2YjBoUTE0TFVpMVBGR2w0YkMxbU9QNGJ2WnRzTkZBcQpocG5vR3c0WVNLNFUwQStHdWpWdE1xWWFBSTlucndrKzNRMy9BZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVmMTVvS3dJL2tMNEk2enFlNVdKVnFEcktWVDB3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFEQmlPM0RUUVBsOWR1MjQvVzlDS1pBTUlRNDVmV3BIcU1LSVZVT2lnNUlPbHVFUVFtL3Q5NEZRClRQQW44anV5U1I4ekwzQXZVTGtnbHoxYk92SEY2dXpsQnR2T2Q2cS9ZMkdXMDd4THpFRTlkUUorRzB0QlBDekcKVzVnZ3NiWGlMdVVxVmNWcFdKWENNeS92RmNYbXl5WWV3dXZCdjl2cCtiZDdBemQzdnR0d211MDE4MEVobTF5NQp3RjhacVcrM1lRRHFUTzREZ0xlSWxKWkdmRk5uMXpqYnJzbXErV0hxSTNpd0Y2Qk5TUmRsSy9DLzl0RFFxUGc1CktBa2U3eDRXVkxicWtKbWhLU09KU3d3N1hJV2VYSTNQanRlcUtxZnFtMVhiY2c1Ry82YTgxQ1UwQWFONHB0MFoKeUwxbjBQZ0d2d0U3YXRXRDRTZFF4Zm9xWEc2bnJOYz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lSQUoweHVDQ29MUE9YZ2JzazFpd0gzOWt3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV5TUZvWERUSTJNVEV5TVRJeApOVFV5TUZvd0VURVBNQTBHQTFVRUF4TUdjbVZ0YjNSbE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBCk1JSUJDZ0tDQVFFQTFva3hHVDErV1Y1Uks3T3lJY0UwVEVNak10MU5Qd1E5aXNJUkYrcDNTeXlUNEVSZ1FlS0QKckh3eGJLUERuOXJydytJUWR4Nis2ejZyNDc3TlBqd1cwbGY5WFlxVHVHN3hmOWtld01aNWJsTjBHM09nQmtQVAp5dzlOaFdKbml1Znltckt3MmRXaThmWDBGeGxZNmNiemFRVXRrZDh1Qkx0bFZ3MitZSmI1RmhFSU9QSlkrVStHCnJRR2dQUTR6d09zTG1IK3Q3QXVkc0NLTW93V2FkaFRzNzBTbFZmUHkveXNuQVR4TlZ6MDFJeU9zejNJVUhZME8KdlBwbGovZGltN2VaNWhpRDBNZUlNbEorK0lIWlZTbnphU1hPQm16c09GZzlVTmlWVEtDY3EvNFo0dytINE1hbgprSXZiQy9hYlNiRlRsVmVZR2hiTnYzd0ZGY202c0ZFOGZRSURBUUFCbzJBd1hqQU9CZ05WSFE4QkFmOEVCQU1DCkJhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXcKSHdZRFZSMGpCQmd3Rm9BVWYxNW9Ld0kva0w0STZ6cWU1V0pWcURyS1ZUMHdEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUpMY20xRFdwaFA5UmMzaUJkbjZtZzFETlZuYlZFbjlCUzRPdnh4Tk81N0p4bUs3RXlYR3dRMFNycGY1CkcxUUFtTnhIbWxFUDEzY3NMekZ3ZEZGYUI4b3JTQzhjSHdERHhZKzBOZzMzdVRUMHRTRVZiL0p6YW5tUG5jTFoKRkhJTnRJbGZVZVpFeDlycERzVC94OEN1TllnMzB3L3JTYWZwUnA5THA0MGw1S3lIb3hDZmJNdU4zWUJJOUNkcgpucVJzMGx6K2VoVmswdWptVm1sMWNkOVhXcGNPblMxWUNGcXpCMjZTYmtRMHhQMlBGVWtNOXQzdzdRamdTalJFCmRFTEhidTJOLzdRRXpReDZqMHRBUGpmVEc5UVhuc2JHOVhXSzNRdjVjbU5VZWhUa0VkSnVRTjIxaXgwbU9KWmcKWm1NeEUyYXlhdUJmRFhCT1RPd1o1ZGIycXBVPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMW9reEdUMStXVjVSSzdPeUljRTBURU1qTXQxTlB3UTlpc0lSRitwM1N5eVQ0RVJnClFlS0RySHd4YktQRG45cnJ3K0lRZHg2KzZ6NnI0NzdOUGp3VzBsZjlYWXFUdUc3eGY5a2V3TVo1YmxOMEczT2cKQmtQVHl3OU5oV0puaXVmeW1yS3cyZFdpOGZYMEZ4bFk2Y2J6YVFVdGtkOHVCTHRsVncyK1lKYjVGaEVJT1BKWQorVStHclFHZ1BRNHp3T3NMbUgrdDdBdWRzQ0tNb3dXYWRoVHM3MFNsVmZQeS95c25BVHhOVnowMUl5T3N6M0lVCkhZME92UHBsai9kaW03ZVo1aGlEME1lSU1sSisrSUhaVlNuemFTWE9CbXpzT0ZnOVVOaVZUS0NjcS80WjR3K0gKNE1hbmtJdmJDL2FiU2JGVGxWZVlHaGJOdjN3RkZjbTZzRkU4ZlFJREFRQUJBb0lCQUd4SDltWWM2WWJGMmdaSwp2bC9YR2tSYnBvcG50RE5ZT28rc2YrQW9VV201NkRGTGthSHZhREpJeE5GbW5yZ3lVTWtmY3R3TXdxUU5qOGgxClp6WkFNZXljeUo3TDhOOG43L0J0Yjk0d3p0MW1kYlhkV0NtUlZuYXBGS0Y4RjNLK3UyNWxQbW5VTUZnYm9jVisKMzZldTZQQmEwck5MaC9pUGRRakpRUXVUWjhsQWh1aUt5clVXUkpMV1lFYmZPaFdxcld6Sm1DYmtNYjJ4MGo4SAo4Mm0xZGdJcTZYZmFRVjlDRklybjIxVjY3QmRSUWdwQUdMYytuMzhGNEVEeWxTWHVvaitaR1MrVnFoalFSYjVxCnhHTFVJbUo3NmM0R1VudGxERysyc0xLWTA2UkxzcTcra0g5WVdwZnlLeUZVSGdMUzhLMjVlYTlqYmpJOU1ya2UKRHE3Znd3RUNnWUVBN0FGTW1WeGtNdkNhejg4b25RWkFtNmZFV2g2TW9aYlZqcVNkY29CZEFFZHIvWUVaRHphcgptajdrMk9RNkxGWGFxU1lwTzAyeUx6Y0xTWmRVTGhqc1lnVndWZEwzTmxWR0dDSlJLbXpPOFJ1VTRZU1BsdUprCm9sSVJTcHlGTXVzbGw4US9xTHNSdFpidUtlTkNxb0EzV0I4dFp2bzFmSEQ2TEJGaWpTalZvQjBDZ1lFQTZMWS8KdkMxN1E5Qy9veFU1VmYycXBVQ3ZwalR6dkJTUlZKcndxSHNqRGNSbHF3dUsvdFA0MjEzOXNWelFTSkpkQklBNwovZ01VSTFwZDRTVjAvRUlBa2sweW5TYzZVY2hKOEs3MnFkRjlXTGNNMjhhQzA0VHF6S2o0MmRiV2tBWHFqSGhjCmY1VlU1clJRQXlNcTJoNStMa205ZVpxZDFaTFZsRTR1N2ljY0grRUNnWUVBNk5iM1RhOGJwQzVCYnBrQmhyb3UKYitON0V6WmtwTi85WGpnR3Buc0NSazR3dXZEdFdsY2p3cEFlaytYSGh3cEZLdkRkYVFia3J6UnRUSE9pdDhBYgpKeklhZkhJaE9GZTFTZ1pCY2N2Yjk0Q3d5RFpTdkJnc0ZRRkcwZ2ZPV2tnbzFLem42WDUyb0dPQ0lZMTNybVBGCk5vbTc3NGNYMGVoY3liRjFPN04zMy9rQ2dZRUFsS2YvZE8wMDVmQk95eFgreDNEQTlzbW9xeXIrWERKaldFR1YKNUhxc3ZObXQvS0xtQ3IxTUpvNFhScHE4cnU5WW5reHdobVpmRWVwak9EVWVVeHF5bE1MZHgwaE0xL3R6U0YzcwpValR4dHA5UWhvQjhDRFRMYlN1dnREQ3FaZHh4cFlRcHlwS1Jac0xlcmZKa0tHdjhQUU44RjFkdTVnVGpqTmFZCjRpZDNydUVDZ1lFQWtaY1N2bjgvL2pmY1BsR3ZCWk44QWtLOTVYYUdpdlJOZ25icG92NklVektqUnBlYnd4K3EKR1dVblFKZ0FaY0RHUDBuSGYrYWVZV3cvVndJQ2M0Y0NBUnZ2TlIxYWppTjNDRFV6MFdsbitGTmMvUkplYnF4NQpUMXZWcGxUdHBDRjIrZ21xblFQRWxOOTNBQkJsSWJTNkNaNEJPbkxQRUl1NExLQ3lCeGRoeWljPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRRnpiWThyalFUaDkxTjZwSk9KODZyVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEl3V2hjTk1qWXhNVEl4TWpFMQpOVEl3V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ20wd2M4Y2tyWnNSVHo1WGkwNDhwTGRad3BvL2xiNnFMdlFwVnRmcXZqUFZSMlRkUGgKK1Z3cjB2ZDdidC9peDVEVU83K0MvclIvY1JxeXlTRjRFOW1vWjdWaUhiV08wWTV0SGtrWlhUbWl1a1RtaXdmQwpaNGNMTTh3MVdoU2Y0ZTgwd01hcElTRUJuV204elQ4NUJJeW9TVVBhNSsrZkowL2ZxTGNacGcvZWxYV0djT1BRClgzQk00N3M5Zm11dU9ydC9WdDhkbjIxSll4WWQrYW41RjdNYm5aa2xDVDlvMmNvQ2hwaDhBWTBwN3B2RE4yRW0Kc3Rwa29GalQ0VDMzK2hVNnJ4bUlnZDEzdHhzZlpBbHk2YjBoUTE0TFVpMVBGR2w0YkMxbU9QNGJ2WnRzTkZBcQpocG5vR3c0WVNLNFUwQStHdWpWdE1xWWFBSTlucndrKzNRMy9BZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVmMTVvS3dJL2tMNEk2enFlNVdKVnFEcktWVDB3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFEQmlPM0RUUVBsOWR1MjQvVzlDS1pBTUlRNDVmV3BIcU1LSVZVT2lnNUlPbHVFUVFtL3Q5NEZRClRQQW44anV5U1I4ekwzQXZVTGtnbHoxYk92SEY2dXpsQnR2T2Q2cS9ZMkdXMDd4THpFRTlkUUorRzB0QlBDekcKVzVnZ3NiWGlMdVVxVmNWcFdKWENNeS92RmNYbXl5WWV3dXZCdjl2cCtiZDdBemQzdnR0d211MDE4MEVobTF5NQp3RjhacVcrM1lRRHFUTzREZ0xlSWxKWkdmRk5uMXpqYnJzbXErV0hxSTNpd0Y2Qk5TUmRsSy9DLzl0RFFxUGc1CktBa2U3eDRXVkxicWtKbWhLU09KU3d3N1hJV2VYSTNQanRlcUtxZnFtMVhiY2c1Ry82YTgxQ1UwQWFONHB0MFoKeUwxbjBQZ0d2d0U3YXRXRDRTZFF4Zm9xWEc2bnJOYz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURwekNDQW8rZ0F3SUJBZ0lRWTNsaDNMSGE4dXZjWUZsdU42SitKREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEl3V2hjTk1qWXhNVEl4TWpFMQpOVEl3V2pBcU1TZ3dKZ1lEVlFRREV4OWpiSFZ6ZEdWeWJXVnphQzFoY0dselpYSjJaWEl1WTJsc2FYVnRMbWx2Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBMlM2SllCLzdSc04yWE9oK3VvaHUKdHVaRFYwbjc1RmhoSGd2SE5Cc3ZrWlJtbUxxU2hNTWR6dDVlVFVxOXJ6dUZRY1VaWEtHNld3eFIwQkN1SGZ2SQpJR0hCYllNUGx3SkFNdVFUcWp0YmFxL1djMHZYQ0VRRlhMSUMvQUVqeEVKOEZORDkvMzcwcjBTMTVBdjBoY1U5CmJjdEIvWnVrYlM5WC9hU09rdHFuSGRselRXWVd2N0RlV09JNzZBUkVtdGlOMEM1MlRWQ2FkcVd5dmxIbjVGMloKSUhyYm5qWS83aEhvME1KQTh2TnRWekM5SHpzWnordnJEamptWkdZc0VqeEh6b0lDN2xjeWlDTVlxb2lxN1VhbwpwcTMzS3JMN1VQUnFXdHNjR0k2WHdiYWRvdjZoZ3UwSGt2T1BJZTFXMDlaK1hVWnJMU3VlTHRLWmZiWi90bHNjCmRRSURBUUFCbzRIZU1JSGJNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0QKQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JSL1htZ3JBaitRdmdqcgpPcDdsWWxXb09zcFZQVEI3QmdOVkhSRUVkREJ5Z2g5amJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXVZMmxzCmFYVnRMbWx2Z2hBcUxtMWxjMmd1WTJsc2FYVnRMbWx2Z2lWamJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXUKYTNWaVpTMXplWE4wWlcwdWMzWmpod1IvQUFBQmh4QUFBQUFBQUFBQUFBQUFBQUFBQUFBQk1BMEdDU3FHU0liMwpEUUVCQ3dVQUE0SUJBUUJETlFzTVFEZW5QbFRNUFlGalV0WGp1QzhSQ09FUzFqaWpodFg1b1hUOXRWNGNSVysxCnNZM0dTSU9Nb0lveWdwSXhpZ3VncnBwNWpYL0NLeXVreHJxUWxFR1dsL1VmY2xBS05RbDdzTEo1eElYNi9UTjMKcXhuSG1wd2J0OFBzS2FTcThHczlza21mMmNZOHdLSmpLMnNZcjl5MXM3NnFNRFJueHlrcXZSdG1ud0U3QS9jSQpvYURFQnE2cEJ0ZlNqelY2STdUcERvUGVaZmN6OHRRSEh1TDdJWTZrRGhaaHM1bHhBaFZUWFpOTyt3VU9HbGkwCjRRZWo5Rlc1ZWFqWnRqakhsa25FbGhxR2pDcmc0czFacUhzRkFJT2ZGaFptcXp6YTZlZ2NkUEZEQ05LcmxSeUUKRDZlbEVKekJtN2F2M0NSa2FlcTllTW9IRytRMHZ5Ulk1aVdECi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBMlM2SllCLzdSc04yWE9oK3VvaHV0dVpEVjBuNzVGaGhIZ3ZITkJzdmtaUm1tTHFTCmhNTWR6dDVlVFVxOXJ6dUZRY1VaWEtHNld3eFIwQkN1SGZ2SUlHSEJiWU1QbHdKQU11UVRxanRiYXEvV2MwdlgKQ0VRRlhMSUMvQUVqeEVKOEZORDkvMzcwcjBTMTVBdjBoY1U5YmN0Qi9adWtiUzlYL2FTT2t0cW5IZGx6VFdZVwp2N0RlV09JNzZBUkVtdGlOMEM1MlRWQ2FkcVd5dmxIbjVGMlpJSHJibmpZLzdoSG8wTUpBOHZOdFZ6QzlIenNaCnordnJEamptWkdZc0VqeEh6b0lDN2xjeWlDTVlxb2lxN1Vhb3BxMzNLckw3VVBScVd0c2NHSTZYd2JhZG92NmgKZ3UwSGt2T1BJZTFXMDlaK1hVWnJMU3VlTHRLWmZiWi90bHNjZFFJREFRQUJBb0lCQVFDZVpMOVNPT0QxTWhjQQpHWnhiaEtkaWd6czN6VUNGd0NOTVc0QzBNdU9WaENyelZwY0hkcG9seHEzMkp2MkNjS0YyWHo1by9aYkJVcEhVCmNtWGFma2Z0dmYzcFZiMm4vNzg4bm5UdElZOUJsdTZMZGhOazl0OEdSTm5DV3o1dm82R0ZPUXNXTE14ZGkzb3cKMEx0TVdKYTluWkVLV2xvb08zQXNEN2pmeDlJOEJJUjkzWlhkL2EwVDNFa1ByTUMwMVNMUkVNQ1VWdjlHZFRicApwejErOXVkQTgyYnZMNnd6YjdzdWZpemFzK01SVWdUSzI1SitrTStzakZpemlqT1o0eDlSY1RvRTJnNXZlMFkrCmJRTTBSWmtxb1dnQzg2SGNHMElIWVBLcjdKekdyREZHSTUvQmRaZ3ZWRUt5ZXozRmRPNzdRM2YyNlFxcHl5MzcKbU5JMXNkaTlBb0dCQVBDVS92Nm9kbFhweDAwL0lKU01kMzBIU0RPN1FuY0lCTDYxZjlVQW9YZThhaVg2SDBwaQo3L0ZXQWhxNGw2Z3pxYmtNUE4yOEJIelcwb1U5MGF1UEtyMVhFN0x6eEpvVmk1NlJMaHpENkRKbTVuOXVLcU1VCkkzdmNEZzgyZ0tBem1OS1V2THl2elhhSGtydmNDK3BYRW5VNVhQMEROajRMS1dCam5RQ0luS05EQW9HQkFPY1oKb29VcTZoSFNwa3VmcnZkNi9uZ1lZOUtCdTRJaVhMdHF3OEdtSDNOZGNSZFIvV29WY2l5MHdRVS9HRFNmVzNpZApvQjRQNUFpWERBY3VkWklINjNycm9hV2x1UVNPSjdodS8vb1ZTbHZLRXE4SSt3QlNDcEVQNW12ZDR0WTlTTFlDCm4rOU9VSDdTNUVGeWE5ZXRwV1JLOEVDc2FnZjdEWVBiUzk3dzRObm5Bb0dBUHJiWWNoSUFKdzAyQXhEOXNUdWMKdWw3M2wyU3RRdEk0U202TjBEekYycXluRHhkUXFOZDVyUE82d0xSMTlFYmphM1doT0R3Vy8yUVFwT01ra1JCVgpGOTVuS0RNYmdQODAwalVPVERsVmdpNEkwQmNyemk4bHdOZndZazdXNE93U1huS2ZjS0J6Y3Y2TVphUkxCdCtECjFFTUwxbmpMM3dpUjFLcWk5c3lsNkhrQ2dZQkt1bmRiS0cxWUpnMndGb3ExYkFndFBYWEo5RGwxOHphWlJBVFkKOGFicDN5VmFyU0NNMVRKK1VsUzRKWmJtTFVHZTF4bVhudnZWNjBId2NJMkVFeHVLTy9laFlOMWJJN3lrWHdCWApGZHRkb3hJM2wyZlN5clN3QTd3MjFTRXN0ZFIxUnBRQkJnbnhlTEJtbVdGVjlNaXVqYXp5dk0zc2xybmdFV0dQClRjVG5zUUtCZ0JmUVBYVW9RSE5nUkpyVFg4Unp1cjI0WnZrb3gzMVNzclRwNDYzUzI4MmJ3MXE3WGhrUkZzSXgKeFM5c2UxU0JUemE5dlNaaUpjTWV2UWdZYkNOTUNrQTQwbWM5VXRUTnhlbzZxbi9BSUdMQ1lLYmdHR1dQN0FLVwo3S2F1L3FhT09vSW91STl5QnY4dzduanVaVHh0V2UzVUg2N1pHaWJFMVl6bVZCSW5ZQkxPCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRRnpiWThyalFUaDkxTjZwSk9KODZyVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEl3V2hjTk1qWXhNVEl4TWpFMQpOVEl3V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ20wd2M4Y2tyWnNSVHo1WGkwNDhwTGRad3BvL2xiNnFMdlFwVnRmcXZqUFZSMlRkUGgKK1Z3cjB2ZDdidC9peDVEVU83K0MvclIvY1JxeXlTRjRFOW1vWjdWaUhiV08wWTV0SGtrWlhUbWl1a1RtaXdmQwpaNGNMTTh3MVdoU2Y0ZTgwd01hcElTRUJuV204elQ4NUJJeW9TVVBhNSsrZkowL2ZxTGNacGcvZWxYV0djT1BRClgzQk00N3M5Zm11dU9ydC9WdDhkbjIxSll4WWQrYW41RjdNYm5aa2xDVDlvMmNvQ2hwaDhBWTBwN3B2RE4yRW0Kc3Rwa29GalQ0VDMzK2hVNnJ4bUlnZDEzdHhzZlpBbHk2YjBoUTE0TFVpMVBGR2w0YkMxbU9QNGJ2WnRzTkZBcQpocG5vR3c0WVNLNFUwQStHdWpWdE1xWWFBSTlucndrKzNRMy9BZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVmMTVvS3dJL2tMNEk2enFlNVdKVnFEcktWVDB3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFEQmlPM0RUUVBsOWR1MjQvVzlDS1pBTUlRNDVmV3BIcU1LSVZVT2lnNUlPbHVFUVFtL3Q5NEZRClRQQW44anV5U1I4ekwzQXZVTGtnbHoxYk92SEY2dXpsQnR2T2Q2cS9ZMkdXMDd4THpFRTlkUUorRzB0QlBDekcKVzVnZ3NiWGlMdVVxVmNWcFdKWENNeS92RmNYbXl5WWV3dXZCdjl2cCtiZDdBemQzdnR0d211MDE4MEVobTF5NQp3RjhacVcrM1lRRHFUTzREZ0xlSWxKWkdmRk5uMXpqYnJzbXErV0hxSTNpd0Y2Qk5TUmRsSy9DLzl0RFFxUGc1CktBa2U3eDRXVkxicWtKbWhLU09KU3d3N1hJV2VYSTNQanRlcUtxZnFtMVhiY2c1Ry82YTgxQ1UwQWFONHB0MFoKeUwxbjBQZ0d2d0U3YXRXRDRTZFF4Zm9xWEc2bnJOYz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTVENDQWpHZ0F3SUJBZ0lSQUtmZHNES3VDd2gvWmdqa0taNkQ1NlV3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV5TUZvWERUSTJNVEV5TVRJeApOVFV5TUZvd0l6RWhNQjhHQTFVRUF3d1lLaTVvZFdKaWJHVXRjbVZzWVhrdVkybHNhWFZ0TG1sdk1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTJkMlNWcUFwSDlmQ1hpREZyVyt3Q0hGN2lseUkKZm5HM2ROTDNpR0QwSXE2eGcwUm5ZQzZ5OEgxS2JSM1JOM2ltaCtkT2NVcTJYeDRhRmVkUi9kQisyYnAvSytwOApsTHRETHhnb2pscjBOdTIwcmRyUDdJenZCa0huWUlhVmwxZXgxOW1WZXhsWjRUd3pIdm1DajUvZCtCREJ3SGY4CkFTeVVNZ0lmS1hxUVlQaFlscWREYmZrN1ZHbnU0WFc5Q0k4K0thdFl4S0YybE4zc3FOSXF3R0FTek1YWkNNemEKcVZteWVZdTJVb3ZlOEdsZGpSM0QvcmlYaGdreFJoUm01QTIwMS8wVmtvZk9FK1BiV3NEQzEwVVlVNmRJODdOVQp6NmNPRUZwNzZHM2FPZVZnaWp3QTBRODZKdDRtL2hDZVVpbGZGRGZheFhGUjU1QUNyRFI1WEpxbnp3SURBUUFCCm80R0dNSUdETUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUIKQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCUi9YbWdyQWorUXZnanJPcDdsWWxXbwpPc3BWUFRBakJnTlZIUkVFSERBYWdoZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d0RRWUpLb1pJCmh2Y05BUUVMQlFBRGdnRUJBQ1gyWUJZKzlZYkVzUndrNzhoUFovRnhrVitLQnZNNXpDZVBSZEJId01JRFlxOVIKczhORFZ5a0dWMUwrVG5DUVBvMkQ3ZUZjNHZYcTB3cFNKcWFSVG1jWER3Y3dhU0ZvZk0xK2hCMTdMSDAyMDFrdwpuenIzeGI1bWJUa0NOWFJzdU5SeG82MHZra1dONmpaUzFkek1qV09ZYW1EcDBFYUdKV1JzejNpZzBJRFdpTUZiCjh5U3oydnFKenliM2dqMGJpVFoyaCswZFVRMm9aSGd6MXlZYnp4bytRQ3JFLzJtcFVpa0hZSElhMWs1RTl2Vm4KeExnbzBwc2c1Z2x1eWY5Tkc4bUh5eVV6YlB3cjQyRXhsQWhJanhqdU5jbkJSVFpqV3lETGlpZitoYVRKK2NQMwpqM3lPbjk5WVE5SDZ2Z2ZrYWFlbVBPcEVlS1YwOXNtMnBEODc4dkk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMmQyU1ZxQXBIOWZDWGlERnJXK3dDSEY3aWx5SWZuRzNkTkwzaUdEMElxNnhnMFJuCllDNnk4SDFLYlIzUk4zaW1oK2RPY1VxMlh4NGFGZWRSL2RCKzJicC9LK3A4bEx0REx4Z29qbHIwTnUyMHJkclAKN0l6dkJrSG5ZSWFWbDFleDE5bVZleGxaNFR3ekh2bUNqNS9kK0JEQndIZjhBU3lVTWdJZktYcVFZUGhZbHFkRApiZms3VkdudTRYVzlDSTgrS2F0WXhLRjJsTjNzcU5JcXdHQVN6TVhaQ016YXFWbXllWXUyVW92ZThHbGRqUjNECi9yaVhoZ2t4UmhSbTVBMjAxLzBWa29mT0UrUGJXc0RDMTBVWVU2ZEk4N05VejZjT0VGcDc2RzNhT2VWZ2lqd0EKMFE4Nkp0NG0vaENlVWlsZkZEZmF4WEZSNTVBQ3JEUjVYSnFuendJREFRQUJBb0lCQURhSFdZQXErQUFMVFkrbgpuakpwbU9LVUhMcWxyRmdSZUR4YUxUQktLL0NlVHJtdkhqeVprNW5Ua2hRN2VVanIvcXBYUDIvbHBqMnFXQmNSClhaa3NYUU43eFNhbHV1YXk4LzdPaWlBUExiNnR3aUlkZVJzWXJ4NmUwaDE3c2VjK1FMbm9zSnd0M1N3ZG1DSHgKaXpjTmFVNFVTNW96cmJSUmh3bjVNL2w2dnJZMkhBN3ZuMVFNeURkRnc3S0kzR3RMOVYyeUV4NTF5dkYyUkVwOApYUTRyMmp6T0lhTWdsbERDUDFxY2M1T0t6cFROZyttb2ZVaEhMRWo3MUhjbDBhc3RVTm1xcFF5YS9mM3RXdzhWCkR1UHhIblFTQXFMWEJ4L0xjcUYzNU1wOTlqZHJaMldrYUxXZEs1N2VwYk45R2hVN09jdUZwd20yNG1FeGxXc3AKY1ZVcFE4RUNnWUVBNHgweEVyS0xlTW1nTWw0S2tqMWYwSVk5elBMQ0RXRndCVE9taFo3bm54SFlYY2lMZHFIcQpGZGUxN2hBejUzanU5V2ZtL2FTWTBhZjUySUVOajlIUWZCY2NpS01kRVlLUTNxcmcvN3NLM0V3bktEdDdiWFQvClF0d2hBMGxoektvWjE0MjF6YTNYcFZTUGc2aVFoQk15YkpyeFdBWk00TStDUjlRMmlPSDZobUVDZ1lFQTlaTS8KejlHQ3d6NWNnUS9mUElWS3F1YWYxYUhTQjQ5bHd0MEdNaFY4WU8zZzRUanlxYUZqcDdzYkR2RmlkOXJzZjJtYwozRWlMSzdzeFBPbGk2SGtXd0JERzJiT2dVa1UwTWVKVVVKNDNtenA3STJBSGJlTnM1dnhQK09kcmptQUhPLzh5CkxxeHpVaVh3dk8xYnpyd01rL0pZeHhWakpob0JUQlhrSGlxbGZDOENnWUVBaEpMVndvUld4ZnRzZC9wTlVYQmkKTGVjdXpDUXBBb2FPVFhzSkNaYm92Z0k4dXdJRjV3bzlDdU1RWUJjMU5UbHl3KzRTK0p6TVdCWWwwaXdETHFEYgpncFE3SThlVGdGVW5HOVBENDRQYm94MFEvbnM2WVhxYVJ2MFlpRUtkeEVySEt2eWQwNkpXN3p1ZFNzMXJEcTNtCkVWK2c0akZMVHkvU2JQdURtZ1BQcWdFQ2dZQWdLbEZKWHgvSmd2bUt6aEZuVSs0YnhHbGJDZjhBam4rOXJrV0oKZWRiNHV5K2hVRnc0YTdNcDNSQUdQUWV3dXpRTzNENTNlK2orcVY0aHBGQVlNd1FQMUNLM2tSZUdyeG5QRHQ0TQpVU3puWUJtUTRKc1lnWmxhQitKUnI3NGV2K1V5cnBKY0dxcGdNQ2dBRnZiWGRUb1Foc1dxRGRzV3VvRkEvZjBMCkZucm1jUUtCZ1FEZ2Q2Y3djZlFVdzhmYjNFWG1HLzV5cWFxRGtCVXNtd01RVDc1NXY3cVJtb1dPeW9HeWw0dFQKREZJL082MjZCTmJtZUlIZkx1WktubTJpS2F5NUdpR21uZU1Odmk4OHo4SXhCeDVoYmVHRVVtQXZyNFpPelRETApFMERCUHowMGtkNkx3UXlvQTJnWUoxc0V0bmFrRUg5SU5WYzVEV1Nzc1BvVzdHWjVXeHd4VWc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRRnpiWThyalFUaDkxTjZwSk9KODZyVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEl3V2hjTk1qWXhNVEl4TWpFMQpOVEl3V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ20wd2M4Y2tyWnNSVHo1WGkwNDhwTGRad3BvL2xiNnFMdlFwVnRmcXZqUFZSMlRkUGgKK1Z3cjB2ZDdidC9peDVEVU83K0MvclIvY1JxeXlTRjRFOW1vWjdWaUhiV08wWTV0SGtrWlhUbWl1a1RtaXdmQwpaNGNMTTh3MVdoU2Y0ZTgwd01hcElTRUJuV204elQ4NUJJeW9TVVBhNSsrZkowL2ZxTGNacGcvZWxYV0djT1BRClgzQk00N3M5Zm11dU9ydC9WdDhkbjIxSll4WWQrYW41RjdNYm5aa2xDVDlvMmNvQ2hwaDhBWTBwN3B2RE4yRW0Kc3Rwa29GalQ0VDMzK2hVNnJ4bUlnZDEzdHhzZlpBbHk2YjBoUTE0TFVpMVBGR2w0YkMxbU9QNGJ2WnRzTkZBcQpocG5vR3c0WVNLNFUwQStHdWpWdE1xWWFBSTlucndrKzNRMy9BZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVmMTVvS3dJL2tMNEk2enFlNVdKVnFEcktWVDB3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFEQmlPM0RUUVBsOWR1MjQvVzlDS1pBTUlRNDVmV3BIcU1LSVZVT2lnNUlPbHVFUVFtL3Q5NEZRClRQQW44anV5U1I4ekwzQXZVTGtnbHoxYk92SEY2dXpsQnR2T2Q2cS9ZMkdXMDd4THpFRTlkUUorRzB0QlBDekcKVzVnZ3NiWGlMdVVxVmNWcFdKWENNeS92RmNYbXl5WWV3dXZCdjl2cCtiZDdBemQzdnR0d211MDE4MEVobTF5NQp3RjhacVcrM1lRRHFUTzREZ0xlSWxKWkdmRk5uMXpqYnJzbXErV0hxSTNpd0Y2Qk5TUmRsSy9DLzl0RFFxUGc1CktBa2U3eDRXVkxicWtKbWhLU09KU3d3N1hJV2VYSTNQanRlcUtxZnFtMVhiY2c1Ry82YTgxQ1UwQWFONHB0MFoKeUwxbjBQZ0d2d0U3YXRXRDRTZFF4Zm9xWEc2bnJOYz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUakNDQWphZ0F3SUJBZ0lRUk52Vjl4VmxCaVRSL1hsUHVuUVRiekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEl3V2hjTk1qWXhNVEl4TWpFMQpOVEl3V2pBbU1TUXdJZ1lEVlFRRERCc3FMbU14Tmk1b2RXSmliR1V0WjNKd1l5NWphV3hwZFcwdWFXOHdnZ0VpCk1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQy9lTGwyaENMMnZ2R0dkOEVYZjJYOWRHTU0KSUZOV2EvYTJmQ0syekV2UzR0YXRKbmcvL2tZTUIxZ2dwQlJkaDB5a0VOTGFPOHU3Y2tGYW9UOTRLamVRSVhpaQpmTXdROU01Wmc2cVo4S3dRWkRwL2lnNU5uK0E5MlExd2lhUnRzbkZ5UGxYMmRacEM4VzN3VTEzb3JPdVEvTEdDCnV4R2NtSCtvL3BUQ2Z5YjYxblg4QWdvZG13RDdjM1pDcGJkclUraC9UTHo1MWVRaXhWUERxeHd0aGcyMXVBS0MKMDhQZFZqSzVscEl3TFNMZ2R6bDhKdHRqMlhNTmx6TFRjN0d0T01BYkZsUC84WVY5SmQrWGQ2emUrZGxxT3g2TQpPQ29UTmQ5TjdCSUQ4aTI0UFhFb3VhVFl2VkU4MmV2VGwvSythSGxHeGk4N09IZHA3N2wydG82dWZTekxBZ01CCkFBR2pnWWt3Z1lZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGSDllYUNzQ1A1QytDT3M2bnVWaQpWYWc2eWxVOU1DWUdBMVVkRVFRZk1CMkNHeW91WXpFMkxtaDFZbUpzWlMxbmNuQmpMbU5wYkdsMWJTNXBiekFOCkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWJrTGhsRjJZZ0ZsQU1JZnozTG9oRHFWQm1sUFdZSXhjaG90UFBTbEQKak5Pckp4R2RZMndnbldNN1U4S29ndmtaMUNONTdSdTdaMUt6WStJQ2UxRzA5Q2N2UkdqSHJHdklUVHBCdXQraQpxdVpJN0JFTXhkcHgvaElkTkVTbGJ2RXBzK29VV2hIV1VaMlV6TnVHZHk5MjBOQ2UrQmd4aGZYRldURlM1eUlLCmQ2dUtML1lNdWdGZW11Mld3UzM1MzN2dUJob0xabjhrY0hXazZUTkxZTlZ6L1dXZFVjQ2tOcWNDRCtuVjI2dDEKZ1JzOEpHS3IyOUNMZldhbGVDS09vRk03QXZBUlV2bG85V1ZPZktncCtEeDd1d2ZxbVp2ZFFoZlBacHVtMVpFTwpxeXB3dnVYbUY4MEZKbWZDMEpEYjR2V25pUk1xV1NhamcyWVhaY212MXNENjlnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBdjNpNWRvUWk5cjd4aG5mQkYzOWwvWFJqRENCVFZtdjJ0bndpdHN4TDB1TFdyU1o0ClAvNUdEQWRZSUtRVVhZZE1wQkRTMmp2THUzSkJXcUUvZUNvM2tDRjRvbnpNRVBUT1dZT3FtZkNzRUdRNmY0b08KVFovZ1Bka05jSW1rYmJKeGNqNVY5bldhUXZGdDhGTmQ2S3pya1B5eGdyc1JuSmgvcVA2VXduOG0rdFoxL0FJSwpIWnNBKzNOMlFxVzNhMVBvZjB5OCtkWGtJc1ZUdzZzY0xZWU50YmdDZ3RQRDNWWXl1WmFTTUMwaTRIYzVmQ2JiClk5bHpEWmN5MDNPeHJUakFHeFpULy9HRmZTWGZsM2VzM3ZuWmFqc2VqRGdxRXpYZlRld1NBL0l0dUQxeEtMbWsKMkwxUlBObnIwNWZ5dm1oNVJzWXZPemgzYWUrNWRyYU9ybjBzeXdJREFRQUJBb0lCQUdyamtGV3pTbm1JK3ZoZwpYakVwODl2Y1gzYmpqT0tQL3ZpOHIveHdiRnZjT3BBTEM5SmR0dWo4S0p5QVBNWkJ3KzFMWHdwcG0wQ1hkaGlNCk1BeDdOTzJIWWZzRHhFQXJDZzg2eThDSWRPWHByaWFKQVpjZ0MyVTdpSjhzbDlpTlozdXBoUC9EZzB5Znp3bjgKNEU0R1NyTnovZnpIUmZ1dnZvU3ZLb2l4eHliOEh4SVpwZ2xlSzBGNk5rR25kWUV2NytldStRQUdMaUdhamF5UgpxMHZjR0tDbjB2Z0pFdXpESWhlcXdRckVuaGJ0R05sQ2VHRUIzT3pPREhaSTQxU1BPTzJ4R1BjaTFCOStyZkNwClFGdGJUQWhWRXhnVWJGSTdFRkEyaWZPRm9UbUQvODBUYUFKdmVpL3hCbkhPMk9rckdOWXJBNmFuL2ZUdEdzZVMKRStNMEZkRUNnWUVBMUNGREFaWXh2aEt6UkxGcUowajNoYnJlSllEWHBpMHZDdFVhd1gxZjBKQ1h5N0o0aWFnawpkU3VML2NRclpSOTZ5bGdtZjg0L0pxYnlCa2w4MDF3S0c3QURocHV2RkVjSGlvTzZyS1Jrajhwd1ZOMzNHbk5SCnMrYTRXMGJrWG5nWGJIZWE0bUw3UUVtTkpZblRKNXp6cE9MUlhGZUdkaXBMWXBVNEoyUzVyNWNDZ1lFQTV4SEEKMW0rUU1JSk5JaUhsSUJjZ2xIcG95eEFuRTZDeExGandxakdXaW1xK3RCNzJkZmNTbU16RnZIb3ZmenJlaEFENgpaZzVOamJHN2c2Tk1mUytKSmRVUktRMnhCSEhJKy9xdUQ4emx0QzRwNWQ4UjhHSnJCNjR3ay9LclpVTkdVbjVNClJwL2JYU0JJa3RNb0xVWUNmc09DNVgyR1NER2ozWm0xMm1sTEV1MENnWUFCNHhYY2dzQ0loMVFPN1dFYlhsdk4KVmI4NktDNUM3UzM0ODdKY1BFaEk2N0JlQUlWdi9BM3UrT2N5NTdiWEhIT1VMenFRY240L1VzYmVaWEwxMG1ESQpwRVV6d2xqSlhtUmp5QTQyRVBSUUR5WDJxMDdTYm1vd3BvSEhWaGNiL0FlQlVJTVJObjR6c1RQUFBLMmpNWk05ClNVTkJoZ25OTFUwa1lGMXloRVBlbXdLQmdFV0pHQ2p2eGNwelM5YjdzRUhwODhuNjFGSlhlQXIyRHBzejRLaTIKNTRDY0F1dWRiYm11TXBCOC92eHJJS1AvQ1R0Y04vNUNTNkJhWGYyTlJOVmZXcnhoMUJvd25wYWh6MFBVK2xDUwo3b1U4Wnl0ZjU3d1pRZkE3d1M2a2xtT1F6VGJCL3g0NXVQL2JXVHVtQTY4c0pGQVZjZXl4eTVrcUp3L20wOHo0ClpyazVBb0dBUndUVmlzVVdwdjc1UWxyOGZIMEhTRUN2SUtNdUhLNmxtcCtramFlYTZMTVU0NW9lT1BrcnJRRmEKTjhvYWxZMmg0WHBMN0lMVC9SZkFIL1A5eUY5ZlM0ZG5yQWZ2VG55bUV4VFloeWRCcGxqY3BZRTZLcjJIMnE2aQpGcnoyK2VpMlo1U1QvYVk2dlU3QzlpT0NQd1dJbnZ2cW1FakRWaXdZNnNIWGg3b0lMeHM9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  skip-cnp-status-startup-clean: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: c16
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "116"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  # Default case
  routing-mode: "tunnel"
  tunnel-protocol: "vxlan"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-wireguard: "true"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-local-redirect-policy: "false"

  kube-proxy-replacement: "false"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  enable-host-port: "false"
  enable-external-ips: "false"
  enable-node-port: "false"
  enable-health-check-nodeport: "true"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  ipam-cilium-node-update-rate: "15s"
  cluster-pool-ipv4-cidr: "10.16.0.0/17"
  cluster-pool-ipv4-mask-size: "24"
  disable-cnp-status-updates: "true"
  cnp-node-status-gc-interval: "0s"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "true"
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"
  k8s-client-qps: "5"
  k8s-client-burst: "10"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-connect-timeout: "2"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"

  external-envoy-proxy: "false"
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: c16
    peer-service: "hubble-peer.kube-system.svc.cluster.local:443"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-hubble-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-hubble-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumendpoints
  - ciliumidentities
  verbs:
  - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumexternalworkloads/status
  - ciliumnodes
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumendpoints/status
  verbs:
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumexternalworkloads
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: kvmesh-metrics
    port: 9964
    protocol: TCP
    targetPort: kvmesh-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: NodePort
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
    nodePort: 32379
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-agent: "unconfined"
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: "unconfined"
        container.apparmor.security.beta.kubernetes.io/mount-cgroup: "unconfined"
        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: "unconfined"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        lifecycle:
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - CHOWN
              - KILL
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
              - DAC_OVERRIDE
              - FOWNER
              - SETGID
              - SETUID
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Unprivileged containers need to mount /proc/sys/net from the host
        # to have write access
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        # Unprivileged containers need to mount /proc/sys/kernel from the host
        # to have write access
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Unprivileged containers can't set mount propagation to bidirectional
          # in this case we will mount the bpf fs from an init container that
          # is privileged and set the mount propagation from host to container
          # in Cilium.
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - cilium
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      # Mount the bpf fs if it is not mounted. We will perform this task
      # from a privileged container because the mount propagation bidirectional
      # only works from privileged containers.
      - name: mount-bpf-fs
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        args:
        - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
        command:
        - /bin/bash
        - -c
        - --
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
            drop:
              - ALL
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        resources:
          requests:
            cpu: 100m
            memory: 100Mi # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
      - name: host-proc-sys-net
        hostPath:
          path: /proc/sys/net
          type: Directory
      - name: host-proc-sys-kernel
        hostPath:
          path: /proc/sys/kernel
          type: Directory
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              - key: ca.crt
                path: client-ca.crt
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.14.2@sha256:52f70250dea22e506959439a7c4ea31b10fe8375db62f5c27ab746e3a2af866d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      initContainers:
      - name: etcd-init
        image: "quay.io/coreos/etcd:v3.5.4@sha256:795d8660c48c439a7c3764c2330ed9222ab5db5bb524d8d0607cac76f7ba82a3"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
        - |
          rm -rf /var/run/etcd/*;
          /usr/local/bin/etcd --data-dir=/var/run/etcd --name=clustermesh-apiserver --listen-client-urls=http://127.0.0.1:2379 --advertise-client-urls=http://127.0.0.1:2379 --initial-cluster-token=clustermesh-apiserver --initial-cluster-state=new --auto-compaction-retention=1 &

          # The following key needs to be created before that the cilium agents
          # have the possibility of connecting to etcd.
          etcdctl put cilium/.has-cluster-config true

          etcdctl user add root --no-password;
          etcdctl user grant-role root root;
          etcdctl user add admin-c16 --no-password;
          etcdctl user grant-role admin-c16 root;
          etcdctl user add externalworkload --no-password;
          etcdctl role add externalworkload;
          etcdctl role grant-permission externalworkload --from-key read '';
          etcdctl role grant-permission externalworkload readwrite --prefix cilium/state/noderegister/v1/;
          etcdctl role grant-permission externalworkload readwrite --prefix cilium/.initlock/;
          etcdctl user grant-role externalworkload externalworkload;
          etcdctl user add remote --no-password;
          etcdctl role add remote;
          etcdctl role grant-permission remote --from-key read '';
          etcdctl user grant-role remote remote;
          etcdctl auth enable;
          exit
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        image: "quay.io/coreos/etcd:v3.5.4@sha256:795d8660c48c439a7c3764c2330ed9222ab5db5bb524d8d0607cac76f7ba82a3"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/local/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=clustermesh-apiserver
        - --auto-compaction-retention=1
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.14.2@sha256:0650beac6633a483261640b6539c9609f5a761f4ab4504fd1e6ffe7f2bb82e9a"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt
        - etcd.config=/var/lib/cilium/etcd-config.yaml
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: IDENTITY_ALLOCATION_MODE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: identity-allocation-mode
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        ports:
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir: {}
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "clustermesh-apiserver"
      serviceAccountName: "clustermesh-apiserver"
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: clustermesh-apiserver
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.14.2@sha256:a89030b31f333e8fb1c10d2473250399a1a537c27d022cd8becc1a65d1bef1d6"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            tcpSocket:
              port: grpc
          livenessProbe:
            tcpSocket:
              port: grpc
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          - name: tls
            mountPath: /var/lib/hubble-relay/tls
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Always
      priorityClassName: 
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      priorityClassName: 
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.12.0@sha256:1c876cfa1d5e35bc91e1025c9314f922041592a88b03313c22c1f97a5d2ba88f"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.12.0@sha256:8a79a1aad4fc9c2aa2b3e4379af0af872a89fcec9d99e117188190671c66fc2e"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
---
# Source: cilium/templates/cilium-secrets-namespace.yaml
# Only create the namespace if it's different from Ingress secret namespace or Ingress is not enabled.

# Only create the namespace if it's different from Ingress and Gateway API secret namespaces (if enabled).
