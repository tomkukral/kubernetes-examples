---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRUlVWbjU5eWkrYzhPV2U5eGZFd2poakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOekkwV2hjTk1qY3dOakV4TVRreQpOekkwV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRREQvTTlhd2VVczV6eGp3dnRPeGExUG11MC9tRHRWSmpsUkxpeXh0SDBIVU5PWUo5TG4KY2VTUU1KajkvT2dIdXJEdStSZVhHRDB4cWpZSlhReUZyNXYvQmZmRDlCUDBwRi9ZR0E5YU1Id2NPeW9Cc3habApta1U1cXJMY29oazFFSTNiRHRFNmdFeUd2eDdKblpzNkFsSG9Ba3VSZnVVTU1mNEFVcDUzR3l4YjJ2cVFiQ2lYCnJzNm5XQWNxcGVzMS9xSDk4a005UXgrUUFHUk81cUNxS3R2ODhKUnArSENYdkErdzFQa2EwRy9wWmxKNlN3UFUKU1dGOFlIRWxEMy9tQzNBK0hyS3h6Q2JCRXJHMGVZczBHWTZRQTdlZXdob3VzSVFjNzZkSXlMdDljUEx6TFJjcworRWVZR1RmY3dzNnVUVis0QXp1VG9xclA4aitDM3BBWDQwS1BBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVV6Q1F1REhoSFR3ZHhxbTJBdEVnTnlVdHB6UkV3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFITWxZeUkyWjk0MGlYVDliKzZOTDF2MnpsRTczRWpDdW5wd0RUMlFLcnRlRnJLWWJZL2hHc0xKCkVUMEo2QkNCUEQwODVHd25Dcm94cllCT3dXTzAvSzlUcWViR1hndlFmak1SRE8xcFUxdFIzYkpqUytNVnlQM0MKZGcyQ3E3YVpSYit4NU1wTGRPVzBpbCtQN2pqSUFaczdLQWpRVWFSYTN6WERoeVlxOFhWYmlhSTRtNDBhZGgybwpvWlZqQVhSWlAvaXlmY2QvMVF5R1JQVy9DNmtRTk84WGhNL1hVNk1DWWZDMXZ6WFlkMkh6b242VXpmcWpDb1FXCnhTTDFDMVBBaTJUM1NxRGFmSFlmQittNXZkOUlhM01YaDR6Z1doWFVSUktlcE4zVjhMK09ZMDh4MFl0SWNLamYKVldIY3J4VmJrVHJyMVkvYStPZE82NDY5aFhWMnNNUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdy96UFdzSGxMT2M4WThMN1RzV3RUNXJ0UDVnN1ZTWTVVUzRzc2JSOUIxRFRtQ2ZTCjUzSGtrRENZL2Z6b0I3cXc3dmtYbHhnOU1hbzJDVjBNaGErYi93WDN3L1FUOUtSZjJCZ1BXakI4SERzcUFiTVcKWlpwRk9hcXkzS0laTlJDTjJ3N1JPb0JNaHI4ZXlaMmJPZ0pSNkFKTGtYN2xEREgrQUZLZWR4c3NXOXI2a0d3bwpsNjdPcDFnSEtxWHJOZjZoL2ZKRFBVTWZrQUJrVHVhZ3FpcmIvUENVYWZod2w3d1BzTlQ1R3RCdjZXWlNla3NECjFFbGhmR0J4SlE5LzVndHdQaDZ5c2N3bXdSS3h0SG1MTkJtT2tBTzNuc0lhTHJDRUhPK25TTWk3ZlhEeTh5MFgKTFBoSG1CazMzTUxPcmsxZnVBTTdrNktxei9JL2d0NlFGK05DandJREFRQUJBb0lCQUUvRzk4elV3bW50MG5vMQpZMENrWExEYnVwazVhV1Yyd3J3VjFLR2RlNHRmemxIUVhCeFVFeHJTZldSZDcwRStNRW1HWWFEaWYvNVliOWlOCjVNd0NPTGl0Z0RabWd6MEJML1p4ak1aRW1EQ1JzTDZ5WEhxTk9vS0h4bmpqRHVtM3pGYVFDSUVNdXBuYThEaFgKakZrbm1wbWJYWkZqR3U5RTVrVFJYS25WQ05CMmNxVGQxSXZ1NFM3a21EWnoxTXBpWExoYTNBQUFEZFJCUVczdQpmS01EMTdvdjB3MEhzMU82TnpDcmg1cFlKVHpaS1ZRb3JMNlBrdFlvUEhzS2Uyck5raE5PZjVGTGhUVStQcGlmCmxyYktURWkzcXo2WElIckdlUldKU3A5WGVoZmVFaDFFUlovbGJsdGd0bDc4MDl4V0VOTjJZbTVwZkFYTjUwVmYKcTdlZjU2a0NnWUVBemExV1lTeTJKRk0ycnM5eW40Ymg2Z1N1enFvdjM0NXhHNDI4bFJybFhmS29ob0xORHJLWQo2NHR2WG0xb3ZkaDM0UnRTSitKQXhtS1NsZElzNDlqRVJjdHY4b2c1S0RRdzF6MUR2RWtsVWFRNURaVkVKYlRICjJRU3dSdFhVQzVGSVRYZy96SXhRU3B2elR0OWNIRm1TQzVtNTJQaWY1T3FvUjRWWDdkckpnZ1VDZ1lFQTgvQ1EKTkZHWVBhU3hjNVNZWmxTeHpqT09LeW9RQklqejdHWHNjUENHY1VScEVxVWNiWTlldnBiNHVPREpOUmdFN056Sgo5b3RJZm55OXVDR3RBb3dKRDFJS1Ivc0ZsQ1ltVXd0UlFvOFd0M21iSCtWb0M4YmtBL2MrQ3BYRktZaHAxLzNrCnJOTWZYUkNUOFlpT0Q5KzhEbXpQbm5XZjRSSE9pbVhzcHFQNThvTUNnWUJ2dy9yRmtZTmsxK2RHTlNxSGI4ZUIKNEl1UmVEL05qdHo5NlJhS08vUmFDZ3YwRkU0VDU0OWJxQWliMm41cGM2RXBMU3lHeWRjRE52dUsrSXcyUUV2ZgoxWDMrNEhHVzNFMlNHUk9lMUd5NEliSnpKQ0xGRHFqdTBESnVPN0lmbXhJY0x2VVVWVWNvVS9oeWFzUG1EL0poCjVXWnRkaVdGUXRLeEVzL0dTL2JtZFFLQmdIdEpIM2h4cklHckZNd1hVNWFVUTNDMWVhcXpEWGxkUmZvNTRPK0wKZ0VjS2poZ1FQbmZZdDhlWFFZa2VnbEpGRzJnaWhpZ0dhTk1VZEVYMUx4MVViTmZEWE5MWU9RK1E0Rm1rSktPQQo4YmcweTRPcFM1WjRKSkVraWNTTHdTT21mK2ZidDVEbytyYnNRL2tVVE1nVkNWUTVCZzFONFVtODJDZjJMMDVoCkhWZkZBb0dCQUlIU0hzUTBNU0wyVVVwTHpqdUdjY1BObDlsVWtXMjN6dnk5Z1BQaTE1eTB1UnZzdzlNb1pvYWsKRjBML1JQQjltRkFaM0gvRThCRDQweVA0UDRGdjhRQVZNUk5JT0ErQ3BXZE13K3lXeW04OEwrWk1BT1VyTWk4MQp0cTJUd0dBeW1jWCtVa0lrU1FPam9BWVZsdWJvb21aM0JXOVFacVBiOXk1WGl0WjJ1ei9NCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRUlVWbjU5eWkrYzhPV2U5eGZFd2poakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOekkwV2hjTk1qY3dOakV4TVRreQpOekkwV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRREQvTTlhd2VVczV6eGp3dnRPeGExUG11MC9tRHRWSmpsUkxpeXh0SDBIVU5PWUo5TG4KY2VTUU1KajkvT2dIdXJEdStSZVhHRDB4cWpZSlhReUZyNXYvQmZmRDlCUDBwRi9ZR0E5YU1Id2NPeW9Cc3habApta1U1cXJMY29oazFFSTNiRHRFNmdFeUd2eDdKblpzNkFsSG9Ba3VSZnVVTU1mNEFVcDUzR3l4YjJ2cVFiQ2lYCnJzNm5XQWNxcGVzMS9xSDk4a005UXgrUUFHUk81cUNxS3R2ODhKUnArSENYdkErdzFQa2EwRy9wWmxKNlN3UFUKU1dGOFlIRWxEMy9tQzNBK0hyS3h6Q2JCRXJHMGVZczBHWTZRQTdlZXdob3VzSVFjNzZkSXlMdDljUEx6TFJjcworRWVZR1RmY3dzNnVUVis0QXp1VG9xclA4aitDM3BBWDQwS1BBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVV6Q1F1REhoSFR3ZHhxbTJBdEVnTnlVdHB6UkV3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFITWxZeUkyWjk0MGlYVDliKzZOTDF2MnpsRTczRWpDdW5wd0RUMlFLcnRlRnJLWWJZL2hHc0xKCkVUMEo2QkNCUEQwODVHd25Dcm94cllCT3dXTzAvSzlUcWViR1hndlFmak1SRE8xcFUxdFIzYkpqUytNVnlQM0MKZGcyQ3E3YVpSYit4NU1wTGRPVzBpbCtQN2pqSUFaczdLQWpRVWFSYTN6WERoeVlxOFhWYmlhSTRtNDBhZGgybwpvWlZqQVhSWlAvaXlmY2QvMVF5R1JQVy9DNmtRTk84WGhNL1hVNk1DWWZDMXZ6WFlkMkh6b242VXpmcWpDb1FXCnhTTDFDMVBBaTJUM1NxRGFmSFlmQittNXZkOUlhM01YaDR6Z1doWFVSUktlcE4zVjhMK09ZMDh4MFl0SWNLamYKVldIY3J4VmJrVHJyMVkvYStPZE82NDY5aFhWMnNNUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKekNDQWcrZ0F3SUJBZ0lRSHVFRURaVy9qekoydXYxSktLNW9YREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOekkxV2hjTk1qY3dOakV4TVRreQpOekkxV2pBVE1SRXdEd1lEVlFRREV3aGhaRzFwYmkxak5EQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQCkFEQ0NBUW9DZ2dFQkFOM3V6amRZUkdsc0ZBWTJWSmM3VzJpUXFneitiWlpHVU1MU2RxQ0VaazNHeFdXMlUxbzkKcHlVZU03ZmgyOG9uU1g5OC83TGN5M1NLM2lpdVBDK0FqYVQ2TFExVE13ZDV0YVA3a1paaksyVjlLWS9nT1pQcwowd0g1OXR5Qmh6bFBORkpjTlAvaWhyOFg5YytZRlVvSlEzNCtLS1RST29Wci9XTWlkSHh3RGp0RTJ6bXIwQlViCnR1RVJCV3BlYk9wNXdyRStqcXl5YkR4RkhDeG94cnN1dDQ4UjVxS1hnZVcza3owdVUvYU4vWExOL056eDZYdnYKdnMxaUppb2xDK1ZMTnIzckN6MS9KQnF5OTIvS2FnSUFCcHF0NXhEcjRPLzBVTWVjUXFzN3VYTzVZVFh3VlNNWgpTSk9pd1lkb1N5WkJDcnphVkdTTm94MmpGTEdzWUVrQkd0MENBd0VBQWFOMk1IUXdEZ1lEVlIwUEFRSC9CQVFECkFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUEKTUI4R0ExVWRJd1FZTUJhQUZNd2tMZ3g0UjA4SGNhcHRnTFJJRGNsTGFjMFJNQlFHQTFVZEVRUU5NQXVDQ1d4dgpZMkZzYUc5emREQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFLTVlPMDhlVFlQcHg5Ny9BSnovVHVBUmR6Wk0zClgyMmpNajRVQWxuRjRVaFJlK0hNUE1ENm5jZlZubyt3QnlrQjFjazVXdC9jZFpLTU1RU0tIb2V5UzA1eTFZcmIKZGxvakh0aWxNVkZWZTI2Z25ucmU5MjNxL25TZmdGcnlQdXV0U3BJSFhQdVFVclExUGxQZ3laYkczaDJvd3lnaQpqczJkUXZRazc5bThWMG1HaFlRVmRpdXVyL041cVFUYmR0aXVrdGI2WFhjN3E5Szc4bVFqWkdvcHJKdDJGWURZCkNObW5ZUE5jemtqb2xZcTIvU1RtWDNWUXZUZFRGOXA0cU1WR0JaaU5BZHFqSEpuaWxGaU56TEl1ZW1CRzk5dHYKSnJWcFFYcFlrMTdXY3hCZFV6M0hlQkk4aE1TRTBiSmgvdWIzNlF6QmdLMVJrakUyYnFmaDhRUVRKUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcGdJQkFBS0NBUUVBM2U3T04xaEVhV3dVQmpaVWx6dGJhSkNxRFA1dGxrWlF3dEoyb0lSbVRjYkZaYlpUCldqMm5KUjR6dCtIYnlpZEpmM3ovc3R6TGRJcmVLSzQ4TDRDTnBQb3REVk16QjNtMW8vdVJsbU1yWlgwcGorQTUKayt6VEFmbjIzSUdIT1U4MFVsdzAvK0tHdnhmMXo1Z1ZTZ2xEZmo0b3BORTZoV3Y5WXlKMGZIQU9PMFRiT2F2UQpGUnUyNFJFRmFsNXM2bm5Dc1Q2T3JMSnNQRVVjTEdqR3V5NjNqeEhtb3BlQjViZVRQUzVUOW8zOWNzMzgzUEhwCmUrKyt6V0ltS2lVTDVVczJ2ZXNMUFg4a0dyTDNiOHBxQWdBR21xM25FT3ZnNy9SUXg1eENxenU1YzdsaE5mQlYKSXhsSWs2TEJoMmhMSmtFS3ZOcFVaSTJqSGFNVXNheGdTUUVhM1FJREFRQUJBb0lCQVFESDFIaTErTEpRd2xJZApiZG9vK2ZkS1pjZllQMWRwVWhMeCtSTjdZUHZFMkU5eFVBUXBZdzRYSytTaGs2cVZrVjVxZnFDMTZuei9pUEtVCmFwNGluM3ZxcXFEYU9LbmY5MFVJVEVKQXlUYVFBV3prOFo2bWhUMVJzRU1KTlZBTzJEUmlYRWdVaDJHUXV3QkkKVmNZRmplWEp6Q3BJaldSR01vQkxQUURwOHZPOWhJc2R1YjhESEtOdGpNcHJYcnpybWRqV1ZsNEVYKzZqamtGRAptT2xHRUVHQkpKanRRc3QxM205WHI4SXBvVzA1MTh2b0svdUtJNnRyanNXRGlna2FUbFQ2ZWhuY3pEcGEwN2dzClZkVitxV0UvUDN2dVY2cWpWQnBURjc2RVhtOCtHbXMyNGxBSnl5REVnZ2R0RmJZSXQySUQrVUtKUy9VWkpxU3gKaXlMVm94KzVBb0dCQU9yaVVEdzI0LzJYcFRvbEwxdlUrajJmUDkyRDRmWW90b1Exc1Z6cm9XVGFGa1hHcG55NApnNm0vRHpndVpPd0ZhaFdDZHhHZU01S2xtdEllcUczVEgrZWU2SFE4RUNCeWhXNzlJc0x1KzZSblpMR3hTcUNSCnFLSnV4SWIya3hGK01SYW9RMDNqMEVnV3FBQTRaajNHNUFZaGtsbDJ1SXo2cVBZT0hNQUt5NGxIQW9HQkFQSGkKYmZXOE5STTUva25CYUsxcVpQRVp2TjdmWnhibitKbDNKU3JPZGZuNzFiSEZMeXExVFlDaS9lbTBLK3MreHBMcwpMMG9nVzBycXV0OTFHNU9tSmpYY1A1dzFKU25qd2xBdU9TenhHTTczVmo2QWdjS2JYY090WjA0Tk9XOE1NbVdaCjRJbGlzRnFZWGlVSUMvUzRnaGtoRjkzblc0a2x2dmJKZGZFZk40eTdBb0dCQUkyY1ZITjVSSXVuMmQzc2ZWa0kKVnJiQVJHanhFbEt1eVJ0OG82bzZCZHdnQUQyaFBzOERENTVQcW9WY3MwdjVGN1JRTENsYkVBemgreTJqZmpoNAppVXZENnJIcFpHK3JtL2NHZHVhLzNzZUg3cFdUSmtNWWptc2dEU3l4akltSFkyRWRvVFpjbXo1YktuNjNnaXpNCnRMMWRrRGFQOVVSSis0UWRqZ2ZhZWt3UkFvR0JBTURSb3B4WW11cW51VWpzVDlpbHpxL1B0NXJtOWRQeHVXQUUKOVhEcFFteXp6MGEyRElKOElyc2ZzMDlnbS80Y2ZjbFRVK05BWmVZVHRrSTVwWEVPNnJqV3lUSnB2eVZrZFZyYgpiaUtnVXdseGE2UEpaeWRPR1BIS3dtWWE3cVRTVVQ1aTZ2WTU0S0ZuZ3V6OFBDT3FEYk9naU5rUS9Bd1pOZUNlCitsRHJkS25QQW9HQkFKVEM4Ykl1bEoxN2xaY2FkSlJVdGdHNzhleGFGNVlnM0VsbUZBOTVycE00R2d4bDZoTHMKRnl6MkZMWjd4YkRxTXhrYVJCb2ZGMnE2UGlGL3hRM2JwVkZ0Z3JndGNaUllXWjBWQkVMMy9HbklSazQ2THpuNwpyWU5URGNxRmxiUUZnQzlzbTBmMG5LMWxadUFRSGx2UFhPWWpVS2lCR0xOcGhwRS9abUZPRHlXeQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRUlVWbjU5eWkrYzhPV2U5eGZFd2poakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOekkwV2hjTk1qY3dOakV4TVRreQpOekkwV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRREQvTTlhd2VVczV6eGp3dnRPeGExUG11MC9tRHRWSmpsUkxpeXh0SDBIVU5PWUo5TG4KY2VTUU1KajkvT2dIdXJEdStSZVhHRDB4cWpZSlhReUZyNXYvQmZmRDlCUDBwRi9ZR0E5YU1Id2NPeW9Cc3habApta1U1cXJMY29oazFFSTNiRHRFNmdFeUd2eDdKblpzNkFsSG9Ba3VSZnVVTU1mNEFVcDUzR3l4YjJ2cVFiQ2lYCnJzNm5XQWNxcGVzMS9xSDk4a005UXgrUUFHUk81cUNxS3R2ODhKUnArSENYdkErdzFQa2EwRy9wWmxKNlN3UFUKU1dGOFlIRWxEMy9tQzNBK0hyS3h6Q2JCRXJHMGVZczBHWTZRQTdlZXdob3VzSVFjNzZkSXlMdDljUEx6TFJjcworRWVZR1RmY3dzNnVUVis0QXp1VG9xclA4aitDM3BBWDQwS1BBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVV6Q1F1REhoSFR3ZHhxbTJBdEVnTnlVdHB6UkV3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFITWxZeUkyWjk0MGlYVDliKzZOTDF2MnpsRTczRWpDdW5wd0RUMlFLcnRlRnJLWWJZL2hHc0xKCkVUMEo2QkNCUEQwODVHd25Dcm94cllCT3dXTzAvSzlUcWViR1hndlFmak1SRE8xcFUxdFIzYkpqUytNVnlQM0MKZGcyQ3E3YVpSYit4NU1wTGRPVzBpbCtQN2pqSUFaczdLQWpRVWFSYTN6WERoeVlxOFhWYmlhSTRtNDBhZGgybwpvWlZqQVhSWlAvaXlmY2QvMVF5R1JQVy9DNmtRTk84WGhNL1hVNk1DWWZDMXZ6WFlkMkh6b242VXpmcWpDb1FXCnhTTDFDMVBBaTJUM1NxRGFmSFlmQittNXZkOUlhM01YaDR6Z1doWFVSUktlcE4zVjhMK09ZMDh4MFl0SWNLamYKVldIY3J4VmJrVHJyMVkvYStPZE82NDY5aFhWMnNNUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lSQUxWMFhCQ1dnZVZCTEtPbDVvV21QcWt3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN5TlZvWERUSTNNRFl4TVRFNQpNamN5TlZvd0VURVBNQTBHQTFVRUF4TUdjbVZ0YjNSbE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBCk1JSUJDZ0tDQVFFQThSbmQ1enRaQ2U5bjA1Znd3STRTc3UwR3A4VEJROXQzRHFqeHJ1eDVVVlBFK1RsZmhqb3AKRzU2VUxBZDJnMmg2VWNrQktiSFRwejF0Tnk0eXNLcXk4ZTdzNWxxakNab0pJUDBMbXp0T3NoL2xvWEJxb3FXKwpzUXVGaUFlZlpFb3NrUzhEZ2dLS2VQbVdneC9nbUpaT0NzeXlNaDljYnYxeU5veXg5YTlwMGFsaitTa3g0YkYvCis5bnBRRmo0NmdRWklQMWk5YktkeFJwcUtCRmVIT3RVYlBycjJyOHN4c3pGWHZVeDJ0UTlHQ1RTeWVJZlhZZEEKZUtUUTczVUNuSVVONnBYY1FLb2ZUTlpWTHVVcC91K1E0R0VvQ0JjeTI1aC9LRldraHVLUFR2dEo0UzVUTG4yUQo2NGJ0ZXRVamtaMkMrNFBYd0VkZDlSVWRTNDF6bTJUTnB3SURBUUFCbzJBd1hqQU9CZ05WSFE4QkFmOEVCQU1DCkJhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXcKSHdZRFZSMGpCQmd3Rm9BVXpDUXVESGhIVHdkeHFtMkF0RWdOeVV0cHpSRXdEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUxUc0dUYVJiY2ZvOVpzZDBvWkVoTHVVenE3STVDa3d4RDV0MWMwdVpaV05xYVZIV0VXZEViZWppVjdkCnZkYUgxN2JjTWhRZGhsMWNyTi85TDZiZTBwWGpKTnE1TlFueHJ2ZmpQdjdRMlFucjJXQnFjdkMzRytCMUcvbEoKbTV3NEJEUnpWUDhPamMxRWFGU3g3SVIrVUM0S3VHWHpiYVI4dGJEMnlkVjQ3aHMxU1NQVG9NWWV6TVpxbDc3dQo4ckpQRGlWdDFKZEl4bG9pWFREdkVKeUNzMHdJWERYSThDWkNqbkZuZmI2TWtNMEpxUEVOM0tRaTVNdVFOQTl3CjRUWExsLzY1V1NQejZVb1F6UHVLeFc2NjlJZWEwUHAxU2l6YmNvdldFaVdURTBwMm4zTHdEb0xNNXlhY0ZzclIKVGk3SzEyK2pXMXB3R0F5cnpCWG1YMHp4Mlg0PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBOFJuZDV6dFpDZTluMDVmd3dJNFNzdTBHcDhUQlE5dDNEcWp4cnV4NVVWUEUrVGxmCmhqb3BHNTZVTEFkMmcyaDZVY2tCS2JIVHB6MXROeTR5c0txeThlN3M1bHFqQ1pvSklQMExtenRPc2gvbG9YQnEKb3FXK3NRdUZpQWVmWkVvc2tTOERnZ0tLZVBtV2d4L2dtSlpPQ3N5eU1oOWNidjF5Tm95eDlhOXAwYWxqK1NreAo0YkYvKzlucFFGajQ2Z1FaSVAxaTliS2R4UnBxS0JGZUhPdFViUHJyMnI4c3hzekZYdlV4MnRROUdDVFN5ZUlmClhZZEFlS1RRNzNVQ25JVU42cFhjUUtvZlROWlZMdVVwL3UrUTRHRW9DQmN5MjVoL0tGV2todUtQVHZ0SjRTNVQKTG4yUTY0YnRldFVqa1oyQys0UFh3RWRkOVJVZFM0MXptMlROcHdJREFRQUJBb0lCQUJ2VHJIVGZ1S3NZNHBiZApWb0FpNWEyWkJjZWZRZDhmR1dLcnhSazNXZGsxSGVyVjRGeVJvZVQ2TElmWVpLbE9DYkFlenUrTkFxeXV2a2c4CklNV2JMZ1FXVzJsSzFMNXE5TnJGMmUwVXIwU0h3ZTBjR0hLbFJwa1FoMXpuNUZHaTdmbmp2emZtS3kxRFFVZnAKQ2ZjU2dmZGxJTHdBT3A3a3lhWGFIMEFIK3VLanZQZnJ4aWFZK1BlTG9EOHA3OXFRWGlzc20yR3RnVTFId3E3MgpEWnNGbnFnK2NrcTJWdFJoK1JzU2hHeXJoeWZ6OW5uR3JWWjhqS2tRVnRqZ0hkM00rcVNNVkFBMDJTckFDK3VrCnZUWW9EeUcxQ3U2QmRrNHhmVENuWjNFVzhiU1Q5WnlCL1VpSHhRR0lSdVpYb0src3VQYnd5WHJSSDV0OCtMQ0cKNERlTWdrRUNnWUVBKzI5MGx5c0dnSzhocElsSWM2VHN2MmpRT1JnSVRES1NTNnZTcXZzaDlpYlJtRkhRUE5pVgp1R1FHaG1ycWZNNHhrVElFZnZESnpObzVteEhtMjVUVENBSlVHeUpyRXZ1RkxZZnZndlc1ZUFYTHdORkdVdmlrCllHV0c4Vnp5WnE5VzJJc2lxVkE1YTZvbXFQYy8xcC9ZeTY5L2RGaldVM2xuUXlkQmt2a1FvU2tDZ1lFQTlYcGgKOUI1RENxZG5MeGgyZmxsQlN2cU5tZ1JhZXVkZ3Vhd0NLcUpzQ1RHTDdsNUVsRktqY0MxT1EzNkpHTmY5M25BRwppblJCNFZzYUh6ZFlsZGIvbEdpaFVBOHd5WFJXd0JreVJkOHplemJGSzRjVThUb0NPR2tJR05EcCtObnZHT3NjClFTSzdYSlM1dk9sditCWUFpQSsyOEJOSW5jRDVIY2UyWlJaU3drOENnWUFrdURNN3ZISFhxenZyam8wQkxvM1EKcWxyMmE1Y1NvYlFSendjV0oxVGZZTzN0STgyWWhUemdUK05RRUI4c21PUk9ReEs3QXlsRmZIMDdNMU1Xc0ZaZApiaEdnWU5kb1QwazB6QXhqZ01WVVRPeGp2V3hhdzZzbDFNM3ZROWEydmxhZGl6eEZvOHl1OTR0cjA2Z0VEUllaCk1Ra1pFYnhETnBDcEV2dVZua0FhZVFLQmdGdFVlQ002S3hsSXBUUTVkc1NWY3B4eDBjTXV3WGNlcExjUHp4S0wKc1lST0lkREMwK01YUitXUmhaL0k4VHNFQ1ZqNzl3TUdOQWlqTzNuSHZyYW84aGdHUVpZbXdMRUREcytUMEVkOAp2b3VtR2YrUzEzRFVjMFVIbHRLY3o2QWRmVDZaSXI3OUxCWks0enZzNGhLOEpPQjZjRWFyOWdWemFYdng5T054ClJjTXpBb0dBR1JHZnBrZlBJNnN1V3ltVlRzb0VmUnVwd0NqQXJ5SUZrZWN5YWxPbEg4RVp1MWQ4QlhxMkhBYXkKdVVLTzNrM1BaUW9wWElER3JpT1pBdEZtVVFMdkI2TDF4UTVnMFJ4c1J2d011bVplT24vNjNXeEdsMzNUNzRiWgpyUk1FZ1I2L1BVK2o2V3dQcmthVHlMbHpQckR6NVpDK0d6RzNqZDF6dGlvQS9XZFUzMFE9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRUlVWbjU5eWkrYzhPV2U5eGZFd2poakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOekkwV2hjTk1qY3dOakV4TVRreQpOekkwV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRREQvTTlhd2VVczV6eGp3dnRPeGExUG11MC9tRHRWSmpsUkxpeXh0SDBIVU5PWUo5TG4KY2VTUU1KajkvT2dIdXJEdStSZVhHRDB4cWpZSlhReUZyNXYvQmZmRDlCUDBwRi9ZR0E5YU1Id2NPeW9Cc3habApta1U1cXJMY29oazFFSTNiRHRFNmdFeUd2eDdKblpzNkFsSG9Ba3VSZnVVTU1mNEFVcDUzR3l4YjJ2cVFiQ2lYCnJzNm5XQWNxcGVzMS9xSDk4a005UXgrUUFHUk81cUNxS3R2ODhKUnArSENYdkErdzFQa2EwRy9wWmxKNlN3UFUKU1dGOFlIRWxEMy9tQzNBK0hyS3h6Q2JCRXJHMGVZczBHWTZRQTdlZXdob3VzSVFjNzZkSXlMdDljUEx6TFJjcworRWVZR1RmY3dzNnVUVis0QXp1VG9xclA4aitDM3BBWDQwS1BBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVV6Q1F1REhoSFR3ZHhxbTJBdEVnTnlVdHB6UkV3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFITWxZeUkyWjk0MGlYVDliKzZOTDF2MnpsRTczRWpDdW5wd0RUMlFLcnRlRnJLWWJZL2hHc0xKCkVUMEo2QkNCUEQwODVHd25Dcm94cllCT3dXTzAvSzlUcWViR1hndlFmak1SRE8xcFUxdFIzYkpqUytNVnlQM0MKZGcyQ3E3YVpSYit4NU1wTGRPVzBpbCtQN2pqSUFaczdLQWpRVWFSYTN6WERoeVlxOFhWYmlhSTRtNDBhZGgybwpvWlZqQVhSWlAvaXlmY2QvMVF5R1JQVy9DNmtRTk84WGhNL1hVNk1DWWZDMXZ6WFlkMkh6b242VXpmcWpDb1FXCnhTTDFDMVBBaTJUM1NxRGFmSFlmQittNXZkOUlhM01YaDR6Z1doWFVSUktlcE4zVjhMK09ZMDh4MFl0SWNLamYKVldIY3J4VmJrVHJyMVkvYStPZE82NDY5aFhWMnNNUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURwekNDQW8rZ0F3SUJBZ0lRVGNVKzNPbzd3WVAxMFd1dm95V0NNREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOekkxV2hjTk1qY3dOakV4TVRreQpOekkxV2pBcU1TZ3dKZ1lEVlFRREV4OWpiSFZ6ZEdWeWJXVnphQzFoY0dselpYSjJaWEl1WTJsc2FYVnRMbWx2Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdnR1b1crNFRHYkdTdHdlbGRjSTkKVXlSRjMvNEozdThHUHY3cmUzeHNUWi83azltMS8zMnJ5SllLUTl0dVZaTklpTlZpOWNiZTBUTjZMbEZiKzVYWApwY0hwbURrSXZYOHF6dzFqTEZRVmtwTkdUaExyVTdHR2pHNXh2UmVqS1NVYXVhT2EzWWdlVGhDT2dyT3c0c21NCkE4QzFibE82akdlYWNKUXJYV2ZiYlBaQ2FET2JJbnBUK3FQTmtteE13L0VTR2I2d2h4aEhmM2VVVFoxNDNDQXEKRUw2QS9HNE5FRXFaUEF2Y1llUTRBRDd3Z2dMOG9qaTZzSUZzTkdFa2h0bzlVZHYrRmphbUZwRWJxejIvM3RZZwpYd2d3ZDdjQm9QMjMrcmdIZkxSdzV2WEcyVU9Za1pqN2Q5cjBKOFIwMWZpczkxVFhQTTVUdDdpczdLYTFQcFpwCkxRSURBUUFCbzRIZU1JSGJNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0QKQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JUTUpDNE1lRWRQQjNHcQpiWUMwU0EzSlMybk5FVEI3QmdOVkhSRUVkREJ5Z2g5amJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXVZMmxzCmFYVnRMbWx2Z2hBcUxtMWxjMmd1WTJsc2FYVnRMbWx2Z2lWamJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXUKYTNWaVpTMXplWE4wWlcwdWMzWmpod1IvQUFBQmh4QUFBQUFBQUFBQUFBQUFBQUFBQUFBQk1BMEdDU3FHU0liMwpEUUVCQ3dVQUE0SUJBUUNPNUVURVRIcGJhK3pPMWowTTA2emxlbTNHYUJLODIwYTlXWC9ReUtiekpvd0k4SU5CCjM1Sko5ajJya21tMnh6UzZaMy9XOXAxRjl3UjFzSnFMVEJ0U3U0bit1a2crTUJDT3lzQmQzb1gzMVdjdGJpQ3oKYW1sU0I0MUJzdVYxOFMxdituQzNSdUU3eUtTY0hFT3hoQWRWc3RjTVd1M01kWTdkRkErQ3VRU3drUkdLbGNPRQpQS3BkRk9iUEVXUy8yVXNXcHFuM2F0SlhxUnp4N2taQUtQQWVDZmtkNHVGV1Yyd3NkL20xeHZxNG1jb05ZTlJLClFqeC9jVE96cVhYYldHRE5objIwWkc3aGRpU2pFTUhnL3ZrT084NzZUa3cvZjVjLzhOeDlpaE5IZ3NBR28yekQKYVQ5b0hkL1d0a0s2eXk3MlY3VGtsNjI1ZjNZM0JBcThIeUJHCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdnR1b1crNFRHYkdTdHdlbGRjSTlVeVJGMy80SjN1OEdQdjdyZTN4c1RaLzdrOW0xCi8zMnJ5SllLUTl0dVZaTklpTlZpOWNiZTBUTjZMbEZiKzVYWHBjSHBtRGtJdlg4cXp3MWpMRlFWa3BOR1RoTHIKVTdHR2pHNXh2UmVqS1NVYXVhT2EzWWdlVGhDT2dyT3c0c21NQThDMWJsTzZqR2VhY0pRclhXZmJiUFpDYURPYgpJbnBUK3FQTmtteE13L0VTR2I2d2h4aEhmM2VVVFoxNDNDQXFFTDZBL0c0TkVFcVpQQXZjWWVRNEFEN3dnZ0w4Cm9qaTZzSUZzTkdFa2h0bzlVZHYrRmphbUZwRWJxejIvM3RZZ1h3Z3dkN2NCb1AyMytyZ0hmTFJ3NXZYRzJVT1kKa1pqN2Q5cjBKOFIwMWZpczkxVFhQTTVUdDdpczdLYTFQcFpwTFFJREFRQUJBb0lCQVFDdjk4WWFQRDdRQ2JERApvQUVsdVpqZzl5aVZoSnVGTjh3Q2VQYVVPL3QrOW1uMXYxelYyd0J2U0NiZXVZbll6SnFyemxJWFdPeEc1YmRZCnpScUpzM1hJRmlsUmVBUmU4c2g5YmxKcHBIemZUM29hc2NiV3UyN2FPMW9TaGFDaFp0eGxIRHJFMWFOYlJsaWUKbVI0VmVzM2xCK0EvZ0dNVzRNNjd6V0RPRmR0eGNXTW5mUzJyTmI0QkRFRzNXQk9Uak5uR1BrMFRjaGV5VXhwcApHM09vWXJOSzVZdWJOUy9wOFNDblBHemF0YTlhZXdGb0QxcG02eDFjRm1DOWtjLzhXSjByOVRZR3R5YWVMY2VFCjUxNG9HUEx0MTB4VG03Njd2Y1NFM2NCTHZ3eENsbjVnQ2ZrWFBWS28vTmJVSzV1MDFyNkhTYlNaaXZmNnZ2K1AKSjJDQzlUc0JBb0dCQU5CUXUvYnhUdFFYWVN4NFNtelV5dE43ajlPQW1sSlZPQkFBV0lVdVl5c3ZwQVNRZ0tNTQp2cysycE93dUw0dWRneVNheDRiNmo2eHJJSCtObExrZGxNUWpCMUEvandMM2h6VFlzZDdmUklXcitRREd5RGdhCmI0Q2NkQlR4dEthRC9LYmpnRlUwVkdpK2E3dWlyYXpOci9GNUszU3FRL052WGhLcE10Q2tvS3A1QW9HQkFPcUwKN05NSUhDeW1UMEtPbFhsajJCQWFPKzZ0T0IrRGVvb3VlQXNtbkU1d014bHFJSzZuQzUrcEkzam1QMlJjVVZITwpBeFZ3RFJlWVhtVlVxYmtBZ01mM2VOb3dXWTZnZGVXb245MEFTTW1kRmpGdytZNDJyc0RVbEVFQU5PK2hCV1BzClgyZzhWRzFxRjFXN2FSTjZaT3J6MXdwZDhHeUhLZHFBQm9UZ0dJZFZBb0dBZHduTGYxK0JWajFOOENXRkVnKy8KSDM1NlA3ZzdkMVR2Um1XTUwvN0QrSWV1eUZUeXpUbVpTQVRzMVhISEJaY3F1NTRlNm9qLzFOMGFvd2o2dFpXcgp6ekRkR3dSVzZyRWIrQnpqOTZISi9FQzdkN0FmOWI5VmZEN3JMcFM0VUhjWHh4NDExWHFqeVg4Vy9SQUhBcm8vCkVsUFZlME5ZdFNFc3Rxa3RPb0Q0dHJFQ2dZRUF0VkdHdTMzQmlpTG5reVIzR1dpK1YzUndjSXNvbi9RY2YwWjkKTnVHYVpHa0lsOVViZnVsVWF4RnVnc0E4c1hGTXpGamV1V3Z1TXhkdm9oWlpQdFBNdXNudGUzOTFQSFYvcnhNMAp3cnk5aUY4UUVSaXRVK3VpSFNBNW5DWjB4ZXROSjNwTUoyQzhRL21JSUpiSkhHMjZKb2hxN1hEQnRLU3BEbWw2Cm9LNDlTQ0VDZ1lBUnVSLzQrRG8yazljRzdFaUM2TGdDV0VwREd1M1g0alBSOEV1bllvUk83N2VqRktJeUdnV0IKbDRSZVlQQ2hSL1dFNWVKdldMVHNvYXBRTmVNdiszRFBoQXNBeXBQUVdpekM0MkxpYjYxRUxuSkQ3ZDB2UnZKZwo0TnhUeTNybmtwQ3JBL1NhOS9RbXNUOGRlcHRPWFFIV1paUWZvTFVBMytxL1NXSjEyd3VhV0E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRUlVWbjU5eWkrYzhPV2U5eGZFd2poakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOekkwV2hjTk1qY3dOakV4TVRreQpOekkwV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRREQvTTlhd2VVczV6eGp3dnRPeGExUG11MC9tRHRWSmpsUkxpeXh0SDBIVU5PWUo5TG4KY2VTUU1KajkvT2dIdXJEdStSZVhHRDB4cWpZSlhReUZyNXYvQmZmRDlCUDBwRi9ZR0E5YU1Id2NPeW9Cc3habApta1U1cXJMY29oazFFSTNiRHRFNmdFeUd2eDdKblpzNkFsSG9Ba3VSZnVVTU1mNEFVcDUzR3l4YjJ2cVFiQ2lYCnJzNm5XQWNxcGVzMS9xSDk4a005UXgrUUFHUk81cUNxS3R2ODhKUnArSENYdkErdzFQa2EwRy9wWmxKNlN3UFUKU1dGOFlIRWxEMy9tQzNBK0hyS3h6Q2JCRXJHMGVZczBHWTZRQTdlZXdob3VzSVFjNzZkSXlMdDljUEx6TFJjcworRWVZR1RmY3dzNnVUVis0QXp1VG9xclA4aitDM3BBWDQwS1BBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVV6Q1F1REhoSFR3ZHhxbTJBdEVnTnlVdHB6UkV3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFITWxZeUkyWjk0MGlYVDliKzZOTDF2MnpsRTczRWpDdW5wd0RUMlFLcnRlRnJLWWJZL2hHc0xKCkVUMEo2QkNCUEQwODVHd25Dcm94cllCT3dXTzAvSzlUcWViR1hndlFmak1SRE8xcFUxdFIzYkpqUytNVnlQM0MKZGcyQ3E3YVpSYit4NU1wTGRPVzBpbCtQN2pqSUFaczdLQWpRVWFSYTN6WERoeVlxOFhWYmlhSTRtNDBhZGgybwpvWlZqQVhSWlAvaXlmY2QvMVF5R1JQVy9DNmtRTk84WGhNL1hVNk1DWWZDMXZ6WFlkMkh6b242VXpmcWpDb1FXCnhTTDFDMVBBaTJUM1NxRGFmSFlmQittNXZkOUlhM01YaDR6Z1doWFVSUktlcE4zVjhMK09ZMDh4MFl0SWNLamYKVldIY3J4VmJrVHJyMVkvYStPZE82NDY5aFhWMnNNUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTVENDQWpHZ0F3SUJBZ0lSQUxzWXhUMjB3VmVyV3dCN2t2dk9FbGN3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN5TlZvWERUSTNNRFl4TVRFNQpNamN5TlZvd0l6RWhNQjhHQTFVRUF3d1lLaTVvZFdKaWJHVXRjbVZzWVhrdVkybHNhWFZ0TG1sdk1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTRqVlJiRTZKWTU1d1lCVHhyQ0xxaHdLUStHU2UKNW9nZnFTTkdTZ0tiY1YzS1UweEgwQ2J5N2t1aDZmaHRSeFMzVktpd0lrTG5QUDVlVWxqcVFZYk5EUVFjWGZrawpNMUhydDg2a2w4eTlWRlVuUTlLbFFld1ZmWStmMUkvUmdoNlNWWDR2S3ZuRXMvb1JoMlVEbXBuQ1NhTkQ4bVRLCjdkeW1QMkZ6UHhNWVVnYk1DYjZXREg0SGQ2Sm5TaksrakdZSFNmeHdraDQwSXc1Um81M2V4RnUzb2J5RGQzQ3EKdUdUVkI1eWpOUzgwc1BkNk1pb1BDaEF2V3ZIU1FhM09ZREpBQ1l4SGMzVTR3a0h2MVlGMGRTN1RyNVMwZmR4RQpkN2xKRnZEcGYrcFFwQzFVaUxZbkpVdVI1M1V0VmhHM0JReE94RUtrNXp4Nlk5VG5GVXpGVnIvNVBRSURBUUFCCm80R0dNSUdETUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUIKQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCVE1KQzRNZUVkUEIzR3FiWUMwU0EzSgpTMm5ORVRBakJnTlZIUkVFSERBYWdoZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d0RRWUpLb1pJCmh2Y05BUUVMQlFBRGdnRUJBSGcvRWs1aVhHa0NxY1ZNc0N4UEJtKzdKZUFWZ3U0Q1JlNnVvQlQ2YktQK0lBVnoKUzZFYmZKWUFKelZJdjNIU1F2Sm5kUU9iWGpWRjZ0UWc5MVNtY0JDQmhqWDhFUUQ4Z1FTa2NacU5qaVhsMS94VgpIWnRmTHREQUdick50N2tONkJNMUcvWFArVGZyNFRHRCtjNHJqUzJVZUxidUcrS3FZS3BSTEExcENSVVFDYlQwCjRPb1R3WW9pYVcwYjdJSGZEb1FBRUFUS21qb2RnbU1nb0R0aFdZdG0zNU0rSXRERGh1N3pnd0NvVUFqLzhMY3MKTnpDSEFMMWlWMjBVMzFmS2dudnlsZ3BDbTVXTWZDMnpwazZPVXFzaUt1ei9GZTJDU1h3RWVLbGprSGhWZlROMQpMVXpoM0dhaWZiZjdlUmxTWm5LZXhFSEd0RWhjMUNYWGZFY3hDY3c9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBNGpWUmJFNkpZNTV3WUJUeHJDTHFod0tRK0dTZTVvZ2ZxU05HU2dLYmNWM0tVMHhICjBDYnk3a3VoNmZodFJ4UzNWS2l3SWtMblBQNWVVbGpxUVliTkRRUWNYZmtrTTFIcnQ4NmtsOHk5VkZVblE5S2wKUWV3VmZZK2YxSS9SZ2g2U1ZYNHZLdm5Fcy9vUmgyVURtcG5DU2FORDhtVEs3ZHltUDJGelB4TVlVZ2JNQ2I2VwpESDRIZDZKblNqSytqR1lIU2Z4d2toNDBJdzVSbzUzZXhGdTNvYnlEZDNDcXVHVFZCNXlqTlM4MHNQZDZNaW9QCkNoQXZXdkhTUWEzT1lESkFDWXhIYzNVNHdrSHYxWUYwZFM3VHI1UzBmZHhFZDdsSkZ2RHBmK3BRcEMxVWlMWW4KSlV1UjUzVXRWaEczQlF4T3hFS2s1eng2WTlUbkZVekZWci81UFFJREFRQUJBb0lCQVFDckRoS1NTaGxPZ1lNTQp4UW16VjN2dHVCMFVHRktvbFFzTUJhYWpWTEZpMnIraW1hNDhVeGVrNXdCN1F1YXZ0NVNpcWlUMjQ0eWs3TjA2CmZBNDRtc3o0S01HaXRrR1BwVVVRYTJ5L2RZMDk5bDZJeFFNK2hGNEQ0dFhFRVRVbXBpT1dEcU53WmdzKzVielgKbTZWTUJUV01KYSs5M2tZdDlJcXFwdkJWSkFWaUVHRkdZMjdlbGRucWVhdGJNMTUxZ0JXSkRGVjhqcDZhUCtnOApQSFpianBvbnorRUhpT2pwUDhQOXB2VFRGWHQzNXFock5JUmFnWUNvWTZLLzVaeDd1YUlYNFVldXo5Mk5mczdKCnc4ekt6elk2NFA0RldJTldQRVZwdDF3UVd4MHFaUitLbjk1L2NsczM1a0crRmRYNWpjOFFhQ2J6cnJ5dk85aXAKUHZqV1R2RkJBb0dCQU9RWGNyNm16dEM1SnhTaGcxbkVUblN6ME50NjJ3WXp6VW5KbTRmR3RYMzdCL08wOXg5cgpqTmpuOFBwKzIrTjN5dk0wQzRUZlpTU0JEdGVvRWkvdGtKREZKamFZSDBkWkp0dk5FNGkvN2R5TEdNQWxyK2V5CnJmK2NndzZPakl2ZG9vcXUwcXRSSGllVDRNUUNJOHpSa1c4TWk2OE1PTnRpbTFEL051a0ZaN2FsQW9HQkFQM2kKNE5WVXNpMGxBeEVzcWdOSHhpLzMzU3pYMlNIM1p4NnBsU1VaeVhJNU1XdnhxSVMxUFArSk95M3NsWUhiS0g4WApBMUdtSmgrelJ1WExqdGp5ZXk1RExDazNzenVub1EydndLYXhESVNwSElvOWJEZUFNQlFsNGtVUlZlMzlZUnk2CitGRHlidmJVeTk4eU94R2prTkIvbS9wdTQxZ1ozTWZPS1J1Q0JFeTVBb0dCQUw4bHoybHF6V01wNTFCbzBuVUcKQ0dIUTE3VTNUaG55aTVYTXVPU2VhRGE5aXpwM2E2b1BMYWdSS0dna3JBNEN0RGdBWTY3a3NCUlplNkRMSHdLLwphaW1JcnErTjZKaVlZL0pMK0pUZmsyMEJ2S282YXlJWElhNVc4WlhmYkhWQ05oZFd6d0gzSnZndisyc0lDQXg3CmpBK3VTZGxXdXNkUDZhMkZVL1VRTEl4cEFvR0FRL2ZlS3g1K2lObDB4YjlJVUpLQmUwd0hHVDg3OFB6enpXQ20KL2dTMlNtOEhUUmVuL3NjcWFsckp6aFNkUGVOM0p2YjVPMzJZalRvSWkvSi83cEtUNmFHd0MrVE9oZlR0aCtWNgpWT1huTFFpOURFRS9YR2hqOXJEaHI0M2hqRkllRW52M2lHd3V5c1BUUkpDRkFjYmhPUUJBdUwzQS9WQUhMREtFCkRNbzA3bmtDZ1lBMUdQdndjdUNSTXhZMFo0VUNIYXdyOCs3ZHgwODRlWUp5WnZoZ21OUzQ0cm9oakxLVnJVdVAKMEJMdlRCQmRWUHBNWmJNTWVvcGpCRUNVRkdHNHl0TGpiR3dtRjVwZlJHL3AxNmR2YWJhRkcrVlNFUDhERWZxYgpQVFgrZGE3dHowZmdEOWRPTmJoTkJETmNTYU50dkR1ZUw0MWpBK2dqNlVOZVowTDFzeFJjS2c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRUlVWbjU5eWkrYzhPV2U5eGZFd2poakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOekkwV2hjTk1qY3dOakV4TVRreQpOekkwV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRREQvTTlhd2VVczV6eGp3dnRPeGExUG11MC9tRHRWSmpsUkxpeXh0SDBIVU5PWUo5TG4KY2VTUU1KajkvT2dIdXJEdStSZVhHRDB4cWpZSlhReUZyNXYvQmZmRDlCUDBwRi9ZR0E5YU1Id2NPeW9Cc3habApta1U1cXJMY29oazFFSTNiRHRFNmdFeUd2eDdKblpzNkFsSG9Ba3VSZnVVTU1mNEFVcDUzR3l4YjJ2cVFiQ2lYCnJzNm5XQWNxcGVzMS9xSDk4a005UXgrUUFHUk81cUNxS3R2ODhKUnArSENYdkErdzFQa2EwRy9wWmxKNlN3UFUKU1dGOFlIRWxEMy9tQzNBK0hyS3h6Q2JCRXJHMGVZczBHWTZRQTdlZXdob3VzSVFjNzZkSXlMdDljUEx6TFJjcworRWVZR1RmY3dzNnVUVis0QXp1VG9xclA4aitDM3BBWDQwS1BBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVV6Q1F1REhoSFR3ZHhxbTJBdEVnTnlVdHB6UkV3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFITWxZeUkyWjk0MGlYVDliKzZOTDF2MnpsRTczRWpDdW5wd0RUMlFLcnRlRnJLWWJZL2hHc0xKCkVUMEo2QkNCUEQwODVHd25Dcm94cllCT3dXTzAvSzlUcWViR1hndlFmak1SRE8xcFUxdFIzYkpqUytNVnlQM0MKZGcyQ3E3YVpSYit4NU1wTGRPVzBpbCtQN2pqSUFaczdLQWpRVWFSYTN6WERoeVlxOFhWYmlhSTRtNDBhZGgybwpvWlZqQVhSWlAvaXlmY2QvMVF5R1JQVy9DNmtRTk84WGhNL1hVNk1DWWZDMXZ6WFlkMkh6b242VXpmcWpDb1FXCnhTTDFDMVBBaTJUM1NxRGFmSFlmQittNXZkOUlhM01YaDR6Z1doWFVSUktlcE4zVjhMK09ZMDh4MFl0SWNLamYKVldIY3J4VmJrVHJyMVkvYStPZE82NDY5aFhWMnNNUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURURENDQWpTZ0F3SUJBZ0lRZnhvWTRlb1h0SmlleVZOeVplV0REREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOekkwV2hjTk1qY3dOakV4TVRreQpOekkwV2pBbE1TTXdJUVlEVlFRRERCb3FMbU0wTG1oMVltSnNaUzFuY25CakxtTnBiR2wxYlM1cGJ6Q0NBU0l3CkRRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFLNk9ENVE2WEh4RmhaSkRvQnJJZFdzSG1ob0EKcktRMVFMU3BoVmRrRjQ1N09JL0p6OVZXcGZWbDdLckd1WTVXbFpEWHFmV1FmVURSS1hFUlp0dDNWZzhRaDNUaApYdHduN05Pa3hwOGR5OHhXeFRxeTl1UmlEQUxhRUF5Q29pcWx1NGRsTkk4ZFRtb29RQU1vOUZVbFc1ZWNURGtjCnJLZyszSWtVY2JOMXg2cmFsVzBrL3FpQmx4cFFUUy9uVXlUUUZYUFRPdnNDYXFrUGdjS2FDdFp6aGZMN08rUWUKcXdmWW9NRkxMSXVoSHJWOTBsRmJ6THQwUTExNzhiSFEwcVVZQlRLTytnaGtUQXMxUnpjWlRyTStCb201RjhYNwpQbWYyQWQ2Um9nbDN1eGNtR25PVngrNnZZdTJjUTFMMHZHZEpaQStEMWV0MnhidHFWVzUrZ3N6c3NVVUNBd0VBCkFhT0JpRENCaFRBT0JnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0cKQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBd0h3WURWUjBqQkJnd0ZvQVV6Q1F1REhoSFR3ZHhxbTJBdEVnTgp5VXRwelJFd0pRWURWUjBSQkI0d0hJSWFLaTVqTkM1b2RXSmliR1V0WjNKd1l5NWphV3hwZFcwdWFXOHdEUVlKCktvWklodmNOQVFFTEJRQURnZ0VCQUpMVy90R1M4OW9HazJKelVSWi9EcGo2Qk12aWRJb3NFK2srT3JUZnhTM2wKcFlLdFhnOU02NmQ3T3Q4Vk1hcjg2N3lVd2dFMkp5U05hTm1SWk9rYWNheFptTmhDVFBKb1MzZXpYcUtMY1BXaQpTQWFXcWlTWkVNUlorUGZCZ24waW1JY2R0elNnV0NoNElFOGRDUDhjdU1jajJFdDNabmdoNnl2ZGthc2VVMEVFCkZPZlhGbU56OXVPMTRPcGFKd1FWb3QycmhYUmdUSHBQRDFkbHpVeG9pTHJuTEMvSnBWZWs5MG1MWXNubWM5OXgKNFhsRjdndll0NlUwZWZzMU5zZW5ETjVIRFY5aWltOU1QMnBXMnA3WkltdGVRVEJNa05UQ2I2NW15Sm9uaUpZaQpPbnc4MjNqVlBVdTVwaGpFS0NXcU9ZQ0luZkVTelQxVGxSQjk3Vk0wa29BPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBcm80UGxEcGNmRVdGa2tPZ0dzaDFhd2VhR2dDc3BEVkF0S21GVjJRWGpuczRqOG5QCjFWYWw5V1hzcXNhNWpsYVZrTmVwOVpCOVFORXBjUkZtMjNkV0R4Q0hkT0ZlM0NmczA2VEdueDNMekZiRk9yTDIKNUdJTUF0b1FESUtpS3FXN2gyVTBqeDFPYWloQUF5ajBWU1ZibDV4TU9SeXNxRDdjaVJSeHMzWEhxdHFWYlNUKwpxSUdYR2xCTkwrZFRKTkFWYzlNNit3SnFxUStCd3BvSzFuT0Y4dnM3NUI2ckI5aWd3VXNzaTZFZXRYM1NVVnZNCnUzUkRYWHZ4c2REU3BSZ0ZNbzc2Q0dSTUN6VkhOeGxPc3o0R2lia1h4ZnMrWi9ZQjNwR2lDWGU3RnlZYWM1WEgKN3E5aTdaeERVdlM4WjBsa0Q0UFY2M2JGdTJwVmJuNkN6T3l4UlFJREFRQUJBb0lCQUdrL3h5ejlNNTdLM0lzZwpzM3p5dWJuYlQ1TzJMR0ttcVdsRmZkei93U1JzTCtLak1PblY0U05pWFoxclRaOEJuaFZEdEhzWXNDMVE4TWY0ClVpaXFmLzE5WGUrZnBHN2lzKzI1UVBuWUlYWUlLOHdFOU5Fb1BVM0s1anBrMmhzVTYwbnNRQkM2L3ZrTFkrMkQKMkM4dTQxYzdLc3FVKzVaR3NQc0dsTGc4b0RQbnNWWW95bDlGMzVIZW8yZDNBUEwyT3NLS3R6UCttbWtQSDNrawpFTStGRDRVSGRSVWxFZGV0YThvOGZDemFtRXFzWnFVdHI0Y2poY2lEcHhZY0RLWFVsd09jUXJ6SUhmeUpOcHB5CnVvbm13ZEVsWVg1UUNabllOQlVKa3R1QlFxeHR5Q3JRNFRKZmhwZWxxVlNGZGExWDF5dytPbzVranhxVXlJUlMKWGtlSUlGRUNnWUVBeWI1ZFNNQzNEQ3oxd2NyZWNHcXkwakVySSt1Q1dwZ3d0NnlkS001SHVXdnlsQy9wZkVqcwpiWDIwTTF1bjhEWDRZSndBK2hUMGQxY2lDQVp1b2NodEJjcmtnY0tPM1ZGaWNLRGJkQ0s3WFFWdU9EVmNSVm1OCkl1WG13U296dkphVVdTZ2tHZHBQZFR3c25lTXhkL3Y0KzNmTG9PazRJTCt5QlFnNlpPejNyaHNDZ1lFQTNYL1AKbkZxd3R1RFN1U3VZUEp1L3VzVEk3K25jc0NsNmJEbXNmSWY5azB2N3d5c2NjUlJqN0tBNm1oTnpWS2ticUJDWQpJVGNHZHJlWE0yOFdtK3l6VDNuOTBZbkpWc0JwS3hmYVF2ZFR0V2xtUHpBYjV4WUVQSFdjcHcxUUwzRWwyTjlHCks4cUVNNEowQlBDV1BiM0MzWW84UlROaDdkVDBPMmIvdHNkRmxCOENnWUVBbE9hM1RVSklHR2w2dmgwd3pvSkMKRjllSWdzdUplN3BHZ3RxWmFJdlA3bkJaSzd5dE5UbFJuNEtmSlNUcUwrWjF1MENKakFzNVlIZmtPMDRjQzdhMQptUWZtWGt1dVRIV01GWnIwUHFSLzY2bGRiNGthNEdpM1BlRzN6aXlLNFErMjBKTkxDZlhTbmJIYk1IR0dpb3RrCmVwNHhva05nVlBPSHZpVVRqSGhHV3E4Q2dZRUF1UjZaOEM0bnBTQnZYVTBmRmdDQmxHSGxJZ1lOYUxteDFJTzcKTWZVaUxCb0VGMUNQbTc2VDZPN2RLMnA0S0ZpUmdid2t1UlhZOUIxcVpCVkRDeHdmbkp2elUwM2FGUVFJb1hoMAo5U1RxTkNNYnpsR3g4RWVKVU5KbkU0TGY4bGFaY0JEaS83UnBHdmU3YVdsOTE2b2lFNi8xd1V3NVcyRndvYmpxCm5PTWN0cmNDZ1lCcEVETVlaMkxmajNuYlJ1ZmJxcVhnV1ZCSmdCa1F4eitQbDNwd09Vd2lyRXg3Mkw1TC8welIKOFZaaU1CSU1ZeDErbWd0MjE5TVIvNUhodTE0RkdjZVFsNlNGTnFXZlZRb3dNZXZoUW4wVWhlck12amJzbG80Rgp5aTBONzBQc1JOU1g4aytRWUkyUGRwMElCSGdaeWRjeURhT3ZSaTF3czlQVnhzUlFMWGV6Umc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  skip-cnp-status-startup-clean: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  policy-cidr-match-mode: ""
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"
  # If you want metrics enabled in cilium-operator, set the port for
  # which the Cilium Operator will have their metrics exposed.
  # NOTE that this will open the port on the nodes where Cilium operator pod
  # is scheduled.
  operator-prometheus-serve-addr: ":9963"
  enable-metrics: "true"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: c4
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "14"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  # Default case
  routing-mode: "tunnel"
  tunnel-protocol: "vxlan"
  service-no-backend-response: "reject"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-masquerade-to-route-source: "false"
  enable-wireguard: "true"
  wireguard-persistent-keepalive: "0s"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-local-redirect-policy: "false"

  kube-proxy-replacement: "false"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  enable-host-port: "false"
  enable-external-ips: "false"
  enable-node-port: "false"
  enable-health-check-nodeport: "true"
  enable-health-check-loadbalancer-ip: "false"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  bpf-lb-acceleration: "disabled"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  hubble-export-file-max-size-mb: "10"
  hubble-export-file-max-backups: "5"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  ipam-cilium-node-update-rate: "15s"
  cluster-pool-ipv4-cidr: "10.4.0.0/17"
  cluster-pool-ipv4-mask-size: "24"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "true"
  bgp-secrets-namespace: "kube-system"
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"

  k8s-client-qps: "5"
  k8s-client-burst: "10"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  # default DNS proxy to transparent mode in non-chaining modes
  dnsproxy-enable-transparent-mode: "true"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-xff-num-trusted-hops-ingress: "0"
  proxy-xff-num-trusted-hops-egress: "0"
  proxy-connect-timeout: "2"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"
  proxy-idle-timeout-seconds: "60"

  external-envoy-proxy: "false"
  max-connected-clusters: "255"

# Extra config allows adding arbitrary properties to the cilium config.
# By putting it at the end of the ConfigMap, it's also possible to override existing properties.
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: c4
    peer-service: "hubble-peer.kube-system.svc.cluster.local:443"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-hubble-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-hubble-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n\n        # Liveness probe\n        location /healthz {\n            access_log off;\n            add_header Content-Type text/plain;\n            return 200 'ok';\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumbgpnodeconfigs
  - ciliumbgpadvertisements
  - ciliumbgppeerconfigs
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  - ciliumbgpnodeconfigs/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumbgppeerconfigs
  - ciliumbgpadvertisements
  - ciliumbgpnodeconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumbgpclusterconfigs.cilium.io
  - ciliumbgppeerconfigs.cilium.io
  - ciliumbgpadvertisements.cilium.io
  - ciliumbgpnodeconfigs.cilium.io
  - ciliumbgpnodeconfigoverrides.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  - ciliumbgpclusterconfigs
  - ciliumbgpnodeconfigoverrides
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumendpoints
  - ciliumidentities
  verbs:
  - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumexternalworkloads/status
  - ciliumnodes
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumendpoints/status
  verbs:
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumexternalworkloads
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-bgp-control-plane-secrets
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: etcd-metrics
    port: 9963
    protocol: TCP
    targetPort: etcd-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: NodePort
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
    nodePort: 32379
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-agent: "unconfined"
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: "unconfined"
        container.apparmor.security.beta.kubernetes.io/mount-cgroup: "unconfined"
        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: "unconfined"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
          initialDelaySeconds: 5
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.memory
              divisor: '1'
        lifecycle:
          postStart:
            exec:
              command:
              - "bash"
              - "-c"
              - |
                    set -o errexit
                    set -o pipefail
                    set -o nounset
                    
                    # When running in AWS ENI mode, it's likely that 'aws-node' has
                    # had a chance to install SNAT iptables rules. These can result
                    # in dropped traffic, so we should attempt to remove them.
                    # We do it using a 'postStart' hook since this may need to run
                    # for nodes which might have already been init'ed but may still
                    # have dangling rules. This is safe because there are no
                    # dependencies on anything that is part of the startup script
                    # itself, and can be safely run multiple times per node (e.g. in
                    # case of a restart).
                    if [[ "$(iptables-save | grep -E -c 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN')" != "0" ]];
                    then
                        echo 'Deleting iptables rules created by the AWS CNI VPC plugin'
                        iptables-save | grep -E -v 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN' | iptables-restore
                    fi
                    echo 'Done!'
                    
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - CHOWN
              - KILL
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
              - DAC_OVERRIDE
              - FOWNER
              - SETGID
              - SETUID
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Unprivileged containers need to mount /proc/sys/net from the host
        # to have write access
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        # Unprivileged containers need to mount /proc/sys/kernel from the host
        # to have write access
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Unprivileged containers can't set mount propagation to bidirectional
          # in this case we will mount the bpf fs from an init container that
          # is privileged and set the mount propagation from host to container
          # in Cilium.
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-dbg
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      # Mount the bpf fs if it is not mounted. We will perform this task
      # from a privileged container because the mount propagation bidirectional
      # only works from privileged containers.
      - name: mount-bpf-fs
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        args:
        - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
        command:
        - /bin/bash
        - -c
        - --
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        - name: WRITE_CNI_CONF_WHEN_READY
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: write-cni-conf-when-ready
              optional: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
            drop:
              - ALL
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
      - name: host-proc-sys-net
        hostPath:
          path: /proc/sys/net
          type: Directory
      - name: host-proc-sys-kernel
        hostPath:
          path: /proc/sys/kernel
          type: Directory
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              - key: ca.crt
                path: client-ca.crt
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/port: "9963"
        prometheus.io/scrape: "true"
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.15.6@sha256:5789f0935eef96ad571e4f5565a8800d3a8fbb05265cf6909300cd82fd513c3d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        ports:
        - name: prometheus
          containerPort: 9963
          hostPort: 9963
          protocol: TCP
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      initContainers:
      - name: etcd-init
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - etcdinit
        # These need to match the equivalent arguments to etcd in the main container.
        - --etcd-cluster-name=clustermesh-apiserver
        - --etcd-initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --etcd-data-dir=/var/run/etcd
        env:
          # The Cilium cluster name (specified via the `CILIUM_CLUSTER_NAME` environment variable) and the etcd cluster
          # name (specified via the `--etcd-cluster-name` argument) are very different concepts. The Cilium cluster name
          # is the name of the overall Cilium cluster, and is used to set the admin account username. The etcd cluster
          # name is a concept that's only relevant for etcd itself. The etcd cluster name must be the same for both this
          # command and the actual invocation of etcd in the main containers of this Pod, but it's otherwise not
          # relevant to Cilium.
        - name: CILIUM_CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        # The clustermesh-apiserver container image includes an etcd binary.
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --auto-compaction-retention=1
        - --listen-metrics-urls=http://[$(HOSTNAME_IP)]:9963
        - --metrics=basic
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        - name: etcd-metrics
          containerPort: 9963
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - clustermesh
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt
        - etcd.config=/var/lib/cilium/etcd-config.yaml
        - --max-connected-clusters=255
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        - --controller-group-metrics=all
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: IDENTITY_ALLOCATION_MODE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: identity-allocation-mode
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        ports:
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir: {}
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "clustermesh-apiserver"
      serviceAccountName: "clustermesh-apiserver"
      terminationGracePeriodSeconds: 30
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: clustermesh-apiserver
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.15.6@sha256:a0863dd70d081b273b87b9b7ce7e2d3f99171c2f5e202cd57bc6691e51283e0c"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 3
          livenessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 3
          startupProbe:
            # give the relay one minute to start up
            grpc:
              port: 4222
            timeoutSeconds: 3
            failureThreshold: 20
            periodSeconds: 3
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          - name: tls
            mountPath: /var/lib/hubble-relay/tls
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Always
      priorityClassName: 
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 1001
        runAsGroup: 1001
        runAsUser: 1001
      priorityClassName: 
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.13.0@sha256:7d663dc16538dd6e29061abd1047013a645e6e69c115e008bee9ea9fef9a6666"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
        readinessProbe:
          httpGet:
            path: /
            port: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.13.0@sha256:1e7657d997c5a48253bb8dc91ecee75b63018d16ff5e5797e5af367336bc8803"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
