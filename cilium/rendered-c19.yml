---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUpjYlc1NFVVOXJUc04zRm5aWWRDdGt3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamMwTVZvWERUSTNNRFl4TVRFNQpNamMwTVZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFySGtTNEtTcjlOdGxGR2FscVpDc1Nkd05uRC83eDkwdk96aFhCRFFjdlcxZ3RNQVYKWnNpRUswY0VMaXVHU24vNmxaWlF0NGNoYnNBeGZnRi9YMlozRG16ZFZFK2NNTUc2MzZ1UHNEbGR4WUR6L0w1MQpyaVlUM3BHbURJcmhqWXRqLzAreC94MzJ6Rkcwd1p0M2ovSzJtNnk2QTdIVklqWVNORWx0dFJ2d3hzZXdrNnRtCnpyVjZDRk42dDc1L3pkMXZPREZ4dDJFam9DWmtYWDZ1VWcweGFBbnozM1h2clpLdGZ2SmNpN2wyaTlUajdQcjcKZ3JJZ3dOTkdYYzFDQlFpZ3hvWUE4NGU5UnlIb1FoVmlGVkdOREgwSzZYMXY0djgxWm5CL0tKQzdYbVY2MnZ0TApIeTBOYVVYdmNDUDA1TVhWVHFyYUNESXVsK1AySVhYYUVvQy9Zd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGTVlnejJSZkZ0U29JVTlJYVdPMEdTYmdWL3J2TUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ3BJaXhrOWlMVWkzQng0OWNsc3d1OEZXTnkvaDBJbCtHWWIvVXJ4ZEZHTFl3ODBZT3AraFRkCjcycjluMSt2Q3ZodVVZMTJ3d0prTDdRWDFIeGFBRXpDdm43Nk1YbTNpUExYd2UxNFBtQWtMME1SZlNoS1pQWGsKa3NqaEZ6V1RCVUFGZFhROXNVQzkyL2I5MC8wa0l2WE9SRFlVRDkvV1poeUY4eTdjR3k3OXBOZWwwbStHUXd2MQp3dFdKb3d4elBGa1NZRVZWb1UwL2V1S01IQUduMWs3d1BlVG5JUGhVK25XRWRKeThRUGpXT0drQmhGc1ZnK2tDClFVU1BtUWU3MFFkUTBQdDJpeWZpL3h0SVVsakYrM2p1VXVxQm5rdVErOG4yaWNYZ2gzREwrWXFRNmZzTHpuTDUKdlMxRGhGYlA5Y3hKeTdFbFJPUm5tOFVXSGpsaUhqVncKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBckhrUzRLU3I5TnRsRkdhbHFaQ3NTZHdObkQvN3g5MHZPemhYQkRRY3ZXMWd0TUFWClpzaUVLMGNFTGl1R1NuLzZsWlpRdDRjaGJzQXhmZ0YvWDJaM0RtemRWRStjTU1HNjM2dVBzRGxkeFlEei9MNTEKcmlZVDNwR21ESXJoall0ai8wK3gveDMyekZHMHdadDNqL0sybTZ5NkE3SFZJallTTkVsdHRSdnd4c2V3azZ0bQp6clY2Q0ZONnQ3NS96ZDF2T0RGeHQyRWpvQ1prWFg2dVVnMHhhQW56MzNYdnJaS3RmdkpjaTdsMmk5VGo3UHI3CmdySWd3Tk5HWGMxQ0JRaWd4b1lBODRlOVJ5SG9RaFZpRlZHTkRIMEs2WDF2NHY4MVpuQi9LSkM3WG1WNjJ2dEwKSHkwTmFVWHZjQ1AwNU1YVlRxcmFDREl1bCtQMklYWGFFb0MvWXdJREFRQUJBb0lCQUVWdDM4bUt3S1lyQTMrNAo2b3RkNzkwenRrN2wrdWMwQk9Wa0FyTndmdmxLWkptZWtYNzB6Uy9Xd0xvTlQxd0NOTSt1MlFOb1pHNys4MjEwCkVPQklrVGkvWGtHb1lvbkdFd0lqUUE2Q3FWcnVWRW0wS2c5V3lMemFDT3dYcEVDa2tqYWUwRnFRcDE4TXJTVWEKL29CMkJraVl1YkR2RDR0Y0ZPdnplelJpOFFRemlTSUl5c0pNeHBXekpaa3lucDF4aU5nY00vQVUvVzYzbU5mTQpMclI1VGJCNHlGZTlQZFk2cU9ZZmpzazVTbGsyWE1mNjBZY1dIaEZGL081ek9OZ0Q3dDZPd3RuUUYwWVl3N1BICk9BUWZsT1lRT1hMNW5HSCt3L3ZVS3JHQmt6R3FlRHJJcWZSRW5CVkd2T3M4cDZWeFh4QnlZRGJPa2JuK2Ircm0KWks0T1I3RUNnWUVBdzBUcFN2eExhOVRpVVZVUkJCSEltT2lVM3h1R1k3VGxaZ3NabEtsWEVNMUlBSjBmMitqbQpDeVhiaDk1YXlpeStKVUg2ZWxlUzQzZVhBV21heXdybGtJZmZVSm1ZN1RmWGRiTHcwdWpBb1hGN1QwT3NiaVpkCmIybTl0V1RHeU9xUTZrVkJTY0lsUjVVdGVRMDlTckNrK3NlWmtLYlZ2MzZnYWhHN0JPOUpMaTBDZ1lFQTRoMG4KZStwbjgyOFFQOEl5bVZSOEJiVHRJYU1McVJSZUlMeVV2VzRHS1RRK2prZE8rbkp3L0Nnanppc1J2MWpHVFZpZgpWbTlOaUtGd3c0WHhpUU9Gd242dDBTbkxQNDFYQzNHT3JmL0NRMHBnNUI2VHRLeSs1MXlXZDgrOXRybDhaaVlNCmptZmFwYzdLR0NvdGtmR1hOb250QWhzUGlaOXhoZ2hCU2g2Z3JjOENnWUJXeUJ0K2JkMy9FRjk4a2ZlNy9VTlAKWVo0NEFYMmFkbHkxR3gzRlNmVWR6SDNCZUJNZW9zVUtFMHNiZVNDVVZZb3orTHllL3FpVFd5VExSZW03Yng1VApPMjl0M0xWd1I2OEQ2Z0RKV3hPeExFUUhHQ1piMWNVVXJNUFpCKzZvZ0Viak51QXJMWk52MnNhWTA5OTNnRVh5CkJoOGpnR0hpZHg1SHhaVitQZklpQ1FLQmdRRGNCanFSbmZzaEtvWEpSUk12bU1KR1cxUVVVeS9aaTNROHJzU2QKd0I1R29ndnRMdjV2UGtVcldYUGQvcEw2ZTB3Ym40ME04cW1qdGxTZ0xncG1wUUxYeTZVZnoyZHpvL2w3clRpRgpvRVpNYkdmMEVyendKdGh0RWU5cERzRXd1VFdQd0o2ZlEvZkRPSUgzR2JQV1BCeEVlZG9qSG1uMEpTNjJtZm5PClFoZGdpUUtCZ1FDSDArUEExWk04SGd5eVc3cGdTNTQ5d0I1V0RuSGd6REo1U3pqd3VoWXlnczQxTThoTTFRTHkKUlQ3bzY4NWQvRlFDaHlaWENjbWlxU2YrTmp0UnNUb1JNRjhlUGhQT2ZSSisvb3JBM08xWGpHWTMwWlNHMnZpMwo4MG9kRTJWWDJ0VVB0dWkzay9DTW52NlZkUHlQR0JRSnhWNFZodnlPZlloOGwxNVhVRWdNOEE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUpjYlc1NFVVOXJUc04zRm5aWWRDdGt3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamMwTVZvWERUSTNNRFl4TVRFNQpNamMwTVZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFySGtTNEtTcjlOdGxGR2FscVpDc1Nkd05uRC83eDkwdk96aFhCRFFjdlcxZ3RNQVYKWnNpRUswY0VMaXVHU24vNmxaWlF0NGNoYnNBeGZnRi9YMlozRG16ZFZFK2NNTUc2MzZ1UHNEbGR4WUR6L0w1MQpyaVlUM3BHbURJcmhqWXRqLzAreC94MzJ6Rkcwd1p0M2ovSzJtNnk2QTdIVklqWVNORWx0dFJ2d3hzZXdrNnRtCnpyVjZDRk42dDc1L3pkMXZPREZ4dDJFam9DWmtYWDZ1VWcweGFBbnozM1h2clpLdGZ2SmNpN2wyaTlUajdQcjcKZ3JJZ3dOTkdYYzFDQlFpZ3hvWUE4NGU5UnlIb1FoVmlGVkdOREgwSzZYMXY0djgxWm5CL0tKQzdYbVY2MnZ0TApIeTBOYVVYdmNDUDA1TVhWVHFyYUNESXVsK1AySVhYYUVvQy9Zd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGTVlnejJSZkZ0U29JVTlJYVdPMEdTYmdWL3J2TUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ3BJaXhrOWlMVWkzQng0OWNsc3d1OEZXTnkvaDBJbCtHWWIvVXJ4ZEZHTFl3ODBZT3AraFRkCjcycjluMSt2Q3ZodVVZMTJ3d0prTDdRWDFIeGFBRXpDdm43Nk1YbTNpUExYd2UxNFBtQWtMME1SZlNoS1pQWGsKa3NqaEZ6V1RCVUFGZFhROXNVQzkyL2I5MC8wa0l2WE9SRFlVRDkvV1poeUY4eTdjR3k3OXBOZWwwbStHUXd2MQp3dFdKb3d4elBGa1NZRVZWb1UwL2V1S01IQUduMWs3d1BlVG5JUGhVK25XRWRKeThRUGpXT0drQmhGc1ZnK2tDClFVU1BtUWU3MFFkUTBQdDJpeWZpL3h0SVVsakYrM2p1VXVxQm5rdVErOG4yaWNYZ2gzREwrWXFRNmZzTHpuTDUKdlMxRGhGYlA5Y3hKeTdFbFJPUm5tOFVXSGpsaUhqVncKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLVENDQWhHZ0F3SUJBZ0lSQU9mVUVkaDNtRm4rRDBWUG0wZXNYRUl3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamMwTWxvWERUSTNNRFl4TVRFNQpNamMwTWxvd0ZERVNNQkFHQTFVRUF4TUpZV1J0YVc0dFl6RTVNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF2cE9qb1lwRkhCalhhR2t6V2NNZ2ZTRnlkT1FhYVlzbG1PMmlwZkhMSjFBQUdQdWMKNmxJSnBZTlpBbmxKaklIQ29rSkVQVVJZZ2tnWTJWV1VFTS95NERvZmxMMnFFRmQ2MTJ0WlpHRHU5blE1Z21udwpnTVFPeUZjS1ZGMDNnYzBuWXdIUGc0MnhyUzBLNHNlVnIvTGl3YjlObUE2MUpqemhUTGRXUHN6ellpNXpaR0RTCnByK2xXUkd1T3VBUytnOTJhdTQ5dWRxMmx6T21mdkU4enlFZU1PVDA3b2tveEdTMkxzaDRIMGZrM2NJSlV6WmEKWUFFNkVpeHJtSy94Y3ZjNGxxZnpaTkNoNTRUZWNHU2RpRG9qWG9LaFNCS3lFOUNCVVIvN090Yk51TzVSQU5DWgowb2ZZdGdSbG5JT3R1WG5EbkJXNDNlSWRNMm5VZWVySUhkcDVSUUlEQVFBQm8zWXdkREFPQmdOVkhROEJBZjhFCkJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUMKTUFBd0h3WURWUjBqQkJnd0ZvQVV4aURQWkY4VzFLZ2hUMGhwWTdRWkp1QlgrdTh3RkFZRFZSMFJCQTB3QzRJSgpiRzlqWVd4b2IzTjBNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFDbHU3UlBNS2xxV0cvYktDcTg5Y3JZTG1OCk4xcjBiRzRRakJRUmJEN3BsTWgrNFhWVkRiSnllMGl6VldqaFJENUNkVGhKdmo3bEtXZmlzeEtaSUwxTzkwQngKTGpjNnRLOVliQllnS29FWFFRNlB0NGk0QUF6UjIyR2swMFdNSWxNWW1nWFJQT1pCcXZLT2hWRFpVUzBUek83ZwpXMndCSHJGWUFBZzZVUU4rZDAzUUtyUDA3SHJmR3BHRlZ1RTBnbnlsTmVualhFQVpjZEMraHVDVXYrRnl3Q2NJCkVoUk1lWHI5bGFLY2pvdmpxRUFkRGM5ZXJ0NnpuYzZCTUpoNlBGUTArc3pjc2ltRndwMm9VbHppQmw2dE04V2QKOTVuRzRNRGQzOXlCQmNWalJnRS82WmN0ZjVORFRMd0Q4SUc0ZVBCNndML1VCZTFPUmoreUE5a0xGM0lyCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdnBPam9ZcEZIQmpYYUdreldjTWdmU0Z5ZE9RYWFZc2xtTzJpcGZITEoxQUFHUHVjCjZsSUpwWU5aQW5sSmpJSENva0pFUFVSWWdrZ1kyVldVRU0veTREb2ZsTDJxRUZkNjEydFpaR0R1OW5RNWdtbncKZ01RT3lGY0tWRjAzZ2Mwbll3SFBnNDJ4clMwSzRzZVZyL0xpd2I5Tm1BNjFKanpoVExkV1BzenpZaTV6WkdEUwpwcitsV1JHdU91QVMrZzkyYXU0OXVkcTJsek9tZnZFOHp5RWVNT1QwN29rb3hHUzJMc2g0SDBmazNjSUpVelphCllBRTZFaXhybUsveGN2YzRscWZ6Wk5DaDU0VGVjR1NkaURvalhvS2hTQkt5RTlDQlVSLzdPdGJOdU81UkFOQ1oKMG9mWXRnUmxuSU90dVhuRG5CVzQzZUlkTTJuVWVlcklIZHA1UlFJREFRQUJBb0lCQUFnY05sbDRqZXBkTUVXVQpQSWcwWXB5UW9OTlNwY0VhRjlhRFBtbTdlWDdKeThkRVpmQWUzNlE0aThBc016SVVqNWppSXc5TWFrdlpENTJvCkk2MzNlNG1KVDdDL3hZMytldzdSMWJNTTRQNkNBYlNJRjZFVE51SFZ1bTNPcmI4TFlRSzRvQUVrTll4K0h6bDUKYnVoVytNbHYvN2haMytHcHM1alZNSWxwcFczbkkwazIxSHBFSjJIdCtyS2xxODZzbjZWWDRwdnNGcmJnQnRTSAprYXZnLzJQcndnMWtmejdyTkJjZW5NUCtLaklKeEl6TVhURFFTLzFPbC9EaStsbUVpRVNLK2lZczQ2UWZmV0pTCkt2Y2pZUmZGbXpXbDVEVUE0T0pkZVh5Z3FYdTZzZnpFYk1Ga0w4YjNqZXdVWkVxTnFaVFA4ZWwzV2RndUdqaE0KdC9kYmZtRUNnWUVBOE5sbXhIWkRueGNJaXordCtiY1BDUkFSajZ2SmFxckJCaC9XUUkxdXBFaU1sWGp6S3E4dQo2ajdqN2NyQXpBNEkwVW5PS1BROWI1VFZZVHRmb0lCMSs1RUs2RDNJcU1yWVN4MlE3bFpXTDhua1FpUzZqUUFQCkxxTzA2ZjlHcnF6WnY0dTJ1eDVsTVM2aHY0MzNiN0pVdnBta3JaVVBhdytjeFduTEREdVlLMTBDZ1lFQXlwQ28KTlREaXJVNThYY0sySkQ2bDVNYVM0c0oyQmN6TjVGWVN6RFcwQXd4UUhVUDRKZmtVMSs2TERuTjNrVGhkMWEyMwpydmprVFdyV1BNM3lUV251OGpUMFJZUXhrZ2daOFE3Q3JWUzlHbnc2OXpXWjRSSXYyUEZQTFUrUE1YWDlHSjdUCnlXenBpOHRlNVQzS1dYcFlJajhvWDFOYXltcE15dXNqZVEzb2p3a0NnWUJZcCs0SVMzQkEwMzIxcEU4cUtKUkUKUmNIeEhNOGJrSmRVNWNzOEg5T21iWDR5Vno5TGF3amQrU0IxbTdpMFpFWWlwQVJiVnV4MmNsYkpYODJuaXlIaQo1RlViZ0FLby8ySDI1SDlBL0U3bGNHK3hXVXZDTTA5alg2ZHNxeWNkalVycUUwZkVRVUFHaHAvTG56cUJ4eWNpCnNmUElZYUkzU3B2dW55NjY1Z1R4a1FLQmdRREk5ZjZLMXJicjdPT2hPVnp1VkdETXVOeGNyMFBidVRYQ2hFb2QKNG1GMmJLN0dlZm9qNGhyMXBxaTZhMytCeVFQK3kxdGg4WGE5LzNJUDNObTRSNUpSSkl2NnM0MWlMVHRmVlo5NQp5b25aVHNwSkd4cFFtblJ4cStVN05LVUJFdWRIbDdyUktJWUN0SDZ1dTBDV3lMUExOaEZka1JxUG1pb1pYbkpRCjFLV1YwUUtCZ0ZnMkRWWCtpWlpNTENldWxRdWVFblZpRndEWEZuTXg2S054UnVKaS93blcvOHRJK1pxUVdkazQKR0lVdkI1bFlaUkRKWTk0YkNmMEZtb1hmaE5GUmcrRWh1UWtXS1h3WnAyOEs2eG0xQk82Z2JpN1BNTW9YVm9ETgp0ZEgxTkNNRUFMSmVKUmx3TFdBOTYxMk5Ma3lFYndXVi94L0gzZnVjWEFkQkkxNnFtWUhyCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUpjYlc1NFVVOXJUc04zRm5aWWRDdGt3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamMwTVZvWERUSTNNRFl4TVRFNQpNamMwTVZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFySGtTNEtTcjlOdGxGR2FscVpDc1Nkd05uRC83eDkwdk96aFhCRFFjdlcxZ3RNQVYKWnNpRUswY0VMaXVHU24vNmxaWlF0NGNoYnNBeGZnRi9YMlozRG16ZFZFK2NNTUc2MzZ1UHNEbGR4WUR6L0w1MQpyaVlUM3BHbURJcmhqWXRqLzAreC94MzJ6Rkcwd1p0M2ovSzJtNnk2QTdIVklqWVNORWx0dFJ2d3hzZXdrNnRtCnpyVjZDRk42dDc1L3pkMXZPREZ4dDJFam9DWmtYWDZ1VWcweGFBbnozM1h2clpLdGZ2SmNpN2wyaTlUajdQcjcKZ3JJZ3dOTkdYYzFDQlFpZ3hvWUE4NGU5UnlIb1FoVmlGVkdOREgwSzZYMXY0djgxWm5CL0tKQzdYbVY2MnZ0TApIeTBOYVVYdmNDUDA1TVhWVHFyYUNESXVsK1AySVhYYUVvQy9Zd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGTVlnejJSZkZ0U29JVTlJYVdPMEdTYmdWL3J2TUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ3BJaXhrOWlMVWkzQng0OWNsc3d1OEZXTnkvaDBJbCtHWWIvVXJ4ZEZHTFl3ODBZT3AraFRkCjcycjluMSt2Q3ZodVVZMTJ3d0prTDdRWDFIeGFBRXpDdm43Nk1YbTNpUExYd2UxNFBtQWtMME1SZlNoS1pQWGsKa3NqaEZ6V1RCVUFGZFhROXNVQzkyL2I5MC8wa0l2WE9SRFlVRDkvV1poeUY4eTdjR3k3OXBOZWwwbStHUXd2MQp3dFdKb3d4elBGa1NZRVZWb1UwL2V1S01IQUduMWs3d1BlVG5JUGhVK25XRWRKeThRUGpXT0drQmhGc1ZnK2tDClFVU1BtUWU3MFFkUTBQdDJpeWZpL3h0SVVsakYrM2p1VXVxQm5rdVErOG4yaWNYZ2gzREwrWXFRNmZzTHpuTDUKdlMxRGhGYlA5Y3hKeTdFbFJPUm5tOFVXSGpsaUhqVncKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lSQU0xK2ZKdmFrbnpyKzY3RjFNR0tVQ0l3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamMwTWxvWERUSTNNRFl4TVRFNQpNamMwTWxvd0VURVBNQTBHQTFVRUF4TUdjbVZ0YjNSbE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBCk1JSUJDZ0tDQVFFQXhDUXVkMGtXd1FPMzdFMklvVDRIYXlwTUNPVlYveWs2aHZBU3E2OVg1R2cxVGlobG9vbzAKN05OTEVtQWJ0UEFPOEJ4SXZNTlllYndYc2x2OGE2citNblJ6VjNyOSs0RXJBdTBPV3B0RkhZVWVocXZrR1k3UApEUytlcFVqQ1RBSzZFb2pTeGNhbmNMbDgwTnZURjNjdmtzN0ptVFFVZVpUVnNVWVZGelRvUHlXei9wUWhVbDFzCmlqeU1KeEFMVUtiVFZjeHViUG5ldGplQnRvdVlZMGxic2tEZ05mN1Y4anB3by9ZbGpxaG1hYmdwZTZhMksxTGQKcTUySENVNUJ1VFZEdTdLS0ZJU2V4ZTNmSHFrREcyejJXSHpVUUQ0aDllOVFnZWdVaStIdnZ1ZlZxZUV4R1NrVQo1WjJ0SXN3ZlZHUkYybXp5clBDSHpjQmdrZnNPQlcxd2N3SURBUUFCbzJBd1hqQU9CZ05WSFE4QkFmOEVCQU1DCkJhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXcKSHdZRFZSMGpCQmd3Rm9BVXhpRFBaRjhXMUtnaFQwaHBZN1FaSnVCWCt1OHdEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUNzbWhDTUtVYS9qQ2JyYTF3RFRjWCtXQWU1Y0Z6dzJtS0w4VTJIZ1JBMUMzMVNIUTE4Ung2NzVUZXZBCmFyNWUzZmY0Z1cyYmlGL1VWdkU4cEhLYi9lQkRmNitCQ0RaU0ZnanF5MHViRDcxUnNkSmZ2bk5TVk05cUFaMW8KZ2FKS0grWWRTN09SRWc4NVM5RXowWktXdVl6VURBNmFlS0hxVWVqMFRhYWh3ek5LQS8xS0tlejFvLzhoK0xLMwp4blA4NUx5Ym1xQnFUckx3aWNNVitQdDNZUEU3UCtlWjkwbGpKM3VHWGM4UmIwdnNXcVZ4VURiWDFnb3UvcmhoCndMekRMNHpDTTBjQXVWdHh3ak5ObVppVDVheU94ZlZ1OFNmVW9iY0RpTlJFUUVxQi9hVzgxNUI0ekNzMURpY2EKZ1FxRnBqS1VUYnp4S1B3dVRwaVNHNzdlTkxNPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeENRdWQwa1d3UU8zN0UySW9UNEhheXBNQ09WVi95azZodkFTcTY5WDVHZzFUaWhsCm9vbzA3Tk5MRW1BYnRQQU84QnhJdk1OWWVid1hzbHY4YTZyK01uUnpWM3I5KzRFckF1ME9XcHRGSFlVZWhxdmsKR1k3UERTK2VwVWpDVEFLNkVvalN4Y2FuY0xsODBOdlRGM2N2a3M3Sm1UUVVlWlRWc1VZVkZ6VG9QeVd6L3BRaApVbDFzaWp5TUp4QUxVS2JUVmN4dWJQbmV0amVCdG91WVkwbGJza0RnTmY3VjhqcHdvL1lsanFobWFiZ3BlNmEyCksxTGRxNTJIQ1U1QnVUVkR1N0tLRklTZXhlM2ZIcWtERzJ6MldIelVRRDRoOWU5UWdlZ1VpK0h2dnVmVnFlRXgKR1NrVTVaMnRJc3dmVkdSRjJtenlyUENIemNCZ2tmc09CVzF3Y3dJREFRQUJBb0lCQUIyREtDNndvNmpWSzJaMQo0Qm9LNEVqaXEyQW5TY0pEN05lQzVmeEpQTnRVUnJrRTRRNE01NXUreXl2dnBCdWNoMUxmbnA0d2NtNld1NllOCnF6UjBIUjF3WWk2R2hoTEN3N3NEK2tYdDJQOXhHVC9BTzJrUkVOeDJEdFBsMTc1aUpxZEZTUm1USTN5Vm5FODgKMUUxU2xLanRUbTRyNU96S1ZVRUFQNG9uWHM2cFZQMDFmRGtIWTZmc3FjeUE4bDVyL1ZObEJFUWhIaFJpa3hLdgpUdWFtempIdWt1Rmh4RWNIWVZBWW5QeGxicG1HSUs0RUJkV05tbXV1cHd6V1dNcXlkTkU4RDZZM2NSY1JSOUV1CkhhTGpsQU4xZlkxTTRZd05TSmRxc0M0NnJmQ1VhbzJVV1ZEaERJaG1vQXBycXZIRHh2ZHFpOWlHUWpKOXdqSWQKazFOTGMwRUNnWUVBOHdKRGZ3K1NRZjBxY28rcElIN0lyY3dXVmNlcjVoNE54ZHhsd3d1dmduLzhmdUV4d0h3Qwp1MlRqMjd4RHZMNnROME1Ed1BPdDBIaVRaYisxYVV5SFI2NkZMUzhQTTNrMFcwUEtmaCtIK1l2MXF2NVcyRk5OClFwSHNlSDhwSzJoSFJSMnZZaTh4eHd2VisvUGNNMkFaWVlGdGlRbDVxeWRHSFEvVE9Nd2pjaE1DZ1lFQXpxQ0IKVEpwS3NiSHo2aWdXcGt5dDVGY2F6cWRMS1hDT1JLOWhYMU0vUm1VQUtQSUhlb2hmaGVoSlJYWE9VdFNKQ0dOWgprZ2d0UzNqWXJublNiNnZjcGhwaytWcnQzcHJIZ3MzMzZmaTR3TExXOEVkZXRpZEZmTDhEYnlwZlo4RlgwYUd4ClZLaUpBdjV1dzhVbmZwSG9lem9rbFBCOHljaURiNTZDd3lpTTFDRUNnWUVBNEgzRDJ0cUlzOXRyM2o5bTczVVEKY0xYc0lEeUFTZXFUc0tpbGZhVUs4MVRHN25PZElZT3VobTF5cmlqaXJyZTdqeVNpa0JyTkJKeVBGbDBlK3ZMTwp1bUszOXdEVld5anFQREdKSERDR3pmc0U3WDFldnlOZGFWVWpEa0h5eDMzaThTKzJPTTcrZmpJcDhVTGJ0cjVkClZCMWNFaytsalg2UG9BTmhqc1BQTHU4Q2dZRUFucGpHQmdVYnRmNndDSmZTb3J5U2NJU0hOLzFpaktFdklmczMKa3hKenE5V1VaTms0OGsxQWZLakpyTDM2cXNzbGowR3FtNU1aS1NmTnNVWWlSc0swYnU0dGVOUFpacGFJOHBhagpabndaV3hjcU1XMm1mY3Z3NHdvK1daSTlmb2NCb0E4cTdKOGI0eWRsMzNBeG0wM2xFc2lURVpyeFBYUmhwa2dWCmVEUmt1K0VDZ1lCckdSUUtyWXpyWmlHTWpFMC9ESElXMU5hS0s4MWFFczZkSWx5a3YzZG15ZHpQait1SjZGdHAKK3I5Ymk4OER5dzQ4ZEhQdWRUdWdHWlg5bFp4NW50dzQybVFCbm9FYm9iSGV6K2l3blVjM0o1bzBLN0xoSlNRdQpzUkY4NHVOQkt4TjNGM2VxWVQxcjR0cTlPZGgzNVhSQTZEdC9MNU5mandHaTlTTTlRUEE3d2c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUpjYlc1NFVVOXJUc04zRm5aWWRDdGt3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamMwTVZvWERUSTNNRFl4TVRFNQpNamMwTVZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFySGtTNEtTcjlOdGxGR2FscVpDc1Nkd05uRC83eDkwdk96aFhCRFFjdlcxZ3RNQVYKWnNpRUswY0VMaXVHU24vNmxaWlF0NGNoYnNBeGZnRi9YMlozRG16ZFZFK2NNTUc2MzZ1UHNEbGR4WUR6L0w1MQpyaVlUM3BHbURJcmhqWXRqLzAreC94MzJ6Rkcwd1p0M2ovSzJtNnk2QTdIVklqWVNORWx0dFJ2d3hzZXdrNnRtCnpyVjZDRk42dDc1L3pkMXZPREZ4dDJFam9DWmtYWDZ1VWcweGFBbnozM1h2clpLdGZ2SmNpN2wyaTlUajdQcjcKZ3JJZ3dOTkdYYzFDQlFpZ3hvWUE4NGU5UnlIb1FoVmlGVkdOREgwSzZYMXY0djgxWm5CL0tKQzdYbVY2MnZ0TApIeTBOYVVYdmNDUDA1TVhWVHFyYUNESXVsK1AySVhYYUVvQy9Zd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGTVlnejJSZkZ0U29JVTlJYVdPMEdTYmdWL3J2TUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ3BJaXhrOWlMVWkzQng0OWNsc3d1OEZXTnkvaDBJbCtHWWIvVXJ4ZEZHTFl3ODBZT3AraFRkCjcycjluMSt2Q3ZodVVZMTJ3d0prTDdRWDFIeGFBRXpDdm43Nk1YbTNpUExYd2UxNFBtQWtMME1SZlNoS1pQWGsKa3NqaEZ6V1RCVUFGZFhROXNVQzkyL2I5MC8wa0l2WE9SRFlVRDkvV1poeUY4eTdjR3k3OXBOZWwwbStHUXd2MQp3dFdKb3d4elBGa1NZRVZWb1UwL2V1S01IQUduMWs3d1BlVG5JUGhVK25XRWRKeThRUGpXT0drQmhGc1ZnK2tDClFVU1BtUWU3MFFkUTBQdDJpeWZpL3h0SVVsakYrM2p1VXVxQm5rdVErOG4yaWNYZ2gzREwrWXFRNmZzTHpuTDUKdlMxRGhGYlA5Y3hKeTdFbFJPUm5tOFVXSGpsaUhqVncKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURxRENDQXBDZ0F3SUJBZ0lSQU1Xc3pBV0NFRHkxQkRwOUV1cDBlUFV3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamMwTVZvWERUSTNNRFl4TVRFNQpNamMwTVZvd0tqRW9NQ1lHQTFVRUF4TWZZMngxYzNSbGNtMWxjMmd0WVhCcGMyVnlkbVZ5TG1OcGJHbDFiUzVwCmJ6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU1YUzBqa05MYTBwcGNVQVVnS3MKbC9LVFlHdnlHWXlKYy85WTdKeGFUUncrY0pVZnVSMUtjeGUzQm5xZkU5eVBLZk41MlpIT1ZtdWhtUVhYdGh0NQp2aUZneEJLUlZXRk9vWncydVZZMTQ0VFNXK2Y4UXc2MGl6NEZsRlpVaFREUmZ0ZkpQQ2N4TUE1eHJ3cDZQb2RlClBSbDQvUGx1SFZ5Sy9FZWx0Y3dmMjE3ZC9iMHYvODhpY2lSUi80dy9QUUdBbXFpaG0rd0I4aEkwQU9Xck56Y3oKZExEdVBVM3paeW9ZL3d1Sm5hcDV2SzlVdzlGaXBUR3FMNmNVM1FoNHlZaUtxS0NNQldkcHpFcEZ1Wnh6Z0tJRwo3akNSMWJ0L3pKVXl4WEdTdHNTejhGSHBjMUU4NmJHdExjSEpKT3d2NGZSRlhpNThBdXBNSzkwcHlJV2ZtVXdWCnJva0NBd0VBQWFPQjNqQ0IyekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUgKQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3SHdZRFZSMGpCQmd3Rm9BVXhpRFBaRjhXMUtnaApUMGhwWTdRWkp1QlgrdTh3ZXdZRFZSMFJCSFF3Y29JZlkyeDFjM1JsY20xbGMyZ3RZWEJwYzJWeWRtVnlMbU5wCmJHbDFiUzVwYjRJUUtpNXRaWE5vTG1OcGJHbDFiUzVwYjRJbFkyeDFjM1JsY20xbGMyZ3RZWEJwYzJWeWRtVnkKTG10MVltVXRjM2x6ZEdWdExuTjJZNGNFZndBQUFZY1FBQUFBQUFBQUFBQUFBQUFBQUFBQUFUQU5CZ2txaGtpRwo5dzBCQVFzRkFBT0NBUUVBaS9HYTE2eUVTdTIyTlN0RVhwTTRwakN5R3dSbFc3WDRQdFkxYmFuK2hWcGVKdU1yCnFrakZETGI2Ym1zdDgwbjlTbVg4Q1BxNzU3QmZtWkwrRHNtT0NDMThyK2V0RUpQSjduTVFORjcxcUZ0VkVQdHEKQzNyT1FDTTJqT1F0K0NnV2tIZmRZNXFPRVNGTThWZjJ4c2VCbWg4NmNnVkxyOHE5cy8rRUJ2U2E1eGc2M0Z0VApQZ0s1OWlTcmVZZW4xNEU3bmk2QnAyL1ZldVlZSTUyQkovVU41aWE1UG4xZFhRUUNsYmhxZ2VGbVFXcHk1MitCCm1xNzdiMlVJWW9oSVRkT2RRcWFEc1lEcmFvK2hkellka2xXaDdiU1VRSk0rQzFuMlNWdE96Q0ROeWZBR2Flbm8KRGw3bXQrSmJxUHNUNzNCSVF6T3ZmSTlTd1lncVRTUjhNTUh3Y2c9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeGRMU09RMHRyU21seFFCU0FxeVg4cE5nYS9JWmpJbHovMWpzbkZwTkhENXdsUis1CkhVcHpGN2NHZXA4VDNJOHA4M25aa2M1V2E2R1pCZGUyRzNtK0lXREVFcEZWWVU2aG5EYTVWalhqaE5KYjUveEQKRHJTTFBnV1VWbFNGTU5GKzE4azhKekV3RG5HdkNubytoMTQ5R1hqOCtXNGRYSXI4UjZXMXpCL2JYdDM5dlMvLwp6eUp5SkZIL2pEODlBWUNhcUtHYjdBSHlFalFBNWFzM056TjBzTzQ5VGZObktoai9DNG1kcW5tOHIxVEQwV0tsCk1hb3ZweFRkQ0hqSmlJcW9vSXdGWjJuTVNrVzVuSE9Bb2didU1KSFZ1My9NbFRMRmNaSzJ4TFB3VWVselVUenAKc2EwdHdja2s3Qy9oOUVWZUxud0M2a3dyM1NuSWhaK1pUQld1aVFJREFRQUJBb0lCQUgva0VOYWpaM0U0cUp2WQozaXd1YXJsL2YrbXBoY3p1bkJocjQrUWRHUmIyWXhCMWh0YWg2QkJmMmdkeVNvUGY1azRxNjNhdy8vdnJhQ04zCjFwcWl0VUdjN29YV2dXMDhTWXpWY0RLRStrZEhPL1daaDd5OUNmd1ozVkdHcU9qcnQyWklDZVNJanpuM1V5T2gKN2tUVHJ3cUZ4bjUzS3ZKR1JGMEppNk9nd05EdDdrWWliY0ZYbHJWcUpreENDb0ExN1d3RE0xNjFaOGJ2RTBUeQo2cHcvWWtaM3YwRjBibkRrVjFtWVR5VHEzbmdRWmI0WXhCSGVmaFFSR0dLQ0w4RDhLRG10VWFBNTlJSlVZMG9ZCkRNaGdoMXJBZllzYStpeVdLaW9XZEY5WDZYME1sdW03OHJabERyY3BMb0NVNHkyejdIbHd2ZVJlZ21Scnpqb24KNkRSSm1RVUNnWUVBMkZlaXlFMkdzNVBoU2EyTmwvZENyT0tXRTBxeWlSblRQT1A4cVlxN0UrYUlBL0VEdDlaYQo2cEdBd01RdzUybnROS04vVHdvWENhT2YvdnJNUkRDZitaL3RHUE9oZjFYTVAwKzdWMEsyZFpNaTFaNGNxQkEvCjc4djh2UDBvNS96K1hjd1RNYk55QjdINnBEMDYzVDZ2VzJhU0hhem00OXpEOCtVLzQwUDdWeU1DZ1lFQTZoWWwKdnVCR1ZwZEFLZGk0NUFRTzVoNWFlTjNmUHlIZXowNGs2T2MzMXJSQ3Z3aEpuM29DUHdCelR5QUY4ejJYdzhkOQpGQUJTVXBJdFd4Ujk5dWtqOHlvNjFXTFdNdnZzMUs1c3pHOTFCQVlkWmozZyt4dnFiLzM2a3lTREVldThhN1dqCjF3dzFPNVVqdElJbTlVOXk1STVNNS82UGsrallJZEk5TEFQKzFHTUNnWUVBeWQzOEpxc3daYUEzTjJpYUZwTEIKeEZBcGVSYmFRTk80SjdrVXFaNnBzWWdLb3FMaHRVaHV6VEczMGljKytxLzhob0dJNlZlZzUzMm1iV1hYOUVqcQovU0lkT29zYXhwWm9YeXNtdytXY0cxbVB4NFFoZVRDd2VERC9ROWwxc2dKLzEwWDFJd3N0KzhBMi84bWlnNDlhClVROEVpR3d0aGJFWnB4cmk0azBzMmNFQ2dZQlJWbWkvTGtiQ2g4T3Z4ckpYNkdFVTdLOGJHRjBlSHJMQTdiSTkKaXpvSHpKTDB0ZmgvQlhJS1dpbTI4TFdnazJKTWtPQ1JOcHRrUFk2cyt5M1p3YURRT1hnLzlSdmdrMUR6aGJnZwpRUW96Mzd3UGJxamlHQTBaNVBKUWRudGttcmpaNUQrTjFad1ptL1RRSC9sUmU4MjhSUVhNQnRQMDNROWNrU1RZClNuc2RhUUtCZ0NUbHBVeVlRVnZSWUNBeTBmNzI4cFRVODJhK3VOSXB5RWhkckVYcmVaVElCTDEyUXM5THd6em8KaENUQ2RUODRoTGtQTHZNYmpTODl5VWNHNks3SHFtcVQ4elFjeGVQY1RlUVpzSDN1ZWl5a1hGcWo2VVlKekV0OQpyWTFqNFQrUmMybFN0alV2WWZWL0s4UWx3MTNIbC8yTlBaRkFMOVRXays0bU9CSWkxKzZ1Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUpjYlc1NFVVOXJUc04zRm5aWWRDdGt3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamMwTVZvWERUSTNNRFl4TVRFNQpNamMwTVZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFySGtTNEtTcjlOdGxGR2FscVpDc1Nkd05uRC83eDkwdk96aFhCRFFjdlcxZ3RNQVYKWnNpRUswY0VMaXVHU24vNmxaWlF0NGNoYnNBeGZnRi9YMlozRG16ZFZFK2NNTUc2MzZ1UHNEbGR4WUR6L0w1MQpyaVlUM3BHbURJcmhqWXRqLzAreC94MzJ6Rkcwd1p0M2ovSzJtNnk2QTdIVklqWVNORWx0dFJ2d3hzZXdrNnRtCnpyVjZDRk42dDc1L3pkMXZPREZ4dDJFam9DWmtYWDZ1VWcweGFBbnozM1h2clpLdGZ2SmNpN2wyaTlUajdQcjcKZ3JJZ3dOTkdYYzFDQlFpZ3hvWUE4NGU5UnlIb1FoVmlGVkdOREgwSzZYMXY0djgxWm5CL0tKQzdYbVY2MnZ0TApIeTBOYVVYdmNDUDA1TVhWVHFyYUNESXVsK1AySVhYYUVvQy9Zd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGTVlnejJSZkZ0U29JVTlJYVdPMEdTYmdWL3J2TUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ3BJaXhrOWlMVWkzQng0OWNsc3d1OEZXTnkvaDBJbCtHWWIvVXJ4ZEZHTFl3ODBZT3AraFRkCjcycjluMSt2Q3ZodVVZMTJ3d0prTDdRWDFIeGFBRXpDdm43Nk1YbTNpUExYd2UxNFBtQWtMME1SZlNoS1pQWGsKa3NqaEZ6V1RCVUFGZFhROXNVQzkyL2I5MC8wa0l2WE9SRFlVRDkvV1poeUY4eTdjR3k3OXBOZWwwbStHUXd2MQp3dFdKb3d4elBGa1NZRVZWb1UwL2V1S01IQUduMWs3d1BlVG5JUGhVK25XRWRKeThRUGpXT0drQmhGc1ZnK2tDClFVU1BtUWU3MFFkUTBQdDJpeWZpL3h0SVVsakYrM2p1VXVxQm5rdVErOG4yaWNYZ2gzREwrWXFRNmZzTHpuTDUKdlMxRGhGYlA5Y3hKeTdFbFJPUm5tOFVXSGpsaUhqVncKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTVENDQWpHZ0F3SUJBZ0lSQUtPQWo1YnhPbXlacFNCU1V4VjFsbzh3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamMwTVZvWERUSTNNRFl4TVRFNQpNamMwTVZvd0l6RWhNQjhHQTFVRUF3d1lLaTVvZFdKaWJHVXRjbVZzWVhrdVkybHNhWFZ0TG1sdk1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXJFOGtKSDgzMy9mZGF0M2RXNWdvU0pjNmtWdFUKNEd4ZDFvZDcwMzVvU3hjUU1oaThweUVwUW9UL0xQYkloNVFHRlJkVHdTc0NVSC9NSVVqeHRrWWh5eUdwR2Z1MwppYzV0QnViK29oT0RUQm1Hb0hjam9ydm91UDAvbGV5WE84RWhMQW50a210aWt3TnREN1RETkcvNGdmMUZMZEtkCmEwWVZzM2o2dFlDZDYrVW53RVpRcG4wS2M3WnhRQzUrOTQ3N3paS3djMGtzUTBKV2VZZkp6VklNR2R3blV4OVYKT2lobDRlQUlwR0ppWTRxMFZRc1lYdHFCU1VQUHJBU0lhT3hvZFM4ek5va3hqU2ljVWxlYlRWZ3F5SDh1ZDNQNQo0Q08zTUZlMHpyU0dydS96L2tVa3pmVjV3SG5uV2E2SkJhTy9zcUdpSHBGa3dKdG1jZXZsRGpuMFF3SURBUUFCCm80R0dNSUdETUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUIKQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCVEdJTTlrWHhiVXFDRlBTR2xqdEJrbQo0RmY2N3pBakJnTlZIUkVFSERBYWdoZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d0RRWUpLb1pJCmh2Y05BUUVMQlFBRGdnRUJBRkxYcXJ4STZRODNqWG5FdFFIR0FpNmxCemVoV2ZacEJBZzN5VmREK3lyRUxqekYKUjB1ZnJiSlNBNkcxR2RVZGhYUFF5QlpUd0FWZXh3UDRjQitmRFFQMTJBRlFGTlBIdjdibTYya1YzU3MwVFVYdQpsa1JNSU1EblUxK3pOeGYwMjd6Z2xsSzQxd2I2ZzE0ZTYwUm9hSlhyVndTdnlxaDFQeVd5ZFk0TFNScyt1UngvCnlIL2Zlbm9ER3ZuT3ZqOHA4L1RNK2F5SEJaaElyNEI3WTg5TnRkTHZFMEFod0ZzM2pGUVE1NVNuQnkwREpTbDUKWUdGYm9mcUI0eG4xaTR5ZjFsaHZaNnZpTFRMK2Faekhrd1RkTVAyWUZiY2xUd050VVpmaVpiK2RseVljK1cwQQpCMXNMMEg2bnNBY2hxcUs4YmtqNjlVRjBMU2hFc2lzUWZtK29zdHc9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBckU4a0pIODMzL2ZkYXQzZFc1Z29TSmM2a1Z0VTRHeGQxb2Q3MDM1b1N4Y1FNaGk4CnB5RXBRb1QvTFBiSWg1UUdGUmRUd1NzQ1VIL01JVWp4dGtZaHl5R3BHZnUzaWM1dEJ1YitvaE9EVEJtR29IY2oKb3J2b3VQMC9sZXlYTzhFaExBbnRrbXRpa3dOdEQ3VERORy80Z2YxRkxkS2RhMFlWczNqNnRZQ2Q2K1Vud0VaUQpwbjBLYzdaeFFDNSs5NDc3elpLd2Mwa3NRMEpXZVlmSnpWSU1HZHduVXg5Vk9paGw0ZUFJcEdKaVk0cTBWUXNZClh0cUJTVVBQckFTSWFPeG9kUzh6Tm9reGpTaWNVbGViVFZncXlIOHVkM1A1NENPM01GZTB6clNHcnUvei9rVWsKemZWNXdIbm5XYTZKQmFPL3NxR2lIcEZrd0p0bWNldmxEam4wUXdJREFRQUJBb0lCQURaWHUyRmJVZ2JyeUVRVQo5dVFWUjljbEFzNm5ERXkvUUpVUkk2ZGUvWXQ1R1oyREdiUm9DL2d6czdxOWxoN1VPMXJaZ1l1eGdjaGJsY2lGCmxkM1Rub0xPK2VMODlUU2NDdHliYTRFNFFEZDI4WE9ZUDMvcVhZcENMSlNmQ2s5SktLb1g4M296TGVLSnVSSzAKQXNCOTg5VWpTSGNjTHBPUGhmYVZXQlI0SE5ZeGFkeHRha3dNeHJZUC8xQWxHdkdFZy9CMmJSMk56eDlxZURKUwp0SEUxUjdRbEE4b0dlMkVXSGlDTnBPY2ZZOW51RzdmZWFVVDF1aHZWVkExZnFrcTRJa1htUDMwRVJsdlZtN1NrCis1aFh4R3RQMVFFdktQSmdydHZPZXBCb0tMS2RsRlYzUTBTem1GMlFubVd2blRyL010RW40OFpxb0pCZXlQMkYKQm9Cb0tRa0NnWUVBeTBCOXlWNzErK2FudWM4VXQ1VXd3elQ3cWg2N1dTSnB6NGtyWGdYV0MrdUlHNllMRTJLMApUMU14emVoK1o3UUVFd0N6dDAwWVl0ZFhZcTFVMDRiWlA5MUJTL3BFZ2VvVTlyQ29KaHVuUW00dTFJa21XazBICkFzU0NlcUIzSTlmQVlDb0tiMHgxM0ZhZjZVZ3NHT1hKRXd3L0pFWU5aZEVBV3dYVDhoeUcrUThDZ1lFQTJRYmwKUGV6d0NuMlJDKzl0L1BVQ1VFUHhDVzFOTXowUXcxSmV5aUp5eVc1UStZcjloa0RQL01NVExmckU1RGJLWlk1dAp1OUNWcy9WT1BLNlVRNVlicXVwV1dOaWRyRFJ2aXMwUVgzY3V4aWVuTzZqM1RrZlpUSUx6N1VSUWhVemxabTlUCitxZllwNlJmeUlKRXpzc0xSQXhmU05mMENZQkEvd0lNQ0tCS3lZMENnWUJQUVNlTFpTY0FBZEgzUjBOcHpwZ0UKRmwzbjJUSHVzTmVYb0lJem1JejlldXRJOUxjdTZQY3NVMkdCVEI0MksrREcxQ2cvMnFVZXJaK2FqOElhOVdNegpYd0ErTXltUml3aC9wU1Q4THg1S2JoSit0N2duMEE5aXllT2pFMzFCa2JpbkJ0Mm94cVRTdFVpSHU2Zk9VWlBWCmhKbitkLzV6YkVyNk0weVJCUVN3aXdLQmdRQ0ZoRjkrVklscytzbEVmWDIrTlFIQ1hib3BvWXZ3TE81bUxBUFMKK1pTQzVoSjlJNHhManc0bUkrRmwxVFJTYm43Z01kckN4RldGVERKZzFNcTBOZUk1cVVlTUMyQWRkSGoyL0tmSgpBNnJNRDlNcnVnekRwU0pEbHdENGhLSEJFSWpGRjFLa0Q2VVRwZVdqbHJrOE8rQm5jZkVoQUhMTGNaTUxEN2hWCmlqL1lkUUtCZ0QwKy9sK2ZNZTYycWhTcUYvSFNCMVpQb21qeG1oVG5xSUQvblg4akRzeGZ4ZjFWK1JhZFdLb1gKZlM1MXpLdExFT1k5M1ZRbEUySDBTYy9aTHp4YmcrSkUrUXhIY0tiREFFL2VHSytjaFpJWU5JZGFRKzBma0lndwpUZ0srSTd5RW45SVRmQmZBeWRkcksyRlpkclVhZEs0VTNXZ3dJdzhvOHVabUZSeGhOYWNRCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUpjYlc1NFVVOXJUc04zRm5aWWRDdGt3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamMwTVZvWERUSTNNRFl4TVRFNQpNamMwTVZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFySGtTNEtTcjlOdGxGR2FscVpDc1Nkd05uRC83eDkwdk96aFhCRFFjdlcxZ3RNQVYKWnNpRUswY0VMaXVHU24vNmxaWlF0NGNoYnNBeGZnRi9YMlozRG16ZFZFK2NNTUc2MzZ1UHNEbGR4WUR6L0w1MQpyaVlUM3BHbURJcmhqWXRqLzAreC94MzJ6Rkcwd1p0M2ovSzJtNnk2QTdIVklqWVNORWx0dFJ2d3hzZXdrNnRtCnpyVjZDRk42dDc1L3pkMXZPREZ4dDJFam9DWmtYWDZ1VWcweGFBbnozM1h2clpLdGZ2SmNpN2wyaTlUajdQcjcKZ3JJZ3dOTkdYYzFDQlFpZ3hvWUE4NGU5UnlIb1FoVmlGVkdOREgwSzZYMXY0djgxWm5CL0tKQzdYbVY2MnZ0TApIeTBOYVVYdmNDUDA1TVhWVHFyYUNESXVsK1AySVhYYUVvQy9Zd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGTVlnejJSZkZ0U29JVTlJYVdPMEdTYmdWL3J2TUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ3BJaXhrOWlMVWkzQng0OWNsc3d1OEZXTnkvaDBJbCtHWWIvVXJ4ZEZHTFl3ODBZT3AraFRkCjcycjluMSt2Q3ZodVVZMTJ3d0prTDdRWDFIeGFBRXpDdm43Nk1YbTNpUExYd2UxNFBtQWtMME1SZlNoS1pQWGsKa3NqaEZ6V1RCVUFGZFhROXNVQzkyL2I5MC8wa0l2WE9SRFlVRDkvV1poeUY4eTdjR3k3OXBOZWwwbStHUXd2MQp3dFdKb3d4elBGa1NZRVZWb1UwL2V1S01IQUduMWs3d1BlVG5JUGhVK25XRWRKeThRUGpXT0drQmhGc1ZnK2tDClFVU1BtUWU3MFFkUTBQdDJpeWZpL3h0SVVsakYrM2p1VXVxQm5rdVErOG4yaWNYZ2gzREwrWXFRNmZzTHpuTDUKdlMxRGhGYlA5Y3hKeTdFbFJPUm5tOFVXSGpsaUhqVncKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUekNDQWplZ0F3SUJBZ0lSQU9KZURkV21seGlmemp3S2RqcTNoYzB3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamMwTVZvWERUSTNNRFl4TVRFNQpNamMwTVZvd0pqRWtNQ0lHQTFVRUF3d2JLaTVqTVRrdWFIVmlZbXhsTFdkeWNHTXVZMmxzYVhWdExtbHZNSUlCCklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUE4WE1sdDRQcWJtdk1pZ1V3VCtNOGgyKy8KUWNnOFFmc2NkZUlibXFpZ3JKeFVhekNhb1J1cVlZbERGOS9VUFNCYlV0RHBOVjJYQ2JrRHhYeWJEK1Z2YlZ5TQpEOElrRll3bFpsM3Ntc1ppakNTUnpJVEFHRDlZUzdSa3ZvZDVjVnEwNThwRVJDWHh0WXN1L0dqMkRzZ2R1c2dOCjhTaDczOEI5SVFOcTgzT0lIcTdGMitFMmFreURQNSt3dmxTT2gvS1g3dmhodHJIQTRPd0Zza1JuUFg1K2ZvSmwKVDNzM1MxVTUzeC9ndWhyM0VEY3N0Tng4YXVJRHJVc015MHNoaHpOcks1czVoM1R2QzVPTjFNYll3Q3FBenJUdgpudjY1dnV6dzhsSThCc29vNE9mbzY3QWIrbkRKY0hwWmY0VnJiZ0hMcUljNUZtK0U1QTVIa3pqRWdHU3VoUUlECkFRQUJvNEdKTUlHR01BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWZCZ05WSFNNRUdEQVdnQlRHSU05a1h4YlVxQ0ZQU0dsagp0QmttNEZmNjd6QW1CZ05WSFJFRUh6QWRnaHNxTG1NeE9TNW9kV0ppYkdVdFozSndZeTVqYVd4cGRXMHVhVzh3CkRRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFDZ2NxQlJ0c0lBQmUyamNpd1R5NzFHTmNpSEY0aGc4UUJON0RqSXEKTUJwekVvL0l0cGtIaE9NblJHamJqbkJLcnpsSERJb1hPa1JTZDFhQkh2YmJoYjNBeWlvN014TVUzbEZnWnpqUApiN2FYamVwT3FOVEpyaDg2Y29NaHVCYkpPUUZqYm5MMlgwRW5uOTV4RTZrNzlVTTBhL3RPMUxkS21xNHFWaEVYCkpudjZ4Q3ovMlJKRjltekRjZm52SFZnV0tZZGdHQTFJUEdSR1liMU5WRDFhQ3AzOTQ3TkszUGphQW1oMUZKbFEKcGZ4NDZqNWJGWUxBalBpSStsZTRKRDZkWGduUmJYZE1VN29JZ3NrOTBnRUhENEZsbDlkblFHMGJobjJPeFJVeQpBbmsvQWx3N1lMdndpVFo5eWliQitZKzh3ajVQcy82RmFuSS9tQndCbjZic0hLbz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBOFhNbHQ0UHFibXZNaWdVd1QrTThoMisvUWNnOFFmc2NkZUlibXFpZ3JKeFVhekNhCm9SdXFZWWxERjkvVVBTQmJVdERwTlYyWENia0R4WHliRCtWdmJWeU1EOElrRll3bFpsM3Ntc1ppakNTUnpJVEEKR0Q5WVM3Umt2b2Q1Y1ZxMDU4cEVSQ1h4dFlzdS9HajJEc2dkdXNnTjhTaDczOEI5SVFOcTgzT0lIcTdGMitFMgpha3lEUDUrd3ZsU09oL0tYN3ZoaHRySEE0T3dGc2tSblBYNStmb0psVDNzM1MxVTUzeC9ndWhyM0VEY3N0Tng4CmF1SURyVXNNeTBzaGh6TnJLNXM1aDNUdkM1T04xTWJZd0NxQXpyVHZudjY1dnV6dzhsSThCc29vNE9mbzY3QWIKK25ESmNIcFpmNFZyYmdITHFJYzVGbStFNUE1SGt6akVnR1N1aFFJREFRQUJBb0lCQVFEaWtOTnVuaG1JbmgwagowblNnTWpJbFFNWHVlMitYMW9QQlZuZmlxNk9COVh2OXpYRDhCdExkallqb3lUOEdVT3VCRGNvWUtvZEZOMWlECm8wWjZKeWhsTGJlOFBjZlFkRjdQN1FqTnY2VFBycTBsaGRnZnFLazQrTUNrVE1tM2hZOUdCZllESUx2c1IvdkMKSE5mdnpQYWd3NExacmN4M2pNK2QvL0FISEgwNWs2SXBqRnRPNHlZenJXdVZJcFNPeEl3M0RJUWd0RnNXLzJ4RApwZDgzWWh0SlZ1RFBXQmxIaVEzaVM3dlpmMVFOSkRvSjhGRXhKWjVWTGRIVlJ5TXJOYzV5M3dsRmc3MnlqVFAyCmE4dURxSi8wQmlRTWJyK0g2RmNsL0N4bVIrWFAvbXVmd2l1OEZjYml0c0J4dGNuVGpIZnBsSkZybVlwK1hVOEgKQmx3c3p0YU5Bb0dCQVAwa3AwbkZNUzlDU3VRL3hMQTZlbWM5ZkRHM2RqbDVXVzhjZmJYUUttZHUreFNtbzdGcwpIQWVCbi9heHZNM0NKTlBKRFA0SDBrUkJBbGprQTNabjNJamNVYkJqK1JoQXB2dUhXVGF1bzBWUEw0RklIZzU3ClpLRHhBZE5SWjU3YmpHeW5oVlQxdEFMNHEvWkxVTVBWYkpJZTRZMXc0Mi8wR3dLeFFVa2NPWU56QW9HQkFQUXMKdGdCbGZTWkRDd3VacGcvQ2F6eFNXb2plS0RPdVI2WDRjbEJIVkR5MkhHQk1XM085aFJ5d0pDbEUxZ0tuMFFESQpDSzEzWXBiNFBiTk50K2QwNSt2MTMxSTJWMWpWVTg2UnBqajJ6bjlBM3VCOE9SVTgzVHZHMW55NHJqMUdvaUpMCmVsT1plZmgvcXNZcEFzeDI3d2tNaysyNThPRXFOcldEcVRNYWZiZ25Bb0dCQUk4MnJtSUE2cnVXNExIVEZkNngKcHRCRHE4Q2d6NFRpajJOYUZoREhUVVlwTm1sUGdXcCtCRG1HNzAzczdpam1QbG1HOUErL3N3aWtVc1NoY3dnSQo2RzZSWHJIUlRYcVlFU0JhU1hHelNYR0x4QTk3RW00VkJ6QTZTVk1aU2V0SXdHQTBRaTEzdURpNklPZDlZcHI0CllxMGtSV3owd2VkempkaHZHY1ZYNzMzYkFvR0FiSjNyQkRnaE9NRUFDOVA0Zy9BblJia1ludU84SEdrOVkvNGwKMDhJM0haNmc5dEZncVJhNFBPKzUxa1hSc1hLM1RWS3VVWVBXN25OVTl3cnVjTjZYUUdhcVJlYjRhZ0xUZWdOZQpYdDZqTXdaSFhyTERyY2ZhWGZud2RhQ3RtWUp2SXpSU0lSZ1hvc3dmeW5CNTF6eGN6cml5b1VCaWY3Y0lpU3dkCk95ZGduMmNDZ1lFQTZveHQ1UGJsQUgyRVZLREt0YXkrekJuenRtbEw3YUY1K3dhenZNbFZjeFMzaHczQUZaTmcKZld3dDJDbk1KazlsaThuWDlpMmFSU2phMk5rVkU0aFlUczhkWkxieUtzSmpuZ1Y2WEVKanJUVkt3cVBZTDdOTAoxNmtGaUhXWjNtb1YybU4va28vL1E1alZ0dUQ2QlVHN2dGRGV6ajZ4UEpycmFDMGNCN3NUYU5ZPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  skip-cnp-status-startup-clean: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  policy-cidr-match-mode: ""
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"
  # If you want metrics enabled in cilium-operator, set the port for
  # which the Cilium Operator will have their metrics exposed.
  # NOTE that this will open the port on the nodes where Cilium operator pod
  # is scheduled.
  operator-prometheus-serve-addr: ":9963"
  enable-metrics: "true"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: c19
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "119"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  # Default case
  routing-mode: "tunnel"
  tunnel-protocol: "vxlan"
  service-no-backend-response: "reject"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-masquerade-to-route-source: "false"
  enable-wireguard: "true"
  wireguard-persistent-keepalive: "0s"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-local-redirect-policy: "false"

  kube-proxy-replacement: "false"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  enable-host-port: "false"
  enable-external-ips: "false"
  enable-node-port: "false"
  enable-health-check-nodeport: "true"
  enable-health-check-loadbalancer-ip: "false"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  bpf-lb-acceleration: "disabled"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  hubble-export-file-max-size-mb: "10"
  hubble-export-file-max-backups: "5"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  ipam-cilium-node-update-rate: "15s"
  cluster-pool-ipv4-cidr: "10.19.0.0/17"
  cluster-pool-ipv4-mask-size: "24"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "true"
  bgp-secrets-namespace: "kube-system"
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"

  k8s-client-qps: "5"
  k8s-client-burst: "10"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  # default DNS proxy to transparent mode in non-chaining modes
  dnsproxy-enable-transparent-mode: "true"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-xff-num-trusted-hops-ingress: "0"
  proxy-xff-num-trusted-hops-egress: "0"
  proxy-connect-timeout: "2"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"
  proxy-idle-timeout-seconds: "60"

  external-envoy-proxy: "false"
  max-connected-clusters: "255"

# Extra config allows adding arbitrary properties to the cilium config.
# By putting it at the end of the ConfigMap, it's also possible to override existing properties.
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: c19
    peer-service: "hubble-peer.kube-system.svc.cluster.local:443"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-hubble-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-hubble-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n\n        # Liveness probe\n        location /healthz {\n            access_log off;\n            add_header Content-Type text/plain;\n            return 200 'ok';\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumbgpnodeconfigs
  - ciliumbgpadvertisements
  - ciliumbgppeerconfigs
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  - ciliumbgpnodeconfigs/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumbgppeerconfigs
  - ciliumbgpadvertisements
  - ciliumbgpnodeconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumbgpclusterconfigs.cilium.io
  - ciliumbgppeerconfigs.cilium.io
  - ciliumbgpadvertisements.cilium.io
  - ciliumbgpnodeconfigs.cilium.io
  - ciliumbgpnodeconfigoverrides.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  - ciliumbgpclusterconfigs
  - ciliumbgpnodeconfigoverrides
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumendpoints
  - ciliumidentities
  verbs:
  - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumexternalworkloads/status
  - ciliumnodes
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumendpoints/status
  verbs:
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumexternalworkloads
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-bgp-control-plane-secrets
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: etcd-metrics
    port: 9963
    protocol: TCP
    targetPort: etcd-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: NodePort
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
    nodePort: 32379
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-agent: "unconfined"
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: "unconfined"
        container.apparmor.security.beta.kubernetes.io/mount-cgroup: "unconfined"
        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: "unconfined"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
          initialDelaySeconds: 5
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.memory
              divisor: '1'
        lifecycle:
          postStart:
            exec:
              command:
              - "bash"
              - "-c"
              - |
                    set -o errexit
                    set -o pipefail
                    set -o nounset
                    
                    # When running in AWS ENI mode, it's likely that 'aws-node' has
                    # had a chance to install SNAT iptables rules. These can result
                    # in dropped traffic, so we should attempt to remove them.
                    # We do it using a 'postStart' hook since this may need to run
                    # for nodes which might have already been init'ed but may still
                    # have dangling rules. This is safe because there are no
                    # dependencies on anything that is part of the startup script
                    # itself, and can be safely run multiple times per node (e.g. in
                    # case of a restart).
                    if [[ "$(iptables-save | grep -E -c 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN')" != "0" ]];
                    then
                        echo 'Deleting iptables rules created by the AWS CNI VPC plugin'
                        iptables-save | grep -E -v 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN' | iptables-restore
                    fi
                    echo 'Done!'
                    
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - CHOWN
              - KILL
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
              - DAC_OVERRIDE
              - FOWNER
              - SETGID
              - SETUID
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Unprivileged containers need to mount /proc/sys/net from the host
        # to have write access
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        # Unprivileged containers need to mount /proc/sys/kernel from the host
        # to have write access
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Unprivileged containers can't set mount propagation to bidirectional
          # in this case we will mount the bpf fs from an init container that
          # is privileged and set the mount propagation from host to container
          # in Cilium.
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-dbg
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      # Mount the bpf fs if it is not mounted. We will perform this task
      # from a privileged container because the mount propagation bidirectional
      # only works from privileged containers.
      - name: mount-bpf-fs
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        args:
        - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
        command:
        - /bin/bash
        - -c
        - --
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        - name: WRITE_CNI_CONF_WHEN_READY
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: write-cni-conf-when-ready
              optional: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
            drop:
              - ALL
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
      - name: host-proc-sys-net
        hostPath:
          path: /proc/sys/net
          type: Directory
      - name: host-proc-sys-kernel
        hostPath:
          path: /proc/sys/kernel
          type: Directory
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              - key: ca.crt
                path: client-ca.crt
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/port: "9963"
        prometheus.io/scrape: "true"
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.15.6@sha256:5789f0935eef96ad571e4f5565a8800d3a8fbb05265cf6909300cd82fd513c3d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        ports:
        - name: prometheus
          containerPort: 9963
          hostPort: 9963
          protocol: TCP
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      initContainers:
      - name: etcd-init
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - etcdinit
        # These need to match the equivalent arguments to etcd in the main container.
        - --etcd-cluster-name=clustermesh-apiserver
        - --etcd-initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --etcd-data-dir=/var/run/etcd
        env:
          # The Cilium cluster name (specified via the `CILIUM_CLUSTER_NAME` environment variable) and the etcd cluster
          # name (specified via the `--etcd-cluster-name` argument) are very different concepts. The Cilium cluster name
          # is the name of the overall Cilium cluster, and is used to set the admin account username. The etcd cluster
          # name is a concept that's only relevant for etcd itself. The etcd cluster name must be the same for both this
          # command and the actual invocation of etcd in the main containers of this Pod, but it's otherwise not
          # relevant to Cilium.
        - name: CILIUM_CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        # The clustermesh-apiserver container image includes an etcd binary.
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --auto-compaction-retention=1
        - --listen-metrics-urls=http://[$(HOSTNAME_IP)]:9963
        - --metrics=basic
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        - name: etcd-metrics
          containerPort: 9963
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - clustermesh
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt
        - etcd.config=/var/lib/cilium/etcd-config.yaml
        - --max-connected-clusters=255
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        - --controller-group-metrics=all
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: IDENTITY_ALLOCATION_MODE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: identity-allocation-mode
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        ports:
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir: {}
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "clustermesh-apiserver"
      serviceAccountName: "clustermesh-apiserver"
      terminationGracePeriodSeconds: 30
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: clustermesh-apiserver
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.15.6@sha256:a0863dd70d081b273b87b9b7ce7e2d3f99171c2f5e202cd57bc6691e51283e0c"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 3
          livenessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 3
          startupProbe:
            # give the relay one minute to start up
            grpc:
              port: 4222
            timeoutSeconds: 3
            failureThreshold: 20
            periodSeconds: 3
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          - name: tls
            mountPath: /var/lib/hubble-relay/tls
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Always
      priorityClassName: 
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 1001
        runAsGroup: 1001
        runAsUser: 1001
      priorityClassName: 
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.13.0@sha256:7d663dc16538dd6e29061abd1047013a645e6e69c115e008bee9ea9fef9a6666"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
        readinessProbe:
          httpGet:
            path: /
            port: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.13.0@sha256:1e7657d997c5a48253bb8dc91ecee75b63018d16ff5e5797e5af367336bc8803"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
