---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU9BQ24vODl5L3h0ckt6NlN0aHhJalF3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV5TkZvWERUSTJNVEV5TVRJeApOVFV5TkZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF4RW01VHhBZzR4ejhlN214MkIvSW1keENmY0lCbXB0VmdzYkJZWXB2WSt5Z1RDOTUKTE01bWRaYWhyVE5QMHRHYjlha2w1V3NQeUZWck9kbWRxa0FOMkFneUxYamFsQTVvMWNmbkF3Wk5BR20ra0U3Mwp4TnAvNjhVem12MU1OTlcrRkpCNGc3SWNTNHcxbmxDaC9FeHJGYnRZNmtUWEU5WFlBZzdSS3kzQ3MwajFIWWtsCkRmUTY5TVZ4M1J3K1RUWERNandiODVkc0VTd0x4TWtScGJYdTNEcFFDdjRXUE1jNUE0Vk9NM3V1Q3FWa0gxejMKWWRhbWN3QUsvVjFackNoaU9YTUtHMzZKZEI0dTFnRjJ4UjRCYnlmeFNjbWNtTk9BbitrNFpVT3pSZjNiQUp4RApMaUhWSkNhRnJUejJjSVYyLzk4SmhmZ0N2ZTVmT2lucFhZNzByUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGUHhOVk5mN0d3T21PSlpydFl6anc1RlNWUHlJTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQldLTXgrdnFuN0prOU9XWGluV0tDWFlML09kUktmVkIrTUlTYjNhcW1aRERqdVBDeGEzZjRICllVbWtUMWJRa25hQWdUbm5kbGNEdXdRMnFzd0FtU2hmTW1EK3dqL0svVFI5by80d0lNREZPU3REcnVFem92WkgKQWVTVUZMdHlQcWp2a1FXbkM5VzRuNHJieHhKZ1JKL1I4aHlRa25JcWR6VXlSWllqeEF3NTlZclQxTmFlT2VHMApKbjRiYm40ZklnWVhNajRxdTVGcm81dmNMQk9SWTIyZ2RwODBNU2Y1RFp6VmVTQlh2ZUFRSmc3MDJVUmpubkY5ClFNejNldjNnS0RZZysxVUgvbllJeEJ6RVUvRjh1RVRnTWl5a0Y0T2hSZTIzb0luNmtBMnlyQlZvb3BudzBxT3IKeDk5SDZCbno5SGRETnErMUlEeElVbjk4RTE5ZCtucncKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeEVtNVR4QWc0eHo4ZTdteDJCL0ltZHhDZmNJQm1wdFZnc2JCWVlwdlkreWdUQzk1CkxNNW1kWmFoclROUDB0R2I5YWtsNVdzUHlGVnJPZG1kcWtBTjJBZ3lMWGphbEE1bzFjZm5Bd1pOQUdtK2tFNzMKeE5wLzY4VXptdjFNTk5XK0ZKQjRnN0ljUzR3MW5sQ2gvRXhyRmJ0WTZrVFhFOVhZQWc3Ukt5M0NzMGoxSFlrbApEZlE2OU1WeDNSdytUVFhETWp3Yjg1ZHNFU3dMeE1rUnBiWHUzRHBRQ3Y0V1BNYzVBNFZPTTN1dUNxVmtIMXozCllkYW1jd0FLL1YxWnJDaGlPWE1LRzM2SmRCNHUxZ0YyeFI0QmJ5ZnhTY21jbU5PQW4razRaVU96UmYzYkFKeEQKTGlIVkpDYUZyVHoyY0lWMi85OEpoZmdDdmU1Zk9pbnBYWTcwclFJREFRQUJBb0lCQUZrclZLK0NHQzZVWUc2awpjUkpKZmd2SGI3MUpnUWtIUDlWbERUeU9jd1BsM3Z3OUpNTWlFSkdpbUZmaVU0VG1DLytSazlHZ3pVNm8zMGtzCmZ0OTBzZFZPQTkxOFpXK1ZEREx4MlJRYXJLaGZZVjZWUVNHQVVWUitCVytIV2pNMlZsOXBNaFpCdDNEcWhRRWkKaURQaFUxUlFBNWlKSlZ1eGJhdWhwNHdDQWMwSHI5N2M5TFpaRzFTejRzUG1GZml4a1Z5cHRCbE9jYTJOYTdweQpmdkRlc0ZqS1FqOUhtdll2UFpnSlFUbDhpajV0Q250UGU3Rnh6K1lSQW1uWWFQQlV4VjVZWVY0UHhBSjIxaWJKCnBGQWdRcExzMk9zRlBtQmkyY0ZFZEtUQ09pQ2dYSkhFano0OGxzMFBIaEhOQU1QV3hoRkQxelN4ZGo0b1FTSHEKci9QU2JGRUNnWUVBMTRTdjBFdnExNFE3YlZGaXRhVU5lSjlaQnFmUCs0Zmsrb3hubkFFYlIveHN4Rnp3c0RSaAo3YWtjQXErSTdBOHpZZ2gxYk5OQWM2SHBNS1pYcC9pVHhhbHhFZXB1ajNGWTVjRXdIUzA3S01GOVZzbkZQbG1xCmEyYTN1WGhsOHNyai9kS0YvbVA3bmpta3JVTGxQejd1VFlTSk80Zmx0ODI5aUMyV1hEOUtSd01DZ1lFQTZTaFcKTUFmR0IzUFpCdXUvWFdZV3pSVWwzd2VXT3I0dk9JQUtTcFlUVlI5WGk2cXFiUGNUZ1cyTGNDZ1pZcVllUDhwawp4L0dQMHV6ZlZlNFlFa2FJMVg1UVVydGpab0hNNGFSenMycktLWU5VMjlub0E4OFhoZThXakZ6MzVzV2x2TEZ1ClJyRVRzNE9VNkZVUGJpSE9xS09HdGIxVnR5Nkc1dG9lNytEYWJvOENnWUVBdTZIQWMyZDArTmNkNmVtK040aVEKTnVEOFlBZi8wZXdaRld6aDAzYy9LaWdCQmVBb2lDL0N4bWZCaERFUTB2dlU3MWVQN0FQcmpBQjloYVo4a0RlaApaNmhDVWFlNVE5Y1ozMFdYUHYrZkRyZU9DTjQzaERZS1llRVd1VG15QUhSVmxDa1NFVTA0eGlOSFZMVDE0MTlGCmwyVjVHTVFTNGpnVDk1aEEzT1VaSk1NQ2dZQk5HOFAxT256cGRneXVWMFVBZElUUjZrNk9CZ3BPL3hyS3lyMmMKa1Nsdm0xL3VsdENxSE1SY3A0ZlgzY3NYYnV6T0YvZGdrS2tLRHNDRndLcEJVUVpyNU14WHNCVmRqMHZjeS9CZgp3ODk4RHl6L1VIK0UwdlpxbXZtUURpY0dNUk53NWhVY1YrKzJES3d3Y2dFYVlSL2hjY05aVTNhSGtHR1k4MFlMCit3Y0NUUUtCZ0ZUSEYwblFtTy9VU0ludDZ2eUZVN2Q4dEtoQ25IQ3h2aXM4N1IyeWZGRmc2Ukt3cTJIVlNTT0YKYXR0a0ZodjZyRFBLUDJIVGVCdVI4Skwrcmdrbm54dVliZC9PQUlwQU8xU0RRdW1TQk00d3p6QjZPU3U4YU9nOAplckl4d0VjQ0s5NEtRV3k4aC9nbzR2YmdzWVhlb3VXYnRnREI4SWEvNUJ5dC9xcGphNkVKCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU9BQ24vODl5L3h0ckt6NlN0aHhJalF3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV5TkZvWERUSTJNVEV5TVRJeApOVFV5TkZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF4RW01VHhBZzR4ejhlN214MkIvSW1keENmY0lCbXB0VmdzYkJZWXB2WSt5Z1RDOTUKTE01bWRaYWhyVE5QMHRHYjlha2w1V3NQeUZWck9kbWRxa0FOMkFneUxYamFsQTVvMWNmbkF3Wk5BR20ra0U3Mwp4TnAvNjhVem12MU1OTlcrRkpCNGc3SWNTNHcxbmxDaC9FeHJGYnRZNmtUWEU5WFlBZzdSS3kzQ3MwajFIWWtsCkRmUTY5TVZ4M1J3K1RUWERNandiODVkc0VTd0x4TWtScGJYdTNEcFFDdjRXUE1jNUE0Vk9NM3V1Q3FWa0gxejMKWWRhbWN3QUsvVjFackNoaU9YTUtHMzZKZEI0dTFnRjJ4UjRCYnlmeFNjbWNtTk9BbitrNFpVT3pSZjNiQUp4RApMaUhWSkNhRnJUejJjSVYyLzk4SmhmZ0N2ZTVmT2lucFhZNzByUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGUHhOVk5mN0d3T21PSlpydFl6anc1RlNWUHlJTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQldLTXgrdnFuN0prOU9XWGluV0tDWFlML09kUktmVkIrTUlTYjNhcW1aRERqdVBDeGEzZjRICllVbWtUMWJRa25hQWdUbm5kbGNEdXdRMnFzd0FtU2hmTW1EK3dqL0svVFI5by80d0lNREZPU3REcnVFem92WkgKQWVTVUZMdHlQcWp2a1FXbkM5VzRuNHJieHhKZ1JKL1I4aHlRa25JcWR6VXlSWllqeEF3NTlZclQxTmFlT2VHMApKbjRiYm40ZklnWVhNajRxdTVGcm81dmNMQk9SWTIyZ2RwODBNU2Y1RFp6VmVTQlh2ZUFRSmc3MDJVUmpubkY5ClFNejNldjNnS0RZZysxVUgvbllJeEJ6RVUvRjh1RVRnTWl5a0Y0T2hSZTIzb0luNmtBMnlyQlZvb3BudzBxT3IKeDk5SDZCbno5SGRETnErMUlEeElVbjk4RTE5ZCtucncKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLVENDQWhHZ0F3SUJBZ0lSQU04MGNsdkFoRHFmRlFxWlo5ODl4ZDR3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV5TlZvWERUSTJNVEV5TVRJeApOVFV5TlZvd0ZERVNNQkFHQTFVRUF4TUpZV1J0YVc0dFl6RTVNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUEvcmF4RWhSYTQ1czlJSXZXRldEV0NscG93TlFCbzNINFVqbUFFaVRKQmdlUTN6eVYKaFBJejJpZ1JXZFQzQk5ZOEZYWVNDeCtOVEYwKzVYdCtyM09yMS9Dc1U2Q1EzckJSM1lwQVprMjhsMXlYYmd2bgpzWkw2YmVIUmU5YzdzZEs0SlJ4a3RsK0NIck9TR1BMZjZ5VW1melZrSFBvNHJrS0lXeHJSYXJpQlhZd1gwZjJwClhneFBrdkNZNkxNd3NaY05ia2RIeXBtQkRwdk16U2xoYjVCRW05RFhWUzYvY24rVDh1L0VWNVBTcGxieFk3b3UKV3hSQTlOZGU2V2ZaNGVGNnlFa0NHTk5yTFdLSWJKTWh0NUdVbHgrWUpQaE13OGNLbmVsSW1yeUdPbUhQNVVvZQp1bHFFc0tvV0ZzOFV2NEhBNVJsd3R4N1JyM3RwaGlSaHNsdDhld0lEQVFBQm8zWXdkREFPQmdOVkhROEJBZjhFCkJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUMKTUFBd0h3WURWUjBqQkJnd0ZvQVUvRTFVMS9zYkE2WTRsbXUxak9QRGtWSlUvSWd3RkFZRFZSMFJCQTB3QzRJSgpiRzlqWVd4b2IzTjBNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFiaGJ3NjhnVGRXVjF4eFU2QmJnV2VOby95Cm5ZVFJmbG9NUnVvZ2lXUzhOZ0V4emRaWEhDbHBzNmhGR3hxNUdoRFlKQno2dWpoYjIvR1dMTytWVjlubjFJU3kKVjBzdzVBOXhqZ0N6RXdBTnVtQWVrRzMzbGZzZGY4NVNrSURrTzJEanpxdWtON3NOOVNYTUdEeVBUU1dXekVjbgpFRHBzU0Exb2x1V1gyd0RZZFpMNEhYcVF1QmthaWhNclFyYzFDY3R2L2tCTFB2cGhONHRhRXNCOUMwbHpDTFFNCjdhLzMzaDlBQjR5M284L2xyN3lNSXQ5a2VoR1I3UHBsdE1lTEl6eXNOanphMm9rWkVXOWRJMWRWRzFUT2NKVisKRDJVczBBYUZYWGV5YzA4Sm5Jc2t3MDFSWDlwQkwwUmh5bXQ3YnVyQUtHd0pqdFBjWWhrVm5ScS9mV2dMCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBL3JheEVoUmE0NXM5SUl2V0ZXRFdDbHBvd05RQm8zSDRVam1BRWlUSkJnZVEzenlWCmhQSXoyaWdSV2RUM0JOWThGWFlTQ3grTlRGMCs1WHQrcjNPcjEvQ3NVNkNRM3JCUjNZcEFaazI4bDF5WGJndm4Kc1pMNmJlSFJlOWM3c2RLNEpSeGt0bCtDSHJPU0dQTGY2eVVtZnpWa0hQbzRya0tJV3hyUmFyaUJYWXdYMGYycApYZ3hQa3ZDWTZMTXdzWmNOYmtkSHlwbUJEcHZNelNsaGI1QkVtOURYVlM2L2NuK1Q4dS9FVjVQU3BsYnhZN291Cld4UkE5TmRlNldmWjRlRjZ5RWtDR05OckxXS0liSk1odDVHVWx4K1lKUGhNdzhjS25lbEltcnlHT21IUDVVb2UKdWxxRXNLb1dGczhVdjRIQTVSbHd0eDdScjN0cGhpUmhzbHQ4ZXdJREFRQUJBb0lCQVFDWjJYMlF2d3k3Qjh4ZgpPVGVCU0RGZ3BZVTZXNVAxeG1SSVBnVDJjSk9mZWJodXJtaGRtZkhwNW1POGo5NzRZL0o4d0FsY0FKM1hMMGRMClUxR001bUE0bVYxdFVjSFBVRTdTY3F3OVh0ejN5K3lIZ3RkYXNiMWoyNDh0cnk2V1ZRSDNJSFJRbDlXL2Q1VmEKVG5FajFoZXZwRzhvOVphQTR4ejdjbkpsZExabTZvQUo3N3NmRXJqbStWMk8wU2dLSWNtbnRmSmlmNVhKNU9YVQpVa1pqdjNrcEhNODZoREZMK1J3Q2U5TzFzYzJOd2tVRmlBR2xzYkZETW13Q2lHTWFqOVA3S1p3c2JuS2dHOUVBCmM0dkpCbGxTR2hJakpGNVBQejBmVUpRanl4YWt0RUtZZ0RwY2tRbGZZSmtTcVE3SEcxbVl4Nzc5M1pjeXIvMncKdDhjRVZlSEJBb0dCQVA4bVZPM3lCVVlRWVFuME1GdTFZODRnRVBwSTRIYkE1SmQxNEJOUHJvcXQzSGRqcnp0VApDTW1lRFJGbFZMTkRmeHowRGFZc0tOd3lvcnJmRTJVSG1NWWlIWTZJVmdNbEMrWlZyY0tNSCtHNDB3b3lyc3htCktCZ04wYjFFRGxwTjVzNi95VWdGRGxpODMxNVBOQVdmdjQyU3ZITGRxU2ZKMDYwQ3BCRWg2dTViQW9HQkFQK1AKL09hbjRhaFJaeFBTQjhWQlhFVDYrN0RibS9NTGVBQXhaUnZ0UWhsN3lOLzRhS0ZZdlk5VnU5bVR6RHVvR0FsZApQaGViSTBBTHJpdExJbFVVaFVreEg5am5UbjVpdnR6VnRlaUFVdXRvUWxKdHFjRTRZVHJJcDdaYTlja09YbUs1ClBSOWtxY2lHUlpPdHY5ajVWOTBxamxtV2RPME9XNTlvTzZFZnhVUmhBb0dBTms5MGVJbXhzYTQrMloyT3haYWcKdmZsNVk2MHJpbHVZek55Y2E3L2tTVVNrend6NitjZTg4UjJoYm5pQlJQOHpDWGl4aHhPVFJ2dklRN3JFS0JjcgozOURYTmNXemVVdmpjbzMrUkpFTElFTDFPUkI4d0tsbUUyaXRvbm5nRER6VXltRnNlTllLcmJ6V1Z2N0k5Z0dCCkJxT2JWVi8xWjdEQVMrMXArdk9iVEUwQ2dZRUFoZERUVDhOZ09VNUdkdTVtK3paNkpmUjFqZW13QXRkaWdsZGEKNWdDWnQ5WkZIR0ZxQi9IN2IrNG9hb2tsUzZkOHpvcHdWTlA2NVRJNGhKclc0MDNYYkxlNFFVNzhudGo5cjR5SApyN0podUxuaTRGNWpvTFR3MUdMMHpsdGFqMmhpcTdicTltRXpOYmg0L2hiZ2ViQTEvYXltMU9vZlYzRkpNSExYCnBrcUlkSUVDZ1lCNS9GL1ZKeUY4a3Arb25XcWcxeDIza25aUzBBREJEQzJxSHQwK3pGNzk4U1RZbFFKZG5VWEQKM214cEVpRks0cWpESCt6SmxKQlJzcUdLYUNtK2FraytiWnhxUHJ6eFo3L0Z2dzVLMWpGYzVyYjRldk9LdjJwMQo0THhqbTJzaGo4citJcmpWMzk0WHNPSWd6VittblJ1dFNzM1FZb2x5cmJuZWw2WGJseWUxblE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-ca-cert
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU9BQ24vODl5L3h0ckt6NlN0aHhJalF3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV5TkZvWERUSTJNVEV5TVRJeApOVFV5TkZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF4RW01VHhBZzR4ejhlN214MkIvSW1keENmY0lCbXB0VmdzYkJZWXB2WSt5Z1RDOTUKTE01bWRaYWhyVE5QMHRHYjlha2w1V3NQeUZWck9kbWRxa0FOMkFneUxYamFsQTVvMWNmbkF3Wk5BR20ra0U3Mwp4TnAvNjhVem12MU1OTlcrRkpCNGc3SWNTNHcxbmxDaC9FeHJGYnRZNmtUWEU5WFlBZzdSS3kzQ3MwajFIWWtsCkRmUTY5TVZ4M1J3K1RUWERNandiODVkc0VTd0x4TWtScGJYdTNEcFFDdjRXUE1jNUE0Vk9NM3V1Q3FWa0gxejMKWWRhbWN3QUsvVjFackNoaU9YTUtHMzZKZEI0dTFnRjJ4UjRCYnlmeFNjbWNtTk9BbitrNFpVT3pSZjNiQUp4RApMaUhWSkNhRnJUejJjSVYyLzk4SmhmZ0N2ZTVmT2lucFhZNzByUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGUHhOVk5mN0d3T21PSlpydFl6anc1RlNWUHlJTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQldLTXgrdnFuN0prOU9XWGluV0tDWFlML09kUktmVkIrTUlTYjNhcW1aRERqdVBDeGEzZjRICllVbWtUMWJRa25hQWdUbm5kbGNEdXdRMnFzd0FtU2hmTW1EK3dqL0svVFI5by80d0lNREZPU3REcnVFem92WkgKQWVTVUZMdHlQcWp2a1FXbkM5VzRuNHJieHhKZ1JKL1I4aHlRa25JcWR6VXlSWllqeEF3NTlZclQxTmFlT2VHMApKbjRiYm40ZklnWVhNajRxdTVGcm81dmNMQk9SWTIyZ2RwODBNU2Y1RFp6VmVTQlh2ZUFRSmc3MDJVUmpubkY5ClFNejNldjNnS0RZZysxVUgvbllJeEJ6RVUvRjh1RVRnTWl5a0Y0T2hSZTIzb0luNmtBMnlyQlZvb3BudzBxT3IKeDk5SDZCbno5SGRETnErMUlEeElVbjk4RTE5ZCtucncKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeEVtNVR4QWc0eHo4ZTdteDJCL0ltZHhDZmNJQm1wdFZnc2JCWVlwdlkreWdUQzk1CkxNNW1kWmFoclROUDB0R2I5YWtsNVdzUHlGVnJPZG1kcWtBTjJBZ3lMWGphbEE1bzFjZm5Bd1pOQUdtK2tFNzMKeE5wLzY4VXptdjFNTk5XK0ZKQjRnN0ljUzR3MW5sQ2gvRXhyRmJ0WTZrVFhFOVhZQWc3Ukt5M0NzMGoxSFlrbApEZlE2OU1WeDNSdytUVFhETWp3Yjg1ZHNFU3dMeE1rUnBiWHUzRHBRQ3Y0V1BNYzVBNFZPTTN1dUNxVmtIMXozCllkYW1jd0FLL1YxWnJDaGlPWE1LRzM2SmRCNHUxZ0YyeFI0QmJ5ZnhTY21jbU5PQW4razRaVU96UmYzYkFKeEQKTGlIVkpDYUZyVHoyY0lWMi85OEpoZmdDdmU1Zk9pbnBYWTcwclFJREFRQUJBb0lCQUZrclZLK0NHQzZVWUc2awpjUkpKZmd2SGI3MUpnUWtIUDlWbERUeU9jd1BsM3Z3OUpNTWlFSkdpbUZmaVU0VG1DLytSazlHZ3pVNm8zMGtzCmZ0OTBzZFZPQTkxOFpXK1ZEREx4MlJRYXJLaGZZVjZWUVNHQVVWUitCVytIV2pNMlZsOXBNaFpCdDNEcWhRRWkKaURQaFUxUlFBNWlKSlZ1eGJhdWhwNHdDQWMwSHI5N2M5TFpaRzFTejRzUG1GZml4a1Z5cHRCbE9jYTJOYTdweQpmdkRlc0ZqS1FqOUhtdll2UFpnSlFUbDhpajV0Q250UGU3Rnh6K1lSQW1uWWFQQlV4VjVZWVY0UHhBSjIxaWJKCnBGQWdRcExzMk9zRlBtQmkyY0ZFZEtUQ09pQ2dYSkhFano0OGxzMFBIaEhOQU1QV3hoRkQxelN4ZGo0b1FTSHEKci9QU2JGRUNnWUVBMTRTdjBFdnExNFE3YlZGaXRhVU5lSjlaQnFmUCs0Zmsrb3hubkFFYlIveHN4Rnp3c0RSaAo3YWtjQXErSTdBOHpZZ2gxYk5OQWM2SHBNS1pYcC9pVHhhbHhFZXB1ajNGWTVjRXdIUzA3S01GOVZzbkZQbG1xCmEyYTN1WGhsOHNyai9kS0YvbVA3bmpta3JVTGxQejd1VFlTSk80Zmx0ODI5aUMyV1hEOUtSd01DZ1lFQTZTaFcKTUFmR0IzUFpCdXUvWFdZV3pSVWwzd2VXT3I0dk9JQUtTcFlUVlI5WGk2cXFiUGNUZ1cyTGNDZ1pZcVllUDhwawp4L0dQMHV6ZlZlNFlFa2FJMVg1UVVydGpab0hNNGFSenMycktLWU5VMjlub0E4OFhoZThXakZ6MzVzV2x2TEZ1ClJyRVRzNE9VNkZVUGJpSE9xS09HdGIxVnR5Nkc1dG9lNytEYWJvOENnWUVBdTZIQWMyZDArTmNkNmVtK040aVEKTnVEOFlBZi8wZXdaRld6aDAzYy9LaWdCQmVBb2lDL0N4bWZCaERFUTB2dlU3MWVQN0FQcmpBQjloYVo4a0RlaApaNmhDVWFlNVE5Y1ozMFdYUHYrZkRyZU9DTjQzaERZS1llRVd1VG15QUhSVmxDa1NFVTA0eGlOSFZMVDE0MTlGCmwyVjVHTVFTNGpnVDk1aEEzT1VaSk1NQ2dZQk5HOFAxT256cGRneXVWMFVBZElUUjZrNk9CZ3BPL3hyS3lyMmMKa1Nsdm0xL3VsdENxSE1SY3A0ZlgzY3NYYnV6T0YvZGdrS2tLRHNDRndLcEJVUVpyNU14WHNCVmRqMHZjeS9CZgp3ODk4RHl6L1VIK0UwdlpxbXZtUURpY0dNUk53NWhVY1YrKzJES3d3Y2dFYVlSL2hjY05aVTNhSGtHR1k4MFlMCit3Y0NUUUtCZ0ZUSEYwblFtTy9VU0ludDZ2eUZVN2Q4dEtoQ25IQ3h2aXM4N1IyeWZGRmc2Ukt3cTJIVlNTT0YKYXR0a0ZodjZyRFBLUDJIVGVCdVI4Skwrcmdrbm54dVliZC9PQUlwQU8xU0RRdW1TQk00d3p6QjZPU3U4YU9nOAplckl4d0VjQ0s5NEtRV3k4aC9nbzR2YmdzWVhlb3VXYnRnREI4SWEvNUJ5dC9xcGphNkVKCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU9BQ24vODl5L3h0ckt6NlN0aHhJalF3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV5TkZvWERUSTJNVEV5TVRJeApOVFV5TkZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF4RW01VHhBZzR4ejhlN214MkIvSW1keENmY0lCbXB0VmdzYkJZWXB2WSt5Z1RDOTUKTE01bWRaYWhyVE5QMHRHYjlha2w1V3NQeUZWck9kbWRxa0FOMkFneUxYamFsQTVvMWNmbkF3Wk5BR20ra0U3Mwp4TnAvNjhVem12MU1OTlcrRkpCNGc3SWNTNHcxbmxDaC9FeHJGYnRZNmtUWEU5WFlBZzdSS3kzQ3MwajFIWWtsCkRmUTY5TVZ4M1J3K1RUWERNandiODVkc0VTd0x4TWtScGJYdTNEcFFDdjRXUE1jNUE0Vk9NM3V1Q3FWa0gxejMKWWRhbWN3QUsvVjFackNoaU9YTUtHMzZKZEI0dTFnRjJ4UjRCYnlmeFNjbWNtTk9BbitrNFpVT3pSZjNiQUp4RApMaUhWSkNhRnJUejJjSVYyLzk4SmhmZ0N2ZTVmT2lucFhZNzByUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGUHhOVk5mN0d3T21PSlpydFl6anc1RlNWUHlJTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQldLTXgrdnFuN0prOU9XWGluV0tDWFlML09kUktmVkIrTUlTYjNhcW1aRERqdVBDeGEzZjRICllVbWtUMWJRa25hQWdUbm5kbGNEdXdRMnFzd0FtU2hmTW1EK3dqL0svVFI5by80d0lNREZPU3REcnVFem92WkgKQWVTVUZMdHlQcWp2a1FXbkM5VzRuNHJieHhKZ1JKL1I4aHlRa25JcWR6VXlSWllqeEF3NTlZclQxTmFlT2VHMApKbjRiYm40ZklnWVhNajRxdTVGcm81dmNMQk9SWTIyZ2RwODBNU2Y1RFp6VmVTQlh2ZUFRSmc3MDJVUmpubkY5ClFNejNldjNnS0RZZysxVUgvbllJeEJ6RVUvRjh1RVRnTWl5a0Y0T2hSZTIzb0luNmtBMnlyQlZvb3BudzBxT3IKeDk5SDZCbno5SGRETnErMUlEeElVbjk4RTE5ZCtucncKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lSQUlXUUpXemxZTlVObXpwazNmYnMyZkl3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV5TlZvWERUSTJNVEV5TVRJeApOVFV5TlZvd0VURVBNQTBHQTFVRUF4TUdjbVZ0YjNSbE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBCk1JSUJDZ0tDQVFFQXVNN25lb3BmTDFLVC8xaXBxemxyNXhjN2thWXgvc0ZNbS9FN1V4R3lKMklRRVhNZ1BROW4KVkxWZm1UdnM5RlA2SHE0QzE4bUpxbFpsV2gycGJEKzE0VWl2dkNOdk0xWm82MlVnU2pTaU5NcjNwVWhvN3MyMwprNFhDK3htOHo1WTdsOUM4Zk1ydWlDYlBWdnY3NjZ6NW9MMUVmQ3Y4SkhSMFBrVStRVVlsQzR4TWgrUGFjcHVCCkNFMDB2YlhKMzFQbnFyaVZPU0Vycks1R052VHFXckxwbThoNTAvSmV6MzdDRVlOWDNnRTl4b1EzalBveVIyU1oKeFNuYmNZR2g5eWYzTnhDd3lHZHd3bFljenpRd1ozVzZNR3hZbEN6bWY4RUVSQm1maTJGbHN4Q2tadEcvWHczbgpDSkhmbmU3VWsxQnFJeHZGMVpRWG5KSzJLd2RXMk42Rkt3SURBUUFCbzJBd1hqQU9CZ05WSFE4QkFmOEVCQU1DCkJhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXcKSHdZRFZSMGpCQmd3Rm9BVS9FMVUxL3NiQTZZNGxtdTFqT1BEa1ZKVS9JZ3dEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUFuSmdGMUZ4dkxjODZWeWxmNDRIR3NPNytYQ0tJd3U1anZYN1RVOVhKY1hEazhOWjQ3WmN3YVZZYzBhCnVvWmZwUWpkbzBLV2c5b0Fpc3g4aHowRTg0ck9MbUhNU0xKOHU3U0VORFExTVVBeitlZVBGTkdlQSs2Slo5WG8KVFRCcWNDYlg4SHlHYkpsREFhWURPRmtiQkU5VkdqaGxGTkFuSGdzSnFKQWNxUW1RTkNjMlR4dFBSSE9VdzZmVgphTlVaWTNtMHcxYkZ3ckgrV25BVWVvVGJHZ2JqZGNyeHlDT2V3eXhBclJkKzRGd0l6eTlZTVhDR1FMVFNuNll2Ck1UblZUcS8rdU9MdlJCaGlvSndkTHNKbXB3RVNOWS9QUHhWWEtraWxUQTdvdXhVWGFuMldoTGhNOXMydkZBaUUKb2hwclhHdjBDZzJEeEJrUWpPbjh1REVhcnFjPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdU03bmVvcGZMMUtULzFpcHF6bHI1eGM3a2FZeC9zRk1tL0U3VXhHeUoySVFFWE1nClBROW5WTFZmbVR2czlGUDZIcTRDMThtSnFsWmxXaDJwYkQrMTRVaXZ2Q052TTFabzYyVWdTalNpTk1yM3BVaG8KN3MyM2s0WEMreG04ejVZN2w5QzhmTXJ1aUNiUFZ2djc2Nno1b0wxRWZDdjhKSFIwUGtVK1FVWWxDNHhNaCtQYQpjcHVCQ0UwMHZiWEozMVBucXJpVk9TRXJySzVHTnZUcVdyTHBtOGg1MC9KZXozN0NFWU5YM2dFOXhvUTNqUG95ClIyU1p4U25iY1lHaDl5ZjNOeEN3eUdkd3dsWWN6elF3WjNXNk1HeFlsQ3ptZjhFRVJCbWZpMkZsc3hDa1p0Ry8KWHczbkNKSGZuZTdVazFCcUl4dkYxWlFYbkpLMkt3ZFcyTjZGS3dJREFRQUJBb0lCQUQvR1p1dEt4UDQzcVFyOQpOYy80eU51K2tMZjZlbFpIcm9CQ0J3N3JsR2N5MkFpdGlmcUlUa2hWTHVCYVpiTUxKODFlajJ5WUNBSFlQckdTCmV0ejRQM08yK2E0YkxFeXpEUkh1bSszL3E5bzhFS25oQ3hVZHVMUVgvT2xhUUdZQ21oNFIwbm5lTGVLZVFmN3EKaGswV0xDN2tJYllZRjdNYzNPQ0FWTE9CMlZiYVJUTHJSMjQ3c1lKZFRwTnFXYWV1OUd6T1JQS1hhQ2Q3dGRTVApyL0JpeU43NkFKRmV5cjJQS25LeStsVXNxVGZ1dlVWNjRIMGw2UEI3UGVSKzVXUjlzeERUK3JnZ283YVJwTHhwCjZ2UEZoK1NXbHMzREExMHIvTzltdnFIZSs4dE1TZUFrNC8yRENPREJTRGwyK3Uyd0s3WXRGMUk4eFZsL2pzeWgKYThHOFlRRUNnWUVBeXZEZml4ZWtyQ3lOQ083SGtXTHdzd21jY0pQQlQ2bnV5bWZtVlhqSkwwUFpkSTdRcHFLTgpuTVltRnFPVXhwMDFwbEs0VCt0alE0TlZoVjhlbVZ6LzlQRnZWUHB3dTY2dHkvbzUwd3JkRFRwSWliVGhHcmlECkVtRWtkdzF2Z0VPQkJkOGp6YjZlMXdsQkJHbGVNRnJyOUV1emFiVmQxRWFuUUJwbW9DZmVaZHNDZ1lFQTZTQmkKUjZRWStVaWNrbjFybFJuYlBFaXlpU2NYU3lKOU9qNVZFclZVTk85OXBvTE9valkvWXF0NC81TG9YUWVIdlVlLwptUm1PUTBJOElZMTg2VHRQVUo1NTFoa3RXL3F4c2pOeFJXUUVOc05EMDRncFNCdlQrS1BNaFdVUnRTVGFGbmMyClhTM2tjTUlUY3RxK08wM28xaDdZeEhRRkdKenpQdDZNVlpTUWh2RUNnWUFUZ2l3N0ZyN0J2bGFnY1RQR0NoalIKWFM4b3MwdDErUVAzZVIxdlFmazFEZlN0ZTcwYkI2MU5VTThBaGlFYkpxbXRuMjRRWUxSZUhSWHZpRUZNeE4vbQpELzkvejhOZWgyQTFwNHcvZVYvZWthZS9kUi9lamJZcjRpSzdQeE5rNVJoV0ZDbEE4ZjRhOWN6R084ck9JeTlqCmdKTnlxZmluRzFPZ21la2JwRG1BMlFLQmdGZWMraEtlazF3c2M5dUNFMHFIMnlMKzEwcEFUTHJLRFhJME50aS8KR1JTRDVSOE5EZ2RjaDluWFE3UVpUQWFhYStNdzhjcmlGZHNsSzJBWXdwY00yVFFkT3dEQm1aQjEyUTUxMHQ0WApScFltTUhseE5NS0s0dEVSRGk0YjI5bk9MY0Evc1VpM2xLRGo3MWM4NmoxemZFdnNiOTcxRTIwNm54aERuMDRTCmRYYWhBb0dCQUpzdmZuWW9RSkdFbFdLWTgrTE1rZHZLTHoyUXA4V0E2ZlBGSzdaSFpzQXpjU1doTFdiUDVudjEKSklESC9ydjM3YmxiUyt5bldJbjBjRkJsMlpQeFVZTVRjazJoVzh4UUxLVFRIWmw3UWZ5Sm0wVGN5cEFlSjcwagpwZkNWeW9kajBUWTYrY2RrdVkrZGVMQVMyRGxzUFJBTGdGdGhkMi9WdU1YdnpaV1dhZ1dmCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU9BQ24vODl5L3h0ckt6NlN0aHhJalF3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV5TkZvWERUSTJNVEV5TVRJeApOVFV5TkZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF4RW01VHhBZzR4ejhlN214MkIvSW1keENmY0lCbXB0VmdzYkJZWXB2WSt5Z1RDOTUKTE01bWRaYWhyVE5QMHRHYjlha2w1V3NQeUZWck9kbWRxa0FOMkFneUxYamFsQTVvMWNmbkF3Wk5BR20ra0U3Mwp4TnAvNjhVem12MU1OTlcrRkpCNGc3SWNTNHcxbmxDaC9FeHJGYnRZNmtUWEU5WFlBZzdSS3kzQ3MwajFIWWtsCkRmUTY5TVZ4M1J3K1RUWERNandiODVkc0VTd0x4TWtScGJYdTNEcFFDdjRXUE1jNUE0Vk9NM3V1Q3FWa0gxejMKWWRhbWN3QUsvVjFackNoaU9YTUtHMzZKZEI0dTFnRjJ4UjRCYnlmeFNjbWNtTk9BbitrNFpVT3pSZjNiQUp4RApMaUhWSkNhRnJUejJjSVYyLzk4SmhmZ0N2ZTVmT2lucFhZNzByUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGUHhOVk5mN0d3T21PSlpydFl6anc1RlNWUHlJTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQldLTXgrdnFuN0prOU9XWGluV0tDWFlML09kUktmVkIrTUlTYjNhcW1aRERqdVBDeGEzZjRICllVbWtUMWJRa25hQWdUbm5kbGNEdXdRMnFzd0FtU2hmTW1EK3dqL0svVFI5by80d0lNREZPU3REcnVFem92WkgKQWVTVUZMdHlQcWp2a1FXbkM5VzRuNHJieHhKZ1JKL1I4aHlRa25JcWR6VXlSWllqeEF3NTlZclQxTmFlT2VHMApKbjRiYm40ZklnWVhNajRxdTVGcm81dmNMQk9SWTIyZ2RwODBNU2Y1RFp6VmVTQlh2ZUFRSmc3MDJVUmpubkY5ClFNejNldjNnS0RZZysxVUgvbllJeEJ6RVUvRjh1RVRnTWl5a0Y0T2hSZTIzb0luNmtBMnlyQlZvb3BudzBxT3IKeDk5SDZCbno5SGRETnErMUlEeElVbjk4RTE5ZCtucncKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURxRENDQXBDZ0F3SUJBZ0lSQUlCUWpPWjV4Q3NSRkJmVkJWL21UTll3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV5TlZvWERUSTJNVEV5TVRJeApOVFV5TlZvd0tqRW9NQ1lHQTFVRUF4TWZZMngxYzNSbGNtMWxjMmd0WVhCcGMyVnlkbVZ5TG1OcGJHbDFiUzVwCmJ6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU5HYXlqeG1IbFpNRC9OWTdKUjIKZkRDemRGRlh2ZXJLUGVUTVlVbUlSeERDUSsvdm1hZVJPUnVJbWlsWUQxNERvS1dNUFlzTFl4Y1V4c1AyQ1dnZgpnQjVURWRKY05YZmw2bXA1NDQ2dGhHZjNaZHZjYXdwaTRYUW15TDlBdmVJSlhqWU50S3VDUnZGVndmR0ZxM1NYCnh5cW80Yzc3bWUwdU4vZkFRWXZLMy9Pc3hUaE1oUkRONjhRdTZnRWdRK0hkUnU3Ni9sbWtCSmVsTWlESzBrZVkKR0JBanlpUzlXby9STThhcVY5clNSZ0kvT0dPa1luK1dBc0lZaGlpcEprSEhzblRBUEZTUHlVRkRlZ0lzUWxXYgpqTHUyMHdLMmxMOTN1V01pemZGVG5SN3I2UVlRcWIyK3lENHR3eGpIdTFGYXNxTkhxWXNJQnZSWTlpZWNNeXFUClJlc0NBd0VBQWFPQjNqQ0IyekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUgKQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3SHdZRFZSMGpCQmd3Rm9BVS9FMVUxL3NiQTZZNApsbXUxak9QRGtWSlUvSWd3ZXdZRFZSMFJCSFF3Y29JZlkyeDFjM1JsY20xbGMyZ3RZWEJwYzJWeWRtVnlMbU5wCmJHbDFiUzVwYjRJUUtpNXRaWE5vTG1OcGJHbDFiUzVwYjRJbFkyeDFjM1JsY20xbGMyZ3RZWEJwYzJWeWRtVnkKTG10MVltVXRjM2x6ZEdWdExuTjJZNGNFZndBQUFZY1FBQUFBQUFBQUFBQUFBQUFBQUFBQUFUQU5CZ2txaGtpRwo5dzBCQVFzRkFBT0NBUUVBTTdHZkFrVkZ3SzFFa3Q2ckw4ZG1DdmUxeHBiVGpHVkxwQlVlT3QwUVMybSt3WVkxCmpjaHRtSWRQNXBjZzJqTDI2UHVZTVNsbVdwMW1DdndRbkJhbmJmZHc5eUhYNGV4WjZTdUZ4d2dlU3JiRFgrU3oKTnBvRlVWcFNpbXBhZTJ0QzVJMEtVWVBUdUQwdDB2Q1Rzdm5hTFJTZ2EwTUJ1QS85UkxXZkNLL0NEQ2hxYXcrMQpnTGFoTWF3anRjUXF6SWZZYUgzSUVBZkNtZkk3MFc2a1lxdGJxbXF1WXFrODlhU3pOWEo5VnF1UWVsbFZlRHZPClZUKzh2S1IxV2UyTy9xc2psbU1xOXNFUjhCUXRmYm84U01Sc2U3dXBnMnZsbVdYaUNoczF4UkRnU1oxbFZlSzgKKzJMdjBiZ1lDSmlUc0VZS3kxV3E2L1FWSkxWMm1tcnFlNnp3NXc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBMFpyS1BHWWVWa3dQODFqc2xIWjhNTE4wVVZlOTZzbzk1TXhoU1loSEVNSkQ3KytaCnA1RTVHNGlhS1ZnUFhnT2dwWXc5aXd0akZ4VEd3L1lKYUIrQUhsTVIwbHcxZCtYcWFubmpqcTJFWi9kbDI5eHIKQ21MaGRDYkl2MEM5NGdsZU5nMjBxNEpHOFZYQjhZV3JkSmZIS3FqaHp2dVo3UzQzOThCQmk4cmY4NnpGT0V5RgpFTTNyeEM3cUFTQkQ0ZDFHN3ZyK1dhUUVsNlV5SU1yU1I1Z1lFQ1BLSkwxYWo5RXp4cXBYMnRKR0FqODRZNlJpCmY1WUN3aGlHS0trbVFjZXlkTUE4VkkvSlFVTjZBaXhDVlp1TXU3YlRBcmFVdjNlNVl5TE44Vk9kSHV2cEJoQ3AKdmI3SVBpM0RHTWU3VVZxeW8wZXBpd2dHOUZqMko1d3pLcE5GNndJREFRQUJBb0lCQUExVHdUNGI1QnZxbEMwTgozMlVGTDVwTkhyMDVUZnNLeHVxd1VCTkQxZmpyMFRRRlVRakZoQk1MR1hvOWZpU2xLR2ErUnY5N1J0NmwxSW1MCk1FZnRrTkRjeVVwTjBKeUNBdWlvUFY3S0M1d3NyODVOOG9Saml5QStndzhlQjdUQ2tibndIeWUwamR3MGJyTnoKbzFZemZGZHJDNGlFbU9IcXlXWTRWREtXUUswV2xwT1lqTVpUWUV6SGQ0VWY2QWxrMzBra2VDeGl4NVFnaWQxRAovL0IvNVhYR3YrL3RaczIxYjMzQ1Zab2NZY1l6cWxseDJ0SlFFSFdoWkNZWVdQQlRFcDgwY3ZBMXZUUTY1SDQ4CjhRMCtHbjBQcXh4cFIrR0srMmNqMDF5Q2pFVVZtbitLYTBBYmRvQ2NnaU1CMmNXRHJLdFBvVVJpeTh6ZmZMU2cKckFyVHBUa0NnWUVBMDVaazRQbjcvWncvVFRBZUhpVVZuQmZMQXJuazBiREVMbFhhMEdYL1Q1bk8zZGp3b0l4aQpDUlUrbEdSRmZYQTlYdllYeFhpN0dwMVI4K3I5aktHZGg2UEtDZ0lrNHl4ak5yVU1nRmpqS200dkNzSGpTaVlyClo3Zkd4elFKbzFNMVg3em5JVmpMc2lyQ3dRZTB6MUNEOHJ6NldlUjR6b2ZmZU5mOVdxSWhMNDBDZ1lFQS9abloKWFlJRDFxMmlFQ2U2Z1JLcit0UUNBcE0zaldiSGxNcWpnaERKL3JyQjdTMFB0UmVDUXNOK1d5NHVMaldrcmd4SQo5UDNVeHZ6S1pNOThtYVZURmhoM3dSNDNzcW1MQWd5WEszVzg0cUZ3NnZXTEZsUVJ0cG1IZmRkbmlpRWRscXQyCnBZc3VCc1loeXYwN0xPcnd5V3hHQnJub1dlMGFHMUNrUmJ2aTBWY0NnWUFpMDNkSlBIeElrd1lzUzBZNXlmclQKbFdyNXlPVXJ5bitQN051MlA0T1ZjNGlFSldmOTFQMXg1MGhFbm5oOW5CTE41WTJtR0NnYnlsY3A0YnpYLytYdwo1SG1seWhLT1Bja2F3UlFNc0JTNzhDVFlEVysremFlSlM4dHhFRlNoeUZsWnA3c1hWd2s0Q3lmQkkrYVQxUG5TCjQxNEZtOEJ5cGhTWFRGM01KREY0SlFLQmdRQ0VEYTdBSUVsN2FpS3ZvdUJkQWFvSURJbVhhYTFOdGkxSzcxSEIKRXBqOFNhZGRwMDg4anlkSE9LRDlQY2pTU3lDYmVNNHN0Rmd0M2NoT1FqU3hsUUwweUh6alZLYlFJN1M4dG0ycApOYi9MaXlGUFY5aTdJYit2ZzdhbjhwaDV0dEMvZWoxbjZsZG5NNWk1S0srOXJnRUFBWjlkTlVVbVBtNlB0cWd6Cm42aDJOUUtCZ0hyM3NENHNxOFlaa0tYRHp4SUFVYnNmNkpRUDFiZGMvZUEwV2VCdHU0M2hvQy9qa2VlVUxOcWkKbC9KY0w2d3FBeHJjSVI3Ky9BSEViRGw1enEySVM3a1h1SVdDWU5nZlVLZTRTTUdTb0VFZkF4enFlbnM1R3pxUApGZE1oaHcySWZYUWh0Nklxcm8yRFNnbXoydlRiQkwxVDJhcXNVNWNiZGhSaTUxMDVjS0wvCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU9BQ24vODl5L3h0ckt6NlN0aHhJalF3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV5TkZvWERUSTJNVEV5TVRJeApOVFV5TkZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF4RW01VHhBZzR4ejhlN214MkIvSW1keENmY0lCbXB0VmdzYkJZWXB2WSt5Z1RDOTUKTE01bWRaYWhyVE5QMHRHYjlha2w1V3NQeUZWck9kbWRxa0FOMkFneUxYamFsQTVvMWNmbkF3Wk5BR20ra0U3Mwp4TnAvNjhVem12MU1OTlcrRkpCNGc3SWNTNHcxbmxDaC9FeHJGYnRZNmtUWEU5WFlBZzdSS3kzQ3MwajFIWWtsCkRmUTY5TVZ4M1J3K1RUWERNandiODVkc0VTd0x4TWtScGJYdTNEcFFDdjRXUE1jNUE0Vk9NM3V1Q3FWa0gxejMKWWRhbWN3QUsvVjFackNoaU9YTUtHMzZKZEI0dTFnRjJ4UjRCYnlmeFNjbWNtTk9BbitrNFpVT3pSZjNiQUp4RApMaUhWSkNhRnJUejJjSVYyLzk4SmhmZ0N2ZTVmT2lucFhZNzByUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGUHhOVk5mN0d3T21PSlpydFl6anc1RlNWUHlJTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQldLTXgrdnFuN0prOU9XWGluV0tDWFlML09kUktmVkIrTUlTYjNhcW1aRERqdVBDeGEzZjRICllVbWtUMWJRa25hQWdUbm5kbGNEdXdRMnFzd0FtU2hmTW1EK3dqL0svVFI5by80d0lNREZPU3REcnVFem92WkgKQWVTVUZMdHlQcWp2a1FXbkM5VzRuNHJieHhKZ1JKL1I4aHlRa25JcWR6VXlSWllqeEF3NTlZclQxTmFlT2VHMApKbjRiYm40ZklnWVhNajRxdTVGcm81dmNMQk9SWTIyZ2RwODBNU2Y1RFp6VmVTQlh2ZUFRSmc3MDJVUmpubkY5ClFNejNldjNnS0RZZysxVUgvbllJeEJ6RVUvRjh1RVRnTWl5a0Y0T2hSZTIzb0luNmtBMnlyQlZvb3BudzBxT3IKeDk5SDZCbno5SGRETnErMUlEeElVbjk4RTE5ZCtucncKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTRENDQWpDZ0F3SUJBZ0lRR0hGcnVGTXRMSkdxMGw5QTRiYnMvakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEkxV2hjTk1qWXhNVEl4TWpFMQpOVEkxV2pBak1TRXdId1lEVlFRRERCZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDL0lKTkxmQjhheUNTQ2d6Z0t0ektqaU1jN3VIUXoKUXYzcDE0QU84N2FZZzZudFNHQmRuaG12RE90SFBUSHA0Z2hhQitDMGs4UXdYTU45MVcxd1RvN1RndFp3cDkrTQpYb015TWdXS3dvVGVEOWhkOEdaclgvV2JFZmVwbkZBSzd4WFRxd1VlNHJzKzJuM0hwTFYxd1RISU5KL1lNU3d1CmJZdzlHanBhbGtVQ0pKMjNQWEpiVWdYbDZLTGE5K3BxMmtheGJuNEpzTDl3Vm5rUUJ0TVJSbDBOVGt5akFFSmcKa3o4S0t4MFpVVm84YU1UVkFkb2IwdGhLdE5tT2IxcUJENUZnTmtVZlo4VEgyM01RSDZybVBMZ1NrS044ZWI1bApKc2VEY3dFQmtRYkVpNnBySlNzNjRuTWpzZGxmSUtIcGdHOE52cTZwN0tDRE1Db2VUQW5rVUYzNUFnTUJBQUdqCmdZWXdnWU13RGdZRFZSMFBBUUgvQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUYKQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUI4R0ExVWRJd1FZTUJhQUZQeE5WTmY3R3dPbU9KWnJ0WXpqdzVGUwpWUHlJTUNNR0ExVWRFUVFjTUJxQ0dDb3VhSFZpWW14bExYSmxiR0Y1TG1OcGJHbDFiUzVwYnpBTkJna3Foa2lHCjl3MEJBUXNGQUFPQ0FRRUFtTDdGWTBSOVA0YzlsMk1pZy82RDkyTnVWelJJKytkTHRIZC9PVTJrS2k5UElNc1gKdXgrMS9Kd08rNUk3V09sb2paYUdYRGN2TURUUlZxVG9UdHBvZlo1b2lYY2xIWUtZS0t1TSs4bHlBRjZzNzgzLwo5K2QxTDR3ZGR0Z1BKSnMwRWJJdlpHV1lXekJBamUwU1Q3Y2xzd2V5ZFNWQVFSeFByNXZlUDd0YnMwVjhBYUg0CllTb2FtZ1BJdjZ0NjVrVWVtT0dkbGtRZzNyd3BhblJTV3ZaNzVza3RrbXZ6MEFTLzM0Ukt5dVhXVllZQTZZSGYKOWVvcEVuN095S2sxYloxSVRWMnFnQ28wWVdPVlg1SFpIQXRVd2d0S0JtNnZRNHNSV25JODViZHFCcHBxMnV0aQpLTmZKaVVER2twU0tMUGRmbUhZSGdyMXordldzQ3c3VXN6eXRBdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdnlDVFMzd2ZHc2drZ29NNENyY3lvNGpITzdoME0wTDk2ZGVBRHZPMm1JT3A3VWhnClhaNFpyd3pyUnoweDZlSUlXZ2ZndEpQRU1GekRmZFZ0Y0U2TzA0TFdjS2ZmakY2RE1qSUZpc0tFM2cvWVhmQm0KYTEvMW14SDNxWnhRQ3U4VjA2c0ZIdUs3UHRwOXg2UzFkY0V4eURTZjJERXNMbTJNUFJvNldwWkZBaVNkdHoxeQpXMUlGNWVpaTJ2ZnFhdHBHc1c1K0NiQy9jRlo1RUFiVEVVWmREVTVNb3dCQ1lKTS9DaXNkR1ZGYVBHakUxUUhhCkc5TFlTclRaam05YWdRK1JZRFpGSDJmRXg5dHpFQitxNWp5NEVwQ2pmSG0rWlNiSGczTUJBWkVHeEl1cWF5VXIKT3VKekk3SFpYeUNoNllCdkRiNnVxZXlnZ3pBcUhrd0o1RkJkK1FJREFRQUJBb0lCQUI5azdXenZ4WGd6dWZPSwpORkZtU0RZZWlJTmh5QXlIaTRlMnN6MUJnUlBLUk1aS0pqSWFmeU9HM3JyRDdZZjZiZDdEL29BSzZhWDhCc3lMCm16OWdXQXVjS1RjMkMvMVZwUDFBeERKSHcyVnFldUxyVXhkK0dxelBKYnhCaGRCVjkyTGVhNmZvSEZPMXRnVnUKSTdSaytKVm5OMzVlaldCTzlFTXhKTGF1aWtWUWp4dnlSaDFKOGpQakJ2STd4c1FPQjZnczY0VlB3MEFjb3Y4awpDVXlyTTROM3ZTR0x4eTRLY1lKNEZ3bjZhVzRTZTNvMWNQai85Wll2a3pVR1pvSmtBYTVWVWQ2U2cxWll5VGNCCnlmR0FNeFV2R0d3ZlF3VWhqUVJjQVA4UmorcEh0SWx1cUthZlJ0Vzl2OHNjUitPWGtUOGFHMEVOVGdpNnFndmQKVUh1S0FSRUNnWUVBd2F6eXVzc0sxZGE3STdtbEhNSnEyeitybm5NdUdXVUtUTjQ5NEFvUkVtT2Uzei9PdGVrUAo4allJQzdoemFFYzJwajdwY0Yxa3NqRXNFS0piMHl0Q3I0UUQ0VFhSMHRkUC9oUy8yQ0Q2T2U2cnBQZ29oeG9CCjk4Y3Brc1k0K3NNeHJ5eHZUV2JxN1lkanJGVUNZYmFqQzlLeFQvVTFmeWxtOGZFMkRiL0FwTzBDZ1lFQS9LR3gKNW41U2VNOERBUndURWlhTXJVblg1eDcxS2RjVDRZYzBaM2RBVWxQL1JOV2c5OWRoMDlXTXNLTDNmL0QzQXQyQwp6YzJJWFhVNnA5cEdHUDlTT0NjSTc0SVZMS0pIZ0g4cTBUR3lWL2FFUFZjcVFud2tjNFFMZVNVOUFqQUV0VHNwCmxPN3BoeWZvakVqcjRoUFI3ZHROYlVlZW9sQWpZSytjSmRXQXA3MENnWUVBdEtxdjF6MzNBcG1JQXdCM25NZGoKeE5pMU1GOERudDdaWi9GZFNQUTdEcXR0bFpaQkx3S1ZSSDNRclpaSDJmdXNhQktCMHJiY2F6bGhnTGJqNzY0SQpUQkJiU2lmWmJ0UTVvNndaZGZUMVZ6dGtWTVRGa1puYVFoaEFtTkZlYjlYTU1EdkVMREVZYjdGL2NrL3VvOVlxCmJLb0RpN0lUVUdiL3lDd2FIMk5Ed3RVQ2dZRUF3dmJDaFdBOW8zQVhJSGNiSEtuVmJUS014WmYxbWhtYkJUVEQKczRtcmdSM0Q1Y3A4RkdrSzNXRnoxeW1kbWdaTGl0R0tUZXR0YnJxMnpxMDc1YlM5TGdxcDhiVFJSSVhrYW4wNQpmUUkrWVhZazdmWGo3alZDS0VmaVZ0YnZNMDM5aENPcFhuL1doM0M4SGU5MDR4OXFwb2JWUlIyOWhnUVVtVnhOClJFRjFyWDBDZ1lCY0o5NlMvenJmZW1OSGJUbzg5em5hV0RnZFp0MkVYang3S2M2eWU4QUk4T3I5T0pyU1BRdHMKVXR0SS81UTlieUlrV1lpdkhGZ2h0dnJtM0ZQOVFzR3pqM1o1ZXBNY1QyTWFidHJzZGFNYWVkeTlaek5RWDJlMwpRZndnbmgyRC9uSFMwcVJpM1lrQlR6cGRkZFhOVVFjZTU2OEdvWC9rY0RzbU9TNW0yUHlGQ1E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU9BQ24vODl5L3h0ckt6NlN0aHhJalF3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV5TkZvWERUSTJNVEV5TVRJeApOVFV5TkZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF4RW01VHhBZzR4ejhlN214MkIvSW1keENmY0lCbXB0VmdzYkJZWXB2WSt5Z1RDOTUKTE01bWRaYWhyVE5QMHRHYjlha2w1V3NQeUZWck9kbWRxa0FOMkFneUxYamFsQTVvMWNmbkF3Wk5BR20ra0U3Mwp4TnAvNjhVem12MU1OTlcrRkpCNGc3SWNTNHcxbmxDaC9FeHJGYnRZNmtUWEU5WFlBZzdSS3kzQ3MwajFIWWtsCkRmUTY5TVZ4M1J3K1RUWERNandiODVkc0VTd0x4TWtScGJYdTNEcFFDdjRXUE1jNUE0Vk9NM3V1Q3FWa0gxejMKWWRhbWN3QUsvVjFackNoaU9YTUtHMzZKZEI0dTFnRjJ4UjRCYnlmeFNjbWNtTk9BbitrNFpVT3pSZjNiQUp4RApMaUhWSkNhRnJUejJjSVYyLzk4SmhmZ0N2ZTVmT2lucFhZNzByUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGUHhOVk5mN0d3T21PSlpydFl6anc1RlNWUHlJTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQldLTXgrdnFuN0prOU9XWGluV0tDWFlML09kUktmVkIrTUlTYjNhcW1aRERqdVBDeGEzZjRICllVbWtUMWJRa25hQWdUbm5kbGNEdXdRMnFzd0FtU2hmTW1EK3dqL0svVFI5by80d0lNREZPU3REcnVFem92WkgKQWVTVUZMdHlQcWp2a1FXbkM5VzRuNHJieHhKZ1JKL1I4aHlRa25JcWR6VXlSWllqeEF3NTlZclQxTmFlT2VHMApKbjRiYm40ZklnWVhNajRxdTVGcm81dmNMQk9SWTIyZ2RwODBNU2Y1RFp6VmVTQlh2ZUFRSmc3MDJVUmpubkY5ClFNejNldjNnS0RZZysxVUgvbllJeEJ6RVUvRjh1RVRnTWl5a0Y0T2hSZTIzb0luNmtBMnlyQlZvb3BudzBxT3IKeDk5SDZCbno5SGRETnErMUlEeElVbjk4RTE5ZCtucncKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUakNDQWphZ0F3SUJBZ0lRYk5RY1dXSFBER2VmTnpvWHJRcTVqakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEkxV2hjTk1qWXhNVEl4TWpFMQpOVEkxV2pBbU1TUXdJZ1lEVlFRRERCc3FMbU14T1M1b2RXSmliR1V0WjNKd1l5NWphV3hwZFcwdWFXOHdnZ0VpCk1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRERrZ0swL2I3R0hLTmZUMVJFbHdOYlhsNDAKMkhlOFBUWG1FZjBneXRINmtteUNlZFI2ODArbTlRQjl2cklvR1ZselEwRE5PRDV4ZTZEdlVCUUFBUlpkN3UzWAoraFFiNmc4dFFXVk9NMkt6TUdwSTBHSVpRZkpiT09rRWRmODhBNk42dkpOWHZudnFGYTkvOG9SKy9tNnNiMU9pCkFKdkJGMGNIMnowOTg2VHJxQUtjRk1xT0JybHo0UEtsNE5kelh1aElPNW9nT2RGaG5Cb1B6WFd1dldpR1ZTb2wKaVFpWFZqajRQNGRVcEtlWFFCN2xodFpsc1MvUHJqZklRMk4vN0FlL3pDeDIrVDdKMnpyd1hLSlpRV1NzaGVObwpUVVUxLzBhWVVsSU1QbU5Ed3IzRzhXOXRlUlh0VFBTVitna0ZkK0lxOEh2Q3FFVlF1WjJjR1BNNWJVR1RBZ01CCkFBR2pnWWt3Z1lZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGUHhOVk5mN0d3T21PSlpydFl6agp3NUZTVlB5SU1DWUdBMVVkRVFRZk1CMkNHeW91WXpFNUxtaDFZbUpzWlMxbmNuQmpMbU5wYkdsMWJTNXBiekFOCkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQVBuZkJpbEFKbTlsLzlWRTRwQnR6Ukc2T1JWTG9lc1J3NG1OV2tSMTgKY0duVHNEQ3BBeXNjQmIrNjU4SGh6cFF2b3M2R25rM1BvSnRvSkUrQVJyMFhvVVkyZVgrUnpDWUFSZUhwNEpjNwpmYXMrUEhTZWM5cHowUEtFTmJvT1JwdDN4aGE2MDkwZmx2N3VRZ24rRGR5UkNPVUlIclZsYVRyNEVuazJMc3BsCjNiSUZubFpTalFWRitkdVJkdUVOQnZES0o1MGZWN1kzU0JOai9qNG9wd0dPRzhiZjBXVFpneE5RWTVyRURUSC8KMFlvazVselNnMFcxajZPbU52SWV6TmFST0JmOSs1V1FNbGRpWUZlNk1Cc2NiVGJ6VGIxc1U1UE95aEMxMWtUUAp5VWVHcFR4Rk41N0FBZ3VKeVhRZGpHVURzdzI4ZW9UMTZLazA4eWUxWXptWnNnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb0FJQkFBS0NBUUVBdzVJQ3RQMit4aHlqWDA5VVJKY0RXMTVlTk5oM3ZEMDE1aEg5SU1yUitwSnNnbm5VCmV2TlBwdlVBZmI2eUtCbFpjME5BelRnK2NYdWc3MUFVQUFFV1hlN3QxL29VRytvUExVRmxUak5pc3pCcVNOQmkKR1VIeVd6anBCSFgvUEFPamVyeVRWNzU3NmhXdmYvS0VmdjV1ckc5VG9nQ2J3UmRIQjlzOVBmT2s2NmdDbkJUSwpqZ2E1YytEeXBlRFhjMTdvU0R1YUlEblJZWndhRDgxMXJyMW9obFVxSllrSWwxWTQrRCtIVktTbmwwQWU1WWJXClpiRXZ6NjQzeUVOamYrd0h2OHdzZHZrK3lkczY4RnlpV1VGa3JJWGphRTFGTmY5R21GSlNERDVqUThLOXh2RnYKYlhrVjdVejBsZm9KQlhmaUt2Qjd3cWhGVUxtZG5CanpPVzFCa3dJREFRQUJBb0lCQURtalo3N1Y1Z3JYVitMNApLMXJIc3dxVHBtb212aXN4VXhoS2h2TEtNOWFJbndoWlJhRXk0bS9QVjJTMzlpUFJUTWFtdEl1SEh3Z3RLb0k5CmRKZUh1b0xXcnl4dkhNd1pVSDNDLzB0cjQ1UHlHZkQ1MFYrbVN2cE5ySWRQQzNreGpWWFlEQWpaTUFZT2ZCblcKYk94TXFtdVJwL0ZnQW9lSEI3MHVCVCtqOWlBcGNBdVlVK3FDSStrZUszT3BCQ0RqZ1R4TXBNMWVSNmQxbFpMbwpaVS9ydXdPZjR6bnZSWDN2QnlydlJCRVphOHVFdnh4dXExQlJjL0NPRk0xeENsdHQwOGU3dkFvZ1pXUmgzSXB5Cmg5bE9ROXc2RVVFcXppVXA4MXlhVXJtVHU4WGgrSXdZZnVOdm9NQjRPbmZabW85SExaZEhPUlhjR1RhVU1uYjkKdjIvSjNSRUNnWUVBL3ltQmd1RlpVdTZTY3BzRm1BS3E3VXk2UUxjdTEzWUs0bHBpWmZRUWxHcERjb1R2RTFWZwpXbDVONElIcE5jYUcwaGkxZmFJcUpLZzl6N3lZWTFiaDcrejJWNEh3Z0dBMzF1eFM4V0NDa3FMMStGQTBaOEhzCitoWVdSZzRjNjM4SGxPWmJ1Q201c3ZpcFRRakxoVVNYeGo2VC8vWmIvSWFScGF3NXI1RjN6ZXNDZ1lFQXhEWnAKSTQ5SGd3Ykw4UFI5cHJkZFhUeU9wNlh4bE5YMXpTZFdGejF3SUZkMklaVHVhM2VHcDRGVFhCZXpCRGdmdXo0cgpIbnlBc1Fid3JHT21Wb0RwSUxKQUVMVXlodEMxK1VjVFMrWXpuSzhHZ2g2b004Mmo4SVRjN3FMelpIblBWdmsvCjlvbzJSWitUWVNVK1NBdkRna0EvZXFnMzRyTGoxN2JUQm5TYjZQa0NnWUFkc095N0dCSFd6cUFINmZZS3JEVEwKakNRWUo3aXhwYkM2aWgzdEV5dGl1Y0xEYnFpTExXSWE0ZUpaLzRQdGwvNVVNRC9lTUtLS3hYRDczVXcyTXdQegpjVFZ4RlZPdy9JRkM1eGozc1cxQU51bzhUTWpzVWVxTFowcU1PRlF4S3dUczFLbFRrcmRqRmdCTlVIcXVOVDhiCitHZ3NYclJ4ZkE4eW9nbk1YamI4cFFKL1JvTkhSWUE0TXQ0K2JGbHd6bmtYRkdxdTJaREpRTE9qb2hhQTJkazYKY21UOER4VjJtU2hiTzljK0hkcG1leDJ3U1pvTjVPYlpXTVVsdU00VytQOWF5R1ZHb0xwOWJmV1RjQUlhN1N2TgpZSUdGMVQwdk5XNnhlNzVEcDM3bitUUE5UM1JEaUZZakt1SXVGTHROcHBhVHJEdHFsS25mYTVqZVNLZHJMdWE1CklRS0JnRzE5NndGYTNXNFVHVEVVaWV5V3VEUW9GWVhFY2hNem4zZWVHR2c3bEdrUmZtMFpZV05oN1o4Z1lVSTUKeUYzOUQ2MG9jRmJJekxPSUErdkd1TDhtOGpaTnhUSndhUkRpS3hoTGdJd2Z5R203bWRzaHozRnJnelpFWWg0VgpJZThZQmNWT0RTK1U3TUc2OTNkR0hZbitKeHFEbnR6azRuSTQ0YkF1QXMvOExCRmsKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  skip-cnp-status-startup-clean: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: c19
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "119"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  # Default case
  routing-mode: "tunnel"
  tunnel-protocol: "vxlan"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-wireguard: "true"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-local-redirect-policy: "false"

  kube-proxy-replacement: "false"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  enable-host-port: "false"
  enable-external-ips: "false"
  enable-node-port: "false"
  enable-health-check-nodeport: "true"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  ipam-cilium-node-update-rate: "15s"
  cluster-pool-ipv4-cidr: "10.19.0.0/17"
  cluster-pool-ipv4-mask-size: "24"
  disable-cnp-status-updates: "true"
  cnp-node-status-gc-interval: "0s"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "true"
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"
  k8s-client-qps: "5"
  k8s-client-burst: "10"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-connect-timeout: "2"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"

  external-envoy-proxy: "false"
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: c19
    peer-service: "hubble-peer.kube-system.svc.cluster.local:443"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-hubble-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-hubble-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumendpoints
  - ciliumidentities
  verbs:
  - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumexternalworkloads/status
  - ciliumnodes
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumendpoints/status
  verbs:
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumexternalworkloads
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: kvmesh-metrics
    port: 9964
    protocol: TCP
    targetPort: kvmesh-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: NodePort
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
    nodePort: 32379
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-agent: "unconfined"
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: "unconfined"
        container.apparmor.security.beta.kubernetes.io/mount-cgroup: "unconfined"
        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: "unconfined"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        lifecycle:
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - CHOWN
              - KILL
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
              - DAC_OVERRIDE
              - FOWNER
              - SETGID
              - SETUID
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Unprivileged containers need to mount /proc/sys/net from the host
        # to have write access
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        # Unprivileged containers need to mount /proc/sys/kernel from the host
        # to have write access
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Unprivileged containers can't set mount propagation to bidirectional
          # in this case we will mount the bpf fs from an init container that
          # is privileged and set the mount propagation from host to container
          # in Cilium.
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - cilium
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      # Mount the bpf fs if it is not mounted. We will perform this task
      # from a privileged container because the mount propagation bidirectional
      # only works from privileged containers.
      - name: mount-bpf-fs
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        args:
        - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
        command:
        - /bin/bash
        - -c
        - --
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
            drop:
              - ALL
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        resources:
          requests:
            cpu: 100m
            memory: 100Mi # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
      - name: host-proc-sys-net
        hostPath:
          path: /proc/sys/net
          type: Directory
      - name: host-proc-sys-kernel
        hostPath:
          path: /proc/sys/kernel
          type: Directory
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              - key: ca.crt
                path: client-ca.crt
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.14.2@sha256:52f70250dea22e506959439a7c4ea31b10fe8375db62f5c27ab746e3a2af866d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      initContainers:
      - name: etcd-init
        image: "quay.io/coreos/etcd:v3.5.4@sha256:795d8660c48c439a7c3764c2330ed9222ab5db5bb524d8d0607cac76f7ba82a3"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
        - |
          rm -rf /var/run/etcd/*;
          /usr/local/bin/etcd --data-dir=/var/run/etcd --name=clustermesh-apiserver --listen-client-urls=http://127.0.0.1:2379 --advertise-client-urls=http://127.0.0.1:2379 --initial-cluster-token=clustermesh-apiserver --initial-cluster-state=new --auto-compaction-retention=1 &

          # The following key needs to be created before that the cilium agents
          # have the possibility of connecting to etcd.
          etcdctl put cilium/.has-cluster-config true

          etcdctl user add root --no-password;
          etcdctl user grant-role root root;
          etcdctl user add admin-c19 --no-password;
          etcdctl user grant-role admin-c19 root;
          etcdctl user add externalworkload --no-password;
          etcdctl role add externalworkload;
          etcdctl role grant-permission externalworkload --from-key read '';
          etcdctl role grant-permission externalworkload readwrite --prefix cilium/state/noderegister/v1/;
          etcdctl role grant-permission externalworkload readwrite --prefix cilium/.initlock/;
          etcdctl user grant-role externalworkload externalworkload;
          etcdctl user add remote --no-password;
          etcdctl role add remote;
          etcdctl role grant-permission remote --from-key read '';
          etcdctl user grant-role remote remote;
          etcdctl auth enable;
          exit
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        image: "quay.io/coreos/etcd:v3.5.4@sha256:795d8660c48c439a7c3764c2330ed9222ab5db5bb524d8d0607cac76f7ba82a3"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/local/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=clustermesh-apiserver
        - --auto-compaction-retention=1
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.14.2@sha256:0650beac6633a483261640b6539c9609f5a761f4ab4504fd1e6ffe7f2bb82e9a"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt
        - etcd.config=/var/lib/cilium/etcd-config.yaml
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: IDENTITY_ALLOCATION_MODE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: identity-allocation-mode
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        ports:
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir: {}
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "clustermesh-apiserver"
      serviceAccountName: "clustermesh-apiserver"
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: clustermesh-apiserver
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.14.2@sha256:a89030b31f333e8fb1c10d2473250399a1a537c27d022cd8becc1a65d1bef1d6"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            tcpSocket:
              port: grpc
          livenessProbe:
            tcpSocket:
              port: grpc
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          - name: tls
            mountPath: /var/lib/hubble-relay/tls
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Always
      priorityClassName: 
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      priorityClassName: 
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.12.0@sha256:1c876cfa1d5e35bc91e1025c9314f922041592a88b03313c22c1f97a5d2ba88f"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.12.0@sha256:8a79a1aad4fc9c2aa2b3e4379af0af872a89fcec9d99e117188190671c66fc2e"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
---
# Source: cilium/templates/cilium-secrets-namespace.yaml
# Only create the namespace if it's different from Ingress secret namespace or Ingress is not enabled.

# Only create the namespace if it's different from Ingress and Gateway API secret namespaces (if enabled).
