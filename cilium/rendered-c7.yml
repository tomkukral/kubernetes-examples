---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRTDg2VGMxS3Y0cVZwQk0rRUJsNUs4VEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOekkzV2hjTk1qY3dOakV4TVRreQpOekkzV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRG53Q3h1VHRIRFJrL21GdlYyVU5rdW5PRlZiRUo5V01hdFBxcHZFdkw3eXVDblBEaDAKOUFPN3pUSmgzaWpXaElpeUtxdDJLT3k4cUxUZ01JTkVMK0d4bjkyZllKM1o2Si96T05RS0VkejNLcGs3NWRTKwo5alRCeHgwRTlraXN3UzRYQS84MEplTWMyUUNDS0VEZjZkQjdrMGcydFdPdm8rOEZKVXZUMHJkUUg0UXlrTXplCkJiQzVHaHBTWmFWR3MwNnI2Z0xCNzJ2ZTZBakRUeWNxTXoxK1hnVHNHaUdDSVFuaStMdkZ1SE83ZWEvaWNIR28KTWUzL3R0emc2ekFXYjUvdzJZQ2NTVEFNbUwvdmM0Zm9GWlBIYUtVMGFjK2tXUmtUcWxicGR2a0JTNk9HS1RuTgo1UW95QTVSNENyVnpFRHlpTHFlc1d2TmtmemJxN3lQcGpOK05BZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVXbGp5SFpxbjNMc3VpVG5wZFRuaE4relBiTEF3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFCSUNLY0padWlXUW10KzJtRy9PMUZOU0VGY3d1VjN5WnN4Tkp3Uk4zeHdsMXMxSlhCWklPWUZaCkROV2RwUDhVcXdFcEJ3NW5DUC9tUWRFZHVmNjNYd2pQcytIK29EYSs5VTVlNzIrcnBFMFBXWks3bkh2bENOQ1YKQU1Na1RNbnBidkJieTB1c1ZMRkhtdEJwZ25pVjJnbkZtSWVyL1JZNkJJTVhEcUpKaFFPdXpwU3pQTXhDUXJFNgpxbHVlL3YySUpSbldsbFM3V0VQc1FVYUJsREpQRFJPUko2ZGdVZlhqYUdicUl0THlWcGpzMEF1MVB0MUlieUN1CnJYNUZGLzhmQng4OUl3MWRPRVA0NWFaeEhOeHVueXROSXdGVFRQRzc3NDJmNDFZSndJZW9leVlxbGlZaCtqMnUKSmpQUUh1SXU0RVJYdEVqczhPMlJZS3B3T3RmcitTbz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBNThBc2JrN1J3MFpQNWhiMWRsRFpMcHpoVld4Q2ZWakdyVDZxYnhMeSs4cmdwenc0CmRQUUR1ODB5WWQ0bzFvU0lzaXFyZGlqc3ZLaTA0RENEUkMvaHNaL2RuMkNkMmVpZjh6alVDaEhjOXlxWk8rWFUKdnZZMHdjY2RCUFpJck1FdUZ3UC9OQ1hqSE5rQWdpaEEzK25RZTVOSU5yVmpyNlB2QlNWTDA5SzNVQitFTXBETQozZ1d3dVJvYVVtV2xSck5PcStvQ3dlOXIzdWdJdzA4bktqTTlmbDRFN0JvaGdpRUo0dmk3eGJoenUzbXY0bkJ4CnFESHQvN2JjNE9zd0ZtK2Y4Tm1BbkVrd0RKaS83M09INkJXVHgyaWxOR25QcEZrWkU2cFc2WGI1QVV1amhpazUKemVVS01nT1VlQXExY3hBOG9pNm5yRnJ6Wkg4MjZ1OGo2WXpmalFJREFRQUJBb0lCQUJ0eXBWQ0RRVkRSZVJFVgpVd2txVmk2eElmY09GV25uSTlETkJUNldqZlRJZUljV0dOR3hQT2YzUzZwUHQ2S0FtL2dPR2JTcThDOEFCRHd4ClFyckd1UUppbnNzTGxHYUVxTDBUMC9sRldGaGwwVFJJNmtPYndXL1o5MVBwSDM1bWV1RDY5alRrNzlzdzBHQ2EKQitUOU9sWUlnWnNKTEw5V3VTNXcxbVJHSnJQMGJlN3h0YlRoQXlpaXNmSFkrakxzWVZmMnMxRDFCN2NPYnJXQQozZUhlZU5ZVERkVWJrVU9xUWxxQjVuL2JKeEZYNWI0cFNDM0lYWUJmazRIRXhaLzdCL0tkcmNBSFpXeTVEaWorCklPbFpuMFI3cDBQNmZIQVBUbnV6cTR5US9DTWl0aDhvbSt3cmZzd2Y0NlF3TklmN0o3VTNPOTZReGYrTnZZZVgKKzlTYkVnRUNnWUVBOGJmWmhNQXpoenBQVVczV1Q3SktQZUJkRDU4V0RId1hpN0V5TWJxZThPNFdPRXpiQ3A5VQpVaExSUmRSVTRwaGtJOXNUSG1iZ3ZVdkczb3VGdVk5OS9LazBYYzR1Zk45ekgwSXFxR1U1d2lWK2N3Q3JoVTFYCnduVGpwZVRNZFdyRWkzNXlyTC9yaEFzMDR2Z1EzdTZhb2lCZVYwY3ZaMm01VnRhdi9RbklCODBDZ1lFQTlYR1AKRnRLN1oyRXVDZnJUSkdBRVpmRHpKalBLUHJ0VXdEajZuTkw1RVB0R2FzdGxJeTRrK1o1SE9Ld0NDMGh6K0NPZwo3T21SdVozTjlmcGI2eCt3N2x0UWJaMjNVQWZ0cVpTS0RBMlBXUjJoUUFBYVhES2FPS1BacGJzWnRCRDk2cWI4CjlwR1d2eGIwS3U4Z3FvT3RuYWs2YVdiTVIwMU03amVOZDl0QTlzRUNnWUVBbUM5MnBod1UxVGtqSTFPU01ROUIKcXYrTjEvNERkY3pUVGtJOEpnOG5idTJYMDg2ZndtcGFQbXBXbEM2QlcwRXpHMWdkQzNFZVlsQkpYMmhjdzEzUwpwcmNwbnozbkN2dnNrV3VwUytpZm10cmNhQyt0emZuS0hVWlc1ZVhOek1keUE1bVRQYXgvN2R6WWFXWmh5TnBWClJXbzN1NSszK3RZWHVOTG1idHd2c3FrQ2dZQklTTkp3VVUyNTY0Zm9qb05DY2ppNVlSWHJDVk9sMS92a3hLTWkKTG93RnNVc1N4cVlaajB4NmExL2tVOXdpUUl0TzZBZEwzcG41UlgxVDFSRGZGUzFCZFlraFQxS2Vja2RQS3h6Zwo0ZGwyMEdBZC9pbkZQMjNtQW5ObCtNMWdGNlVBUjMrMmlqZ1FQUTFaMjZVT01zdWQ1Q244d3Jha3hTSkVBZjVhCjd5cVp3UUtCZ0RseGk1M3FXL3FxZm9xcCtUVExGOEhQZUkveC9YNTNGZ2ZiNVp4eDkrRWp0Qm1UMnZTK2c1eFIKR3o0R1BtT2xBRlU0c1AvcnRTQXdjM0pjUkQwcU9kY0hnODZQSkNHQUVMbk5GS0F1b0QrWmV1Uy9rUUtvM0VOWApwODJjSFVUZk41VmoyU0FXWm9GR1h2ZnY1Yzd1aGN4RDlXVi9WRU9aQWtnRU5halE1SVpsCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRTDg2VGMxS3Y0cVZwQk0rRUJsNUs4VEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOekkzV2hjTk1qY3dOakV4TVRreQpOekkzV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRG53Q3h1VHRIRFJrL21GdlYyVU5rdW5PRlZiRUo5V01hdFBxcHZFdkw3eXVDblBEaDAKOUFPN3pUSmgzaWpXaElpeUtxdDJLT3k4cUxUZ01JTkVMK0d4bjkyZllKM1o2Si96T05RS0VkejNLcGs3NWRTKwo5alRCeHgwRTlraXN3UzRYQS84MEplTWMyUUNDS0VEZjZkQjdrMGcydFdPdm8rOEZKVXZUMHJkUUg0UXlrTXplCkJiQzVHaHBTWmFWR3MwNnI2Z0xCNzJ2ZTZBakRUeWNxTXoxK1hnVHNHaUdDSVFuaStMdkZ1SE83ZWEvaWNIR28KTWUzL3R0emc2ekFXYjUvdzJZQ2NTVEFNbUwvdmM0Zm9GWlBIYUtVMGFjK2tXUmtUcWxicGR2a0JTNk9HS1RuTgo1UW95QTVSNENyVnpFRHlpTHFlc1d2TmtmemJxN3lQcGpOK05BZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVXbGp5SFpxbjNMc3VpVG5wZFRuaE4relBiTEF3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFCSUNLY0padWlXUW10KzJtRy9PMUZOU0VGY3d1VjN5WnN4Tkp3Uk4zeHdsMXMxSlhCWklPWUZaCkROV2RwUDhVcXdFcEJ3NW5DUC9tUWRFZHVmNjNYd2pQcytIK29EYSs5VTVlNzIrcnBFMFBXWks3bkh2bENOQ1YKQU1Na1RNbnBidkJieTB1c1ZMRkhtdEJwZ25pVjJnbkZtSWVyL1JZNkJJTVhEcUpKaFFPdXpwU3pQTXhDUXJFNgpxbHVlL3YySUpSbldsbFM3V0VQc1FVYUJsREpQRFJPUko2ZGdVZlhqYUdicUl0THlWcGpzMEF1MVB0MUlieUN1CnJYNUZGLzhmQng4OUl3MWRPRVA0NWFaeEhOeHVueXROSXdGVFRQRzc3NDJmNDFZSndJZW9leVlxbGlZaCtqMnUKSmpQUUh1SXU0RVJYdEVqczhPMlJZS3B3T3RmcitTbz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKekNDQWcrZ0F3SUJBZ0lRRXB2VkdxSW1CWVRhM3kwN2J4M3RiVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOekk0V2hjTk1qY3dOakV4TVRreQpOekk0V2pBVE1SRXdEd1lEVlFRREV3aGhaRzFwYmkxak56Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQCkFEQ0NBUW9DZ2dFQkFLQnM5ZzVhbS81THQ1NHMvd3NoUHFGZlVqZXd3MWhDazN6dVhpK1JReU5JRGU4YlBLcWkKUGxxKzRrZUdhelc1N3hGUlhCTG55blpZN3VqdkNpUG41YXhjY2Z0QnlPMkRQb2VWZHBiTGwvWDluZ1dTaTRSbApna1FVaGIybnRhWm93QkFGc0x0VkJ5SDNWOGF0QXgzUm1tdUpKQXh0dnR2TjNJL1pXd1dNVE54VTFPc3llNjlhCk5MZjQ1cVk3em5MY1diSHh0ZitJdFdYaWVqS09zSXVxaFRJc1lHWjBjWkpRQkkyaXlQS2VaSE5hQkxxY3AwQysKZFBqZXJYSXNJODZqNEVNRUMvVk45amNxMm5HbE5hVnM5TTNaRWp5dFk4aVZibmttQVd3Z081M1grVUZ0V25EYQpUK0xrOE5COFFsYkcrejJvZ3oyWGdHRk92WllWSDk5aGxTY0NBd0VBQWFOMk1IUXdEZ1lEVlIwUEFRSC9CQVFECkFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUEKTUI4R0ExVWRJd1FZTUJhQUZGcFk4aDJhcDl5N0xvazU2WFU1NFRmc3oyeXdNQlFHQTFVZEVRUU5NQXVDQ1d4dgpZMkZzYUc5emREQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUF3aDJuekZmZXhPeW95TXJYRW44NHErQ2ZaQlVJCmxhTmp6U1ZKOXcxUElSeDZ4UWw4Q2NMQ1ZmZGJhai9Kdk51aEFxOTNlZ1AyOU4yMlBlL0dyRFdVZGtUZlNOZGQKOHpaWjM2dXUyR2w3YnRDNVQzc3o2dURUMjVEK2xueVZvL0pkcm51Q2VwYTFPWExjcVhPM2hMMEdnd1BISlo5MgptSWk1UFpDNkFjdjNZTEk2ejhkWUc0U09WdC9UL3c3NEptcTBqc0dkVUZTMlVBMlhjMEN3K1pnNVV4clhYZkNoCk4vYmY3dDhPc2lPU2dYZy9QWkJ1TFhHY2xuTjJzN1V0N0NyU2tJWUxmU1h5NU9TZXl5TW1QU0pIcm1LdXpwbFkKNThkbUZ2R3JBajcyZ3EvL3pLSmEvU0xudHdLY213YkF1SnF3ZEJ6c01SWnhKSnNnUGlkT0lXeVcyZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBb0d6MkRscWIva3Uzbml6L0N5RStvVjlTTjdERFdFS1RmTzVlTDVGREkwZ043eHM4CnFxSStXcjdpUjRack5ibnZFVkZjRXVmS2RsanU2TzhLSStmbHJGeHgrMEhJN1lNK2g1VjJsc3VYOWYyZUJaS0wKaEdXQ1JCU0Z2YWUxcG1qQUVBV3d1MVVISWZkWHhxMERIZEdhYTRra0RHMisyODNjajlsYkJZeE0zRlRVNnpKNwpyMW8wdC9qbXBqdk9jdHhac2ZHMS80aTFaZUo2TW82d2k2cUZNaXhnWm5SeGtsQUVqYUxJOHA1a2Mxb0V1cHluClFMNTArTjZ0Y2l3anpxUGdRd1FMOVUzMk55cmFjYVUxcFd6MHpka1NQSzFqeUpWdWVTWUJiQ0E3bmRmNVFXMWEKY05wUDR1VHcwSHhDVnNiN1BhaURQWmVBWVU2OWxoVWYzMkdWSndJREFRQUJBb0lCQUFhbFhQQXRTc2NYSmUwMAptZ0JCQ1ZJd0c3elk0czdXT3p2eXVBNHFhMmlieEpBQ1Jkb2Z6SXQvMnVueHBLRmVLWXhESFpoZTUrRk5QK0NBCmZxQU1MRlNlbzg0djVINEtjTjIzRUdtZzE1UEdSUFNnSkkyQWt3djArYkZvc0RyTG5pRkx5dzJIc1Ryei96dm8KMFBjOFJyUnJ3d1dNeWxwYXhlZGpyc1NsRWs0U1dOQlJIeHZuYjdOdTNqSFhYdFpRU0haOFgvRG9GdmM5VGY2WgppaVZhbTBZTlJ1VFM3TlVkR2ZaM3VNSVEyMVBSOE11K0JFY3pWeFc4bVduamY0Y3NISk9PdnJhZW8wSUM5eVhCCmlzWTJsejFGQnVUUWpZLzNUYXpBQnIxa0F5TE1Na2VaQ1dha2IraVFrOFF4a0lRb3VuOWhOK1lCZ0lkc25XZjkKMm1TVUVFRUNnWUVBeG5VM1cyR3JiN3c5ZWhzaFJqNUJScnBMYy9TUXZPVjcxMkFVL25WdUJVYXlsSXFEZnc4cAprdnhOdTcvbnk0eWxDUlZWaHBIOWppY3NVdVIrQjByNmdDWU1naVluNzAxdVBNUHU4R0JZMDhRekd5NmZqUzRCCkxHMkIxWG9uME9UZzBLWjV4emdVWld2UUFFTmpJK2dqZ0dUZ3dkMjJJSm44cU1DTDZLaDNJaUVDZ1lFQXp2REIKQUxhcjRqblE5UnFuejJ6S3RrMFhwbGVIcnFRRWRRRjU2SUMyMUlmeVpreGFaYU5QUTdCS0Y2ODJzNTJ6VW14WQpBUHI2QTlwKzIwOFVTSlJLY3JnNzM2eUN1Z0V4dGRmanF6aXhMTlpVTXduMUdUZjJveWorZE1yMUVTbjlMNW9xCjFHZzNmQXpkUnRsWkszaHIrWkJNSFJrMytpUE9kNWdJcVN2dlhrY0NnWUJkL3FaNVlZa1JJdGI3UGw1RUpyaEUKQjNnMU0yQmFGMWJRYTNHR0U1aElaM090WnUxaEFJMXdVSStBblNQc0JIRW1IRFNseC8rUGxINHB4STdzWlZhLwoyMFdSWHdFTEZtRmY1bTBFN0owbHI0ZUZHRS81VGhEQU9oMkVQcGNkR1VwaGlIZWxJNnFGWHNybFZRVmZ2Rk1VClBMTTNId3RqNVlzRllpemh4T2lvQVFLQmdRQ1ArS21lTUhpVzlIaHUvZk4vK1FWekhXRjF4ZkhNeTZtYUtjUEIKd1VMeHkvOFZzc3MxYVEvdFhNbS9mcFFGRkpNOHBjbjRMS1FpYURIWHJFWEZWUDRTb0NCdnRocGhCQkdzbkoxMQpjd1M0MkFoT1ZnQWlZbkFDQmJRNlZ6VjJrb3JtUWxESDVCV3VCVmt4UUdlc09hU05SUm5mS0x0c0dOczlFeFg3CmRHaWRZd0tCZ0YvY2tLeVFLOFdIRGhJemxHYTZhdWVwQnZhK0lVWUdoT0pjNitFeitBREYyMGF3d1owMVIwVHYKYmpIcjNjZHVQNmxWNFY0ZWRaYnErYUlOUVNNZHBSeXdDUXQ3QmlyUU9VTDVxWnFQWCtlSE5mTVVxRE5NK1dhNgpoc3ltVS9tREtUczlETlJWZTNXbHExRGtmd2xRNmhhN216K2JlT09sRFRrVTB3Z1JlTS9jCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRTDg2VGMxS3Y0cVZwQk0rRUJsNUs4VEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOekkzV2hjTk1qY3dOakV4TVRreQpOekkzV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRG53Q3h1VHRIRFJrL21GdlYyVU5rdW5PRlZiRUo5V01hdFBxcHZFdkw3eXVDblBEaDAKOUFPN3pUSmgzaWpXaElpeUtxdDJLT3k4cUxUZ01JTkVMK0d4bjkyZllKM1o2Si96T05RS0VkejNLcGs3NWRTKwo5alRCeHgwRTlraXN3UzRYQS84MEplTWMyUUNDS0VEZjZkQjdrMGcydFdPdm8rOEZKVXZUMHJkUUg0UXlrTXplCkJiQzVHaHBTWmFWR3MwNnI2Z0xCNzJ2ZTZBakRUeWNxTXoxK1hnVHNHaUdDSVFuaStMdkZ1SE83ZWEvaWNIR28KTWUzL3R0emc2ekFXYjUvdzJZQ2NTVEFNbUwvdmM0Zm9GWlBIYUtVMGFjK2tXUmtUcWxicGR2a0JTNk9HS1RuTgo1UW95QTVSNENyVnpFRHlpTHFlc1d2TmtmemJxN3lQcGpOK05BZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVXbGp5SFpxbjNMc3VpVG5wZFRuaE4relBiTEF3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFCSUNLY0padWlXUW10KzJtRy9PMUZOU0VGY3d1VjN5WnN4Tkp3Uk4zeHdsMXMxSlhCWklPWUZaCkROV2RwUDhVcXdFcEJ3NW5DUC9tUWRFZHVmNjNYd2pQcytIK29EYSs5VTVlNzIrcnBFMFBXWks3bkh2bENOQ1YKQU1Na1RNbnBidkJieTB1c1ZMRkhtdEJwZ25pVjJnbkZtSWVyL1JZNkJJTVhEcUpKaFFPdXpwU3pQTXhDUXJFNgpxbHVlL3YySUpSbldsbFM3V0VQc1FVYUJsREpQRFJPUko2ZGdVZlhqYUdicUl0THlWcGpzMEF1MVB0MUlieUN1CnJYNUZGLzhmQng4OUl3MWRPRVA0NWFaeEhOeHVueXROSXdGVFRQRzc3NDJmNDFZSndJZW9leVlxbGlZaCtqMnUKSmpQUUh1SXU0RVJYdEVqczhPMlJZS3B3T3RmcitTbz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lSQUs0KytudHMwN2s2eSs3MVo4TFpjRGN3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN5T0ZvWERUSTNNRFl4TVRFNQpNamN5T0Zvd0VURVBNQTBHQTFVRUF4TUdjbVZ0YjNSbE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBCk1JSUJDZ0tDQVFFQXh6OTVzSGNwa1RoejZIZ3AyRjUyRkJ6bmZNRitic21NL1ZQYjdBOEk2dUt5aGRJR3ZSZHkKcU1zOUF5eEMya21TajdCV2t4U3N3OTY2eXczNnlPZ1JHVDQ1YjlFaDJiSzh0NjRVN2hqMnVhTUhxSGdXcmE1Zgp3NGdzeVZreEFqdVRQc0dtWFhGT1ZiWHdTMUlneHFlSkNqOFBlL2QzTG40YlVNVE5NU1VqU201WC9LZzJYa2QxClBqTTAycVNYazB1LzZ2eXlnb29sVjBIdkhWRHJrTTlFWVc4TitkUkxCSVhzaVpmMHNWUkFlbXJrZ0xNVVFHOHAKNllDMk81QnR5S3EzMWMxOHZLQTFwS1ZWeFNQcXBEZkVseHJ5US82M2dmNVJHT3JacWpCS1dCZWxtUFZKL2VkMQpGSzUwU1lEQU5LZFdnUmNRNVQzTFRHbGxvMStaN29ROUZ3SURBUUFCbzJBd1hqQU9CZ05WSFE4QkFmOEVCQU1DCkJhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXcKSHdZRFZSMGpCQmd3Rm9BVVdsanlIWnFuM0xzdWlUbnBkVG5oTit6UGJMQXdEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUlKUkJGeXJuTHU2aDE1YlhnTTA0Z3VxQ0R0K09RRkk1bVNHK3QvSHEzYmt4VUtmR2VPTzdhYmFBMnk2Cm12MWJVQTJYVWdWR1pPVmo1eFRWODFEWmthTzBqR2V3aWdONG4rU01HSGxBUGxLTTRKOUZxSi8raW9DUG9uNXMKYk1NVlkzZ1grSGs4dG5pK2xRaHEwOGoxRmhFVzdaZWJOdkRRY0psTWdjM1ovdTF5Q0ExUUZoTjVkUlVDaE5FaApNWWdaMU5OY1BRUHJrN3Jub3NPRG1qSXQ1dkRUek5hbEx1cEsxQUUySCsxU0RKSFdzd3dtaDhwN1R6ZHMzUWUyCk1aWEJEUktPZ0VqV0VOZ1dEbnJMc0tkenZ1ZXJWczJFN0dITU1PNFMvdUc1RWV5SitPRlZaRTVPWnRveXdQaFMKQzRqTnh6d0hSWmtlcGthOFFTNjJRcDEyMFpJPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeHo5NXNIY3BrVGh6NkhncDJGNTJGQnpuZk1GK2JzbU0vVlBiN0E4STZ1S3loZElHCnZSZHlxTXM5QXl4QzJrbVNqN0JXa3hTc3c5NjZ5dzM2eU9nUkdUNDViOUVoMmJLOHQ2NFU3aGoydWFNSHFIZ1cKcmE1Znc0Z3N5Vmt4QWp1VFBzR21YWEZPVmJYd1MxSWd4cWVKQ2o4UGUvZDNMbjRiVU1UTk1TVWpTbTVYL0tnMgpYa2QxUGpNMDJxU1hrMHUvNnZ5eWdvb2xWMEh2SFZEcmtNOUVZVzhOK2RSTEJJWHNpWmYwc1ZSQWVtcmtnTE1VClFHOHA2WUMyTzVCdHlLcTMxYzE4dktBMXBLVlZ4U1BxcERmRWx4cnlRLzYzZ2Y1UkdPclpxakJLV0JlbG1QVkoKL2VkMUZLNTBTWURBTktkV2dSY1E1VDNMVEdsbG8xK1o3b1E5RndJREFRQUJBb0lCQUNmVzJVNGZoWUF6K1hrUwpEY3ZsbDFhT01Qc1E5V2JSaGc5aEpTZ2VHWHBkdWJSb09sQzB6NGhRbXZKM2R5YU9iMityb3FQbURtVmJzNTNHClBjN09HQjBrQS9nSHFPME9nQTE2RVZWS1NJcjF2aUpCWU1kNWhreGlmaElFYzNndTBWSkxCaWpJN3hEVVFDZlAKVkI1a2dWSTdLYTF2M2JTK0lsZ1VBYk5CNmJ5SDJTNWRyRGd4QWp1VW14SDVoM25VQ1J5cjFZcjZPY1ZrUUJMKwpGdHN1YUFLM0kvMlJ0M3d3VSsxUWR3eEVjc0toSjJJeGNCWTlvOUFWSWxqdHF3c3JqQ3ljQXJySk5xc09lMmRmCitFRjVpOEFEc3RiQlNRVmRrbnR1U3hUNFJOTXZUc0d2N3lvditRU2U4cm1wbWlXWGFHa3ZNdWFkNThpcmJvL20KK0o2S1NZRUNnWUVBOFBEaUJjMnB4SEpjdlhRNWdnUGhpSlJldVdCZzkyamxVaU94V0UvL3FFMVF3RmcrOWFYaApNMkZTM1Q1THo1WkR3b3lkbHhYUXcyeXZ3bTdXMFpyTWtseTArZldtb3RFWTJOWjVQMFdwSFhEb245UE51T3l0Cm90eFBVWFNtOFNZVUV3M3poQWZjTTUwTHdKa3krSGNBVVVUQi9zd05RRUhyYnY0Y2pXT3lJN3NDZ1lFQTA3TisKWnlhMDdpQzVsRmRUSk0rVXEwcFVlWGdmdFpqQkorNFlDWW5aM01LTmN3eGZlTHRUYzMrMG1KdHhmRkY2WlJlTAptU1g1ZWVsckFVZEJNTXIzQWs0YzVsczNIMmI3ODVqTWIxT1U5V3RKWlowZkxwY1AwdkhpL0J4M0J4T2RBbTBHCmNmNHdFNzNQUWI0aEFlVlJ1ZVNwaXZPcUtxT1hkQlJ1VktQRklGVUNnWUJseGlxREx3dU9Db3k0RGpjWWYxRXUKSXhZY0VlVUR2UkJZOFBEQmtCRTY0MlcveWNiV2RybzR2TnlHemdDeDhCUXhRcnB5am1sL2t4SnUrK2pMNHlxVQpqSXA1cDFVN0l6M3VvakhYRXpMTFY5MDdYZmxoS3NCeHNjUGpjWFh2R1JtVHJ1bjFGR2prZUdyMWNRRUJ5U3FlCktZQVVnOWI1Rko5QlpCOWxiZjVhYndLQmdRQ1lhT3NodkI0YUtma3hNTVV0QlQwVkxJZ3dneWpoQmo1WlR2S0QKTzNsYms3MWVESlJYU1JYRld6VmJnTjF0RVFPNjcvNlNuV0pFUUtYRzM5T3hHdzVGM0pLMXpRbWNVL29qMytlZQpabUFoWjhJSm85cWxJaUJFVDl5SWdMMjRuSWczRE9MTkFxRCtOWEtXOUJpelVyTkp6N08zMDhDNHZkbjF1aGZNClc3TTVtUUtCZ1FDQ1UydTBYcTlVNC83dTVUbEtYMmlnOGVIdVhqbXROVWVLWGEzeElXUG9JZUFnbkxYbHZ0dzIKN251MmpHQ0N3eHBOSUdrM2VnTUk1andJWVRWc0IyR0ZSOGtJUjAwclVuS1lkSEo5TWplckV4aE1SQkZlVDRkUwptV0VDaW5OLzhvQUs1Q0piMGgwc1hsdG5IblpuNHNTOFZvZSt6OGd0T05hOUowTVNHZ3AwdXc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRTDg2VGMxS3Y0cVZwQk0rRUJsNUs4VEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOekkzV2hjTk1qY3dOakV4TVRreQpOekkzV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRG53Q3h1VHRIRFJrL21GdlYyVU5rdW5PRlZiRUo5V01hdFBxcHZFdkw3eXVDblBEaDAKOUFPN3pUSmgzaWpXaElpeUtxdDJLT3k4cUxUZ01JTkVMK0d4bjkyZllKM1o2Si96T05RS0VkejNLcGs3NWRTKwo5alRCeHgwRTlraXN3UzRYQS84MEplTWMyUUNDS0VEZjZkQjdrMGcydFdPdm8rOEZKVXZUMHJkUUg0UXlrTXplCkJiQzVHaHBTWmFWR3MwNnI2Z0xCNzJ2ZTZBakRUeWNxTXoxK1hnVHNHaUdDSVFuaStMdkZ1SE83ZWEvaWNIR28KTWUzL3R0emc2ekFXYjUvdzJZQ2NTVEFNbUwvdmM0Zm9GWlBIYUtVMGFjK2tXUmtUcWxicGR2a0JTNk9HS1RuTgo1UW95QTVSNENyVnpFRHlpTHFlc1d2TmtmemJxN3lQcGpOK05BZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVXbGp5SFpxbjNMc3VpVG5wZFRuaE4relBiTEF3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFCSUNLY0padWlXUW10KzJtRy9PMUZOU0VGY3d1VjN5WnN4Tkp3Uk4zeHdsMXMxSlhCWklPWUZaCkROV2RwUDhVcXdFcEJ3NW5DUC9tUWRFZHVmNjNYd2pQcytIK29EYSs5VTVlNzIrcnBFMFBXWks3bkh2bENOQ1YKQU1Na1RNbnBidkJieTB1c1ZMRkhtdEJwZ25pVjJnbkZtSWVyL1JZNkJJTVhEcUpKaFFPdXpwU3pQTXhDUXJFNgpxbHVlL3YySUpSbldsbFM3V0VQc1FVYUJsREpQRFJPUko2ZGdVZlhqYUdicUl0THlWcGpzMEF1MVB0MUlieUN1CnJYNUZGLzhmQng4OUl3MWRPRVA0NWFaeEhOeHVueXROSXdGVFRQRzc3NDJmNDFZSndJZW9leVlxbGlZaCtqMnUKSmpQUUh1SXU0RVJYdEVqczhPMlJZS3B3T3RmcitTbz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURwekNDQW8rZ0F3SUJBZ0lRUmgwV01heis1eWplc2FLT1lydzUwekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOekk0V2hjTk1qY3dOakV4TVRreQpOekk0V2pBcU1TZ3dKZ1lEVlFRREV4OWpiSFZ6ZEdWeWJXVnphQzFoY0dselpYSjJaWEl1WTJsc2FYVnRMbWx2Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdjI0TDN1Tmg3aEtQN0MyWjJFd2IKSVl1NUJRVVpydklJcUNLY1RkOGdhZHIyUFp2NCs2ZzF6Mzlsa25VRkE5UnZIVTFUbVdtTDdVa1lGWnRmbU82ZwpkczY5L3VZWkd4MGQ2QS9QNGJhMENmZmF4R2VCVEtxdDR6Y01oVXVCVDhWWW9jNHdsSXV4VlVrSEMxMERnMVdqCkFoWmc0Si9pN3paUE1VLzdUc1gvaGVadkdnSTBqVVhlODZndlZqNUo5L29QZ0pISVBvYXVZNFNkVmYzeW05VC8KcWFUdXo2MnlIMy9mcG1YZVR1UmsrMW16Sy9UNGIwR3BmRkwvM3lhcmpPdXJISjNrQStkYTFqT0s3WVZqQnFmQwpwK1JPUHRmeEJhdmFLVHB3Q2lTaVJZSEcwS2w3aVByaTZlMFhkRkxkM2NzVTFRR09ZWHQ0R1F4WVdzcWJmZmJUClVRSURBUUFCbzRIZU1JSGJNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0QKQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JSYVdQSWRtcWZjdXk2SgpPZWwxT2VFMzdNOXNzREI3QmdOVkhSRUVkREJ5Z2g5amJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXVZMmxzCmFYVnRMbWx2Z2hBcUxtMWxjMmd1WTJsc2FYVnRMbWx2Z2lWamJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXUKYTNWaVpTMXplWE4wWlcwdWMzWmpod1IvQUFBQmh4QUFBQUFBQUFBQUFBQUFBQUFBQUFBQk1BMEdDU3FHU0liMwpEUUVCQ3dVQUE0SUJBUUNpNitUb05YNnFpazUrcTU2N2tESGQzbStVNSs3UXF5WmZGTmt4TUloQzlxczJlTTlnCnFZanplUm5SQ01rNW5BYlhpTGZPSU9LUlJ3TDFVTHZvSjZScFZ1a1VQT01Yc1NoTGpQMkdUOC9QMXRSeU9tT0wKUUFqRWx1OUlFb1VXMWd0SWNJMWFheE5yZVJMMEpveTNVYXZEQ0h5bFB3emlpbGVMTzFNKzRYZk8vdFlRaGM4MQo3V1VMSUxMRWlCMHMzM3RRUXdCUXhSbzJpR0FIU0lBNkxWS0J6aWlINm52aWlBY0IxVC8vZ0Z0MEU5aHZ4OFMxCnlOeWdqRVV4QnBxanVpSHFZdGFsaC9QSStqU1V0SkVDMHlYZDFGVllEUlp4cHdiL1VPalJ3a1I4dHlNS2wxajQKRGFqV3BXOWkybmVnZm1SLzV6Z0hhdmU3Y3ZvRmVoNjljNVhVCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdjI0TDN1Tmg3aEtQN0MyWjJFd2JJWXU1QlFVWnJ2SUlxQ0tjVGQ4Z2FkcjJQWnY0Cis2ZzF6Mzlsa25VRkE5UnZIVTFUbVdtTDdVa1lGWnRmbU82Z2RzNjkvdVlaR3gwZDZBL1A0YmEwQ2ZmYXhHZUIKVEtxdDR6Y01oVXVCVDhWWW9jNHdsSXV4VlVrSEMxMERnMVdqQWhaZzRKL2k3elpQTVUvN1RzWC9oZVp2R2dJMApqVVhlODZndlZqNUo5L29QZ0pISVBvYXVZNFNkVmYzeW05VC9xYVR1ejYyeUgzL2ZwbVhlVHVSaysxbXpLL1Q0CmIwR3BmRkwvM3lhcmpPdXJISjNrQStkYTFqT0s3WVZqQnFmQ3ArUk9QdGZ4QmF2YUtUcHdDaVNpUllIRzBLbDcKaVByaTZlMFhkRkxkM2NzVTFRR09ZWHQ0R1F4WVdzcWJmZmJUVVFJREFRQUJBb0lCQUN5YjBGaFlWSEhPRVl2UAo5SkhhNmxlZTM3YXp3WkJyQm1sbjUxU2VNa2Q0cHZra1o1ajlVY3pRdXpLdDRrVktNN3A0VW9ybGRaNE44bmJXCmhpaDFNeDk4ZmZud1ZObGtwNXQwVTlVZFprY01Zd1p4dUVmTlhrZ2NnK1pyK2U1RTVxcU9DZlFUdVhkT1ZUM28KcHZEcis5aDRyb3FwdDVCVzc0MW1QZ0hWVWY0NWxMelU0c1llWkZHOFBYS0pBY1ArcU5CU21ES1Y3VEQwSHpZaApPRUtkRU05NmVUUUptWGJwaEdnL2lmSlcwakJKWDNVWHdJeTUxOE13NTJTdVA3T3lzRzNIOWlTNE1yTjVKb01vCk9PeXVQMWNpR1IxSHc1VVNKUmNpWFFYZmRVbHBPZ0ZsUkttY3lGaUFxME5CUHNPRlZCZWthRG5iNW40RkRLZ3gKZW9BK0hhRUNnWUVBK0lWZFlvcUhsdFZVdE4wMUYxdDJIWjFzaG5PZEc3RHFxSWRSN2pvdVcxbHlDcEoxbWdLbQpPQU12UVhXcDVEOC9xbnFveXVrRzVOZnVKdXlMcncvNGhRTVN1WGF0UEJuTEVjNldBeXNnVXVxd05DbWdEYUF3Cm1yUDFwVlhaVHZ3L3gzOTBhdlR0SjJUa0VkNjlwNGE5eTAvOUJXbTBtZEtWL1R0VTNJYzE5OWNDZ1lFQXhURFkKVW00QlNxb005R1JHcmFJQnBzNjBlQVJXM3A0eUtLcTV1UE83Z1JvOEloVy9DdFA3cVRlWkFhbFhaSmFnclNCNwpKeVdBajFIR3NzVHFrYlhuSlFUaXF6WDBaWjA3WWJjSENzRkNUb2Fabk5lbXBFbWdXNWtWUUFvTFRrOVJPa2NwCmJqTTFRbml1VGxYeGNMcDhtUmUzYmNZNVlwbnl3ZVFWak1meENSY0NnWUF2eXAzUnhHZ2N0bnVxcUZ0OFdXZFcKZko2UklJeVc5YWU2cndNdmQ5clFVRndnOGxkUlBhOHZXRlZ2Rml5TXF5a1lKS3h2RU83MWRSemtPVnNIV0YvbgpYRmJ1ZVljSTVzRHBkTHZlY2gydU5GbWNQbUQ4SGRFYS92NS9SQW9kS1Y4dWd6RWxIR0s2ejZrWVVxaFFIaFpECmtlZExjaTk3NFVaY3cxc25hWTBVVXdLQmdBR25wVWtienpyM0xtQ21yc2txUU9WTGVzdy9EUk9WTkVxUEZEdnYKSDdXM3FLV0lsUy9jRTVLWit0aSt1Uk1KQ0pRclg1MDJmVnUyamZwV0dMbmNVdkpHbGpobG5ZVjB5bGpKbG0rSwpxNm5KQzJUN2tsUnlvYnZqRHdDWWxQdTFRck5BZ2FLQkg0Tk5TL2t3VTNSa3ZFTDBwZjl2Mkc5eFowNGxRZUVLCmxJVkZBb0dCQU9ac2hMNWZRVFpNeXhwU0pEMGJ1Nm9admJnMnFUV1NuZmlwZEUrTkQ2OHIzSlFmVmFIWTg5elcKYmdNYkZvUXJTTEM3OFZPWVM0U0lyMkxZZXVNOHkzVUdlRWFkWFM0T2F3SzYxNWpKbVE5TytrcUdXUGJmS0FoeApnVTVhcmRjZ3U2VlJUVWJKamJ4dytGL3hmOHdvSnVNMnRRbmdMMTk5R2NnOWtjT3hLd0w2Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRTDg2VGMxS3Y0cVZwQk0rRUJsNUs4VEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOekkzV2hjTk1qY3dOakV4TVRreQpOekkzV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRG53Q3h1VHRIRFJrL21GdlYyVU5rdW5PRlZiRUo5V01hdFBxcHZFdkw3eXVDblBEaDAKOUFPN3pUSmgzaWpXaElpeUtxdDJLT3k4cUxUZ01JTkVMK0d4bjkyZllKM1o2Si96T05RS0VkejNLcGs3NWRTKwo5alRCeHgwRTlraXN3UzRYQS84MEplTWMyUUNDS0VEZjZkQjdrMGcydFdPdm8rOEZKVXZUMHJkUUg0UXlrTXplCkJiQzVHaHBTWmFWR3MwNnI2Z0xCNzJ2ZTZBakRUeWNxTXoxK1hnVHNHaUdDSVFuaStMdkZ1SE83ZWEvaWNIR28KTWUzL3R0emc2ekFXYjUvdzJZQ2NTVEFNbUwvdmM0Zm9GWlBIYUtVMGFjK2tXUmtUcWxicGR2a0JTNk9HS1RuTgo1UW95QTVSNENyVnpFRHlpTHFlc1d2TmtmemJxN3lQcGpOK05BZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVXbGp5SFpxbjNMc3VpVG5wZFRuaE4relBiTEF3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFCSUNLY0padWlXUW10KzJtRy9PMUZOU0VGY3d1VjN5WnN4Tkp3Uk4zeHdsMXMxSlhCWklPWUZaCkROV2RwUDhVcXdFcEJ3NW5DUC9tUWRFZHVmNjNYd2pQcytIK29EYSs5VTVlNzIrcnBFMFBXWks3bkh2bENOQ1YKQU1Na1RNbnBidkJieTB1c1ZMRkhtdEJwZ25pVjJnbkZtSWVyL1JZNkJJTVhEcUpKaFFPdXpwU3pQTXhDUXJFNgpxbHVlL3YySUpSbldsbFM3V0VQc1FVYUJsREpQRFJPUko2ZGdVZlhqYUdicUl0THlWcGpzMEF1MVB0MUlieUN1CnJYNUZGLzhmQng4OUl3MWRPRVA0NWFaeEhOeHVueXROSXdGVFRQRzc3NDJmNDFZSndJZW9leVlxbGlZaCtqMnUKSmpQUUh1SXU0RVJYdEVqczhPMlJZS3B3T3RmcitTbz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTVENDQWpHZ0F3SUJBZ0lSQUxBUVZvVUREenJ5S09RUUpWdHp1UzR3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN5T0ZvWERUSTNNRFl4TVRFNQpNamN5T0Zvd0l6RWhNQjhHQTFVRUF3d1lLaTVvZFdKaWJHVXRjbVZzWVhrdVkybHNhWFZ0TG1sdk1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXl1QlhVS1BNTlhNOXBGVE9pRmQ3aE4vaU1CVm8KT3JlTmx3K3d5bWs3MGtVNnc4cXBXTnRndkxYbE9qdVBUYi8yOVd0bVFLWVNTNksyTDBRS2dsQnpzdE1aOExiUgpEUHFLVWtKZjIxaDE3cDhGRWxPWldDSzlPajJ2dkMrK2tkc2xUSGtTVERqZ2VQS3prS2hDUXpmenh2QTNJRmdUCnF5cWY4SVpxVGF4VHBzbWZ4Rnpwa1g5S1kxRDBUUFVDNy9COSs1czdRNUNmTWR6ZzlnOXYzTU9BMFhGZnRTZ28KK0NOa3U3RE15SThWUXNIZFlvZ01Tb3k3ajlSYkd2Si9YUWZpaDJLNmRLUi9GaWp5K3hEY1FmY0IzZ3lvNTJ3UQpySTVHR25zRkg5Rkc2ZjVMZFppd2lVVEdBaXZNSnA1ZHZxV0ZGb05kcVFITlVzTHNFbTMzd2ZJZld3SURBUUFCCm80R0dNSUdETUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUIKQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCUmFXUElkbXFmY3V5NkpPZWwxT2VFMwo3TTlzc0RBakJnTlZIUkVFSERBYWdoZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d0RRWUpLb1pJCmh2Y05BUUVMQlFBRGdnRUJBRDVxVk5XY2Ztb0M0ZHBXcHF4dkMzT2xXZFRLRElnK1o5UGJGclNaQkNIcEVQa04KQjlKdHllUWpZd2tiRGU0djdDcytMa2dkcDNnUHRQaDgvU2tMakl4Mm85RUh1YWloWXI5ZUxFOW5XTDUwaXVtUwpkSHBaQVpKVnJlR3ZlUGpBQkhEVGFwd0J5MUtLaC9oWWFFMm4vbXVkbUlpaHlqVGJYNmt0UVdNUnhxdCtRcnZPCnVUTFZyQ1NnQjhpNHN2bnByOTRkRzBuL1cvOEJZUWxGclR5VFAzcjI3NFVvektNUEhaaHE1cWNLdDVMNkc5cFAKcTJJQ0Y5MElNY1dCTFVZM0txV1RLZWIzQVFXcm5iZlpVdzA3N1BPRWdnZ2Vqcm4yQTd0ZlhrRTY4M3c2Mkc5SQpSUTlKMW1kL2tSMzNMNmE5cE9WUVVzQnFQM25LcC9id2JTMWxRdzQ9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeXVCWFVLUE1OWE05cEZUT2lGZDdoTi9pTUJWb09yZU5sdyt3eW1rNzBrVTZ3OHFwCldOdGd2TFhsT2p1UFRiLzI5V3RtUUtZU1M2SzJMMFFLZ2xCenN0TVo4TGJSRFBxS1VrSmYyMWgxN3A4RkVsT1oKV0NLOU9qMnZ2Qysra2RzbFRIa1NURGpnZVBLemtLaENRemZ6eHZBM0lGZ1RxeXFmOElacVRheFRwc21meEZ6cAprWDlLWTFEMFRQVUM3L0I5KzVzN1E1Q2ZNZHpnOWc5djNNT0EwWEZmdFNnbytDTmt1N0RNeUk4VlFzSGRZb2dNClNveTdqOVJiR3ZKL1hRZmloMks2ZEtSL0ZpankreERjUWZjQjNneW81MndRckk1R0duc0ZIOUZHNmY1TGRaaXcKaVVUR0Fpdk1KcDVkdnFXRkZvTmRxUUhOVXNMc0VtMzN3ZklmV3dJREFRQUJBb0lCQVFDMVZrOVZlZ05tNTBuNgozLzczcVZKejAzWW15b3V1cURDOERMOVdQVGZHWERFSm50VTk0bUVXYkhPbldHTmYrSzB5Y3J3a0h3ME5aRFA2CkRaUmpKS3cxOURFa2t4Ukt5SXJvdWdGYVd6aVdnTGNVeVhxd1orVEI4UzlxUXpiUXdwUVZSY2JRTUtxY0VUdmwKbWpBWVN5UHY5dmtmUlByWHJUTG0yQTZldk9ETW02WTJpWVdWWkxpSzJya2R0VEdobmgzanJqWjJJZ0U0M0pTMgpEc1hKc0dMNWtPU3YvZ3hqeWQzS0txZzAvTkg0NkY5NVZFVTNBakhWb1hFSUdiUS9wNjZ4dFZNdU5Wb090eFJJCnFRU2NFbVVlRnN0RnJzSVl0dVluYjg1bzJaeXlkNkZKemUwREJVM3RtclBRNk9zOExWTmdYR3pjTEhYTzF3WGcKTDI3bHNRblpBb0dCQU53V2RNVkhITTdzRHIzUnAvVEVBaCtyK21uaTZFdzBpUE1yYzNWMUI0c25VQTlxMmNIcwpkd3NxYTJUWUUvMi81R0VURXFWL1pjenVseC8wS08yTyt1MGFUaEptL2NMaUYwZVhocW1BQnFKdDNUYUZhVEJOCjZIakxwSGlpemtXWElIbUk1ZTlBam00cGpDK0JaWFhSQU5yNjRCa0h3aU15ZmpsNUJXdjdnTVhOQW9HQkFPdjYKN1lNZFpIclA2MStVeURiRE5iMWdUTWlINVN3K2h2aE1oT1ZHQUFrQjA2d1JrYzFMaStZYmhoVTFsTy9yTGZjRQphUzBCY056cCtIMWtZdE5OcWdaOFN3eE1XaVdXOU9EN04rQlNuaUFjeGJqZkhzZnFwRUJMV0xPbW9QVkZPdW9VCnU0QWlRZjhWaVZiMTNic0ZJV0w1NDBrakpFbzNrUUxBWnV1QXpOSEhBb0dBWDdNQUNYdzNnWjVSZHFhQWdzVHMKSzN0cmdybGd5eW9ZMXF2eEk0VEV4L1JMTXJrQ2dQbGlkaDkyM1QyN3k1MnlINmZjZHN3anB1MmtGd2ZpK0JFdworUUowS2pwUVkzcE9KeG96T3VicGU1Mk1FQllJdkRGVVFacERKUldkM2RLdUUwcTh1TUQ0YmR4eEVZTVJiQjU2ClliMnV6aE42ampWNWYySXBRbC8xQ1kwQ2dZRUE1ZlBjdFJMVVVsVUFRV0RqaFhIT2tWOGhFNXhSZHo3ckdWUy8KZ0FncGlwMXNIbFgwcFlCRHNKVUxvT2xZM0Q1cHlUZFVJbFl3SENZblRsR2ZkOWRMb3d4RnVaTkJtVFcwSlBUSgpLMkIyMUVZVmFxU0tBemdrbkw2UGpta0dtbHUvSUZIWnNQQXhMWmhZQUJTUTRHa01jcjJkZlN5d2RWNFdnZjdwCmkvNDBHUXNDZ1lBZTVTZnZTeFlQSHlZRU5McVYvQnJ1WnNCNk5MbGx4Q2Ywb3hVUFJBVkxCYi8veG5Lemw4MnkKT3BFRDlwdS95YlJhOGVwZndPNWpVR002ZG41akxYdWNML3AwT0pIKzM5bk41OExaT3ZXcVFudzFVakptZzNhNQpCTXpBZU9OUVZTdXdBNWZGeGQ2UHJHVnlNMkQwYzl5bTlFYWhMN29xUHF6TnF1cGpIRXBjQ3c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRTDg2VGMxS3Y0cVZwQk0rRUJsNUs4VEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOekkzV2hjTk1qY3dOakV4TVRreQpOekkzV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRG53Q3h1VHRIRFJrL21GdlYyVU5rdW5PRlZiRUo5V01hdFBxcHZFdkw3eXVDblBEaDAKOUFPN3pUSmgzaWpXaElpeUtxdDJLT3k4cUxUZ01JTkVMK0d4bjkyZllKM1o2Si96T05RS0VkejNLcGs3NWRTKwo5alRCeHgwRTlraXN3UzRYQS84MEplTWMyUUNDS0VEZjZkQjdrMGcydFdPdm8rOEZKVXZUMHJkUUg0UXlrTXplCkJiQzVHaHBTWmFWR3MwNnI2Z0xCNzJ2ZTZBakRUeWNxTXoxK1hnVHNHaUdDSVFuaStMdkZ1SE83ZWEvaWNIR28KTWUzL3R0emc2ekFXYjUvdzJZQ2NTVEFNbUwvdmM0Zm9GWlBIYUtVMGFjK2tXUmtUcWxicGR2a0JTNk9HS1RuTgo1UW95QTVSNENyVnpFRHlpTHFlc1d2TmtmemJxN3lQcGpOK05BZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVXbGp5SFpxbjNMc3VpVG5wZFRuaE4relBiTEF3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFCSUNLY0padWlXUW10KzJtRy9PMUZOU0VGY3d1VjN5WnN4Tkp3Uk4zeHdsMXMxSlhCWklPWUZaCkROV2RwUDhVcXdFcEJ3NW5DUC9tUWRFZHVmNjNYd2pQcytIK29EYSs5VTVlNzIrcnBFMFBXWks3bkh2bENOQ1YKQU1Na1RNbnBidkJieTB1c1ZMRkhtdEJwZ25pVjJnbkZtSWVyL1JZNkJJTVhEcUpKaFFPdXpwU3pQTXhDUXJFNgpxbHVlL3YySUpSbldsbFM3V0VQc1FVYUJsREpQRFJPUko2ZGdVZlhqYUdicUl0THlWcGpzMEF1MVB0MUlieUN1CnJYNUZGLzhmQng4OUl3MWRPRVA0NWFaeEhOeHVueXROSXdGVFRQRzc3NDJmNDFZSndJZW9leVlxbGlZaCtqMnUKSmpQUUh1SXU0RVJYdEVqczhPMlJZS3B3T3RmcitTbz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQU4yN3VLU0VSQkhPS24yeDdaeG9PL0F3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN5T0ZvWERUSTNNRFl4TVRFNQpNamN5T0Zvd0pURWpNQ0VHQTFVRUF3d2FLaTVqTnk1b2RXSmliR1V0WjNKd1l5NWphV3hwZFcwdWFXOHdnZ0VpCk1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRFVEOStsb3dmNU9ScEw2TmtTbmorSFdnZnUKNXRlVFpZRHZKK2ZoMGE4Y0VSVUp2M0x5RkdUenJ4TUN1OGFmMTYyTC9JNXhlQWJwTGJsZ1I5TnZYR1RaRFhzVgpqejNRM0ZKeDg0R2Y3RFBjVm1pUzI5akhTOGtHREFUYjJjU0tnOW5kdjFhRXlzR294UmFlL0FydDI1WGRmSTNoCjhHMzdUVjZJVVFFSVBSOU52SnpqaWs4Rk8zQW1leFBqNnE5SXREYklSRU1NTzV5RU5mUFJlRXZmazhlQ3lHZi8Kb0VrZlJJVG4rMWFhR2NvRVlEQ3FPcHphWFFtV09vMWJPMHFxZk50UEhFNmtwYUl5YXAzSVovR1B0SEVkZUs4cgphNmU5T2loQi9FTDRiNkczOGllQmpnbURnSE1EeGZnZ3hYaFlpOUpWMUNQL1BZV1NMQXQ0WTQzUE1BVHBBZ01CCkFBR2pnWWd3Z1lVd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGRnBZOGgyYXA5eTdMb2s1NlhVNQo0VGZzejJ5d01DVUdBMVVkRVFRZU1CeUNHaW91WXpjdWFIVmlZbXhsTFdkeWNHTXVZMmxzYVhWdExtbHZNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFCV3ZmY2d2QmpqRVM2RG5UWlgxNnNQakY2OUpxanRoaUZCWkZTTDVpdWEKU2dOL0gvL0hTbE1BWkZ4dWFZYWpveGNPWVVzd3BKS2tOSFVqZkx4R0FZUzgrOEkvQndKczJNdzJwc2xVVUxrdgp3VDQ0UGFSNkVyWnphU3hQclArVkdxL0lHY0JlS01GRFhrMllidFBraUZJMWNRSmp0aWZydmtBQlhjdkxNZjc1CjVjcFIzTi9ibFJIc1BodzdUbEN0aXZhaVBnVFh2QWRlRTcwN0JoQmw5ZlpiYnBUKzlhbGVKQUVpR0EyMnBxWXcKMDdoYnVPNS9ZYTdMQzk3cmROU3FRdnphQitVRElBTWJQSG85UUwvenhVcHovQk1ydS9ZMnZGbnVwdFdEc2NlQgp1MHloUzFxcld3czZsUTZlaHlxOFkwME9yY2l6czl0bTdYajZ1c1JrKzlxdQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBMUEvZnBhTUgrVGthUytqWkVwNC9oMW9IN3ViWGsyV0E3eWZuNGRHdkhCRVZDYjl5CjhoUms4NjhUQXJ2R245ZXRpL3lPY1hnRzZTMjVZRWZUYjF4azJRMTdGWTg5ME54U2NmT0JuK3d6M0Zab2t0dlkKeDB2SkJnd0UyOW5FaW9QWjNiOVdoTXJCcU1VV252d0s3ZHVWM1h5TjRmQnQrMDFlaUZFQkNEMGZUYnljNDRwUApCVHR3Sm5zVDQrcXZTTFEyeUVSREREdWNoRFh6MFhoTDM1UEhnc2huLzZCSkgwU0U1L3RXbWhuS0JHQXdxanFjCjJsMEpsanFOV3p0S3FuemJUeHhPcEtXaU1tcWR5R2Z4ajdSeEhYaXZLMnVudlRvb1FmeEMrRytodC9JbmdZNEoKZzRCekE4WDRJTVY0V0l2U1ZkUWovejJGa2l3TGVHT056ekFFNlFJREFRQUJBb0lCQUhhdk42VlZYRllRcm5ZRApxTkh4dlc1OFplcEFTakRWWTFiMlI2SXNIOHdlaDE3QVJvM1QramdrS1Fpam5XUENhdi9vNXJQODBDbGJET0FrCjh1SGxuUStacXVTREdiNjJRSEpFTGEwYW5sL1lBSWtKQUFkeWs5eU5oMzZnSDQ3Q2dvSEgzNTFNZVJ5Q3ljbEwKR0xiTTZkQmZNRzFlaWI5WEt1d3lJZGpCbEs2Rk4wbHVjaVZLTHJzREdIQTIwdUtZV3FqeTNaZUNLMDBxNGR3awo3ZUluc2tESVdaM1l5RHF4WHhJd0NQajI0bm1XUXNTQzB4cWFtLzNyRzhxMFdrYVJheFc1di9EWGdMZ2JNdlMwCnRFVmpjdjIvQUhhc3lLTEh0RmtjMWFkTTRVL3F4VU9GU3RMSlJiOUV5WjhnZkZsaXgxY0dlRFBGalYwQ0xyNVYKQXd2ZFhrMENnWUVBM1lHTUwxbUMxeWJQZEZNZlV3VEJIZXQzckpmVjlIZXhlTjVQQkdEaGFBT3NHUDZVSHN1YgpPWmJMNTBZdmpDNXFXdytqVHZ2U0ZnR1liWTlRN0cwR0NXdVRKOTVjcUpTSGNLRXBHbFRpaFI2bmNKalRjbUhsCjJIblZjM3VUNGJFTG56b0t5Mi9pYm5jS3ZUOS9vRU82dGdwOCtrZlNxQXhBWXZrZkVLTHdGNDhDZ1lFQTlSWFYKcFU3OVV3ai9CbHRwM3Rkbk9FTFNSM2p0cmtCVThXSmhiYzM4aW9Bc21sYlF3V3dMR3kwQ2pIenZNYU9zMEF6QQpCbXlwSjR2S0k3aG1YMTFGajZxbHNWNW1SeWVIdGNHVDhRdlNmQXNXV29xb1BQUVdMZlFnd3N4UTRkMW1adWJICndlNm5QM1dzcUZxRE1MYnFCYXphSERXaXluY2JOZ2U5SS9LNm9BY0NnWUJqMVptN1ZacTFJaGJxbFBSUFZKczkKd3Ywald5UGhsWGoxd3l6V0NseE5weW9QOGQ0TXF6UUJGc2c4S3RRUFdIUXpLcTh1VUMxMklhM3o0MTVUMFNlaApZMHpsOFVETjhuUEEvY0lxemd0eWVFaDdaVVlZRGF1c2orejJxY0lUUE5yQ0gwVHlRREZNSEhkSXFLLzdLY3VqCmRNS3pnMStjd2pqYTR2RnZiQ0RPWFFLQmdRREZMaTc0VThlK0laUEVrcEZvQnhkMWpWVk95WDA0WDJ1MzFQWWIKK01rQXlVU1pXOVdTZUpHcTZKaVBYUWk0Z0QzT0dTUDVSejBFb3hRYmp3VldIbDJUeTdDSk5qREZlSWxYOHdsSwp1cjg2cTFUdHZYYkRxNEdZc1R3V1hYbUpicTR2aGVjYklSNFFFV1c3QVM5aFp4aDdQbWt3bnZwOU9EeDlTTmFrCmNHb3p5d0tCZ0E5b1Zia0ZHbXhlZWtYQzFWK0NMZVg3U0d4MGM2MGRZMSs1dFFaeFBrYlpmVEx1ZWZ4WG4yZXoKN3Fva3B1MmNxdDNRM0IreHhjRGdtejlLNzQveHZGQWwya1gwNmVwSWNOUzZIaFYxT1VjRmJKQ1RzVThsTWFqaApjNzlBNi9GRllhYXoxRWlPNWY0dWFXaDQ3MzZGQmxxQnNRM05Pc1JrVVVSWi9YR2tlSjNMCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  skip-cnp-status-startup-clean: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  policy-cidr-match-mode: ""
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"
  # If you want metrics enabled in cilium-operator, set the port for
  # which the Cilium Operator will have their metrics exposed.
  # NOTE that this will open the port on the nodes where Cilium operator pod
  # is scheduled.
  operator-prometheus-serve-addr: ":9963"
  enable-metrics: "true"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: c7
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "17"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  # Default case
  routing-mode: "tunnel"
  tunnel-protocol: "vxlan"
  service-no-backend-response: "reject"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-masquerade-to-route-source: "false"
  enable-wireguard: "true"
  wireguard-persistent-keepalive: "0s"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-local-redirect-policy: "false"

  kube-proxy-replacement: "false"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  enable-host-port: "false"
  enable-external-ips: "false"
  enable-node-port: "false"
  enable-health-check-nodeport: "true"
  enable-health-check-loadbalancer-ip: "false"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  bpf-lb-acceleration: "disabled"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  hubble-export-file-max-size-mb: "10"
  hubble-export-file-max-backups: "5"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  ipam-cilium-node-update-rate: "15s"
  cluster-pool-ipv4-cidr: "10.7.0.0/17"
  cluster-pool-ipv4-mask-size: "24"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "true"
  bgp-secrets-namespace: "kube-system"
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"

  k8s-client-qps: "5"
  k8s-client-burst: "10"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  # default DNS proxy to transparent mode in non-chaining modes
  dnsproxy-enable-transparent-mode: "true"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-xff-num-trusted-hops-ingress: "0"
  proxy-xff-num-trusted-hops-egress: "0"
  proxy-connect-timeout: "2"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"
  proxy-idle-timeout-seconds: "60"

  external-envoy-proxy: "false"
  max-connected-clusters: "255"

# Extra config allows adding arbitrary properties to the cilium config.
# By putting it at the end of the ConfigMap, it's also possible to override existing properties.
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: c7
    peer-service: "hubble-peer.kube-system.svc.cluster.local:443"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-hubble-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-hubble-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n\n        # Liveness probe\n        location /healthz {\n            access_log off;\n            add_header Content-Type text/plain;\n            return 200 'ok';\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumbgpnodeconfigs
  - ciliumbgpadvertisements
  - ciliumbgppeerconfigs
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  - ciliumbgpnodeconfigs/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumbgppeerconfigs
  - ciliumbgpadvertisements
  - ciliumbgpnodeconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumbgpclusterconfigs.cilium.io
  - ciliumbgppeerconfigs.cilium.io
  - ciliumbgpadvertisements.cilium.io
  - ciliumbgpnodeconfigs.cilium.io
  - ciliumbgpnodeconfigoverrides.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  - ciliumbgpclusterconfigs
  - ciliumbgpnodeconfigoverrides
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumendpoints
  - ciliumidentities
  verbs:
  - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumexternalworkloads/status
  - ciliumnodes
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumendpoints/status
  verbs:
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumexternalworkloads
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-bgp-control-plane-secrets
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: etcd-metrics
    port: 9963
    protocol: TCP
    targetPort: etcd-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: NodePort
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
    nodePort: 32379
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-agent: "unconfined"
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: "unconfined"
        container.apparmor.security.beta.kubernetes.io/mount-cgroup: "unconfined"
        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: "unconfined"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
          initialDelaySeconds: 5
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.memory
              divisor: '1'
        lifecycle:
          postStart:
            exec:
              command:
              - "bash"
              - "-c"
              - |
                    set -o errexit
                    set -o pipefail
                    set -o nounset
                    
                    # When running in AWS ENI mode, it's likely that 'aws-node' has
                    # had a chance to install SNAT iptables rules. These can result
                    # in dropped traffic, so we should attempt to remove them.
                    # We do it using a 'postStart' hook since this may need to run
                    # for nodes which might have already been init'ed but may still
                    # have dangling rules. This is safe because there are no
                    # dependencies on anything that is part of the startup script
                    # itself, and can be safely run multiple times per node (e.g. in
                    # case of a restart).
                    if [[ "$(iptables-save | grep -E -c 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN')" != "0" ]];
                    then
                        echo 'Deleting iptables rules created by the AWS CNI VPC plugin'
                        iptables-save | grep -E -v 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN' | iptables-restore
                    fi
                    echo 'Done!'
                    
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - CHOWN
              - KILL
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
              - DAC_OVERRIDE
              - FOWNER
              - SETGID
              - SETUID
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Unprivileged containers need to mount /proc/sys/net from the host
        # to have write access
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        # Unprivileged containers need to mount /proc/sys/kernel from the host
        # to have write access
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Unprivileged containers can't set mount propagation to bidirectional
          # in this case we will mount the bpf fs from an init container that
          # is privileged and set the mount propagation from host to container
          # in Cilium.
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-dbg
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      # Mount the bpf fs if it is not mounted. We will perform this task
      # from a privileged container because the mount propagation bidirectional
      # only works from privileged containers.
      - name: mount-bpf-fs
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        args:
        - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
        command:
        - /bin/bash
        - -c
        - --
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        - name: WRITE_CNI_CONF_WHEN_READY
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: write-cni-conf-when-ready
              optional: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
            drop:
              - ALL
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
      - name: host-proc-sys-net
        hostPath:
          path: /proc/sys/net
          type: Directory
      - name: host-proc-sys-kernel
        hostPath:
          path: /proc/sys/kernel
          type: Directory
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              - key: ca.crt
                path: client-ca.crt
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/port: "9963"
        prometheus.io/scrape: "true"
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.15.6@sha256:5789f0935eef96ad571e4f5565a8800d3a8fbb05265cf6909300cd82fd513c3d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        ports:
        - name: prometheus
          containerPort: 9963
          hostPort: 9963
          protocol: TCP
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      initContainers:
      - name: etcd-init
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - etcdinit
        # These need to match the equivalent arguments to etcd in the main container.
        - --etcd-cluster-name=clustermesh-apiserver
        - --etcd-initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --etcd-data-dir=/var/run/etcd
        env:
          # The Cilium cluster name (specified via the `CILIUM_CLUSTER_NAME` environment variable) and the etcd cluster
          # name (specified via the `--etcd-cluster-name` argument) are very different concepts. The Cilium cluster name
          # is the name of the overall Cilium cluster, and is used to set the admin account username. The etcd cluster
          # name is a concept that's only relevant for etcd itself. The etcd cluster name must be the same for both this
          # command and the actual invocation of etcd in the main containers of this Pod, but it's otherwise not
          # relevant to Cilium.
        - name: CILIUM_CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        # The clustermesh-apiserver container image includes an etcd binary.
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --auto-compaction-retention=1
        - --listen-metrics-urls=http://[$(HOSTNAME_IP)]:9963
        - --metrics=basic
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        - name: etcd-metrics
          containerPort: 9963
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - clustermesh
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt
        - etcd.config=/var/lib/cilium/etcd-config.yaml
        - --max-connected-clusters=255
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        - --controller-group-metrics=all
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: IDENTITY_ALLOCATION_MODE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: identity-allocation-mode
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        ports:
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir: {}
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "clustermesh-apiserver"
      serviceAccountName: "clustermesh-apiserver"
      terminationGracePeriodSeconds: 30
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: clustermesh-apiserver
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.15.6@sha256:a0863dd70d081b273b87b9b7ce7e2d3f99171c2f5e202cd57bc6691e51283e0c"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 3
          livenessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 3
          startupProbe:
            # give the relay one minute to start up
            grpc:
              port: 4222
            timeoutSeconds: 3
            failureThreshold: 20
            periodSeconds: 3
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          - name: tls
            mountPath: /var/lib/hubble-relay/tls
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Always
      priorityClassName: 
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 1001
        runAsGroup: 1001
        runAsUser: 1001
      priorityClassName: 
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.13.0@sha256:7d663dc16538dd6e29061abd1047013a645e6e69c115e008bee9ea9fef9a6666"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
        readinessProbe:
          httpGet:
            path: /
            port: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.13.0@sha256:1e7657d997c5a48253bb8dc91ecee75b63018d16ff5e5797e5af367336bc8803"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
