---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRVDArRm9kQ3crMTBCMTFyMEpENXVUVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEEyV2hjTk1qWXhNVEl4TWpFMQpOVEEyV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRHRJbVNJZ2ZXYWhCSnZWbzk0MlNQSWlhTTBjZ2JzQ293QkZSN2pWRmRrTUdkUTBIU1QKMXZjTFl2TVkyU2psdzRXTmtOUFEyanBDZ245QmNQY0FXbFBjRHJUSHFMTFB6UWV5WENuTzlEazdITDREZWhVZwpjVmpNQ1pRYXZuRjVmOHhOanR2empuaWgwZnpBTzF4dG1aZFR1QTlYUEpZQTluMEkzc3ZxY0ZRQmU5UkM2RENhCmFUaDVyY21vOStvQlVUajBPNWJ1bStzcFJmWHh3eDUxNUxheTU0Tm5sazhxNG5LWlZPVFZHcTlzbzdhR0hMaUkKNHBGcmhpTEY4ejJSMjhVL2ROcG1RMDBOOG9CTndzVVkvOU5sZFZRMWx5SjNhU0d3cGFVSWl4cXdrMzYzaE0rUgpJMUJFYWNNMmxrMm1TdURLQ3BqWURTME4rMXh6aWxCT0hDUnRBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVkdWdVWHRqdTdVUHpsUlRsUGN4WDJMaUNGb1l3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFKdW5mbmkwRjFCTUlPN2o5Nzlsai83VEZkdjRpOVBHY3Vsclc5aVVabFVkL2l4cHIwVkpUL1c2CnhkQ1BUVWUvUDVUSHZYUEZhdmYxVjJBTkFyZWU2cXFCWVJxbE14YTZUSTdwRmNOdEgvdFIrZVpqOFlCK20wQVIKL1llTzdCWC9RWlBHRnVhd3EzK3FJdXVybXRQNGp3aGd2cjJRYTFGY1R0RXN5R0dsRVYwbHoyYjYzZERoSEJPcgpIRjBmMFU5NERKNS9sMzBoSnpDYXFpQUl6VzZkSHd4Y2FHZXhTL2VjNkh1K1hteE0zK2lzZFBnbHoyamhtN1RtCjMwck96bE9yM0t5aDE2cWcvd3hNQS9hOG5NWlRVR2V3NnhDa1diUTgydGpTajRXTEVzWUs1a3E3RVh1T3U1bE0KMVFKY1hyL2tndlNiWGxTMGYvN3JBNUtWT2x6UzdCQT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBN1NKa2lJSDFtb1FTYjFhUGVOa2p5SW1qTkhJRzdBcU1BUlVlNDFSWFpEQm5VTkIwCms5YjNDMkx6R05rbzVjT0ZqWkRUME5vNlFvSi9RWEQzQUZwVDNBNjB4Nml5ejgwSHNsd3B6dlE1T3h5K0Ezb1YKSUhGWXpBbVVHcjV4ZVgvTVRZN2I4NDU0b2RIOHdEdGNiWm1YVTdnUFZ6eVdBUFo5Q043TDZuQlVBWHZVUXVndwptbWs0ZWEzSnFQZnFBVkU0OUR1VzdwdnJLVVgxOGNNZWRlUzJzdWVEWjVaUEt1SnltVlRrMVJxdmJLTzJoaHk0CmlPS1JhNFlpeGZNOWtkdkZQM1RhWmtOTkRmS0FUY0xGR1AvVFpYVlVOWmNpZDJraHNLV2xDSXNhc0pOK3Q0VFAKa1NOUVJHbkROcFpOcGtyZ3lncVkyQTB0RGZ0Y2M0cFFUaHdrYlFJREFRQUJBb0lCQVFEQkJCMlFmemZLYlhZVAo2Z0VkL0tDRHVvUjlTOU1XamY4blltbWg0Q1RDQ0NRUVE1eWdPWGtjYTQ0enk0N2VkaWRlODJOMXZDdHZ0NGlkClc3V3hNOVRPYWFuOFdmUXg4RkV6ZkpFTFF2N1NmcktyWWRPUWRMSXlZaG1MS3poeURQUGVyVW1iRlh4Yk92RGcKQjNGVVJKQklOS2xIK0tpZ1lBR21Gck1rUUFvZ3FYa05neHpmOWpzbldaK1VQRnBlYlU0Vm0wL0k4czJ2MWxydgpqdnU4QUIzZEZqb1owZXp4eGVXa1lTTzRqcExzS2tUejl2dWErcDhUbGFoZlZDamZ0M2ZTQ1lpOHIySkg2cS9OClhncHpGYzVpVFdNRWRHZDlmTDhPSk44Skk1dFByUkRmNi9MOTRYS28zRE9YQnVQQ2ZwU05rcmw4TXQ1cXRLUlEKazAyc29pYUJBb0dCQVBGcWFXcFJVa3dpQ21RK2dGQkZNR0VncVI1MWkyM0ttb1p3aDhQd2RzVVBFK1NkQ0ZjagpuQnFLYmg2aFgwZ1lwWjFJN0pQempUZjJuOUN4YiszT2tQV25xWU9idElZQXB6TUFJcU1sY2VVNjBqYTdVSkdiCjlocnIvYmRxVFhyUGRPZDZzbmE2Q3hxQ2x3eTFtdDRWSWlMUjN2VVRuWXNJNGVpeUpsSnhsSHkzQW9HQkFQdDEKeE1DV3RET2NMeHhuYWxMUG1FS0xDdGZScVZZTEc4dnMxaGprK0MrS3NzeDZWV3hET3Q0VEt6b3RXUkJ1NFhQYQpkbWNsYmFSVWpQWnp2aGJZeWxCa1Y1S25Sa3c4L2ZGYWRYckpLd1pRbHMzWDF5dTVCNHRtV0hnNVZVQzZPZXhuCi9XakRwWkZqZGRJTjFPbzVUbWpWYmN0UkM5YTBzUFAxODVaYkpndjdBb0dBZVJtakZaVURqbk5JK1M0dEdaY0wKaEwxb2VJSUlWaVBhemZPbTl4QXAxQUlUUFl2VVFqbjN0WXlaWHI0ZVdNRWNXc0RaQkFLWlpXaE9sTlpkU2xKagpmd2NDenFVTnNtYWplTDdwb1NOSWRlL0N3WGZIRzdPN2laZTE1d3JwSU9EdVNLdlEyQ1BOTEJnMEEwa2FEYXRXCk8xZEIyM2hpZi9zTnI3ZWw1NWRZSUJNQ2dZRUFpV0o0a3JoRDBBYSsvb2ZKNFdDbVVZVGg4YlFORG9PWE5qMDUKWS9TRlhJUXMxK2Jta1BYU1RjNnZTV1BKUzE4cE1rRGplOHRKTWdVMzF0YTV2b1hIVTFEZlA3TEFoNXF6SzVBKwpxMDBKZ3JPNUVOR2lMN014MmdtYXdHU2luWENoZ1BYM3o2dEU1RUF3K1FpeGtSNnFKa0NsY2ZYZnYvaU16VjFOCkxwS3lJTTBDZ1lCaTNvNDhtL0oxTmRvS01uUkw4RFEvcXBuVEZTL1hjS1hDWE1FQURkWHhDRENnMzdwdHpDcEkKUDdGVldRSm9sbnBPRmRYUkNUUWQ1azJFdjI4cW1nRnVTMUZHM1VXeHV3UXdWTlhHbmFWajhsVjEydzRhYUFMSwpsSnBQWG1uVFNHaDJLVEFLY1M3YVV6dUJlTm45Y01XUU8zdkdVRXFJWS8wdzI4UHJjQmhaSkE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRVDArRm9kQ3crMTBCMTFyMEpENXVUVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEEyV2hjTk1qWXhNVEl4TWpFMQpOVEEyV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRHRJbVNJZ2ZXYWhCSnZWbzk0MlNQSWlhTTBjZ2JzQ293QkZSN2pWRmRrTUdkUTBIU1QKMXZjTFl2TVkyU2psdzRXTmtOUFEyanBDZ245QmNQY0FXbFBjRHJUSHFMTFB6UWV5WENuTzlEazdITDREZWhVZwpjVmpNQ1pRYXZuRjVmOHhOanR2empuaWgwZnpBTzF4dG1aZFR1QTlYUEpZQTluMEkzc3ZxY0ZRQmU5UkM2RENhCmFUaDVyY21vOStvQlVUajBPNWJ1bStzcFJmWHh3eDUxNUxheTU0Tm5sazhxNG5LWlZPVFZHcTlzbzdhR0hMaUkKNHBGcmhpTEY4ejJSMjhVL2ROcG1RMDBOOG9CTndzVVkvOU5sZFZRMWx5SjNhU0d3cGFVSWl4cXdrMzYzaE0rUgpJMUJFYWNNMmxrMm1TdURLQ3BqWURTME4rMXh6aWxCT0hDUnRBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVkdWdVWHRqdTdVUHpsUlRsUGN4WDJMaUNGb1l3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFKdW5mbmkwRjFCTUlPN2o5Nzlsai83VEZkdjRpOVBHY3Vsclc5aVVabFVkL2l4cHIwVkpUL1c2CnhkQ1BUVWUvUDVUSHZYUEZhdmYxVjJBTkFyZWU2cXFCWVJxbE14YTZUSTdwRmNOdEgvdFIrZVpqOFlCK20wQVIKL1llTzdCWC9RWlBHRnVhd3EzK3FJdXVybXRQNGp3aGd2cjJRYTFGY1R0RXN5R0dsRVYwbHoyYjYzZERoSEJPcgpIRjBmMFU5NERKNS9sMzBoSnpDYXFpQUl6VzZkSHd4Y2FHZXhTL2VjNkh1K1hteE0zK2lzZFBnbHoyamhtN1RtCjMwck96bE9yM0t5aDE2cWcvd3hNQS9hOG5NWlRVR2V3NnhDa1diUTgydGpTajRXTEVzWUs1a3E3RVh1T3U1bE0KMVFKY1hyL2tndlNiWGxTMGYvN3JBNUtWT2x6UzdCQT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKekNDQWcrZ0F3SUJBZ0lRQ2RxKy85aEp4dTBmQWlUbE92SUY0VEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEEzV2hjTk1qWXhNVEl4TWpFMQpOVEEzV2pBVE1SRXdEd1lEVlFRREV3aGhaRzFwYmkxak5EQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQCkFEQ0NBUW9DZ2dFQkFMZXlBQWt0bmlLQU5SVjFKZ1IzcTJvYjBMOUQvZFZ3UXBiMHFHeEZPcXN4bm9vTnpuM0YKKyt1aTFTLytwcUp5bE5lMElTQ0dVSkRzdkZIbmlSNnBJY0IvM2d6STlybm0vT0srQjhBRXllMy9od1RzOXpZOApZK0ZxUzU2bjgrbWp0cXJWL3ZEeTRFTmEra2w4NlZMZHB5Wk5FWithczY3OTkxbkhleElDS3NvSmFkR0M2ZnlICkVqSjdvaUJpNDZBaU1mdHhFK0dXWkxBZXRDUzB0Q2tvbHFmMFpFTTNlRVJVdW9SUXZWb3hWb1dUSjNVU0t6REEKTGlEMXcrRWRsVEs1ZzE3UEIrQXN5UXYxaFMrUnlLQlhDblVLM0pkNjdoZlF3Q0VZMUxQdUJSU3RpMmlnWXgxOApzZDdsYzUxVUx4ZTU4Sm1kd25WVlVwZlM1VG5UVUV0L0FGTUNBd0VBQWFOMk1IUXdEZ1lEVlIwUEFRSC9CQVFECkFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUEKTUI4R0ExVWRJd1FZTUJhQUZIYm9GRjdZN3UxRDg1VVU1VDNNVjlpNGdoYUdNQlFHQTFVZEVRUU5NQXVDQ1d4dgpZMkZzYUc5emREQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUF6dGRiYUJzdy96T2hWakt3elBlZnM1UGwwdHptCkNoMVVkVXNBczFXTkJaT3ZPaUNmOHp6VnhINUlwa1Q4TzJocjFUb2dJRTh4ZFhPTXZaSDRiMmp6MU5aeHRTSzIKV01rYnZZSkxFcnMwVFc2Y1Y1cTgrWi8veDBqQW5rSXRGditRVVVVajlMRzhRMElwZTRGUVUrYmJ1Z3lQN09VLwpIaEpkT1k3Y2lmekpyV05PTEVoaTQ0UVRTQ3ppMDlNcGl2TVNkWjdOMHM4VHh5OFYvOWtyTERqV3BDQmR1eEo5CnU3Zi9TUVM2MXY2SFRKMERQMk9lc1MvVVluNkVQOGRkeHJtTTB6UkpOT050R0JON1RyMDNacHE5TUxyTlVKeFUKSElPbzFuOE9oQW1jY2ZKNHFRL3hTTDRoMnYxMFJlRjVPdUZ0VHJyQlRNWitsMHJnSFNIZ3BOYWtOdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdDdJQUNTMmVJb0ExRlhVbUJIZXJhaHZRdjBQOTFYQkNsdlNvYkVVNnF6R2VpZzNPCmZjWDc2NkxWTC82bW9uS1UxN1FoSUlaUWtPeThVZWVKSHFraHdIL2VETWoydWViODRyNEh3QVRKN2YrSEJPejMKTmp4ajRXcExucWZ6NmFPMnF0WCs4UExnUTFyNlNYenBVdDJuSmswUm41cXpydjMzV2NkN0VnSXF5Z2xwMFlMcAovSWNTTW51aUlHTGpvQ0l4KzNFVDRaWmtzQjYwSkxTMEtTaVdwL1JrUXpkNFJGUzZoRkM5V2pGV2haTW5kUklyCk1NQXVJUFhENFIyVk1ybURYczhINEN6SkMvV0ZMNUhJb0ZjS2RRcmNsM3J1RjlEQUlSalVzKzRGRksyTGFLQmoKSFh5eDN1VnpuVlF2Rjdud21aM0NkVlZTbDlMbE9kTlFTMzhBVXdJREFRQUJBb0lCQUhzalcxckx0YUd6QitLbQpjU0cxaHJiT2hwUndZNHZjZ1Fib1lxNlJpYzZRcUpJcXh5MFF0dHN5Z0c1MzZnUWpneHRGcUo5QTZtajhDUkZ1CmdFQ0phQksrcEg4MWlBNytoSzhLYSsrUVJqekFlaVlYSTNDNzhzaDhsTXg2RWN1Zzd5Wjk1VFJuMjJYTGF0UXcKWThna3haT3JQaEViaHkvYkZ5Q2IxQ2d5UTdUQ2poZ3EvTVdSWVNScEF1ay96dlRsWW1KMGZpRlhCaUNEeEJyMAphckJjRkU0THBSaHdYUTA5dWFwbEJZZjBFSDhNQmFkeGlKSitZRm5jdWxMTytySFRqWTdSNGpuZ3UwRGwvTU1FCklJQlVxSmRLa0dncWYxU2VSUkdLc29FMURrcFB4bGlMcjdZd1BjRkJMaUNUZi9oa2l4VG1SczI5cW9uMVBuV1gKc3dGNXdRRUNnWUVBOHBQSmx3aEFiaitEcFNuWGllN1dPSlBWRDcveXZ5MkpKalV6UmRENjI0UHhQaEx1cTdSUwp1OTUzVjJ2K3E1emNVbEtacE55N1BYQlovWlN5bFdybEdoVXovMldGK1Q4OG8yd055ZTBTUGxZd08ycGQyZytMCk9sdlRLRmtUaENRSzZJVnNwVUFPVi9YaFdHcnQxLytOazVESHc5ME9jWXJ5c3M3OXNSOUNmTE1DZ1lFQXdkd2YKdHNKUUVJNjBpVnllN2JMeklCOGFPc2VkTjJiNXdWREZIQzAwV01ubXBjZThjc3FMRG5sS1lFaTRSVSsyYUs2aApqRXVLZ1kxbjcxTVptS0o1M0VGNVhvTmFFcDNMWVIzczBUTHNpNGhDMkVNZm1UbEIybTNYcDl0YmMxckxiRG9ECjd4VUZ6OUlLTVlRME9TU3Y1ZE05dmxVZkl0UnNXWnNxQ3VZa2ZlRUNnWUVBc216TUVjQnJDK3pCMnlHTXZaTWsKbE5jQUY2YWJXYzJYbkxmeTc3NklWaUNWdUkvYWFBZXA5eS9xWGk0OFUyUjhsanpWY0hNL2NqQ0tzTC9JSDZsUgp2TDZ0MFlTT1o4Z0F4VCs4WUxOMUFNOEtpUmx5ME9zd0FJdjhKQ2hvOTRBL1djcVNJSGFlVmtxd0p3WDN6akhWCnBCNFJJZHNlUFp2emFseGdOQUVIT1lzQ2dZQXVxL0l1cThWZTF4eDczWUtkczNGNUVFUGVWdVJ3ekNmZzlMTWYKdjNwVXpmYnJmcFRPQmhsSVdNY2hPeUN4L3lqcE52SEp0djRYaHBXNU5vWjVDdFRQeEN1V0o0VnQ2Zk5tNUM5NQpoZ3NRNUxORElaWGY2N3NBL1dUb0VwV0h4aG9uYWlnOFRSRmpJU3czRTU4SEN1QVdNcTh3dlltTGR4ekd6ZVpuClRWVUh3UUtCZ0VQYkFvU3Z2b3lYTTJudXRmNHRLVHNoRmpINi85M3N1dXdWSXpOWTFCY3k4dDRBejZqek1LQTUKNWRTWE9YS0p0ZG04MWNvenlZN1hOR2I2eCtDN1ZmSGJKT2hVMFVDcy90SnAwd2dkSGg2OFJCTUxyNlRWQXJlMAp4N3FpN1FzY25Ud2dtKzRCVlJqTkNDV09xa2djWWhoRjNleTQvRi9KM0tJK3NucUg4eW1pCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-ca-cert
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRVDArRm9kQ3crMTBCMTFyMEpENXVUVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEEyV2hjTk1qWXhNVEl4TWpFMQpOVEEyV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRHRJbVNJZ2ZXYWhCSnZWbzk0MlNQSWlhTTBjZ2JzQ293QkZSN2pWRmRrTUdkUTBIU1QKMXZjTFl2TVkyU2psdzRXTmtOUFEyanBDZ245QmNQY0FXbFBjRHJUSHFMTFB6UWV5WENuTzlEazdITDREZWhVZwpjVmpNQ1pRYXZuRjVmOHhOanR2empuaWgwZnpBTzF4dG1aZFR1QTlYUEpZQTluMEkzc3ZxY0ZRQmU5UkM2RENhCmFUaDVyY21vOStvQlVUajBPNWJ1bStzcFJmWHh3eDUxNUxheTU0Tm5sazhxNG5LWlZPVFZHcTlzbzdhR0hMaUkKNHBGcmhpTEY4ejJSMjhVL2ROcG1RMDBOOG9CTndzVVkvOU5sZFZRMWx5SjNhU0d3cGFVSWl4cXdrMzYzaE0rUgpJMUJFYWNNMmxrMm1TdURLQ3BqWURTME4rMXh6aWxCT0hDUnRBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVkdWdVWHRqdTdVUHpsUlRsUGN4WDJMaUNGb1l3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFKdW5mbmkwRjFCTUlPN2o5Nzlsai83VEZkdjRpOVBHY3Vsclc5aVVabFVkL2l4cHIwVkpUL1c2CnhkQ1BUVWUvUDVUSHZYUEZhdmYxVjJBTkFyZWU2cXFCWVJxbE14YTZUSTdwRmNOdEgvdFIrZVpqOFlCK20wQVIKL1llTzdCWC9RWlBHRnVhd3EzK3FJdXVybXRQNGp3aGd2cjJRYTFGY1R0RXN5R0dsRVYwbHoyYjYzZERoSEJPcgpIRjBmMFU5NERKNS9sMzBoSnpDYXFpQUl6VzZkSHd4Y2FHZXhTL2VjNkh1K1hteE0zK2lzZFBnbHoyamhtN1RtCjMwck96bE9yM0t5aDE2cWcvd3hNQS9hOG5NWlRVR2V3NnhDa1diUTgydGpTajRXTEVzWUs1a3E3RVh1T3U1bE0KMVFKY1hyL2tndlNiWGxTMGYvN3JBNUtWT2x6UzdCQT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBN1NKa2lJSDFtb1FTYjFhUGVOa2p5SW1qTkhJRzdBcU1BUlVlNDFSWFpEQm5VTkIwCms5YjNDMkx6R05rbzVjT0ZqWkRUME5vNlFvSi9RWEQzQUZwVDNBNjB4Nml5ejgwSHNsd3B6dlE1T3h5K0Ezb1YKSUhGWXpBbVVHcjV4ZVgvTVRZN2I4NDU0b2RIOHdEdGNiWm1YVTdnUFZ6eVdBUFo5Q043TDZuQlVBWHZVUXVndwptbWs0ZWEzSnFQZnFBVkU0OUR1VzdwdnJLVVgxOGNNZWRlUzJzdWVEWjVaUEt1SnltVlRrMVJxdmJLTzJoaHk0CmlPS1JhNFlpeGZNOWtkdkZQM1RhWmtOTkRmS0FUY0xGR1AvVFpYVlVOWmNpZDJraHNLV2xDSXNhc0pOK3Q0VFAKa1NOUVJHbkROcFpOcGtyZ3lncVkyQTB0RGZ0Y2M0cFFUaHdrYlFJREFRQUJBb0lCQVFEQkJCMlFmemZLYlhZVAo2Z0VkL0tDRHVvUjlTOU1XamY4blltbWg0Q1RDQ0NRUVE1eWdPWGtjYTQ0enk0N2VkaWRlODJOMXZDdHZ0NGlkClc3V3hNOVRPYWFuOFdmUXg4RkV6ZkpFTFF2N1NmcktyWWRPUWRMSXlZaG1MS3poeURQUGVyVW1iRlh4Yk92RGcKQjNGVVJKQklOS2xIK0tpZ1lBR21Gck1rUUFvZ3FYa05neHpmOWpzbldaK1VQRnBlYlU0Vm0wL0k4czJ2MWxydgpqdnU4QUIzZEZqb1owZXp4eGVXa1lTTzRqcExzS2tUejl2dWErcDhUbGFoZlZDamZ0M2ZTQ1lpOHIySkg2cS9OClhncHpGYzVpVFdNRWRHZDlmTDhPSk44Skk1dFByUkRmNi9MOTRYS28zRE9YQnVQQ2ZwU05rcmw4TXQ1cXRLUlEKazAyc29pYUJBb0dCQVBGcWFXcFJVa3dpQ21RK2dGQkZNR0VncVI1MWkyM0ttb1p3aDhQd2RzVVBFK1NkQ0ZjagpuQnFLYmg2aFgwZ1lwWjFJN0pQempUZjJuOUN4YiszT2tQV25xWU9idElZQXB6TUFJcU1sY2VVNjBqYTdVSkdiCjlocnIvYmRxVFhyUGRPZDZzbmE2Q3hxQ2x3eTFtdDRWSWlMUjN2VVRuWXNJNGVpeUpsSnhsSHkzQW9HQkFQdDEKeE1DV3RET2NMeHhuYWxMUG1FS0xDdGZScVZZTEc4dnMxaGprK0MrS3NzeDZWV3hET3Q0VEt6b3RXUkJ1NFhQYQpkbWNsYmFSVWpQWnp2aGJZeWxCa1Y1S25Sa3c4L2ZGYWRYckpLd1pRbHMzWDF5dTVCNHRtV0hnNVZVQzZPZXhuCi9XakRwWkZqZGRJTjFPbzVUbWpWYmN0UkM5YTBzUFAxODVaYkpndjdBb0dBZVJtakZaVURqbk5JK1M0dEdaY0wKaEwxb2VJSUlWaVBhemZPbTl4QXAxQUlUUFl2VVFqbjN0WXlaWHI0ZVdNRWNXc0RaQkFLWlpXaE9sTlpkU2xKagpmd2NDenFVTnNtYWplTDdwb1NOSWRlL0N3WGZIRzdPN2laZTE1d3JwSU9EdVNLdlEyQ1BOTEJnMEEwa2FEYXRXCk8xZEIyM2hpZi9zTnI3ZWw1NWRZSUJNQ2dZRUFpV0o0a3JoRDBBYSsvb2ZKNFdDbVVZVGg4YlFORG9PWE5qMDUKWS9TRlhJUXMxK2Jta1BYU1RjNnZTV1BKUzE4cE1rRGplOHRKTWdVMzF0YTV2b1hIVTFEZlA3TEFoNXF6SzVBKwpxMDBKZ3JPNUVOR2lMN014MmdtYXdHU2luWENoZ1BYM3o2dEU1RUF3K1FpeGtSNnFKa0NsY2ZYZnYvaU16VjFOCkxwS3lJTTBDZ1lCaTNvNDhtL0oxTmRvS01uUkw4RFEvcXBuVEZTL1hjS1hDWE1FQURkWHhDRENnMzdwdHpDcEkKUDdGVldRSm9sbnBPRmRYUkNUUWQ1azJFdjI4cW1nRnVTMUZHM1VXeHV3UXdWTlhHbmFWajhsVjEydzRhYUFMSwpsSnBQWG1uVFNHaDJLVEFLY1M3YVV6dUJlTm45Y01XUU8zdkdVRXFJWS8wdzI4UHJjQmhaSkE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRVDArRm9kQ3crMTBCMTFyMEpENXVUVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEEyV2hjTk1qWXhNVEl4TWpFMQpOVEEyV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRHRJbVNJZ2ZXYWhCSnZWbzk0MlNQSWlhTTBjZ2JzQ293QkZSN2pWRmRrTUdkUTBIU1QKMXZjTFl2TVkyU2psdzRXTmtOUFEyanBDZ245QmNQY0FXbFBjRHJUSHFMTFB6UWV5WENuTzlEazdITDREZWhVZwpjVmpNQ1pRYXZuRjVmOHhOanR2empuaWgwZnpBTzF4dG1aZFR1QTlYUEpZQTluMEkzc3ZxY0ZRQmU5UkM2RENhCmFUaDVyY21vOStvQlVUajBPNWJ1bStzcFJmWHh3eDUxNUxheTU0Tm5sazhxNG5LWlZPVFZHcTlzbzdhR0hMaUkKNHBGcmhpTEY4ejJSMjhVL2ROcG1RMDBOOG9CTndzVVkvOU5sZFZRMWx5SjNhU0d3cGFVSWl4cXdrMzYzaE0rUgpJMUJFYWNNMmxrMm1TdURLQ3BqWURTME4rMXh6aWxCT0hDUnRBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVkdWdVWHRqdTdVUHpsUlRsUGN4WDJMaUNGb1l3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFKdW5mbmkwRjFCTUlPN2o5Nzlsai83VEZkdjRpOVBHY3Vsclc5aVVabFVkL2l4cHIwVkpUL1c2CnhkQ1BUVWUvUDVUSHZYUEZhdmYxVjJBTkFyZWU2cXFCWVJxbE14YTZUSTdwRmNOdEgvdFIrZVpqOFlCK20wQVIKL1llTzdCWC9RWlBHRnVhd3EzK3FJdXVybXRQNGp3aGd2cjJRYTFGY1R0RXN5R0dsRVYwbHoyYjYzZERoSEJPcgpIRjBmMFU5NERKNS9sMzBoSnpDYXFpQUl6VzZkSHd4Y2FHZXhTL2VjNkh1K1hteE0zK2lzZFBnbHoyamhtN1RtCjMwck96bE9yM0t5aDE2cWcvd3hNQS9hOG5NWlRVR2V3NnhDa1diUTgydGpTajRXTEVzWUs1a3E3RVh1T3U1bE0KMVFKY1hyL2tndlNiWGxTMGYvN3JBNUtWT2x6UzdCQT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lRZlp6MDlHWjJDMXpab0RieDdaQk1lakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEEzV2hjTk1qWXhNVEl4TWpFMQpOVEEzV2pBUk1ROHdEUVlEVlFRREV3WnlaVzF2ZEdVd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3CmdnRUtBb0lCQVFDM1dzZ1EwOHgrTHJ1UDZMUGRhcy91OGVUWnN2SlZXMXJOODhvMnlGQUg1ODltZjNDR3Z0ekwKUGFYRmh6RTYvSHUzUzVvaXNhUXJSYXlhbVhRSy8zZHQxS1RMZElrTkFnS2tKQk8yOUlNTVJpZkVtQ0RIZllVWAplOEVtSHJvbFZiUmpNNUVPSXdobEUvTTB4aWZ6VFYyVGFYMDZiM3h0Y3ZCMXZlVVdzV1JQYmhLTHFNMkdBNHpkCkIwUEN4VXI0TFQ2Qmo5UElLQjdrZzZXYnJsZFA4amxoVFM2OGVmbGRkdm5zR3dodnZ5UjZqN09UeXgray9wZkMKUHFjelFoN0lGVkdGcVBVZ2ljOXpwOXJkK1F5ajdQWTYxRzN2NFhLdEhqRGNkV25mWHlxOW82QnMwUTVnOExxMwozRGdoYnMxQ3k0U0JneXRlZjhyNmhLM2JHNlFIbVRkL0FnTUJBQUdqWURCZU1BNEdBMVVkRHdFQi93UUVBd0lGCm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWYKQmdOVkhTTUVHREFXZ0JSMjZCUmUyTzd0US9PVkZPVTl6RmZZdUlJV2hqQU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBbnBBRHdKZ01CRXJkOWVVbWRPRi9xVDh3NVd1L1FJUWhqaUlOR1g0UkgrbVdsc0VGTVcveXVRcWI2NFBmCnlubDRGOXFia0dPN3d5WndVQVJ4YkwrNmJsS3NlNzExOUxsT24wdGw1REdiOTNmWHJCa0ljbVl1NEowbXB2d3EKd1NrRGgxaDZSWE44UmJhMW80Y1JtZldWYzc4UHB3R3NDTEd3TzJhUGcrZGdOMnREWXFaMkpnV1lGbndMSElkaApZRXdFVk9LNEgwQkltZFpjcE0rMm5MdUhUZm9KSlFZbU1TcFlocE1sZWhCU2xiVVJma1gyekM5T3hUamh3SS9FCndnVkRBTXRJcjNmb2hNeUtoZWwzYVNnVUM5c3E4V0wyYllDQ0xXWi9aSExvWE5OWG4wK21qeTZpSE1Vc1JhV2IKWStjNFZlL3JaVEhxV0NjeWZ6UGp5Q0Z5c0E9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb1FJQkFBS0NBUUVBdDFySUVOUE1maTY3aitpejNXclA3dkhrMmJMeVZWdGF6ZlBLTnNoUUIrZlBabjl3CmhyN2N5ejJseFljeE92eDd0MHVhSXJHa0swV3NtcGwwQ3Y5M2JkU2t5M1NKRFFJQ3BDUVR0dlNEREVZbnhKZ2cKeDMyRkYzdkJKaDY2SlZXMFl6T1JEaU1JWlJQek5NWW44MDFkazJsOU9tOThiWEx3ZGIzbEZyRmtUMjRTaTZqTgpoZ09NM1FkRHdzVksrQzArZ1kvVHlDZ2U1SU9sbTY1WFQvSTVZVTB1dkhuNVhYYjU3QnNJYjc4a2VvK3prOHNmCnBQNlh3ajZuTTBJZXlCVlJoYWoxSUluUGM2ZmEzZmtNbyt6Mk90UnQ3K0Z5clI0dzNIVnAzMThxdmFPZ2JORU8KWVBDNnQ5dzRJVzdOUXN1RWdZTXJYbi9LK29TdDJ4dWtCNWszZndJREFRQUJBb0lCQUZQZFdoVVlTemlMOTQ1agpTYUhFOFViQnJZTkZya0lNZndRa3RpRklqaEtQblBXczVMTTlLWkJzcWg0bk1BVmk1dE4zNlJCbFlFbktuS0E2CkFESG5sNkRNMm5PVTRmcnBLSHdiWkVrU25iNUhlSGtiZkNMQzd0Vkc3Wm1hQkZwL1VQcnU0eklzSS9MWHBTNUcKVkkrY20yaUpuNVhTMkg3WFM5VU8vbkhhd1o3eVd0M3ZabnZjZnZhZ29lTHhoOC9kV2tjL0tRZEpFUG9PNk1ReQpXMXNyRTFzYmhINjBQVy92MnhtUjR1WFRneExXbVdPSzEyVG1TSHliUHc1QUh1Z21rc05wWVdVWUNNdEd5V0dRCnJrWU1XY1cwWE9CMHVqSlk5a0lHQ0l0dDBoQUU2NlhqVXpIUVp4cFd5SnpPMkxaMjA2QVk4YVRiTXNoMVllZnAKa0laM1lzRUNnWUVBeGkxRC8vMzZtcmdlTnNTSkgrWDkzc1hUQktYbzhhdUJsQWlPc1RmRUE4K29oMWxkVDFUSgpxTG5uSTByVnF6VnlHWExaaldmenNSRUkvUEI1ZDhvaE4rL1JjcnlHdnQzZ2JOdTNKeW1kbjhVMWZFNDFOeEtBCitVeDZZTkpWcmdpZ1JRak1QT1Z4bjZsblJWTUZTUFpWYzliNjlxbHpZYWYrUTRuYkxGd2c0NFVDZ1lFQTdOcGcKcW5SbXVoZ1J4QkJQbmNWSGlwbVFpTmdyS0FEcTBMWVQxVUhlc2lKYmZEQnBTUXplSkJlRHl2ckZkZSt6SHhCTwpNSndIY0dkQkN5Q3kwRkwzZmJvNHdnTEhUVG5qOHNFUHJuMXVKdlZsemlHeGVJM3luUS82WmdZVkRndUVQMzNhCllhb3lrL1k0aHZidWJFWEZCdFpKZU5lbFlzejBtTytGejFObmxETUNmMkpRRW12c2syWXQ4TTg2c013aVRNODMKVkhmNTFwWU5menJ4QTlqbTBWY1NyWWgzek5LT1BYeDJ2VFBFN0RzRFNKZFhZcFhEL0NEYlVwb29zaG03TEwrVApPVlN5TWlaOTY5Z1ZKOGRGM2V4azZTUEJxS1NwaVZJam5wSnB4aGVRTC9JUGEwTEtrSk9rZHBidG1MR1pnc3IwCjI0dUNoTHJ0bkRYbExkWFQzbjBDZ1lFQWpzQXpZS2lWUFhYQ1IyUDVTRUtka3JocE4wRHFDY3M3dXh6eUtTYngKSEhXK284UGR3T3hqZW1jOXhIbU54ejMzdkRJc25mbDhOay9WRU9yZE90ZTJXRzJEUmRNODRadVJlajdIdjhmVApPdUhPUVFWbm5Cd1piSFl6MllleTZ1c2dBdEJNYlc2UjIwR2I0aVF6b01nUUxzVzZOSDNzTFBjUU9KaXNFai9YCmZxY0NnWUIwN2paZmVmV2JtQndxbnU4WU1jaU5CRzdBamxuTjN3Zkg4RXlYcFZDcVdreXFyRStoRlNUd2NHRTUKMTNoUFV2NHVJSXlVTFAyT2UvZkc3NGJSNk5oZGEya3kxRGYwR0Vlb3BlRWRZTnArZ0ZiNEJ6NE1jK1NZbWRhQQpsaXNzUVhFUTE1bHFwQSs5NUdNK2ZZS3R2QW5zSFFkdEdOUmphZnVtODB0Q0o1M2R1QT09Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRVDArRm9kQ3crMTBCMTFyMEpENXVUVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEEyV2hjTk1qWXhNVEl4TWpFMQpOVEEyV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRHRJbVNJZ2ZXYWhCSnZWbzk0MlNQSWlhTTBjZ2JzQ293QkZSN2pWRmRrTUdkUTBIU1QKMXZjTFl2TVkyU2psdzRXTmtOUFEyanBDZ245QmNQY0FXbFBjRHJUSHFMTFB6UWV5WENuTzlEazdITDREZWhVZwpjVmpNQ1pRYXZuRjVmOHhOanR2empuaWgwZnpBTzF4dG1aZFR1QTlYUEpZQTluMEkzc3ZxY0ZRQmU5UkM2RENhCmFUaDVyY21vOStvQlVUajBPNWJ1bStzcFJmWHh3eDUxNUxheTU0Tm5sazhxNG5LWlZPVFZHcTlzbzdhR0hMaUkKNHBGcmhpTEY4ejJSMjhVL2ROcG1RMDBOOG9CTndzVVkvOU5sZFZRMWx5SjNhU0d3cGFVSWl4cXdrMzYzaE0rUgpJMUJFYWNNMmxrMm1TdURLQ3BqWURTME4rMXh6aWxCT0hDUnRBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVkdWdVWHRqdTdVUHpsUlRsUGN4WDJMaUNGb1l3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFKdW5mbmkwRjFCTUlPN2o5Nzlsai83VEZkdjRpOVBHY3Vsclc5aVVabFVkL2l4cHIwVkpUL1c2CnhkQ1BUVWUvUDVUSHZYUEZhdmYxVjJBTkFyZWU2cXFCWVJxbE14YTZUSTdwRmNOdEgvdFIrZVpqOFlCK20wQVIKL1llTzdCWC9RWlBHRnVhd3EzK3FJdXVybXRQNGp3aGd2cjJRYTFGY1R0RXN5R0dsRVYwbHoyYjYzZERoSEJPcgpIRjBmMFU5NERKNS9sMzBoSnpDYXFpQUl6VzZkSHd4Y2FHZXhTL2VjNkh1K1hteE0zK2lzZFBnbHoyamhtN1RtCjMwck96bE9yM0t5aDE2cWcvd3hNQS9hOG5NWlRVR2V3NnhDa1diUTgydGpTajRXTEVzWUs1a3E3RVh1T3U1bE0KMVFKY1hyL2tndlNiWGxTMGYvN3JBNUtWT2x6UzdCQT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURxRENDQXBDZ0F3SUJBZ0lSQUpjVlJ1S1I0a3hGYml1Nk1jb1I5WGd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV3TmxvWERUSTJNVEV5TVRJeApOVFV3Tmxvd0tqRW9NQ1lHQTFVRUF4TWZZMngxYzNSbGNtMWxjMmd0WVhCcGMyVnlkbVZ5TG1OcGJHbDFiUzVwCmJ6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU9YWTRPRzA5eGE0TlRmS2JXRW0KQTdJMmJ3NTA4Yk1NTDRyMFdBaWlVVU8vK3gzUllQWE5UYzhlWXB5Mi9NaXlUVTB5WWJnMVBZcWxqcjQ1RXAvTQozN25VNWttWHoyS1lHbWVUSmtpZG0zN3VFd2w3TTRNOVA4SytHN3NreFE4dDF2ZUVpdk5QVDdoSG5LSlRHTWE3CldMN1ZzZHNxTnN6a2Y2NEk2YVZtSVhtcTExOEF3K2ZvRXlVT2x3M3J1RlVZSkxDT3BvbnNwRlZQV2lOS3RXcy8KVEg2RWx6UE51Z09OODNzdkJMcUtpdDlLNWN2MmVuVkJwRDJzUFo2WFlmdGt0bTIxRUhLbmhwQzNJTkEvUVpjdQpYaVFFNmJKVFRXSWJQTmRsVU5NZFpoaW1GR1BCY2xSazVTeEI1OXFzdjh2R3dtbEd1OVR3ZFU1OG5xWWREd3BLCm0zRUNBd0VBQWFPQjNqQ0IyekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUgKQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3SHdZRFZSMGpCQmd3Rm9BVWR1Z1VYdGp1N1VQegpsUlRsUGN4WDJMaUNGb1l3ZXdZRFZSMFJCSFF3Y29JZlkyeDFjM1JsY20xbGMyZ3RZWEJwYzJWeWRtVnlMbU5wCmJHbDFiUzVwYjRJUUtpNXRaWE5vTG1OcGJHbDFiUzVwYjRJbFkyeDFjM1JsY20xbGMyZ3RZWEJwYzJWeWRtVnkKTG10MVltVXRjM2x6ZEdWdExuTjJZNGNFZndBQUFZY1FBQUFBQUFBQUFBQUFBQUFBQUFBQUFUQU5CZ2txaGtpRwo5dzBCQVFzRkFBT0NBUUVBS1NlbU5qeUk4RWppUlJEanNseTJreUl5WGRybm9QeW96RWhiQTNjdnVVeWRSMU5wCjBIbUdLWnlKT01aVWh0N1BWT2FlakxhaXJGVWhUNXlLRXBKZkd2b2gwTytIQWNrdE9lTC84NHZEU09KWi9yZHgKSnh1REhIUzhCaExWMVdkZWc4TnpySCtKNlJvaFByQnA1RHhIZWxwTy9XeFVLOGdpYnZpK0QzcVVHTHVnOUFHRwp1ZXY3V052aW4vOFplcmlUclJmUHdVeUgxd2ZPaUQvVThqNHc2WE1wTjF1cXNNR2hzaERQU2hkUHNhWHhTYy9qCndVdk1VbnJzb282K0JXQ1lmVHdwaU5MVGJMbWcyQTJZbW5oOFhSNkZzamNpK0U0VHg0K1BLL1JhM3RaTDQwV2gKWFJhSlZXREtFRzJGRUNBcFVDZTR2cGtKS1ZTMFJXNXVDTklsM0E9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBNWRqZzRiVDNGcmcxTjhwdFlTWURzalp2RG5UeHN3d3ZpdlJZQ0tKUlE3LzdIZEZnCjljMU56eDVpbkxiOHlMSk5UVEpodURVOWlxV092amtTbjh6ZnVkVG1TWmZQWXBnYVo1TW1TSjJiZnU0VENYc3oKZ3owL3dyNGJ1eVRGRHkzVzk0U0s4MDlQdUVlY29sTVl4cnRZdnRXeDJ5bzJ6T1IvcmdqcHBXWWhlYXJYWHdERAo1K2dUSlE2WERldTRWUmdrc0k2bWlleWtWVTlhSTBxMWF6OU1mb1NYTTgyNkE0M3pleThFdW9xSzMwcmx5L1o2CmRVR2tQYXc5bnBkaCsyUzJiYlVRY3FlR2tMY2cwRDlCbHk1ZUpBVHBzbE5OWWhzODEyVlEweDFtR0tZVVk4RnkKVkdUbExFSG4ycXkveThiQ2FVYTcxUEIxVG55ZXBoMFBDa3FiY1FJREFRQUJBb0lCQUZzVHFtQ2xwYmRoL095RAprUDRLNHpJTjhjbkh1ektZcElvcU1td1JiYVFzQWFTYUlCS21iS3VpdmE2ZHIrTVREQ0NIMDBMOERjdlB1SlZWCjVqUmVLVlRvc092K2ROWDdzWkxUTXp0WkFKRzJZdUxCNS9LY0paVFVZZ2F4RmtqaWdDa0tZMGp3WjRWOUV1c2IKaEZqVFNlSXNxVkpRRXZEenBraGZEYjVWanZRM1pzd3kzcnVybHBsVklZdU9JMXV1TGZuOGtqRDFJQ2t4NXdRVAp5bTQ1WHE5MWlScWRXNGpsSGE4bFRvcXlFVktsVTdDVTh6ejFtNTFtc0xrU0pTc2dpblZLMVQrQytJZzBoMTR6ClM3MTlQVmVIb2JxMmFSdm1tT1ZOa00wY3pocnFZb1cvUEZsSCt6SUMwclg0WVZPamp5aWtQVFRhNlE3eGFEZEwKQ2JRYnFuRUNnWUVBNmU0UGdpN1VDb1RIOFNySThMUWJzUU9hREQ2Z2h4YlVNeEJudC82U3JheGxMcGFyOEtJUwpmbFd5dXFTUDRJMnprRVg4UXdpNnBmUHo3YjFYM1I4OFNzcnM2N0lnNkVIV3d0aExqbVNxTVJuRWJJWkJBVEhYCjg2UjROZ1gzWVJUMklPbktGWW5tVmJEUTBJTE5mR2hyOGphNWFzSGdYWER6bTRWK0srMTFCMDBDZ1lFQSs0ZzEKMlVYcVBrMmNOMEZLdHd5MVF1MDJ1bEU0QTBaeUZNNnBlVkdNSENMZDI1MWFxbERubWw0SDBrREx3RmdYU1ZIMQo5YXd1YkprTnE2RTQ2VzE4Ykh3OENhT3dkdnV4M3h3ZE04NUM5N0Q2blJHbW9aMDBtWU1sTWZYMFMwM1ZhcXJHCmI4MUMzYnY5dkpmb2YwWlRCd3Q5dG8rSm1rYnViY1h4OHkzNU9yVUNnWUVBNTE3aVQreHBKUTQzZzd6QmlmRmEKQWphQnd1S2VlMzZFMnd5NnlTMHRma0Vvd20rY0dDRDFFYWRKWTNrb0pQMkNRSXczK1VWRTlxYlcrS2x4b2U4bQovd0srV2xDUVk2ZmE5bFJnUnJJaDh2WjlaS2xVMmcybWZnQ0tOVVNwYklnQytJTERzWkgzRTRJU3htalpQTmM3CkRSSTdTZkFBTGV0dHhzQytEa3lLbDNFQ2dZQTloL1NrVWhZYlo2RHZZMm1EbmZnNWh3MzhSaUlOcXczOVNSRHMKUEthcHUxM0tlNVBTVmpoUjZ1Nis0RnIza3BVZnVvMFFyQzR2SXNIVlduc3huemJ3MHZOYzZFNGl6UytXQktxZwpJYlVBSXFzc0FVVmlBN0w2V3JxZW5peEV2NldWa25FNHFGM1RJRW5SK05kSFMwekVUR3RVWFlpcjFPNCtyRTJqCnozdElnUUtCZ0E1ZlF0K085MG1JMTRjakljbW9vbHVjV1RCTit5Y2J0Y1pOVWExNFhPSzIzS0R1M3o2OFhUNk8KNnV3UlNreldZSTNUV1lKS3haYncxZ0k5YWhNNHBuUlp6bklvcVEvczJ5UHpCZnlhUGhncVppYTBXNXIrcnpuNQppNzd3dFhVM2hyc1JiTVlJMXNKd1J4enJiN1ZFYUZWVzJuUnUwcE5qdzZpM0oybFRISytsCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRVDArRm9kQ3crMTBCMTFyMEpENXVUVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEEyV2hjTk1qWXhNVEl4TWpFMQpOVEEyV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRHRJbVNJZ2ZXYWhCSnZWbzk0MlNQSWlhTTBjZ2JzQ293QkZSN2pWRmRrTUdkUTBIU1QKMXZjTFl2TVkyU2psdzRXTmtOUFEyanBDZ245QmNQY0FXbFBjRHJUSHFMTFB6UWV5WENuTzlEazdITDREZWhVZwpjVmpNQ1pRYXZuRjVmOHhOanR2empuaWgwZnpBTzF4dG1aZFR1QTlYUEpZQTluMEkzc3ZxY0ZRQmU5UkM2RENhCmFUaDVyY21vOStvQlVUajBPNWJ1bStzcFJmWHh3eDUxNUxheTU0Tm5sazhxNG5LWlZPVFZHcTlzbzdhR0hMaUkKNHBGcmhpTEY4ejJSMjhVL2ROcG1RMDBOOG9CTndzVVkvOU5sZFZRMWx5SjNhU0d3cGFVSWl4cXdrMzYzaE0rUgpJMUJFYWNNMmxrMm1TdURLQ3BqWURTME4rMXh6aWxCT0hDUnRBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVkdWdVWHRqdTdVUHpsUlRsUGN4WDJMaUNGb1l3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFKdW5mbmkwRjFCTUlPN2o5Nzlsai83VEZkdjRpOVBHY3Vsclc5aVVabFVkL2l4cHIwVkpUL1c2CnhkQ1BUVWUvUDVUSHZYUEZhdmYxVjJBTkFyZWU2cXFCWVJxbE14YTZUSTdwRmNOdEgvdFIrZVpqOFlCK20wQVIKL1llTzdCWC9RWlBHRnVhd3EzK3FJdXVybXRQNGp3aGd2cjJRYTFGY1R0RXN5R0dsRVYwbHoyYjYzZERoSEJPcgpIRjBmMFU5NERKNS9sMzBoSnpDYXFpQUl6VzZkSHd4Y2FHZXhTL2VjNkh1K1hteE0zK2lzZFBnbHoyamhtN1RtCjMwck96bE9yM0t5aDE2cWcvd3hNQS9hOG5NWlRVR2V3NnhDa1diUTgydGpTajRXTEVzWUs1a3E3RVh1T3U1bE0KMVFKY1hyL2tndlNiWGxTMGYvN3JBNUtWT2x6UzdCQT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTRENDQWpDZ0F3SUJBZ0lRUFZRT2xyNEgzRnhXSW40aXQ2VmZxREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEEyV2hjTk1qWXhNVEl4TWpFMQpOVEEyV2pBak1TRXdId1lEVlFRRERCZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDNHE2Qk80azNMNmJPOTAyKzFaaXJ2bkJSK2RKcTEKUEo3eDU4S2tVbkpNY2JhNmZRYUlxVVBOK09SNXExNnc3Z0VEdG9YODZ0QW5xdVVEaTlNejJnMXpreDlPVlZtOQphaHFRQ0NqTjBqL0M4T09RTUlFV1BpYTBaMTVLUUl6SVBxcjVIVEZVMEd2eFRRVCs5ZUszUFlRVmFveFp1dUxUClViaUREeGZGa3h6RmpaWXZ0ZHhvSW5sUTVxeVNLaVJmZmI2Tmtya3NrSUdkdkJGbS9mT2dEQmZid3pnc3ladjIKdkJJRUJ2cDNmRlFHbmlCakVUeWUrNVRpbWY0eGoxTDY4akU5REYvT2p5ZFFPU2pFdlVOTm9SYlVGS1I3TFFjUAo4Rkp5NTQyZWpqTWROb1ZmOVNFNVhUaU9HdmpuN2Y3YUtqVmJCbDhIdVFUUmpHa1MxZ1EzL015QkFnTUJBQUdqCmdZWXdnWU13RGdZRFZSMFBBUUgvQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUYKQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUI4R0ExVWRJd1FZTUJhQUZIYm9GRjdZN3UxRDg1VVU1VDNNVjlpNApnaGFHTUNNR0ExVWRFUVFjTUJxQ0dDb3VhSFZpWW14bExYSmxiR0Y1TG1OcGJHbDFiUzVwYnpBTkJna3Foa2lHCjl3MEJBUXNGQUFPQ0FRRUFxaWpBM2JwVkllbjFYTFkzRk1VVklKSDF4SnVZT0dZSm00dFVuVzNlcW0wUmdocGEKd3JqUkg3OUY2WGNYTXdiczd1b1JKZk9wTEU4N1liSUR3cml3T2pFNkR0U0ordjdCcDVGMnN3Q3k1TGo3WnZMZQpoa1ZYZS9ybGZZT2ZGZ0Y1ZTBMK3BuYkEyMmVGZjFoUEppZU5nMFJZSHJOL3Fodjc1UEF2eXhpeEkzQVpZalBLCjQ0ZzFuOXA1SUZwdWhzUng0RVZTTFMwRFVzbko2NVlVbVVqRHgwWFgyNE1oRFMyVnIrdTJlWE5QeUpHVUtBaXkKMm9lL2gvaHhmYzNIaDR5TUxQcHlUQSs0Nkt2aXkyczdpN0JlcDM1WUJQbVZVZTBCL21ZOFYxVDI5QjBsSktzOApMUFVwalU5cE05dngweVdzT2U1RTdJMFppb3c0WXRKRnd6WGpzUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdUt1Z1R1Sk55K216dmROdnRXWXE3NXdVZm5TYXRUeWU4ZWZDcEZKeVRIRzJ1bjBHCmlLbER6ZmprZWF0ZXNPNEJBN2FGL09yUUo2cmxBNHZUTTlvTmM1TWZUbFZadldvYWtBZ296ZEkvd3ZEamtEQ0IKRmo0bXRHZGVTa0NNeUQ2cStSMHhWTkJyOFUwRS92WGl0ejJFRldxTVdicmkwMUc0Z3c4WHhaTWN4WTJXTDdYYwphQ0o1VU9hc2tpb2tYMzIralpLNUxKQ0JuYndSWnYzem9Bd1gyOE00TE1tYjlyd1NCQWI2ZDN4VUJwNGdZeEU4Cm52dVU0cG4rTVk5Uyt2SXhQUXhmem84blVEa294TDFEVGFFVzFCU2tleTBIRC9CU2N1ZU5ubzR6SFRhRlgvVWgKT1YwNGpocjQ1KzMrMmlvMVd3WmZCN2tFMFl4cEV0WUVOL3pNZ1FJREFRQUJBb0lCQUViUjRyZDl5QkgwUE84RwpYK2UwRjdFdUxSblZ3K0xQTGJGZGpPS1JqNjNMU2lVNGYwSDNqNzQwdmdIKysyQmsxZFREc1p5dHZFZ0tIS3VBCmV1MStxUHZ5cHVYV2k0UzlaUlJwWEtTYUJjUFB0NlY3UkhYd1BjMmZlcVNGSHJoSWVDN3l5QkZib0ptNFRMc3UKTnRUSTdaZDg5ZmdQV0o5cnpwUE1QUFNURjB5VytmbmMwS3ZyaXh2YVhRcXhWQXNYOGVyQUlieWJhU1JyNSthZgpGZ1BJcWp5OFl1RmlaYUhvcUY2UWpjYUk1RUwwUDV2L2szT1NpRTVmamFKaWNMcHlDWU5QUlRablNGU2RuK29ECkFXMk0xbWVrQzhhV2ZzZ0hSYTZ1a2VyWUxMNkNJeVByejJUVkFiMk1rSFl2U1FSK0hTR2JHbXRtQ0x3NEc4cTAKNmRqTENFVUNnWUVBM3EvYlVxdjVkT2JKdklJNzl1UVlLQzRzRGY3WlZLZEVOS2R5bVp6bkVKLzZ4eFZCd1lrdgp4SXdnQTRPRE9kVkdZRW5LaE5saFZ2bWVHWFBwWXRaZzVCbjlYeWdyTnBSZWl3WmlNMCtldDlyYU4wWW9rWi9iCjRQVUxSSXhDUEVDdUlHYjh2VG5LTVJBSGNTc1RqV1huMFhrQm40cUIwV21oTWdrUm9kWFcvVE1DZ1lFQTFFdmUKRG8rSXM5U2NiME1YQm9SWnEzMnUxeUlOSUVYZ1ZicmI1NXRJZnJxNDdzUk1zYUZ4R29sNzA2c2dwVTFNTWFYTQpQVFJhWGl0bG1nOGZyWCtNdFR0L0gyVGhZWi9LNGtjRkFoME5pNWU4T0Z0Tm1XdEFVUXBFOHQvNlZ1TG1idlE4CkFEWXFqQzFwYUIwQ2l1dkNDRXVBRzYwQXVjam1SbGJReTVDb1Izc0NnWUVBd0JDelBQbkJIWGZVdGJjcUd3YWUKWTBGM2s5YWtBaVNHYWxlbU95R2VGYk8xNnpIRlZqU0pzNThjR1l1N2lnME9Od3hPRlFrY3NKUjVMUURSWWdMKwo3SjRSNzVuSXM3bUNWYXg2MUVDdTUycG1YZGd3TTNIS2hwc3pUYnNmZ2JKVHZQUzJ0a3A2dnBoUm91VUJaeXBtCnFFQVRDMVMrSlMxUzc4SHNxRVcwdVFzQ2dZRUF4djdpZy9XSkp6L1k3dllOUkQrVktnbWlkT2ZuTStRcjkxQXoKUnpNb1RocEt0UXp0OHVjb2RMNkFncFY3QVZlbVh6ZFJiZUYvLzV0Z0hudWtydVhMaUNuZjdCYU1xUXkyaVVvVwo2TGRBOWlOaCs5V2h0SGh6RGtPNUE0eHRSVHBrMDRZK0k5aWlJMG1CNzJTWitJd3JFY2xycVFXT2s1YzhPcHl3CkZOQmczTGNDZ1lBLzNQbVFEYS9oT090eXV4ZENDdG5ISC9vRG5ZYmhoaU1uaXZzckJQeW5ZQ2xYNksyTTY2Z0oKYXNnMExCeWV1Wjc4YnJwV3F1a0RlcGhpS2dOWDlNWWQwQzBZN3ZtYjRFUmhicmRBcUF4UjdSWmlYaGVUbGwzYgppZEowNGhEVHpUemFrNnNPQ0tnbnFabmdNZURERFBIWlBVbFBLMlRkcjNubWtBRGtRTVZHMHc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRVDArRm9kQ3crMTBCMTFyMEpENXVUVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEEyV2hjTk1qWXhNVEl4TWpFMQpOVEEyV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRHRJbVNJZ2ZXYWhCSnZWbzk0MlNQSWlhTTBjZ2JzQ293QkZSN2pWRmRrTUdkUTBIU1QKMXZjTFl2TVkyU2psdzRXTmtOUFEyanBDZ245QmNQY0FXbFBjRHJUSHFMTFB6UWV5WENuTzlEazdITDREZWhVZwpjVmpNQ1pRYXZuRjVmOHhOanR2empuaWgwZnpBTzF4dG1aZFR1QTlYUEpZQTluMEkzc3ZxY0ZRQmU5UkM2RENhCmFUaDVyY21vOStvQlVUajBPNWJ1bStzcFJmWHh3eDUxNUxheTU0Tm5sazhxNG5LWlZPVFZHcTlzbzdhR0hMaUkKNHBGcmhpTEY4ejJSMjhVL2ROcG1RMDBOOG9CTndzVVkvOU5sZFZRMWx5SjNhU0d3cGFVSWl4cXdrMzYzaE0rUgpJMUJFYWNNMmxrMm1TdURLQ3BqWURTME4rMXh6aWxCT0hDUnRBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVkdWdVWHRqdTdVUHpsUlRsUGN4WDJMaUNGb1l3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFKdW5mbmkwRjFCTUlPN2o5Nzlsai83VEZkdjRpOVBHY3Vsclc5aVVabFVkL2l4cHIwVkpUL1c2CnhkQ1BUVWUvUDVUSHZYUEZhdmYxVjJBTkFyZWU2cXFCWVJxbE14YTZUSTdwRmNOdEgvdFIrZVpqOFlCK20wQVIKL1llTzdCWC9RWlBHRnVhd3EzK3FJdXVybXRQNGp3aGd2cjJRYTFGY1R0RXN5R0dsRVYwbHoyYjYzZERoSEJPcgpIRjBmMFU5NERKNS9sMzBoSnpDYXFpQUl6VzZkSHd4Y2FHZXhTL2VjNkh1K1hteE0zK2lzZFBnbHoyamhtN1RtCjMwck96bE9yM0t5aDE2cWcvd3hNQS9hOG5NWlRVR2V3NnhDa1diUTgydGpTajRXTEVzWUs1a3E3RVh1T3U1bE0KMVFKY1hyL2tndlNiWGxTMGYvN3JBNUtWT2x6UzdCQT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQVB5aTRuM256aXo0QTJFKzViOEpDMXd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV3TmxvWERUSTJNVEV5TVRJeApOVFV3Tmxvd0pURWpNQ0VHQTFVRUF3d2FLaTVqTkM1b2RXSmliR1V0WjNKd1l5NWphV3hwZFcwdWFXOHdnZ0VpCk1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ3VZc3d0VUswS0YzajFvTEo4bUpWQUt0WkkKQzB6b3poeDNvVkw1bzFuRFJQZkVKQm4wMTNscnFaaVJiMWF1RXJTbVZPNXZlL3RSbktPU0ZuZkxjUFFkdWlobAo4Z1l5QVE4ZmRrdDFxRzdsU2NsSVRmZ3RLVEIvQW9HVElxRHZ1UDlNZHFoWXR5U1V4U25Xa0tZRGtZYTZucWNZClhGSWhJNUpKbDdGTkhyZFpOSHRCMTRTaXBEOGs2SklReFk1R09NaWZBSElTL09kbUYxQVYxWmUvVUlMTW8rOHUKNDVoNjJoOWhQblladXZsTnUxRnFJOW9vT3FpZDgxcGdCM09RZkR5dEk3d3pRZHJLaHZBcDAwT1U5RWNNU2QvdApQdGtiTFZ0Mm0xbm1aR0VDSU81cElyVER0VWgyNllic05KQ294UmxBT0dPaWR1S2Z5Y1g5UHduSWVvVkhBZ01CCkFBR2pnWWd3Z1lVd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGSGJvRkY3WTd1MUQ4NVVVNVQzTQpWOWk0Z2hhR01DVUdBMVVkRVFRZU1CeUNHaW91WXpRdWFIVmlZbXhsTFdkeWNHTXVZMmxzYVhWdExtbHZNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFDS0xaT0p3NnBpSEVPdjYxSHFMMTQveFdhZWJHcVFzcWtqN3grRzNCdWEKQnBEdUdxSFZucE9xVnZSZVFzQUhrWlZCUHRZdkhnSXpXVkVNSzYwRnRSWEhSekJaN2E4ZllKL3BTSFlxeXA3NQphdktGU2w4Ry9BVHh5VWZoMW9PdW8vK3RhUmlCN0FqWm12R3lYRDlxWFJhT1U3NVBmc0VFTmUzTDBNM1luMWZ3ClFXY1orSSs2S05NODg1M3lSa2FvSC9sSXhOUCt4NXNWQlhpNFQzNTNELzJ4ZVEwRlhiZUJ1WXh6NE5MQUxDWTMKNnlrenhIRzFadWRLd1hqMmFpaldoTGc4TkQxL3FpQ1BkZE1OMWYxOC9RSVI2UXVIVnRCcjZLdTc0cXY2Nm1rTQplUkJXNEVvdjdGZldmUlRtaXZTTTZrRjlsSVBHMmhxdXB5TGQ2RDl0UWlFSAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcm1MTUxWQ3RDaGQ0OWFDeWZKaVZRQ3JXU0F0TTZNNGNkNkZTK2FOWncwVDN4Q1FaCjlOZDVhNm1Za1c5V3JoSzBwbFR1YjN2N1VaeWpraFozeTNEMEhib29aZklHTWdFUEgzWkxkYWh1NVVuSlNFMzQKTFNrd2Z3S0JreUtnNzdqL1RIYW9XTGNrbE1VcDFwQ21BNUdHdXA2bkdGeFNJU09TU1pleFRSNjNXVFI3UWRlRQpvcVEvSk9pU0VNV09SampJbndCeUV2em5aaGRRRmRXWHYxQ0N6S1B2THVPWWV0b2ZZVDUyR2JyNVRidFJhaVBhCktEcW9uZk5hWUFkemtIdzhyU084TTBIYXlvYndLZE5EbFBSSERFbmY3VDdaR3kxYmRwdFo1bVJoQWlEdWFTSzAKdzdWSWR1bUc3RFNRcU1VWlFEaGpvbmJpbjhuRi9UOEp5SHFGUndJREFRQUJBb0lCQUZTQ2JKQkpXSkpiYmJNYgpmV1FFVGRBYThsMVhuSjMxeExYMDZGRXlhSDNKSG9sZk5YVUNOMFdGbXZwZ0NwR3hYdnA4amxCWXRTS0gxbjBsCmhraUJKTXlET3JDczZYT3lMN0gva2ZJaS9oci85eHVqTFhJMVU5czVTN0lTUmd2bWkxSnk3b0tQdnBxYU1meFoKZlJxZG03MDB4YVY0bUJTWE9IMlJsY3JaNStEQ1VTUlhoRVB1d2dvb1pQVUh2dlc1SUFnblhGVzBVbU5vYXFPOApUdU9YaW8rWmFZOWltb3o0VGlSY3dYVENvWVRJY3NSRUF4MzlVYmxFdjBlc0ROVm1leWx6TmErZklMbUh2ZlBwCkdHMjRnTnZJQWlkbkpwNWNmVlNWTmhta2p1aE8wbmZLbWduYWpzZlVsbkJZYitWc2xCOFlUa0hyWGloYjlSQXIKQitNa21JRUNnWUVBeUVqNHVJZjNSSzFsMmtCZUVoRUZuUHZnRVJmUEpGMUxNZFhPMTJScVJiY2toVzlpdkxhNgpZSGdRUzJ1MGFYaFIzZHRsNE1NdDF1TWVvVVRhNW55dGJNaWhNWkpLbktodjl0Zm50ejNlelBScTRJekVBZU4rCjZVNThZTDhQZVNSMXlDYlNqYUNsYy9pZ3Uzanp4MlJxWlZrWFhGUWhEWHV6UnMybVNYMkNhWFVDZ1lFQTN1VjAKbG4yUnQ5a09Bb0hDd3dmL0JYUGRhSjBvQmFYcjNCNzBhcmk4VnRIakIrdURHWXQ3L3luVmhQSFVWODFWNnA3dgo5RGhMZitsV0FpRm03OXJIRWN1aDR6VGFPT2VaYmE3NlI2eTE3SFBoMmZzcVlZNFFmdXAwUTNLeERHT09DNEp1CjloZnZBTFcyajAvTHo1cUlhTC96cDBXZDdMWkJWYkNRTEtQYklFc0NnWUJlYlJqbVZ5UWErdTFVTXBpblIrTXYKbWdpUHhudmdseU9HZ1ZrZGI3Z3kyaCtiMFdIcHV2U3YycXRFQTZseE9FclFvRW10NkJkS2dwWEVUcVF0bW9aaApEVTRDQXdpdVJ6TlNXNFJoZmdmMjlSMFdkUWRNSktlRzgzdnNXT2ZBbzVIc0pYR0xXRHZwSzBVTVhnQUE5N1M1Cng0RWVCSVA0eVdOQ2RGNTdzM0t5cVFLQmdEbmFNR0tIQVBWSTN2d0RsZnRzN2VJS2FxTW1keWJRSStHa0h5ZzcKL3BaQ0w3ejBnYmgxblo5aXlrcVJRZDN3SzZhVHpoQUROSVZrbUxCQTN5ak9EZkV1ZXp3dmtaeEhjR2twaTBoagpLV3pQdndVR3piODRVa3UrcXFKKytEa1E5ZU5DM1czK1ZFaEk0Yk5jc0xlWGttUXR2aDNpVWRVSWtQaWV0UzBBCjhuVDFBb0dCQUl2d0ExTzdWYTRDRXdlSmJLcVczZ1ZVR2tTLzhxWEp6bTJUZDJpY3hRTkI2Tk0xakFyRGJ5eGcKMk50RTV6MkZEcW9YVHJTYlBSL0JCTDBDb0VRczRseEFpMnhGcGp1ci9tbTVHTyt3R21WaG1WbzJPVlNMTHlRZAppMWl5MWRSd3RpQXMyWHdOOW9RTW5SaDRkQU1GTzM0dnRQYzI5YVJXVVdWUDNsQTVGNk9DCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  skip-cnp-status-startup-clean: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: c4
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "14"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  # Default case
  routing-mode: "tunnel"
  tunnel-protocol: "vxlan"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-wireguard: "true"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-local-redirect-policy: "false"

  kube-proxy-replacement: "false"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  enable-host-port: "false"
  enable-external-ips: "false"
  enable-node-port: "false"
  enable-health-check-nodeport: "true"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  ipam-cilium-node-update-rate: "15s"
  cluster-pool-ipv4-cidr: "10.4.0.0/17"
  cluster-pool-ipv4-mask-size: "24"
  disable-cnp-status-updates: "true"
  cnp-node-status-gc-interval: "0s"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "true"
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"
  k8s-client-qps: "5"
  k8s-client-burst: "10"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-connect-timeout: "2"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"

  external-envoy-proxy: "false"
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: c4
    peer-service: "hubble-peer.kube-system.svc.cluster.local:443"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-hubble-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-hubble-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumendpoints
  - ciliumidentities
  verbs:
  - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumexternalworkloads/status
  - ciliumnodes
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumendpoints/status
  verbs:
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumexternalworkloads
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: kvmesh-metrics
    port: 9964
    protocol: TCP
    targetPort: kvmesh-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: NodePort
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
    nodePort: 32379
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-agent: "unconfined"
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: "unconfined"
        container.apparmor.security.beta.kubernetes.io/mount-cgroup: "unconfined"
        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: "unconfined"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        lifecycle:
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - CHOWN
              - KILL
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
              - DAC_OVERRIDE
              - FOWNER
              - SETGID
              - SETUID
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Unprivileged containers need to mount /proc/sys/net from the host
        # to have write access
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        # Unprivileged containers need to mount /proc/sys/kernel from the host
        # to have write access
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Unprivileged containers can't set mount propagation to bidirectional
          # in this case we will mount the bpf fs from an init container that
          # is privileged and set the mount propagation from host to container
          # in Cilium.
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - cilium
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      # Mount the bpf fs if it is not mounted. We will perform this task
      # from a privileged container because the mount propagation bidirectional
      # only works from privileged containers.
      - name: mount-bpf-fs
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        args:
        - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
        command:
        - /bin/bash
        - -c
        - --
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
            drop:
              - ALL
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        resources:
          requests:
            cpu: 100m
            memory: 100Mi # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
      - name: host-proc-sys-net
        hostPath:
          path: /proc/sys/net
          type: Directory
      - name: host-proc-sys-kernel
        hostPath:
          path: /proc/sys/kernel
          type: Directory
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              - key: ca.crt
                path: client-ca.crt
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.14.2@sha256:52f70250dea22e506959439a7c4ea31b10fe8375db62f5c27ab746e3a2af866d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      initContainers:
      - name: etcd-init
        image: "quay.io/coreos/etcd:v3.5.4@sha256:795d8660c48c439a7c3764c2330ed9222ab5db5bb524d8d0607cac76f7ba82a3"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
        - |
          rm -rf /var/run/etcd/*;
          /usr/local/bin/etcd --data-dir=/var/run/etcd --name=clustermesh-apiserver --listen-client-urls=http://127.0.0.1:2379 --advertise-client-urls=http://127.0.0.1:2379 --initial-cluster-token=clustermesh-apiserver --initial-cluster-state=new --auto-compaction-retention=1 &

          # The following key needs to be created before that the cilium agents
          # have the possibility of connecting to etcd.
          etcdctl put cilium/.has-cluster-config true

          etcdctl user add root --no-password;
          etcdctl user grant-role root root;
          etcdctl user add admin-c4 --no-password;
          etcdctl user grant-role admin-c4 root;
          etcdctl user add externalworkload --no-password;
          etcdctl role add externalworkload;
          etcdctl role grant-permission externalworkload --from-key read '';
          etcdctl role grant-permission externalworkload readwrite --prefix cilium/state/noderegister/v1/;
          etcdctl role grant-permission externalworkload readwrite --prefix cilium/.initlock/;
          etcdctl user grant-role externalworkload externalworkload;
          etcdctl user add remote --no-password;
          etcdctl role add remote;
          etcdctl role grant-permission remote --from-key read '';
          etcdctl user grant-role remote remote;
          etcdctl auth enable;
          exit
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        image: "quay.io/coreos/etcd:v3.5.4@sha256:795d8660c48c439a7c3764c2330ed9222ab5db5bb524d8d0607cac76f7ba82a3"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/local/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=clustermesh-apiserver
        - --auto-compaction-retention=1
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.14.2@sha256:0650beac6633a483261640b6539c9609f5a761f4ab4504fd1e6ffe7f2bb82e9a"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt
        - etcd.config=/var/lib/cilium/etcd-config.yaml
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: IDENTITY_ALLOCATION_MODE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: identity-allocation-mode
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        ports:
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir: {}
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "clustermesh-apiserver"
      serviceAccountName: "clustermesh-apiserver"
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: clustermesh-apiserver
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.14.2@sha256:a89030b31f333e8fb1c10d2473250399a1a537c27d022cd8becc1a65d1bef1d6"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            tcpSocket:
              port: grpc
          livenessProbe:
            tcpSocket:
              port: grpc
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          - name: tls
            mountPath: /var/lib/hubble-relay/tls
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Always
      priorityClassName: 
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      priorityClassName: 
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.12.0@sha256:1c876cfa1d5e35bc91e1025c9314f922041592a88b03313c22c1f97a5d2ba88f"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.12.0@sha256:8a79a1aad4fc9c2aa2b3e4379af0af872a89fcec9d99e117188190671c66fc2e"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
---
# Source: cilium/templates/cilium-secrets-namespace.yaml
# Only create the namespace if it's different from Ingress secret namespace or Ingress is not enabled.

# Only create the namespace if it's different from Ingress and Gateway API secret namespaces (if enabled).
