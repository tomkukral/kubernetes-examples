---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQVB6SVZ2K1NWM0daMGFDTEQ1SFdXYTR3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV4TWxvWERUSTJNVEV5TVRJeApOVFV4TWxvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFzcW5NdEtDc3NRMlJYWkpXa3k3TmFJTkJqSkkzbkNZajNySEJ3cWJ4VGVxWERCZXgKbmZjbkxPcHFzbC85c0xSQ1hHMDRpZi9ZRjhsMlNwU1F1Ry9QR2s2Uk9yUGpEdTFGeUhnMU02L3huRGdVTnNjNAplSlFyb3pDU1poRW5LN25BVTBBMnc0a0d6dE40U3ZUMitxS2YxbENNakwyZlhhV3dVVEdHN08xS0lWeFNldFdICmxEQ09yTDVGYTN3bm1TcTRPWGxSeU0wRzB6bmU3cHZPY0Ezc1ozNEwyWVNoSzh0L1VROHo4OUtlaVNUaW5ZMWoKdWo4dFVFYlRxMXRXOGxaVnQ3ZmtCbFh0UCsxNXhOZ3pXdjBWRmZuSUI5U2EzR3MwMTV6YzJ2VmVGTmx4Z3pXbAorbStRdFhBbklCUmNkVEtoMzBJRWEweHBSd1hlcU8xV1BiZlpQd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGTUFYVjUwbTVVTmVyanpSUFJyV1piQzVXZDNFTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQVV2dXg3QVNFZzRRcEdhRHY2NWdGKzRTd2tTS0RpeC9hOWNKV2V3d21iS2RUYlZzdWNWZlFqClBoaDFBd3owL2k1RUsxdlRIQWNiNm12eUxjdElZOXpvRFYwVGNQb2FIb2hSVnUvRDBGMDlLdElTWnIvVys2T0cKNXZzZGl1bVdtZ1FYcTVhTFk3Yk1TeWdkOHEzbjMxaFVPcEFCTnBjSjNnZlloWm81TlAvRFNtZ1FBdE5nMVVyOApvb1BVY0ZFTThuT09nRTI5YTUzb01XQWJJSmhmK3dTYjdpbmQvaFUzTmkyTWdDRXdRRmRVeVhYa0EvSDJtTkZyCjhZRFFqaDBRVnJHOWFEZXpHK3JZdEdaYjYxcDBPZThjNkIxcVRXVkViUUxkV1FCQ1NlWjhTWlF2MzRnZU1EaE4KK3JaTUNnaW5QK1AyV3FmRXdSTUhYZTJPZUpUMWRTNVYKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBc3FuTXRLQ3NzUTJSWFpKV2t5N05hSU5CakpJM25DWWozckhCd3FieFRlcVhEQmV4Cm5mY25MT3Bxc2wvOXNMUkNYRzA0aWYvWUY4bDJTcFNRdUcvUEdrNlJPclBqRHUxRnlIZzFNNi94bkRnVU5zYzQKZUpRcm96Q1NaaEVuSzduQVUwQTJ3NGtHenRONFN2VDIrcUtmMWxDTWpMMmZYYVd3VVRHRzdPMUtJVnhTZXRXSApsRENPckw1RmEzd25tU3E0T1hsUnlNMEcwem5lN3B2T2NBM3NaMzRMMllTaEs4dC9VUTh6ODlLZWlTVGluWTFqCnVqOHRVRWJUcTF0VzhsWlZ0N2ZrQmxYdFArMTV4Tmd6V3YwVkZmbklCOVNhM0dzMDE1emMydlZlRk5seGd6V2wKK20rUXRYQW5JQlJjZFRLaDMwSUVhMHhwUndYZXFPMVdQYmZaUHdJREFRQUJBb0lCQUhrcEphV3BBUFBoRzUrMQpTZmp1V0daei9OUHpwTHJFTXJjbkhSdUFVMHhmdHFlQXVmZENVTkxvOWdxWmhsVjdLVFc4N0FiSjlpWExmZWo5CjcxYmtuREplN2FZOXI5SERudnRnYWRQdmtZNDdpWm5NYU1OODJFc0crWUUyU0xZaWRnYi9HU1JwbkxCT1FObTAKWG5tQ0o1c1RiUDFVNnVwN0hxTXhUeXNGa0t3bDZiVStUd2w0NlZRZFhvd0V3MHBZUTNHcG0yQUsvTGdXMW52UApoVUdRQUVpZGl4Zzg0QVRJWStmZ1hjWjRZY1pBQ1ZZZmFzTWQrV1o5dHQ3bllaeSsvaXJKQWQzelViZFFpWXRyCmtDV0I4aHZJUE9JSVo1TnFBSHVlT1FhQVJZRVc2QXZxUUZHMWVkdmJIRFhMRnBJeUx1UExCNTNRdGNpMllOWG0KRkx6dG1BRUNnWUVBMnJJU3dXcGpjTFBQNVpaNE9UR25DL0xaY28rVzdjUU9rYkJ5UHRaZW9VOWVhbDcxbndYTgpSV3M3UjM1TmVMNlVzZmxWTDE3TzVBMUFMcXkzdkoyNCtQMUw4SzRWaTl2SmI0Y2VVQWpmVVRRQ21SUlJxOGFyClhXcWR5d3ltandDTXQxR0ZBcUlDT205UTBZcUI0QXJ5bVhvVGd6SGl3bk1GVkgwcVlsZkp4RDhDZ1lFQTBTT2IKdmdnR1NXdWNJT0RRNE1ydmZhMXNpRWgvRmI4dEQ1NDBuVFg3Zi9IcGpwazVzRjU4UUpQdzk4ZE03WlM3RitKRApObkJ5Y3ZCYzJtdmlCQSs0amxMV2Ftd3lqdWRMdTc1SXcwL00yWjlwYjZLV05aYlB5VE5iYnlNLzdNVXpRdVlKCklsM081RThyNzlzLytoR3QyL3crMGhjeU1qYWRCU0tUSVFvb3F3RUNnWUJKWFExZnB2SGUzK014RUk0YUdhY0IKSWlHQ0JkdEt2Y2RwWmppZERjckc4Rm9xOHRvUTA2QnQxakFYcHE0VWdGSmZkZFgyd3laQ2FKT01WTko2U3FxLwpsREZDZHhPeFREVEIzaUQwRmxYYjVzZXNWSjJsTTB0UFZqSEM2T2FDK0ZzOEwvT2YwM3RONFFQS2wxMUVMRWYvCjVtemZTUC9aM1QzL2Z0R1dGZjhRZndLQmdRQ1RGS0hSRVQrcW50MWNXZjlNT0N3WmpMK0pVTUxmZm1Xb1dERFUKWjBTS2hJMG0xaWUyRzV6eXBaaVFDVC9XemdTT0ZYZ0RieTF1SEJDUkk5SDkzVGlFRDBudjZrdmNLRm9nblAvNwpLOEg3UXBzYUFaUDErQ3dGYWZMaHhENk91MWtEc1ZlM0xaWDFCcUQxdkpIUHdtTXRGTWJ4WlpMTnNZN1lMNnFkClQ5R3VBUUtCZ0F0TldNVUFlbkc0dE5QWFFYQmpVZjkvelhSZ01ac09acVR3VDN2a2RUamRTUy9MYUdkMnM0cjcKR0VaT0tISThqd090bVA1RjBpcXZtZ3J3cUdISWpRb3VCd09LYWlCekd1eW5LamdNdDlFV2xBeDluT0FIY2Qzego3ZUdUS281TDBYQ25BUXFOOG5Ud1ZvV3Z2bDh5dUdMVmhKTEZKYmdzSk93dEk3RCtmejlyCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQVB6SVZ2K1NWM0daMGFDTEQ1SFdXYTR3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV4TWxvWERUSTJNVEV5TVRJeApOVFV4TWxvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFzcW5NdEtDc3NRMlJYWkpXa3k3TmFJTkJqSkkzbkNZajNySEJ3cWJ4VGVxWERCZXgKbmZjbkxPcHFzbC85c0xSQ1hHMDRpZi9ZRjhsMlNwU1F1Ry9QR2s2Uk9yUGpEdTFGeUhnMU02L3huRGdVTnNjNAplSlFyb3pDU1poRW5LN25BVTBBMnc0a0d6dE40U3ZUMitxS2YxbENNakwyZlhhV3dVVEdHN08xS0lWeFNldFdICmxEQ09yTDVGYTN3bm1TcTRPWGxSeU0wRzB6bmU3cHZPY0Ezc1ozNEwyWVNoSzh0L1VROHo4OUtlaVNUaW5ZMWoKdWo4dFVFYlRxMXRXOGxaVnQ3ZmtCbFh0UCsxNXhOZ3pXdjBWRmZuSUI5U2EzR3MwMTV6YzJ2VmVGTmx4Z3pXbAorbStRdFhBbklCUmNkVEtoMzBJRWEweHBSd1hlcU8xV1BiZlpQd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGTUFYVjUwbTVVTmVyanpSUFJyV1piQzVXZDNFTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQVV2dXg3QVNFZzRRcEdhRHY2NWdGKzRTd2tTS0RpeC9hOWNKV2V3d21iS2RUYlZzdWNWZlFqClBoaDFBd3owL2k1RUsxdlRIQWNiNm12eUxjdElZOXpvRFYwVGNQb2FIb2hSVnUvRDBGMDlLdElTWnIvVys2T0cKNXZzZGl1bVdtZ1FYcTVhTFk3Yk1TeWdkOHEzbjMxaFVPcEFCTnBjSjNnZlloWm81TlAvRFNtZ1FBdE5nMVVyOApvb1BVY0ZFTThuT09nRTI5YTUzb01XQWJJSmhmK3dTYjdpbmQvaFUzTmkyTWdDRXdRRmRVeVhYa0EvSDJtTkZyCjhZRFFqaDBRVnJHOWFEZXpHK3JZdEdaYjYxcDBPZThjNkIxcVRXVkViUUxkV1FCQ1NlWjhTWlF2MzRnZU1EaE4KK3JaTUNnaW5QK1AyV3FmRXdSTUhYZTJPZUpUMWRTNVYKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLVENDQWhHZ0F3SUJBZ0lSQUtiTWdVaFowWWhhd0lxOGR1YTBac0l3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV4TTFvWERUSTJNVEV5TVRJeApOVFV4TTFvd0ZERVNNQkFHQTFVRUF4TUpZV1J0YVc0dFl6RXdNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUErUEk5RnFSVkMyTmZLQTlRUHNIUEZpRHM5L3BWeFY0NDdYSHZoajd2YkpJZENkb0MKV09kTHAreXJvSWRGc2lFWm8rWGxJanhYUkQzUWh3LzNCdWtBaitmL21xQTQ1eVJqVWU1RmErdE5pNFh6eE9Fawo3ZGlkNFozQUl3Njh5M3Z2Qkx4WVVoOWJkYlBobVJXbjlOMG85cHFOdXliVmJpTEdyRzY3NUJkRlFhVkxVQTFECjcxSU9CWTZMZkZIcDJ3ZUdlcmYxM1o1UXlQOXQyZFJwYlg0bEQxUmdHMG0vTWNpc21LZ0RHY2ZFNWlJS212Z2EKVnB2NzNxWUxCQUFzM3kxMU5lQmJ0WVplQ0dobkd0MWJtbnFsa3djL1VxNGV5TkMwRzVMdzlVQWx3R282VTgzSwpWbk9ZWEg3T290TjBob0pxOUROVmNkZWhDRXpNaDBlZmFvWWdxUUlEQVFBQm8zWXdkREFPQmdOVkhROEJBZjhFCkJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUMKTUFBd0h3WURWUjBqQkJnd0ZvQVV3QmRYblNibFExNnVQTkU5R3RabHNMbFozY1F3RkFZRFZSMFJCQTB3QzRJSgpiRzlqWVd4b2IzTjBNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNGZ2J5TnBDTlhiNGRmckhGVnZpZGQ2TVh5ClNuMnkvRSthSGlwRnEzdm9hSFpXVkErSjRKL28zMW5VT1lHbXNpc2tvRUNKNmJ3WUhVMGNHR0EvVlprRnRiYjIKczdzcU8xK0JGYXRIekVKM0w4eU1YRDJPYXNGTzFuY2pBb2x5UHdjdXhlY0JGa1lnOHZnV3JUMThXWElaUDVmSAo5U1p2RHVPQ2xmNVVUc0orYjdpMnB5WFpOTXl2SDAxRjJuQS84ZFJzeitVUXJXRmhISDgzdnNQMWdNU2lKOVptClVwQ0hPQkZhcDV5eEhGM0k3WDV2TnhGOVBSai9DWFhIVmYrMmJuaGlmbTZHNm9yakNYQi82UWVraGI2cXliTnMKUnhOVEJrYlRaRm9MK0dxa256QVJhVGJjd1BYV201aDY4QXI3QzlXZTZzS3ozSXYxN0Rtdjc5UTVZYkhSCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBK1BJOUZxUlZDMk5mS0E5UVBzSFBGaURzOS9wVnhWNDQ3WEh2aGo3dmJKSWRDZG9DCldPZExwK3lyb0lkRnNpRVpvK1hsSWp4WFJEM1Fody8zQnVrQWorZi9tcUE0NXlSalVlNUZhK3ROaTRYenhPRWsKN2RpZDRaM0FJdzY4eTN2dkJMeFlVaDliZGJQaG1SV245TjBvOXBxTnV5YlZiaUxHckc2NzVCZEZRYVZMVUExRAo3MUlPQlk2TGZGSHAyd2VHZXJmMTNaNVF5UDl0MmRScGJYNGxEMVJnRzBtL01jaXNtS2dER2NmRTVpSUttdmdhClZwdjczcVlMQkFBczN5MTFOZUJidFlaZUNHaG5HdDFibW5xbGt3Yy9VcTRleU5DMEc1THc5VUFsd0dvNlU4M0sKVm5PWVhIN09vdE4waG9KcTlETlZjZGVoQ0V6TWgwZWZhb1lncVFJREFRQUJBb0lCQVFEWDlhVGpBSG82WCtGTApxa1V0dkFtL0k1OE8zRjhOMGRoR3ZBRlREME82aHVLa0NqamhFUDJEMW45b3loQy9INUhUcWZybGdUMGZHUlRPCkpoNWhJejUybUljWGg0ajFrNDZKbzg4YmVNd1Rqb2ZUTXBGTHVBLzJpbGdFMGFNY1R3NGhxSlpoMzR3REJxSmQKbi9qTkpoS0VJNzF5THBVV2J4cTB1WGRMdnBnNUFjclZackRKR0dRbzJSNHlRcmU5UU5FcWNXdVJuRnhOazdiKwpjdDd1OFZDeWo4NTZodGNnTlRYQ2FKYmtXRnQveDExMmxlT0VVUU9yTldMVU1IWWdybnRIWFVGTHBPOGNXb0ljCjNIby80aFl0M2tDNWJGS0xNRkZJVUxNa0pMTXpJNVN0czlwK0h5Wk4rMHg3L1p0ZG8wSFV4NVc0dGo0SThVb0wKQ1RoY2ZaZ0JBb0dCQVA5Qm1LelFjanRqemVRcEtEeTdBY1Q3aG1aYjNlOTQxdDlaOXFtT3E0Rkp5Y3plcXF0dwpyZWdEcUNwQ3M5U2VvZnpXYXJYL2lDa01vTWVBTHNER2VGMkFETFpnWXpQUmgwek0rTVBvcUxJQ2pWamlGKytkCmRGejM2TUNFc3lZRldOcGZaQUFEY0Nod2NENDMwQlhGVG1Pc2hmemZCckVHa3QvVVpHVDhtbDJwQW9HQkFQbXIKNzNldG9JZWF2R0o4L0U0KzhPUnR3RjlqckQ1cW1ES1BTeVlYR1NOSW5McjhnMVVNdnd1UkIrUnEwS0YrRTBPWgpkb29ocml3RlNpY0xuUWpuSFdmVm9lVTk2U0ltQTIwQm00OTcrNDZ4SWlIelp5bEhBUmU3WWpORGZkZEJZM3IrCk5xb0kxZEpOMTZVNFIzek5FZVk0VDhMZHdLcFhxNmU1Q1l6VktZc0JBb0dCQU04UXUzV1ZNdFdTeFBjTm5DS0gKNFl1V0x4VGgrVXZHVHlpb3Bqd3VERnE1TFFjUXFvcWd3Ykt4Skw0RGxqWW82V2RkMlBzQzY4WEJCTHhSODV0VwpaVllVQmp2OFBQMVFQOTNCZVJ3VHBLV2pCRjdTS25DcTNqWjh0VWRYWHF5OU1iTVVKdDhMNnZRaklpcVd4Q3FsCkFFNURLZjVVUGUxbFU4aFhWNG5Fa01UaEFvR0FZam82NUtMeTNXY0xadFExajdORG94dHE3QnlTejV1d2RYUGEKNVFtQllsaFhFVm4zY2FhcUl5clVLQkcrTTBzZTJTR3ZlWGoyeFdydldaMUFFeGlhZ1JlVHNsVkJPNllwQXVIMwpDZVNGZkFaRW40YmJ0Mm13REY0MHJHYUpRLzc5M0kzWGc5NG1BYStPZi9vOFplVm9mV0w2UG5od0xKU0JmR05ZClZvZ202QUVDZ1lBVUozVThZZUtLVzFWYkZxOW4xTjVVOVI3RDgyM1pvTWRMbHIrSzJIdXJVRDYwY2tHMjVPYTEKbXhmc296YTVSQ202a2JYeWVKbzRIOEFIT1p1N2lEYnN6VnNpdXYrYTNHODZiUkx5WW9LcEtkMkJKR0o5QndhaAozSXg5TFk4a1J4cm1TdUNtakwyUDhrSVFsKzRxRW5UTE9qcm9idW04LzZuTWlzMXMxV1EvWVE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-ca-cert
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQVB6SVZ2K1NWM0daMGFDTEQ1SFdXYTR3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV4TWxvWERUSTJNVEV5TVRJeApOVFV4TWxvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFzcW5NdEtDc3NRMlJYWkpXa3k3TmFJTkJqSkkzbkNZajNySEJ3cWJ4VGVxWERCZXgKbmZjbkxPcHFzbC85c0xSQ1hHMDRpZi9ZRjhsMlNwU1F1Ry9QR2s2Uk9yUGpEdTFGeUhnMU02L3huRGdVTnNjNAplSlFyb3pDU1poRW5LN25BVTBBMnc0a0d6dE40U3ZUMitxS2YxbENNakwyZlhhV3dVVEdHN08xS0lWeFNldFdICmxEQ09yTDVGYTN3bm1TcTRPWGxSeU0wRzB6bmU3cHZPY0Ezc1ozNEwyWVNoSzh0L1VROHo4OUtlaVNUaW5ZMWoKdWo4dFVFYlRxMXRXOGxaVnQ3ZmtCbFh0UCsxNXhOZ3pXdjBWRmZuSUI5U2EzR3MwMTV6YzJ2VmVGTmx4Z3pXbAorbStRdFhBbklCUmNkVEtoMzBJRWEweHBSd1hlcU8xV1BiZlpQd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGTUFYVjUwbTVVTmVyanpSUFJyV1piQzVXZDNFTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQVV2dXg3QVNFZzRRcEdhRHY2NWdGKzRTd2tTS0RpeC9hOWNKV2V3d21iS2RUYlZzdWNWZlFqClBoaDFBd3owL2k1RUsxdlRIQWNiNm12eUxjdElZOXpvRFYwVGNQb2FIb2hSVnUvRDBGMDlLdElTWnIvVys2T0cKNXZzZGl1bVdtZ1FYcTVhTFk3Yk1TeWdkOHEzbjMxaFVPcEFCTnBjSjNnZlloWm81TlAvRFNtZ1FBdE5nMVVyOApvb1BVY0ZFTThuT09nRTI5YTUzb01XQWJJSmhmK3dTYjdpbmQvaFUzTmkyTWdDRXdRRmRVeVhYa0EvSDJtTkZyCjhZRFFqaDBRVnJHOWFEZXpHK3JZdEdaYjYxcDBPZThjNkIxcVRXVkViUUxkV1FCQ1NlWjhTWlF2MzRnZU1EaE4KK3JaTUNnaW5QK1AyV3FmRXdSTUhYZTJPZUpUMWRTNVYKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBc3FuTXRLQ3NzUTJSWFpKV2t5N05hSU5CakpJM25DWWozckhCd3FieFRlcVhEQmV4Cm5mY25MT3Bxc2wvOXNMUkNYRzA0aWYvWUY4bDJTcFNRdUcvUEdrNlJPclBqRHUxRnlIZzFNNi94bkRnVU5zYzQKZUpRcm96Q1NaaEVuSzduQVUwQTJ3NGtHenRONFN2VDIrcUtmMWxDTWpMMmZYYVd3VVRHRzdPMUtJVnhTZXRXSApsRENPckw1RmEzd25tU3E0T1hsUnlNMEcwem5lN3B2T2NBM3NaMzRMMllTaEs4dC9VUTh6ODlLZWlTVGluWTFqCnVqOHRVRWJUcTF0VzhsWlZ0N2ZrQmxYdFArMTV4Tmd6V3YwVkZmbklCOVNhM0dzMDE1emMydlZlRk5seGd6V2wKK20rUXRYQW5JQlJjZFRLaDMwSUVhMHhwUndYZXFPMVdQYmZaUHdJREFRQUJBb0lCQUhrcEphV3BBUFBoRzUrMQpTZmp1V0daei9OUHpwTHJFTXJjbkhSdUFVMHhmdHFlQXVmZENVTkxvOWdxWmhsVjdLVFc4N0FiSjlpWExmZWo5CjcxYmtuREplN2FZOXI5SERudnRnYWRQdmtZNDdpWm5NYU1OODJFc0crWUUyU0xZaWRnYi9HU1JwbkxCT1FObTAKWG5tQ0o1c1RiUDFVNnVwN0hxTXhUeXNGa0t3bDZiVStUd2w0NlZRZFhvd0V3MHBZUTNHcG0yQUsvTGdXMW52UApoVUdRQUVpZGl4Zzg0QVRJWStmZ1hjWjRZY1pBQ1ZZZmFzTWQrV1o5dHQ3bllaeSsvaXJKQWQzelViZFFpWXRyCmtDV0I4aHZJUE9JSVo1TnFBSHVlT1FhQVJZRVc2QXZxUUZHMWVkdmJIRFhMRnBJeUx1UExCNTNRdGNpMllOWG0KRkx6dG1BRUNnWUVBMnJJU3dXcGpjTFBQNVpaNE9UR25DL0xaY28rVzdjUU9rYkJ5UHRaZW9VOWVhbDcxbndYTgpSV3M3UjM1TmVMNlVzZmxWTDE3TzVBMUFMcXkzdkoyNCtQMUw4SzRWaTl2SmI0Y2VVQWpmVVRRQ21SUlJxOGFyClhXcWR5d3ltandDTXQxR0ZBcUlDT205UTBZcUI0QXJ5bVhvVGd6SGl3bk1GVkgwcVlsZkp4RDhDZ1lFQTBTT2IKdmdnR1NXdWNJT0RRNE1ydmZhMXNpRWgvRmI4dEQ1NDBuVFg3Zi9IcGpwazVzRjU4UUpQdzk4ZE03WlM3RitKRApObkJ5Y3ZCYzJtdmlCQSs0amxMV2Ftd3lqdWRMdTc1SXcwL00yWjlwYjZLV05aYlB5VE5iYnlNLzdNVXpRdVlKCklsM081RThyNzlzLytoR3QyL3crMGhjeU1qYWRCU0tUSVFvb3F3RUNnWUJKWFExZnB2SGUzK014RUk0YUdhY0IKSWlHQ0JkdEt2Y2RwWmppZERjckc4Rm9xOHRvUTA2QnQxakFYcHE0VWdGSmZkZFgyd3laQ2FKT01WTko2U3FxLwpsREZDZHhPeFREVEIzaUQwRmxYYjVzZXNWSjJsTTB0UFZqSEM2T2FDK0ZzOEwvT2YwM3RONFFQS2wxMUVMRWYvCjVtemZTUC9aM1QzL2Z0R1dGZjhRZndLQmdRQ1RGS0hSRVQrcW50MWNXZjlNT0N3WmpMK0pVTUxmZm1Xb1dERFUKWjBTS2hJMG0xaWUyRzV6eXBaaVFDVC9XemdTT0ZYZ0RieTF1SEJDUkk5SDkzVGlFRDBudjZrdmNLRm9nblAvNwpLOEg3UXBzYUFaUDErQ3dGYWZMaHhENk91MWtEc1ZlM0xaWDFCcUQxdkpIUHdtTXRGTWJ4WlpMTnNZN1lMNnFkClQ5R3VBUUtCZ0F0TldNVUFlbkc0dE5QWFFYQmpVZjkvelhSZ01ac09acVR3VDN2a2RUamRTUy9MYUdkMnM0cjcKR0VaT0tISThqd090bVA1RjBpcXZtZ3J3cUdISWpRb3VCd09LYWlCekd1eW5LamdNdDlFV2xBeDluT0FIY2Qzego3ZUdUS281TDBYQ25BUXFOOG5Ud1ZvV3Z2bDh5dUdMVmhKTEZKYmdzSk93dEk3RCtmejlyCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQVB6SVZ2K1NWM0daMGFDTEQ1SFdXYTR3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV4TWxvWERUSTJNVEV5TVRJeApOVFV4TWxvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFzcW5NdEtDc3NRMlJYWkpXa3k3TmFJTkJqSkkzbkNZajNySEJ3cWJ4VGVxWERCZXgKbmZjbkxPcHFzbC85c0xSQ1hHMDRpZi9ZRjhsMlNwU1F1Ry9QR2s2Uk9yUGpEdTFGeUhnMU02L3huRGdVTnNjNAplSlFyb3pDU1poRW5LN25BVTBBMnc0a0d6dE40U3ZUMitxS2YxbENNakwyZlhhV3dVVEdHN08xS0lWeFNldFdICmxEQ09yTDVGYTN3bm1TcTRPWGxSeU0wRzB6bmU3cHZPY0Ezc1ozNEwyWVNoSzh0L1VROHo4OUtlaVNUaW5ZMWoKdWo4dFVFYlRxMXRXOGxaVnQ3ZmtCbFh0UCsxNXhOZ3pXdjBWRmZuSUI5U2EzR3MwMTV6YzJ2VmVGTmx4Z3pXbAorbStRdFhBbklCUmNkVEtoMzBJRWEweHBSd1hlcU8xV1BiZlpQd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGTUFYVjUwbTVVTmVyanpSUFJyV1piQzVXZDNFTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQVV2dXg3QVNFZzRRcEdhRHY2NWdGKzRTd2tTS0RpeC9hOWNKV2V3d21iS2RUYlZzdWNWZlFqClBoaDFBd3owL2k1RUsxdlRIQWNiNm12eUxjdElZOXpvRFYwVGNQb2FIb2hSVnUvRDBGMDlLdElTWnIvVys2T0cKNXZzZGl1bVdtZ1FYcTVhTFk3Yk1TeWdkOHEzbjMxaFVPcEFCTnBjSjNnZlloWm81TlAvRFNtZ1FBdE5nMVVyOApvb1BVY0ZFTThuT09nRTI5YTUzb01XQWJJSmhmK3dTYjdpbmQvaFUzTmkyTWdDRXdRRmRVeVhYa0EvSDJtTkZyCjhZRFFqaDBRVnJHOWFEZXpHK3JZdEdaYjYxcDBPZThjNkIxcVRXVkViUUxkV1FCQ1NlWjhTWlF2MzRnZU1EaE4KK3JaTUNnaW5QK1AyV3FmRXdSTUhYZTJPZUpUMWRTNVYKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lRQXEvT1ZpRHNRTGRkSncwNmh3Y3RtVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEV5V2hjTk1qWXhNVEl4TWpFMQpOVEV5V2pBUk1ROHdEUVlEVlFRREV3WnlaVzF2ZEdVd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3CmdnRUtBb0lCQVFEblVyQ0c4amlIVmZBZUJ0cUtvWDJoV3ZRYjNkdzluQjByUUEyYWo2TC9TWXkwZVZZVWdOL3kKcHZpQmcyelMvUXV0N3VYYXZQY0ZGMWJXK0Vqejd5VFd0VWwydUFlN1pMbjdnM2E5eHhjZWhlN2ZUU1NhNFlRVQpCTG1Td2V4Q1VJSjBtWWlnNFgvR1l3akszcUU0QU54THJqQ2RmR2g0eForMHBYdUd1WVJYV01BRWd1VmM5WXdKCkE4ZTkxQ1RXdm00Um1KbEZHK2VmbC95dVVmcXRIMURORjROa3ByUnI0TmhaMlprWm9DTmtEeVYyVUpKM2xnQzMKT1pBeks4ZkxiU3JqbTIwcWVGeks2VUp0WmVmTlcvQlhXRFhUZlFNcWEvVkNDL3JNMWVmcUVtdmIrMjlKV1V3eQo5U3VjazhraVR3NlczWThSa1BMUUx2c283T21tOU51ckFnTUJBQUdqWURCZU1BNEdBMVVkRHdFQi93UUVBd0lGCm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWYKQmdOVkhTTUVHREFXZ0JUQUYxZWRKdVZEWHE0ODBUMGExbVd3dVZuZHhEQU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBaFRTLzhwTEtNOEdXL3BEWWt6aXZQSW94RXJHeFJUbU5tQTFrWlRnSDllWHpOOTBxNnRkUFpMMU9DeDgwCmp5VjRFeTh6eGR4ZkdOUTI5NlViMjdOVXJEaC9pZGVCbG5HWjhIeTNiYUZiNG1nVHFHVzQreHo0dEFacnFTZjUKdjZJRkdocXl4NC9VdjBkcEVkMTU0TVFzM0lxRUVFb25kdjRITzJ1SERMT3B5UlcwV0FjbnRyS095dXhDVFpEMQpGNkY5RFR5NnROSTcwQ09ac0JMYWxCc290NFJ0MVlUN0JmSEt5YWZBTXIwZm9VZnN2bHVzVVorbHBta3pmWm15Ck10Rkh0MEx5VHpwQmRUMEFLcHQ4UTFsYkxvaExCNnlwNE8xRHlEWFBZSkpjUFdtN1NsYUs5S2FuZ0JtMmdwOGcKcHdjRWwyaXl4SVpJUmkraDlGaHFJeWR4Unc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBNTFLd2h2STRoMVh3SGdiYWlxRjlvVnIwRzkzY1Bad2RLMEFObW8raS8wbU10SGxXCkZJRGY4cWI0Z1lOczB2MExyZTdsMnJ6M0JSZFcxdmhJOCs4azFyVkpkcmdIdTJTNSs0TjJ2Y2NYSG9YdTMwMGsKbXVHRUZBUzVrc0hzUWxDQ2RKbUlvT0YveG1NSXl0NmhPQURjUzY0d25YeG9lTVdmdEtWN2hybUVWMWpBQklMbApYUFdNQ1FQSHZkUWsxcjV1RVppWlJSdm5uNWY4cmxINnJSOVF6UmVEWkthMGErRFlXZG1aR2FBalpBOGxkbENTCmQ1WUF0em1RTXl2SHkyMHE0NXR0S25oY3l1bENiV1huelZ2d1YxZzEwMzBES212MVFndjZ6TlhuNmhKcjIvdHYKU1ZsTU12VXJuSlBKSWs4T2x0MlBFWkR5MEM3N0tPenBwdlRicXdJREFRQUJBb0lCQUIvL0R3M0xhVWhHK2N5ZApkQk1pM1VhNVZ2U1h6b1B6R1JISGJWcElyZW9UMlZPSlNQL1RCNmIvczNYdW9ObmFTSWhKZUIrMmJaQ1Z0dHhMClFZUUVPeHM3dmlxZXIrc2F0cUwwZnpNbTI2ck1LY3RYVjAzWkRiVGJKblFIUU0rM1pTUU5ySmxjTjVsUVQ0SUkKSTFLa3c5UHdCeWR4Y3QzcHIvcUR2VDlZWDliWTIzdVNxSkxCTDhGRWphTnFPQVlrVDhIeE5xMktLaVRvVUh5dApyOHFsYVJSRTZvUXRJRmJtdk9Rb3VHRGdqQlBoaVZHbzFKOC9GOEpaU1JyWmhxMlhveEtadGVYeUZ6MkpaM2pxCkZMNXBQbHRIaC9WTmhJaCtrSHRUSVdYclFPYXZ4Q3dDNWtvRmFSYVZGWWNjT0M4YnBwOGRyZ1FhdzFCQkhZODUKbHNzSXk3RUNnWUVBOE9DQTRWUVlHZmk0bk1FSVlzdm1hMnRoWTFSYzVYVi9wVDZ2VnBkVjBaeFk5VW9IdldaYwpHVlA1VE1YQ2N3cW1BZFJWajM0U0s3UXloaXBzMHdNbEMxSXpQMTQ3ZlhqbzhjV0gzeXZPblllbnNRd29rQWhQCmNsd2FUQ2IxTkxTVTBKYTlwMjFiSzRZSERUc0NHOW12QldrRXVoWHRLVVovWlk0bDZXdVNwWmtDZ1lFQTlkaWgKU2JoeFloRVRYZ3dUL0JnNFplRVIxTDVlbXJldUQ3dlN2OTFGclpJQk5XMGZHdzQrSDJIbEJ3SXlVNjRkWkg3ZgpsUWhEdWR3NVMyRDZ5R25IdVNsS1Y4WGJFZjZJU3ZFeE5pdEgvK2tqS3hkdlNHZXhjOHJ0eXZqRi9WZUhvc25wCndidkFJdjNPV0ZNNjRyU1gybytGdDJ2WWNhY29KZlhaUmFFbFRlTUNnWUEvb2Y5S0IyNHFoa00yM2VPNlBjVk0KUVZ6RDRjaDhzWktiODdoY05yUnNJRko3MGlmRFNDUXlhTFdtSzJRWUFnc2kxcFlYeHlWRHVHSFVnYWFvQTkrbwpZdm00MXNyK2RZK01Oek9TcUQ3MzdKdEhNVUFSOUxBUU5QYVpnWDByaER6LzhhSitkV3d0VGtYVW4rOEpybk1ICkNkdyswSVlMYmwwL1ZkTDhHL2ZzbVFLQmdRRFNFditYWUEwNjhENXRjY0t0K3dCT1JpbVhjZWlqS211Sk5FVGQKQURZbklBajZYemxpUkNSZmFxWnErN3lIZHRQVTZQa2lmMEpvRWorL0lxcUpFS0xDblA3U3k5WHJwV1ZQTEpTUgpwaUJMRkN1aUNjOWt2bjZLNUkrWGprYVl1ZS9EOGVkV1RabmNES2NESUhQRC91OTNxb1puZXJja1B1TDJ0UUtwCkZnOHJZd0tCZ1FDR0dhdG4yOFpwWG9kekdISllxamluNy8rMWQvVTY2VnVhQVNvM2twN3FabGpFVmtXVVJCMHAKZlBzajJzbEZROTEvYjVoK0RTcWphVUo1YWFSZ2lYeWFNVVBheG9FZ0FSUWI0ZUNWTS9qMTVEZ2RCV1BHbW1wbQpBcmhSUDY2OHBFdEh5NDZMY3VheU9TMXFpUkhLVGhyM1Q5ZUxLRjVHSWRPS2JSWVArMHVVNHc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQVB6SVZ2K1NWM0daMGFDTEQ1SFdXYTR3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV4TWxvWERUSTJNVEV5TVRJeApOVFV4TWxvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFzcW5NdEtDc3NRMlJYWkpXa3k3TmFJTkJqSkkzbkNZajNySEJ3cWJ4VGVxWERCZXgKbmZjbkxPcHFzbC85c0xSQ1hHMDRpZi9ZRjhsMlNwU1F1Ry9QR2s2Uk9yUGpEdTFGeUhnMU02L3huRGdVTnNjNAplSlFyb3pDU1poRW5LN25BVTBBMnc0a0d6dE40U3ZUMitxS2YxbENNakwyZlhhV3dVVEdHN08xS0lWeFNldFdICmxEQ09yTDVGYTN3bm1TcTRPWGxSeU0wRzB6bmU3cHZPY0Ezc1ozNEwyWVNoSzh0L1VROHo4OUtlaVNUaW5ZMWoKdWo4dFVFYlRxMXRXOGxaVnQ3ZmtCbFh0UCsxNXhOZ3pXdjBWRmZuSUI5U2EzR3MwMTV6YzJ2VmVGTmx4Z3pXbAorbStRdFhBbklCUmNkVEtoMzBJRWEweHBSd1hlcU8xV1BiZlpQd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGTUFYVjUwbTVVTmVyanpSUFJyV1piQzVXZDNFTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQVV2dXg3QVNFZzRRcEdhRHY2NWdGKzRTd2tTS0RpeC9hOWNKV2V3d21iS2RUYlZzdWNWZlFqClBoaDFBd3owL2k1RUsxdlRIQWNiNm12eUxjdElZOXpvRFYwVGNQb2FIb2hSVnUvRDBGMDlLdElTWnIvVys2T0cKNXZzZGl1bVdtZ1FYcTVhTFk3Yk1TeWdkOHEzbjMxaFVPcEFCTnBjSjNnZlloWm81TlAvRFNtZ1FBdE5nMVVyOApvb1BVY0ZFTThuT09nRTI5YTUzb01XQWJJSmhmK3dTYjdpbmQvaFUzTmkyTWdDRXdRRmRVeVhYa0EvSDJtTkZyCjhZRFFqaDBRVnJHOWFEZXpHK3JZdEdaYjYxcDBPZThjNkIxcVRXVkViUUxkV1FCQ1NlWjhTWlF2MzRnZU1EaE4KK3JaTUNnaW5QK1AyV3FmRXdSTUhYZTJPZUpUMWRTNVYKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURwekNDQW8rZ0F3SUJBZ0lRYUJ4WW5MR3psZmsyVmlvUEtXZVJKekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEV5V2hjTk1qWXhNVEl4TWpFMQpOVEV5V2pBcU1TZ3dKZ1lEVlFRREV4OWpiSFZ6ZEdWeWJXVnphQzFoY0dselpYSjJaWEl1WTJsc2FYVnRMbWx2Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBeGlTNWpzbzdNMkJsbkduQTZQUUoKK0tvbTIvYkRhOVN4ekxhbENpamc1cnIzNllWcmxXTTY2Z3RGN1hPb3I5dFdVeGlGK3Z2L0EzWkNDbE92a1F2bQo5U2hUeWorYWl6TlphcUhiWDFJWlVmVXZDR1dBM1pTU3RpWWFSRndtNlNHM05lb0FjNGladzUyOGkwMEFyV0N0ClBxQmFmcTQzSEoxaEpIMFM3YmZKV0VOQnlyU3YxUk5zcmdCbEVQTzNmV1R3dXNVaWRpRVpVdEN0c3ZIUW15UEkKcG10WFMzYkJsN21GeWpmRThWNiszQzdveWVsSUxLLzBEZGxDUWZYci93dUR0TkYzWG1kSTNEeUNGOXFvMzhRdwpldVd0M3NkQ3ZnaUVQTmVxTlBuVGQ0bTlRbGRwSWhPbFZkN0p2b2g4MzlDcGFtR1ZieWtsMXFmTzBmNTFTbXI1CjJRSURBUUFCbzRIZU1JSGJNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0QKQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JUQUYxZWRKdVZEWHE0OAowVDBhMW1Xd3VWbmR4REI3QmdOVkhSRUVkREJ5Z2g5amJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXVZMmxzCmFYVnRMbWx2Z2hBcUxtMWxjMmd1WTJsc2FYVnRMbWx2Z2lWamJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXUKYTNWaVpTMXplWE4wWlcwdWMzWmpod1IvQUFBQmh4QUFBQUFBQUFBQUFBQUFBQUFBQUFBQk1BMEdDU3FHU0liMwpEUUVCQ3dVQUE0SUJBUUJGenpUd1piNDQ3M25Zb0YzWFhoWVVHMU01NzVWRThaTGhVRUFLMjlVMW8wTkdGampnCkZmQnlTaXN1YkxlSVhVUFpxaWMxTkhHUEVjKzZvS09mUXFrNHZYelFLSzN4bDhwczlZR3RkN0RSWEQ2eW9mblUKeXhOQW42SUl1T0pVVXhLb0o3YjJvb2kzSFQ0V1BaRW51aVRFRmp1eFJycHlqdkM1WkdteUFMdlBad204MTBCRwptOEZtc0RkUnF1VUVmaDB4UkxLT09kUlpidDdUTWhYTFZ2RG1TK3JNQW1henpOb0dlcXp0TmtmcG5WVWVkbXhDCkdGMWw3T3RSYlgrdUt4c25LN0p1YW1DQ1lVWjBmTFI5VHd1YnM1YnV6dGFZNjBCa2piSzZWVFZXKzFhTnF4c1oKTytPZUJUSjlYclVveW11dEFrVmFZVHNDTHNpdUV0VHN3U2p0Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBeGlTNWpzbzdNMkJsbkduQTZQUUorS29tMi9iRGE5U3h6TGFsQ2lqZzVycjM2WVZyCmxXTTY2Z3RGN1hPb3I5dFdVeGlGK3Z2L0EzWkNDbE92a1F2bTlTaFR5aithaXpOWmFxSGJYMUlaVWZVdkNHV0EKM1pTU3RpWWFSRndtNlNHM05lb0FjNGladzUyOGkwMEFyV0N0UHFCYWZxNDNISjFoSkgwUzdiZkpXRU5CeXJTdgoxUk5zcmdCbEVQTzNmV1R3dXNVaWRpRVpVdEN0c3ZIUW15UElwbXRYUzNiQmw3bUZ5amZFOFY2KzNDN295ZWxJCkxLLzBEZGxDUWZYci93dUR0TkYzWG1kSTNEeUNGOXFvMzhRd2V1V3Qzc2RDdmdpRVBOZXFOUG5UZDRtOVFsZHAKSWhPbFZkN0p2b2g4MzlDcGFtR1ZieWtsMXFmTzBmNTFTbXI1MlFJREFRQUJBb0lCQVFDQytFMXEwOE96M3ZqcgpIWC8wdXpKSUduZ2JGdzN2SGFUMHNwbCtrS3l2OWsvZUhHR1RXZ2JjSXQxeTZldExha2l5SGxpWklLNWNaSE9jCmpkcFRuckZueE9NMW9Uc08zYjh4MjVDOGZmRGNtcHNmQ3JEV1JkbC82c21iKyttQVdkZlhIRGgySlltMW9uSzUKQlFuNGtCbVRkcnk2Vlg5Nk81QzFaTEw1VEcwYkdCZ0FNMFlKSm1ybmRmSDZNYmxNY1d6ek5XUGZUSkJOMmU3awptUlUwZ2VpSzhmeTJzc3IyNWlSK25tM3BOTVpHQndLT1FYUU5SWkVQbS90eEZDeTlWUm84UFE3YUlvZGhCUURaCnNoYzAzSXFOVXRUb2xUL3piU2oyK1VZV0JsK1ovcDZnM2NQRkNyNTF4aTF2amlaNStNUEJialdsT0EvOVBNdUQKZEdkYmxaeHhBb0dCQU4xQitmM3hUazRhNW0vMUZRVloyMmdhSHhoZHFhcVVJQkp0WXhWa0xoTnRBbG1HWGl5KwozOTY0elhKUmRwQ0d2SkVaOE80cDF4UjIwYXpCdXV5Q0VjSVRIZnNDOUlka0dkOStVRklIdDhpTHJ1eCtIeXFWCm1iRDZUeWFSakRnc3NwaHNFTlFER09lazdKTnRtRDJKWFhqdHI5TXlSVng4Q3BVOEJCTy80VHVsQW9HQkFPVkIKbkdnVFl5TWRLMXZZNWN2Y3ptb0tscjBuWDc1QU5jKzloZ1dLOE8wOG5DbzVZSTBWWjkydU5HSGNvdWZBQ0FmTApGV0pHUVQzZ21UdWI0TWhMaE1vT2lZL3NSSkFhVGptNUdTYi83YUhMN05TS1EvaFFFWGxoR0xjVWdhd015Q3BJCmFBb0cyL0ZlTlJLYkVrOTRaa0s5cDBaSzA1TTgwQ1pjUEVISVpQOGxBb0dCQU1SdUdZcG8yL01ka0syZXNQM2kKSzViOWNkUEkrNk5VQkRFMzZmcUl5UnMzOFJrWDRLM3ErNGVaRzlROUhIenRFYVhrbVBCb051bVZIMHMzWjBNbgpxcXBaSEluSHN0NHNjWWZvZFZpT1A0eU03a3hKSUZSSEluNXJpeStia2hnaEhxR1JkMU15T0w4V3ZXMlpvOG9tCkZOVVNkOEdSWk9EWnd1K0FxOEg0M1BaOUFvR0JBTHZvbEYrR0RJc2FmSkNTN24relk0anRWdktCbEd0blMvUVQKbndkcUErSWYvTXhyTFNWV3QwU3ZaZ1lVaDM0M0d4M3dLbjNib2R3cS9NNHNEUWwvUkw4dFBUbTNhZGRIaUhpdApxOTBZaHRsSVFiMVAremhMd0piaHJCVmIvSkZlQks4TG5DTWp6aUUvbTNhOW5qdC9MeXBqTXZsZG1aK2toK1A1ClUvYURYNnoxQW9HQVc0dkFYa2xPdWUrdE5iY3VkTTh2YVJaSUwzL2pLZEFpL2ZXVldlKzc4dXRqM3lIVHRmbkoKdmhRYmpkck82UkVoR2VTbmZ6VTVTNnZkaEhBRnVEZStocXJPZVNqTmVjKzdKb0ZpWTdNV3A4VHh2NnVwb25LWQpna1BDT1c5eVd5c1dNemhSQ3IrNXhvNW5icmE1cUNxU3FZUkFpcUpTVmlyaGE2dk5iYXNtYUdBPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQVB6SVZ2K1NWM0daMGFDTEQ1SFdXYTR3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV4TWxvWERUSTJNVEV5TVRJeApOVFV4TWxvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFzcW5NdEtDc3NRMlJYWkpXa3k3TmFJTkJqSkkzbkNZajNySEJ3cWJ4VGVxWERCZXgKbmZjbkxPcHFzbC85c0xSQ1hHMDRpZi9ZRjhsMlNwU1F1Ry9QR2s2Uk9yUGpEdTFGeUhnMU02L3huRGdVTnNjNAplSlFyb3pDU1poRW5LN25BVTBBMnc0a0d6dE40U3ZUMitxS2YxbENNakwyZlhhV3dVVEdHN08xS0lWeFNldFdICmxEQ09yTDVGYTN3bm1TcTRPWGxSeU0wRzB6bmU3cHZPY0Ezc1ozNEwyWVNoSzh0L1VROHo4OUtlaVNUaW5ZMWoKdWo4dFVFYlRxMXRXOGxaVnQ3ZmtCbFh0UCsxNXhOZ3pXdjBWRmZuSUI5U2EzR3MwMTV6YzJ2VmVGTmx4Z3pXbAorbStRdFhBbklCUmNkVEtoMzBJRWEweHBSd1hlcU8xV1BiZlpQd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGTUFYVjUwbTVVTmVyanpSUFJyV1piQzVXZDNFTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQVV2dXg3QVNFZzRRcEdhRHY2NWdGKzRTd2tTS0RpeC9hOWNKV2V3d21iS2RUYlZzdWNWZlFqClBoaDFBd3owL2k1RUsxdlRIQWNiNm12eUxjdElZOXpvRFYwVGNQb2FIb2hSVnUvRDBGMDlLdElTWnIvVys2T0cKNXZzZGl1bVdtZ1FYcTVhTFk3Yk1TeWdkOHEzbjMxaFVPcEFCTnBjSjNnZlloWm81TlAvRFNtZ1FBdE5nMVVyOApvb1BVY0ZFTThuT09nRTI5YTUzb01XQWJJSmhmK3dTYjdpbmQvaFUzTmkyTWdDRXdRRmRVeVhYa0EvSDJtTkZyCjhZRFFqaDBRVnJHOWFEZXpHK3JZdEdaYjYxcDBPZThjNkIxcVRXVkViUUxkV1FCQ1NlWjhTWlF2MzRnZU1EaE4KK3JaTUNnaW5QK1AyV3FmRXdSTUhYZTJPZUpUMWRTNVYKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTVENDQWpHZ0F3SUJBZ0lSQU1PQ1BoUFJLVWs0NGlvelZucit1ZE13RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV4TWxvWERUSTJNVEV5TVRJeApOVFV4TWxvd0l6RWhNQjhHQTFVRUF3d1lLaTVvZFdKaWJHVXRjbVZzWVhrdVkybHNhWFZ0TG1sdk1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXJYa3I5T3c4NTJaanZJS2pMcVdxMDRsTnhESVgKak9OYTZLbm9pOHBxWFhFVzVzaTdmNDB0ODd2dUxocWxySWJ5L295NXVRVUp0MkVZYUo2K2dwdVlBQmdocE0yQwpSaFJaRFl2R0dsNzhIRENHN2RNcGl2cStzdDdrTk9ZbW1nNEtZWEZEMnRwUEY4ZzVwdDVzUDgwNHorYnZ3NTNUCllyeG1hVFd1ZHAvd2Vqa0IwQzBQL2VLUUdnY0FaTnY1Wk9NTjBSdDRiTjJnYTlWdXdQdmloYXBRczZPQkdCbVAKK1VjdjRmQWFKL0lvWmV4L1hzcG9HcWpObDFsY1Z4N1pZd0tSQTFUSTUvSkRGWkJSUnhtS0V5a0F1TUZtc05VQwpHQzFpRzNGQ0JHSjRnMXBFYVZMWXdFS3E2bVF6RGtucXAydDUyUjB0NDdqOGw2eE5KenZaUzdyRkJRSURBUUFCCm80R0dNSUdETUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUIKQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCVEFGMWVkSnVWRFhxNDgwVDBhMW1Xdwp1Vm5keERBakJnTlZIUkVFSERBYWdoZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d0RRWUpLb1pJCmh2Y05BUUVMQlFBRGdnRUJBRG5GdHE5ano1Ui9iWnlKZ3BEYTlSUHFZWHpkdlQ2UXFxVW9KS1NXZ0lXVVM1SXUKdk9rS1pMOG81RGtxdXJHWGc5QWFhbWRjZU5od2M5S3lNa3M2aVp0L2x5Z3lGejdiWjcvN2dva0xHOEVnM2lJMQpYd1ExUU5MTnhtYTJTR1dISTNmS0xSaW4yS0ZnS29UY3hUOU00dkY5aGVlUm9zSVc3T0xWYkNRVnprTEtjb3BiCmd2d3NtWXpPSXVyU0ZSNzdGaFoxeUV0SUNaanFjRHRZRjF3anZLSG14bmRGSHFMSzVFdUpHWHpkRGdjTUdHMWQKQWxxOFExNlNiNmZxNTNGQ3hvcGZjNXJ2bFBQK2tXNCtrckRBQlk0OUpOaGg2VlpMNWtwWGxxVWlZK1hzZzduNQpuMnFBTW9IQ2U5dUIzM3dhNjJ6NFhRNXlXanZmVXlxNjI1Y2xHb1E9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBclhrcjlPdzg1MlpqdklLakxxV3EwNGxOeERJWGpPTmE2S25vaThwcVhYRVc1c2k3CmY0MHQ4N3Z1TGhxbHJJYnkvb3k1dVFVSnQyRVlhSjYrZ3B1WUFCZ2hwTTJDUmhSWkRZdkdHbDc4SERDRzdkTXAKaXZxK3N0N2tOT1ltbWc0S1lYRkQydHBQRjhnNXB0NXNQODA0eitidnc1M1RZcnhtYVRXdWRwL3dlamtCMEMwUAovZUtRR2djQVpOdjVaT01OMFJ0NGJOMmdhOVZ1d1B2aWhhcFFzNk9CR0JtUCtVY3Y0ZkFhSi9Jb1pleC9Yc3BvCkdxak5sMWxjVng3Wll3S1JBMVRJNS9KREZaQlJSeG1LRXlrQXVNRm1zTlVDR0MxaUczRkNCR0o0ZzFwRWFWTFkKd0VLcTZtUXpEa25xcDJ0NTJSMHQ0N2o4bDZ4Tkp6dlpTN3JGQlFJREFRQUJBb0lCQUZMNkJ1Q2NyM1V3TUx6Vwo4Qjg3OXo1QUN3YXh2em9ROWtjY0hyUGZHb21mc29pcHM2WUxiZE9NTFIyNGVVN1JMaUk4UmdvT010dVlnZ2hwCkJrK0xCV1htSlJHamk1RGg0c2JyK05KY1pOTkhFd05uWWhPc1pOTkNjbjRyS0lPLys0OG9rb0I0dENSNERidVgKNE1lVDduemp4Z1FYMWlrQVhTd3VGVW1BcjVLR01DTlV6aTh3THoxc3g3RkhxY2VaMzhFNmtreDFLUWZvcWVJbQp3RTlLNnkwTlQyS0xjZXE2T2NRZzd2WTVXT1RjRm5ldnU2Mjc5UGdQQUJESFdNNHFEWW5maXBXNTdGS3U5VU5RClR2enhoSG16WEZHVGs1TmsvZ1cveUl6ZytoaGFUSjA5UC9PWlVMYlcyMi9BWkU2em9lenNIaWNoRFRPSGhheUwKekxxbFhmRUNnWUVBeFdkL2pDUk9VTTZsU1lDMUNwTFlXRmp3M2l0WEdzMUZwcWxQSWxwM3NCUjFTNHBYYjAxMApVQTBMWUMvcjRTMWIwVjJSOEM2RWhyR3lsQWFsdnRwa05wbDlIWG1GNWx4NlQxSld0aStBS29lYm1OZCtNTzIwCk8zNVBJSVFsZjRtejhBVmc5NGFIVXdsQkpQRHJXeTVHTlZQYmMyalhZMXJEV0ZUOUxrZUxlOWNDZ1lFQTRQY3cKbjBuK25vQmRkWEg5djlJY0tGUXV3VVE5dXgzcExEQisxZC9vOGtrelprSmdNVWU4TzZyK2djcDhlQ3NxRE0xVQpaeFp5VTFldjdZV3dwNkwwMGtPVkQ1TFhXNXQvTVBGN1RkSFI2eHExTUgzSFJuR1UzMUN1WU1US2JEMjR0bVFQCmJyRncxS0RCc1hReUlvSWhESFkvSDJ3NGpUWldtdE84UWJjY0NvTUNnWUFtQ1c5V1BaaXBrV2ZmNWVEOGpKY0wKVHZmNmx6ZE5mc2d3K09hNm85djBIYjBNTlRmcnhtem5EOXhsU0ZhWEtQcE1PVTlwakUwVTl5Q0Z6VklhbUZJLwpBd3hNcGFIYlpXNWI0bTI2NVNRNURiQTVueXc5bVUvbE5zMWdZcFluSVExKzdrcGs1NU1qdU9ESWtYT0lPajVsCkFDZUU4V3F2UmtubHQxcWhsRCtZT1FLQmdBdGttV0xIeFl4VFplaEh3SmtSVS9tNjRhOUovSEpZZm5HTmR5N3YKcXdWeUxaYzFMMWZ2a1JuWWZCRW9wd3NTN0lzL2J0SFZzaTZFVjFXSkdyd3lwWUZzaU1VRUk4SHc2dzBZZmEwZwpQaWhRN3ZJb3ZJblZ3THRhZzZwRTdSZDBQTUdINmJ3cVlsTnlYTHpXN0o4UXhnbXloMW5aQ2pna2sxZzk5dC9CCkhUdHZBb0dBWGZiZ1laVC93SkViMXZOZzVjT1dwQWJoSVpPOXZzK3ZXNGdVSGtSWHFzUXlXcWJwdjFnenBUZ1cKbUFuTWhZTjRjOWM5L05hTGpYZm9EUzVtaWFlUlU3WVFjZ3lCUDFKN2lnRVBCVWZJOEwxc0ZRMkFxYnZnZHI5NgpKL0FTSGhmS0tLNVQycmo2bVVoTzdPbFp2aXJIZHg5cXl1eGJ2YkFSN0N2T1NRbVFSaUk9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQVB6SVZ2K1NWM0daMGFDTEQ1SFdXYTR3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV4TWxvWERUSTJNVEV5TVRJeApOVFV4TWxvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFzcW5NdEtDc3NRMlJYWkpXa3k3TmFJTkJqSkkzbkNZajNySEJ3cWJ4VGVxWERCZXgKbmZjbkxPcHFzbC85c0xSQ1hHMDRpZi9ZRjhsMlNwU1F1Ry9QR2s2Uk9yUGpEdTFGeUhnMU02L3huRGdVTnNjNAplSlFyb3pDU1poRW5LN25BVTBBMnc0a0d6dE40U3ZUMitxS2YxbENNakwyZlhhV3dVVEdHN08xS0lWeFNldFdICmxEQ09yTDVGYTN3bm1TcTRPWGxSeU0wRzB6bmU3cHZPY0Ezc1ozNEwyWVNoSzh0L1VROHo4OUtlaVNUaW5ZMWoKdWo4dFVFYlRxMXRXOGxaVnQ3ZmtCbFh0UCsxNXhOZ3pXdjBWRmZuSUI5U2EzR3MwMTV6YzJ2VmVGTmx4Z3pXbAorbStRdFhBbklCUmNkVEtoMzBJRWEweHBSd1hlcU8xV1BiZlpQd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGTUFYVjUwbTVVTmVyanpSUFJyV1piQzVXZDNFTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQVV2dXg3QVNFZzRRcEdhRHY2NWdGKzRTd2tTS0RpeC9hOWNKV2V3d21iS2RUYlZzdWNWZlFqClBoaDFBd3owL2k1RUsxdlRIQWNiNm12eUxjdElZOXpvRFYwVGNQb2FIb2hSVnUvRDBGMDlLdElTWnIvVys2T0cKNXZzZGl1bVdtZ1FYcTVhTFk3Yk1TeWdkOHEzbjMxaFVPcEFCTnBjSjNnZlloWm81TlAvRFNtZ1FBdE5nMVVyOApvb1BVY0ZFTThuT09nRTI5YTUzb01XQWJJSmhmK3dTYjdpbmQvaFUzTmkyTWdDRXdRRmRVeVhYa0EvSDJtTkZyCjhZRFFqaDBRVnJHOWFEZXpHK3JZdEdaYjYxcDBPZThjNkIxcVRXVkViUUxkV1FCQ1NlWjhTWlF2MzRnZU1EaE4KK3JaTUNnaW5QK1AyV3FmRXdSTUhYZTJPZUpUMWRTNVYKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUakNDQWphZ0F3SUJBZ0lRTzlNYitEWFV3cUlacHczeUMrMWt4ekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEV5V2hjTk1qWXhNVEl4TWpFMQpOVEV5V2pBbU1TUXdJZ1lEVlFRRERCc3FMbU14TUM1b2RXSmliR1V0WjNKd1l5NWphV3hwZFcwdWFXOHdnZ0VpCk1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRFhBZkNqZ3lzV3RnSUludEVjdy9iREhIK0kKQjd6YVRUYkNxUWlCcTBOUjZ4amtWOUw0S2FpbGNjOHRYQ1pFWkNwMU1jRkRPNHZyQkRPZHB2MmUrL0JvcjVFawpaekNNZzk4QzdZWHhzR053dDhzb29XSHpDYkVQckJDR2tnTTNVaWZ1QkpsTWNsTzhwazM2K0E0Z25zandTNzM0Cmx0L0JvZGdVVzJudnp5cm55SE9tSlpaWTc0OFd2NHBML0pqdVFDa1MyQmlTYStQUE52V2JhQ1BoTjFGUm16S2EKSllQWDE0YmlvdUVFT3Fodkd6c2VmbG0zZHRURnJlTXU4Slo4VExXeWlLa2hHNUdPRk1EZlhncEJab1dZTzZMMApHYnFXWFViYXI2KzUyTUxoWGE5YXZzY3lrWGVYRjlGdHZrSFYweXZRVERuV202Q0JXbWx6cUlaV1lLZkJBZ01CCkFBR2pnWWt3Z1lZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGTUFYVjUwbTVVTmVyanpSUFJyVwpaYkM1V2QzRU1DWUdBMVVkRVFRZk1CMkNHeW91WXpFd0xtaDFZbUpzWlMxbmNuQmpMbU5wYkdsMWJTNXBiekFOCkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWI2Z2VXcEQ5ZDFWNE5kK2lnMVk3OWRZNXAybWEzVm5CSkpyMWlGTXUKTGtSdUp2UDdYRlNtWHlyZEVCeHg0MEkvVUJqbWEwclVyeFk4MFBuQk1wVnAzam55dWhoQ3ZUai9MQ0dYMVdKRgpyU3d2NWJQbkRkS0FzWGJoRSsyR2FROUg1ZVd0S0FDTHI0UE9tRS9xRzJVaUwxS1A3OEdkR3JzV09CdDVzcnF3ClJvWEt3a2lpS0hHNGRRc1ZoZ2dmUVNkRGZLS3k2T2s1OEh4cUJPRWdlb0xWMUI5WVlyditwcUNMNjFyaWxCVlEKT2g3Mm5kSFhzeTR0c1ZhT1JzMTlTY3J6cENTR2pCaS9oeVNWRmc1REgyNmJYNXloeUM4dzVjRm1HbWVDWksxTQpCWjlyOUFDVWRlbENEL1prbkdwV2dnaG9COXlGdTg1OWpQbk9rd2VOOEtaaXdnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBMXdId280TXJGcllDQ0o3UkhNUDJ3eHgvaUFlODJrMDJ3cWtJZ2F0RFVlc1k1RmZTCitDbW9wWEhQTFZ3bVJHUXFkVEhCUXp1TDZ3UXpuYWI5bnZ2d2FLK1JKR2N3aklQZkF1MkY4YkJqY0xmTEtLRmgKOHdteEQ2d1FocElETjFJbjdnU1pUSEpUdktaTit2Z09JSjdJOEV1OStKYmZ3YUhZRkZ0cDc4OHE1OGh6cGlXVwpXTytQRnIrS1MveVk3a0FwRXRnWWttdmp6emIxbTJnajRUZFJVWnN5bWlXRDE5ZUc0cUxoQkRxb2J4czdIbjVaCnQzYlV4YTNqTHZDV2ZFeTFzb2lwSVJ1UmpoVEEzMTRLUVdhRm1EdWk5Qm02bGwxRzJxK3Z1ZGpDNFYydldyN0gKTXBGM2x4ZlJiYjVCMWRNcjBFdzUxcHVnZ1ZwcGM2aUdWbUNud1FJREFRQUJBb0lCQUU2cjJ3MDVkWTY5MGtpdApNLzYraFpBbTRWTTQ0WlZQSTNaZXUwb1hERzd4QXc2cVEvdWg0cCtHNFRQTHdBVE9VZXJINWR0ZjhuWnY5eUw4CmMxaTAvdWFQTnlDRzBYRFkzOFVHZkRoUFBsT0VMTVlWSnUzeTRlTEdKdFhXbjI2aWxSRzJoUkUvMC92M0xobGkKb21pMU1Qa2IvY3IwQ2JPa01KaGlTb1VBM01ZcUdxemdxVE4vdnRjN3BuWHJ1aTROSHlGQnlIMmF4d1ZNcGVuSQp1ZWNtWWNoWEg2Ty9QaDI4N0lsUXZ1QzlzNXpGL2lmbEN2amhPRjFmbUJsMVdNaThSVmFrZmZqWXVsOXdxdnBaCi91ZDVwVFROMG9mZE4zNXVabUdrbmptcmxjK0RkMlNRL3ErTTloSUJDVmN3d0xOYUJLMUx4NHlFVXdHMnp1STEKcWY4MUhFRUNnWUVBOVFIQmY4WjlJb3VnbThweTlyczU4d2NYZFAvUUs2RjlZVW5rSzVrMTNqdndLYVEwak1KUgo5SmVQNkdTc0MySDdBVzVLV1d2Z0czVFRyYlpFYjUweURpdlJIYzVyNWtiOXNrOGJNOWZXQWhBZlZGYlNrSEZVCnRtT2VWcFRsbWdqQmRCd3VEek5QdTgraFdWejJoOTJVTUlSNEUzYjd4RmRyeWlyUXFEVUNuR1VDZ1lFQTRLZVoKeVJEVjVUQXVYeTR6d2g4aDZZcHd1WEZaM2F1ZFhKRG1jZEF1R3l5aDJxNzdhRWI3TVI4cG1lKys1K3l5bnI2UApSSmt0UEcwLzg5NldXWWx1b0ttcnFwd0ZGUGJIQWM1VytzZHJEb0JaWU45NEc3Y09FSEY4QlJUMXVpdm9veTVyCmNwbWhFZ0dNSUVSdGRIMzE0QVJNTFVuREl4ejVWWWJpUGZ6UzRpMENnWUJ6cjdXUFFNamJZL1NkT3pXWGZRWTYKMDdGbXhGZW1FbVdpWjRKK2Q2UnczL3BobnpCVStuZzZOc3B6bi8yQWptNDMyYnp2aGpsV25ZNUo2dE5icEd6NwpOZ05Td0tKQUpHc3NJNkFqbFpsdWRmQmxJVzNoV0RINHdRY0Z1TjdGSWJjK3ZRT2VsOHJoVW9QTUwxSVZDeklxCnlwSHNGdldBV3dzQmRiLzZmTFZUNVFLQmdCc21KZitXZVVMcFA3Rmc5QUJSb3RlR1Uza1ZxYmFRTnNRby9yQmkKYURBQWhNN1l0cWt6YXNmVTdFSWVKd1FBSnRYb1VZZ0l1dDdDbFNmempsZmpzK3JXbGxoWDRvVldEVmE2aU9obAprUnAvaUUyY3MvY2xlQjJrbVVoRDhDNC9nQzI0UG1QckRQd1FFODhTZGVmT0VSaXhiRU5NMXJnM21Db3Qwc21LCjlERkJBb0dBSWZER2ZUSEd6MTBKUUhKUCtzV3N1TnBMM2lsZVBGNiswa25zeUlBYzVRUTJaZ2ZRTzk3MkZqQXEKK2pjLzZRTWsyUzQxT2pBSVBhS09FbEFzZGJkOEZ3blVleWliaVhGVlJXMks1M3RONDF5QWlTdHYzZ25aYnUxTgovelg2dFFiVHE0V3VTdFVEaFBFYWhYem5reFlYbElEMlEybzgzMHFvaldkVHNOcHdyU009Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  skip-cnp-status-startup-clean: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: c10
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "110"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  # Default case
  routing-mode: "tunnel"
  tunnel-protocol: "vxlan"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-wireguard: "true"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-local-redirect-policy: "false"

  kube-proxy-replacement: "false"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  enable-host-port: "false"
  enable-external-ips: "false"
  enable-node-port: "false"
  enable-health-check-nodeport: "true"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  ipam-cilium-node-update-rate: "15s"
  cluster-pool-ipv4-cidr: "10.10.0.0/17"
  cluster-pool-ipv4-mask-size: "24"
  disable-cnp-status-updates: "true"
  cnp-node-status-gc-interval: "0s"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "true"
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"
  k8s-client-qps: "5"
  k8s-client-burst: "10"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-connect-timeout: "2"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"

  external-envoy-proxy: "false"
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: c10
    peer-service: "hubble-peer.kube-system.svc.cluster.local:443"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-hubble-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-hubble-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumendpoints
  - ciliumidentities
  verbs:
  - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumexternalworkloads/status
  - ciliumnodes
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumendpoints/status
  verbs:
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumexternalworkloads
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: kvmesh-metrics
    port: 9964
    protocol: TCP
    targetPort: kvmesh-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: NodePort
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
    nodePort: 32379
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-agent: "unconfined"
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: "unconfined"
        container.apparmor.security.beta.kubernetes.io/mount-cgroup: "unconfined"
        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: "unconfined"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        lifecycle:
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - CHOWN
              - KILL
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
              - DAC_OVERRIDE
              - FOWNER
              - SETGID
              - SETUID
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Unprivileged containers need to mount /proc/sys/net from the host
        # to have write access
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        # Unprivileged containers need to mount /proc/sys/kernel from the host
        # to have write access
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Unprivileged containers can't set mount propagation to bidirectional
          # in this case we will mount the bpf fs from an init container that
          # is privileged and set the mount propagation from host to container
          # in Cilium.
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - cilium
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      # Mount the bpf fs if it is not mounted. We will perform this task
      # from a privileged container because the mount propagation bidirectional
      # only works from privileged containers.
      - name: mount-bpf-fs
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        args:
        - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
        command:
        - /bin/bash
        - -c
        - --
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
            drop:
              - ALL
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        resources:
          requests:
            cpu: 100m
            memory: 100Mi # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
      - name: host-proc-sys-net
        hostPath:
          path: /proc/sys/net
          type: Directory
      - name: host-proc-sys-kernel
        hostPath:
          path: /proc/sys/kernel
          type: Directory
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              - key: ca.crt
                path: client-ca.crt
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.14.2@sha256:52f70250dea22e506959439a7c4ea31b10fe8375db62f5c27ab746e3a2af866d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      initContainers:
      - name: etcd-init
        image: "quay.io/coreos/etcd:v3.5.4@sha256:795d8660c48c439a7c3764c2330ed9222ab5db5bb524d8d0607cac76f7ba82a3"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
        - |
          rm -rf /var/run/etcd/*;
          /usr/local/bin/etcd --data-dir=/var/run/etcd --name=clustermesh-apiserver --listen-client-urls=http://127.0.0.1:2379 --advertise-client-urls=http://127.0.0.1:2379 --initial-cluster-token=clustermesh-apiserver --initial-cluster-state=new --auto-compaction-retention=1 &

          # The following key needs to be created before that the cilium agents
          # have the possibility of connecting to etcd.
          etcdctl put cilium/.has-cluster-config true

          etcdctl user add root --no-password;
          etcdctl user grant-role root root;
          etcdctl user add admin-c10 --no-password;
          etcdctl user grant-role admin-c10 root;
          etcdctl user add externalworkload --no-password;
          etcdctl role add externalworkload;
          etcdctl role grant-permission externalworkload --from-key read '';
          etcdctl role grant-permission externalworkload readwrite --prefix cilium/state/noderegister/v1/;
          etcdctl role grant-permission externalworkload readwrite --prefix cilium/.initlock/;
          etcdctl user grant-role externalworkload externalworkload;
          etcdctl user add remote --no-password;
          etcdctl role add remote;
          etcdctl role grant-permission remote --from-key read '';
          etcdctl user grant-role remote remote;
          etcdctl auth enable;
          exit
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        image: "quay.io/coreos/etcd:v3.5.4@sha256:795d8660c48c439a7c3764c2330ed9222ab5db5bb524d8d0607cac76f7ba82a3"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/local/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=clustermesh-apiserver
        - --auto-compaction-retention=1
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.14.2@sha256:0650beac6633a483261640b6539c9609f5a761f4ab4504fd1e6ffe7f2bb82e9a"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt
        - etcd.config=/var/lib/cilium/etcd-config.yaml
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: IDENTITY_ALLOCATION_MODE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: identity-allocation-mode
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        ports:
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir: {}
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "clustermesh-apiserver"
      serviceAccountName: "clustermesh-apiserver"
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: clustermesh-apiserver
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.14.2@sha256:a89030b31f333e8fb1c10d2473250399a1a537c27d022cd8becc1a65d1bef1d6"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            tcpSocket:
              port: grpc
          livenessProbe:
            tcpSocket:
              port: grpc
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          - name: tls
            mountPath: /var/lib/hubble-relay/tls
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Always
      priorityClassName: 
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      priorityClassName: 
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.12.0@sha256:1c876cfa1d5e35bc91e1025c9314f922041592a88b03313c22c1f97a5d2ba88f"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.12.0@sha256:8a79a1aad4fc9c2aa2b3e4379af0af872a89fcec9d99e117188190671c66fc2e"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
---
# Source: cilium/templates/cilium-secrets-namespace.yaml
# Only create the namespace if it's different from Ingress secret namespace or Ingress is not enabled.

# Only create the namespace if it's different from Ingress and Gateway API secret namespaces (if enabled).
