---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRT3BtRy9TamRmdlhSekZnYTJTOXM2REFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEF5V2hjTk1qWXhNVEl4TWpFMQpOVEF5V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzFxaklocFlSSnVEYUgrSlBXUHJGd1J0RXU4NHEzbEgza0FHWWZidkh4V1BFdzEwM2gKNjh2Rmw3NVRLRlBEOWtWMHRZOGt6VlRFRE5yU1RsalAvaDdVeW5RVHh1SzJacnhScjVmOEdXQ21yMXpyd1lrRQpEUmlaenlPY1hIOEFVRzJSRWI2ZitUb1JLUkR6MFppWDhoQW9UczNTM3NXSnFXZlc1TEVNU0l1cjA1K3Q2Z1hmCkdVcEs1TlpTOVRhVkthNVlLcERpMXcrL3JnQmFubm55WlNwQUFRU1FhUHlITzZyQzl5UXBBZTNZT1M5UXBmcm4KV2lqZC9HSHhvS0lzWkp1YnZGaVNSbDRsSUlxWkFFbjNITVBUTTgrRGdxbzdxQm4vbCtUWXQxVkRiaTAzdmlTTgpzQ0UyYm5OQkxFRTFHM05wMk5JQ1lWNjBVYmFOUDQ0MmxnclRBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVWR1RHUm1YOHduYjJOYmIyMjh4U1VmQVE1V2N3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFKQURQLzlJc0JFTGRNYXRJTTVPQ0xYa2RhTzJWMUcrU0J0VU10ZlY5YVRVK1lNMjFWYURzYkpBCjArZTBZaVl1VEtuSVpCR2ZjU1RhWHo4OHUvcU8vUFkzTUVkY3JLN2ZXcWovWUZxMGg0NlhISVU1Q0Z6L05PaXkKNVc0RTBRdldxdEtTdDF2RTJ4UU5DNFdSTzVrQUlrdzQ2cWduV1V2UC9CN092ZFVGR1JFRlhtK3laL3BjbDZETAp3elh5VWEwZ0JhL1JpVk5OU1ZHWmk4a1hLMGJ1WDRHUDdMcEd3emJ5SnJMYkhzSWYyTUc4K3AxeTRudHZjZnVQCm9iRWJGS0toUUNSV2EvM3FMSk0vdHVNNnpWQ1JmYW5sT1dTZFZKamlYUmpQOHQ4cjI5YVVJN2tqMFQ3aFExYUEKYWkrTTMvSGh5YjNRQUZXWkgvU0s2UWtqajNVYkE5TT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBdGFveUlhV0VTYmcyaC9pVDFqNnhjRWJSTHZPS3Q1Ujk1QUJtSDI3eDhWanhNTmROCjRldkx4WmUrVXloVHcvWkZkTFdQSk0xVXhBemEwazVZei80ZTFNcDBFOGJpdG1hOFVhK1gvQmxncHE5YzY4R0oKQkEwWW1jOGpuRngvQUZCdGtSRytuL2s2RVNrUTg5R1lsL0lRS0U3TjB0N0ZpYWxuMXVTeERFaUxxOU9mcmVvRgozeGxLU3VUV1V2VTJsU211V0NxUTR0Y1B2NjRBV3A1NThtVXFRQUVFa0dqOGh6dXF3dmNrS1FIdDJEa3ZVS1g2CjUxb28zZnhoOGFDaUxHU2JtN3hZa2taZUpTQ0ttUUJKOXh6RDB6UFBnNEtxTzZnWi81ZmsyTGRWUTI0dE43NGsKamJBaE5tNXpRU3hCTlJ0emFkalNBbUZldEZHMmpUK09OcFlLMHdJREFRQUJBb0lCQUZvcHVhM25aMnZyU08xZApXNHFYSFJ2N21mRHlvU09TU0pVeitYdWFaZXlDVjFzRlVUdFMrNVQ3UmxRaGpNbVMzbEFabUkwTWVBakIxSTFTCm8xTy83Vzl4ZUFFazBmcnpySDNpWjgyUWp0N0w1Sk9DUDgzSjdpN1FsdjBSRDF1Smo0ZlR4Y2ZDTzZhdXVpSTUKSWNJd093SzJjZ001MjlNQ1NHNW9uTkxhNHErSmgxTWpvRWFUV0VxTE12QUU1VkJaSVhJYm9rMElQL0V3a3FmTQpsTnJ5SEl4djA4a3h0cnlab1NNMm8yMzVueGVQMll1SVR3L2hMaFgyL0loMUxmL0tSczBlUUlTZWlZNGtmNFEyCnRWNFQzbkJzanBGNzNQQXM4SU9LcUpWcmptYTdWQXZCY3hhbEpDa2toUmx1OEJBQlY4QThGUDJ3ZWhacjVCUDYKUHVTZnNFRUNnWUVBeHc0aUU1Kzh3UkNiYnRpSTJJcEpYaHRsc21SZDNpUzE3c1VKYURtU0xlMVJvR3VRSWdqVgpReWNYQ3E5MFZTYnFTUGtPTVdEYld0OVZ4K3RSVDhIeGJmZmU5ODR4KzBPYzdtMFd6bkx6UDhIVVBTTFpRQmJLClVPK0llQW1pTGxKSkdDLzFuVTQ0K3M1cEpweW1OVDlLYmNhRUJCcUVod05rVW8zT0ZyTVhjT0VDZ1lFQTZhSjUKSFAxdktwSktIZHRmUEtlR1hVcmZRMThTK1RIaExNb1BacjNZZ2JyRW02Vk50cWhNajNrL1dZYnNxNUI1TWNMVAorNnlKOHd3ZjAwVTBVS2N3L2RjVHNjTFY3dkhlUzVqSUExWlF1Tm9ycEo3dHlnbFdNbVZyekhzT3F4ZGhuWEoyClpPcWkrVTZKOWU5YzRYWHBaQUhiSEZQNWRnVThLMU1BSkdkR1RqTUNnWUFxZ280c2VyU28xbzhiUVFzWWs0L1AKbFRKR3dzQjVMSVhlRkI1S0wrRlVCWmFsRjlPVU1TYTZUS0xUR1YxU3doak90TUdmTWZ3bWtBT1Z5bDkzRlFnbQpZQVV5RHNzRnlnNjlySFp1YUlZaVc1YWo1OGxWc29oS2VKMUFaVzVKVGpGbUJQZ0RQQzFYQXJYYUZTSTV4T1owClF5ejJZMk5pSWd0T3hoSDVMdzRXZ1FLQmdFaDlQcks5OTNYditjc1Z1NURvTVlwVXByMFNqS0tBMVdxK0x0VWoKNWo4cUljSmhJYUdneWxCaHdFUVkxdW5NWTY0SzB4YnRTOGY3WlF4NkZtZEgySzJKdy9TTmpTOGNJR3E0TnFiQwphejFQZytjSjRLR2xEL2VHL0ZGdmhQZVV3NWJFWXZPZzBYd2s0QzFNWFRjZkRKRVkrbERweFNiWExQb01RS2tLCjJnZDlBb0dBVytYN1BNVjlTM05jdjhhNVdjbDFjRlFjVFhYRmoydi9vM0ZFYWJ6ZTVYN29kWFdqbzZSSjZqUGQKSHNiQUt5RE02cDQvbnI2akk4Q1ArN2xRK3pFcko3aTMrUm5zTG9vOUIvSXZBaGtuRUEweXRPUy9YVERMMVY0Ngo5VzVqbXdydCtkaW5lYTRQa05CV2g3bTllOTg3Z2NjOVluTjQ2MXBCSzFadDNvRGNJdE09Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRT3BtRy9TamRmdlhSekZnYTJTOXM2REFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEF5V2hjTk1qWXhNVEl4TWpFMQpOVEF5V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzFxaklocFlSSnVEYUgrSlBXUHJGd1J0RXU4NHEzbEgza0FHWWZidkh4V1BFdzEwM2gKNjh2Rmw3NVRLRlBEOWtWMHRZOGt6VlRFRE5yU1RsalAvaDdVeW5RVHh1SzJacnhScjVmOEdXQ21yMXpyd1lrRQpEUmlaenlPY1hIOEFVRzJSRWI2ZitUb1JLUkR6MFppWDhoQW9UczNTM3NXSnFXZlc1TEVNU0l1cjA1K3Q2Z1hmCkdVcEs1TlpTOVRhVkthNVlLcERpMXcrL3JnQmFubm55WlNwQUFRU1FhUHlITzZyQzl5UXBBZTNZT1M5UXBmcm4KV2lqZC9HSHhvS0lzWkp1YnZGaVNSbDRsSUlxWkFFbjNITVBUTTgrRGdxbzdxQm4vbCtUWXQxVkRiaTAzdmlTTgpzQ0UyYm5OQkxFRTFHM05wMk5JQ1lWNjBVYmFOUDQ0MmxnclRBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVWR1RHUm1YOHduYjJOYmIyMjh4U1VmQVE1V2N3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFKQURQLzlJc0JFTGRNYXRJTTVPQ0xYa2RhTzJWMUcrU0J0VU10ZlY5YVRVK1lNMjFWYURzYkpBCjArZTBZaVl1VEtuSVpCR2ZjU1RhWHo4OHUvcU8vUFkzTUVkY3JLN2ZXcWovWUZxMGg0NlhISVU1Q0Z6L05PaXkKNVc0RTBRdldxdEtTdDF2RTJ4UU5DNFdSTzVrQUlrdzQ2cWduV1V2UC9CN092ZFVGR1JFRlhtK3laL3BjbDZETAp3elh5VWEwZ0JhL1JpVk5OU1ZHWmk4a1hLMGJ1WDRHUDdMcEd3emJ5SnJMYkhzSWYyTUc4K3AxeTRudHZjZnVQCm9iRWJGS0toUUNSV2EvM3FMSk0vdHVNNnpWQ1JmYW5sT1dTZFZKamlYUmpQOHQ4cjI5YVVJN2tqMFQ3aFExYUEKYWkrTTMvSGh5YjNRQUZXWkgvU0s2UWtqajNVYkE5TT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKekNDQWcrZ0F3SUJBZ0lRY2VTVmExSTBha0lJSXl3a2NpUDU5ekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEF6V2hjTk1qWXhNVEl4TWpFMQpOVEF6V2pBVE1SRXdEd1lEVlFRREV3aGhaRzFwYmkxak1EQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQCkFEQ0NBUW9DZ2dFQkFLeTl3aS9tbmdqdlF4cjI4S2txUkRHVVpMMk5nSDRocUprM2dxZXNnRE91RWNyUGFxRFoKc2hUSE1YbzB6ZTg2RFVsMVJ2NkMwNFJxRUZNOVhGTzc3RDZVWnkvREhFZG1Va3pzQkEyKzVxMWQvYlVTaHJ4Ywo3clBPT2JGVGxBWDZLTGlENXNIZVJLT3dpM3pvQkpzUC9VQk1sTkdLalFpUGo5SkFSSkdlck1aOWR5OVNiTXpqCnVCdXI1TWlSVVhqc3JnU0doaDhoS1d4YVZHQmg1QkhPa1pxU0IzMXBsbE9MZHU2YmhVbUFPY3FEay9KNm00ZDEKSTlJQU9wSHV0UjZHYXZyRmpuaFRXMTduZUJXa2IxQjFSaGt6MG1JS2NYSm4xTGRYYisrUXIrc3IzMENDZVBFSQptbG96WjlsWlI4M1NFdVFnRTRWRnBVejhJVHVjS2cxVzVSY0NBd0VBQWFOMk1IUXdEZ1lEVlIwUEFRSC9CQVFECkFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUEKTUI4R0ExVWRJd1FZTUJhQUZGUmt4a1psL01KMjlqVzI5dHZNVWxId0VPVm5NQlFHQTFVZEVRUU5NQXVDQ1d4dgpZMkZzYUc5emREQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFaSXJhM3d0STF0SkEreEZhTjkwaVRmbXdnMjdXCk5pWG15ZVIzWDh6dXRqN3NBY05kaGZsNTM1SWJISFVGMTdseTdCb2ZCS0NNbUZobkRHc3lrUlVwQnA5aS9aUEsKQldSejh2bHd6WGliankyQTJDa0hNclNXenRaNkRVSWpjOExGeDRlUGFEVGlpcUtCUFg1clpJVFhGbDVhYlN6RgpsT0JCa01oK3NDU3kxRnd4OVpzZ0s0UFF2L2xYSmlQUmkyMWlMT0c1STV2VGlUK3JzYXA2UjBZU1o1RUlDQ3NvCkQ2djBSbTdGWUdLSHlyL3FydE9CZWU5bWluSURvR2xxSXlpZkNhYzBmWXhWZzZCNGdMbmIzWXpjcnFqY29FL3MKeG1ZV0UvSW5nNHg3UzFxQSs0bmZMSmRHd2t1K0tkcGYwTmVOT3cvTHozZlFNU1A4dnhPcEhHMlJjZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBckwzQ0wrYWVDTzlER3Zid3FTcEVNWlJrdlkyQWZpR29tVGVDcDZ5QU02NFJ5czlxCm9ObXlGTWN4ZWpUTjd6b05TWFZHL29MVGhHb1FVejFjVTd2c1BwUm5MOE1jUjJaU1RPd0VEYjdtclYzOXRSS0cKdkZ6dXM4NDVzVk9VQmZvb3VJUG13ZDVFbzdDTGZPZ0Vtdy85UUV5VTBZcU5DSStQMGtCRWtaNnN4bjEzTDFKcwp6T080RzZ2a3lKRlJlT3l1QklhR0h5RXBiRnBVWUdIa0VjNlJtcElIZldtV1U0dDI3cHVGU1lBNXlvT1Q4bnFiCmgzVWowZ0E2a2U2MUhvWnErc1dPZUZOYlh1ZDRGYVJ2VUhWR0dUUFNZZ3B4Y21mVXQxZHY3NUN2Nnl2ZlFJSjQKOFFpYVdqTm4yVmxIemRJUzVDQVRoVVdsVFB3aE81d3FEVmJsRndJREFRQUJBb0lCQUN1SkE1alk4WGxrKzYrZgpEdFpEbmI0MUhSS2N5QWFCNnlENldZWnl0ampRSlJITkpwMTFZQ2xXYm9UVExCZWZ0TnVQb0IzaTBQWXRXUUh4CmxBUlNkMTdxUGZ0T25DRHVpODF4S2pCZ3JYaUNHTC82OUZRaXc5SXpKbDBucUVXOVgyZnBiazNyKzdhWmR2NDYKNTNaQkdGMk5MM0NFRDdsWm5UQ3JHOXpyZGJYc1hMRGpVU3pOYjZFNXNmVWJyRkwxQ3M2ZkdsZE83emhRUHZhVwp3anQ4dC9YbVJzSWFTbWp3SnlCaHlaR2hpR08ydWVLYnp6N3RRTCtrbG92WXIvTkpzZnBSWm1BekVtbjhucW91CndIM0plSVZEUVl2VGl2UVp0QVNoZGhNM2NHeitoeFBCSjUzaUNPL3NuQkxFWVpvU05lT1ZHcG4rUmhLMVduOUwKb2I1UlVXRUNnWUVBNUljK2JOWEVQMmJlK1pSeEJvbXFyYnA5dXc5NGxBc1dxU0dPMGdab0E0WkE0bjNUNjJmZwp6Yld4c0puZVF6ZHVVZUMyMFpGYmJMa1JhYnNFYVk1U0lXMTUyZE9zQmd1VjI2clBrMzRTOFoyQTdHZHE3cklVClN3UDZJa2FOeWRuSCt4R3lORVFPYjJ4eGNDZUU5c1B3c3FjYmlQZldnWlphRk1hYXJkdEorMUVDZ1lFQXdZRzMKcjQzQUFWNG5yZHhrR0UzenY5bExjTFhHUlpJZ1E3YWpNajkrZm9valdZamtJYyt1a05sc25SbDVtbDIzc2h1WQpsRmFYTTU2VHZWbXRubmdEK09UY09Zb1V3M1kwK1ZLTnBSM3BoazA4V1JzTHhxU3FaTHJieisrU05hNDJMdUp5CkN3Q3RucmxJMDNPanZJUzIzTDhhUExyRmJDUXdxMEJxUWs2TmIrY0NnWUFLN2FUQWs2QmszOGg5NnVsVXhMU1MKeGo1SStiNXNaZk5aZHk5YlA4OHRpL2dDWEw0TG5kWVVRRUlWRGVhaEZEK0VUdGl2UU9JOFdzVklaeGNZN1NOawpVZFhuNHNWeExKQ29CbzBTb283Sld4elZNVVRkMFVwREpCZU1HQStqdlhSZ3YwSGtXZlRPdzBMUmVESlZrcDBxCkRlKzFKeFRzOFlHeFNLWVE5bEdkWVFLQmdRQy9OT1JDYmZqSjRUV29FRncvdjljWlBTZlVTV21QbVNLVWhrV2cKQXltRTlBNldERFFRVE4wYmVCeGc1NmxISlUrOGlKUXVENW44Z2JkT3BPeHY1L3RVMXgvZEkxbjlBaks2SWg2ZwpoM3dYSHY2QXRiN2ZIQnJheWVFbUNINGEyUGZsUUJDY1dxRTBjN1ZJYTczaEsrcGRHZUJkSGRpeVVOaGVmNW4vCnh3cnZCUUtCZ0NxSjBxS3lPS1pKMW4wbThGZnpwZno4eVdxUVlBQm15TEFNQTg0VmlwRXJ2aks1ZG9wZGVqT0EKSEVtRXZKZjdGbmpuRnRycDhGMzRKVm5ldGEzVk5tRVNmenU4TEdsL0VoYmh6dWJoUDl4Y3FPMitFbC9qSE9RMgpjbzlqaElqRTdseXZIcFFuUzIrdVBlSVY4cm1CZFI1Qm4rMGlRVmNNbXhlOElPUVA1WlYzCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-ca-cert
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRT3BtRy9TamRmdlhSekZnYTJTOXM2REFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEF5V2hjTk1qWXhNVEl4TWpFMQpOVEF5V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzFxaklocFlSSnVEYUgrSlBXUHJGd1J0RXU4NHEzbEgza0FHWWZidkh4V1BFdzEwM2gKNjh2Rmw3NVRLRlBEOWtWMHRZOGt6VlRFRE5yU1RsalAvaDdVeW5RVHh1SzJacnhScjVmOEdXQ21yMXpyd1lrRQpEUmlaenlPY1hIOEFVRzJSRWI2ZitUb1JLUkR6MFppWDhoQW9UczNTM3NXSnFXZlc1TEVNU0l1cjA1K3Q2Z1hmCkdVcEs1TlpTOVRhVkthNVlLcERpMXcrL3JnQmFubm55WlNwQUFRU1FhUHlITzZyQzl5UXBBZTNZT1M5UXBmcm4KV2lqZC9HSHhvS0lzWkp1YnZGaVNSbDRsSUlxWkFFbjNITVBUTTgrRGdxbzdxQm4vbCtUWXQxVkRiaTAzdmlTTgpzQ0UyYm5OQkxFRTFHM05wMk5JQ1lWNjBVYmFOUDQ0MmxnclRBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVWR1RHUm1YOHduYjJOYmIyMjh4U1VmQVE1V2N3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFKQURQLzlJc0JFTGRNYXRJTTVPQ0xYa2RhTzJWMUcrU0J0VU10ZlY5YVRVK1lNMjFWYURzYkpBCjArZTBZaVl1VEtuSVpCR2ZjU1RhWHo4OHUvcU8vUFkzTUVkY3JLN2ZXcWovWUZxMGg0NlhISVU1Q0Z6L05PaXkKNVc0RTBRdldxdEtTdDF2RTJ4UU5DNFdSTzVrQUlrdzQ2cWduV1V2UC9CN092ZFVGR1JFRlhtK3laL3BjbDZETAp3elh5VWEwZ0JhL1JpVk5OU1ZHWmk4a1hLMGJ1WDRHUDdMcEd3emJ5SnJMYkhzSWYyTUc4K3AxeTRudHZjZnVQCm9iRWJGS0toUUNSV2EvM3FMSk0vdHVNNnpWQ1JmYW5sT1dTZFZKamlYUmpQOHQ4cjI5YVVJN2tqMFQ3aFExYUEKYWkrTTMvSGh5YjNRQUZXWkgvU0s2UWtqajNVYkE5TT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBdGFveUlhV0VTYmcyaC9pVDFqNnhjRWJSTHZPS3Q1Ujk1QUJtSDI3eDhWanhNTmROCjRldkx4WmUrVXloVHcvWkZkTFdQSk0xVXhBemEwazVZei80ZTFNcDBFOGJpdG1hOFVhK1gvQmxncHE5YzY4R0oKQkEwWW1jOGpuRngvQUZCdGtSRytuL2s2RVNrUTg5R1lsL0lRS0U3TjB0N0ZpYWxuMXVTeERFaUxxOU9mcmVvRgozeGxLU3VUV1V2VTJsU211V0NxUTR0Y1B2NjRBV3A1NThtVXFRQUVFa0dqOGh6dXF3dmNrS1FIdDJEa3ZVS1g2CjUxb28zZnhoOGFDaUxHU2JtN3hZa2taZUpTQ0ttUUJKOXh6RDB6UFBnNEtxTzZnWi81ZmsyTGRWUTI0dE43NGsKamJBaE5tNXpRU3hCTlJ0emFkalNBbUZldEZHMmpUK09OcFlLMHdJREFRQUJBb0lCQUZvcHVhM25aMnZyU08xZApXNHFYSFJ2N21mRHlvU09TU0pVeitYdWFaZXlDVjFzRlVUdFMrNVQ3UmxRaGpNbVMzbEFabUkwTWVBakIxSTFTCm8xTy83Vzl4ZUFFazBmcnpySDNpWjgyUWp0N0w1Sk9DUDgzSjdpN1FsdjBSRDF1Smo0ZlR4Y2ZDTzZhdXVpSTUKSWNJd093SzJjZ001MjlNQ1NHNW9uTkxhNHErSmgxTWpvRWFUV0VxTE12QUU1VkJaSVhJYm9rMElQL0V3a3FmTQpsTnJ5SEl4djA4a3h0cnlab1NNMm8yMzVueGVQMll1SVR3L2hMaFgyL0loMUxmL0tSczBlUUlTZWlZNGtmNFEyCnRWNFQzbkJzanBGNzNQQXM4SU9LcUpWcmptYTdWQXZCY3hhbEpDa2toUmx1OEJBQlY4QThGUDJ3ZWhacjVCUDYKUHVTZnNFRUNnWUVBeHc0aUU1Kzh3UkNiYnRpSTJJcEpYaHRsc21SZDNpUzE3c1VKYURtU0xlMVJvR3VRSWdqVgpReWNYQ3E5MFZTYnFTUGtPTVdEYld0OVZ4K3RSVDhIeGJmZmU5ODR4KzBPYzdtMFd6bkx6UDhIVVBTTFpRQmJLClVPK0llQW1pTGxKSkdDLzFuVTQ0K3M1cEpweW1OVDlLYmNhRUJCcUVod05rVW8zT0ZyTVhjT0VDZ1lFQTZhSjUKSFAxdktwSktIZHRmUEtlR1hVcmZRMThTK1RIaExNb1BacjNZZ2JyRW02Vk50cWhNajNrL1dZYnNxNUI1TWNMVAorNnlKOHd3ZjAwVTBVS2N3L2RjVHNjTFY3dkhlUzVqSUExWlF1Tm9ycEo3dHlnbFdNbVZyekhzT3F4ZGhuWEoyClpPcWkrVTZKOWU5YzRYWHBaQUhiSEZQNWRnVThLMU1BSkdkR1RqTUNnWUFxZ280c2VyU28xbzhiUVFzWWs0L1AKbFRKR3dzQjVMSVhlRkI1S0wrRlVCWmFsRjlPVU1TYTZUS0xUR1YxU3doak90TUdmTWZ3bWtBT1Z5bDkzRlFnbQpZQVV5RHNzRnlnNjlySFp1YUlZaVc1YWo1OGxWc29oS2VKMUFaVzVKVGpGbUJQZ0RQQzFYQXJYYUZTSTV4T1owClF5ejJZMk5pSWd0T3hoSDVMdzRXZ1FLQmdFaDlQcks5OTNYditjc1Z1NURvTVlwVXByMFNqS0tBMVdxK0x0VWoKNWo4cUljSmhJYUdneWxCaHdFUVkxdW5NWTY0SzB4YnRTOGY3WlF4NkZtZEgySzJKdy9TTmpTOGNJR3E0TnFiQwphejFQZytjSjRLR2xEL2VHL0ZGdmhQZVV3NWJFWXZPZzBYd2s0QzFNWFRjZkRKRVkrbERweFNiWExQb01RS2tLCjJnZDlBb0dBVytYN1BNVjlTM05jdjhhNVdjbDFjRlFjVFhYRmoydi9vM0ZFYWJ6ZTVYN29kWFdqbzZSSjZqUGQKSHNiQUt5RE02cDQvbnI2akk4Q1ArN2xRK3pFcko3aTMrUm5zTG9vOUIvSXZBaGtuRUEweXRPUy9YVERMMVY0Ngo5VzVqbXdydCtkaW5lYTRQa05CV2g3bTllOTg3Z2NjOVluTjQ2MXBCSzFadDNvRGNJdE09Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRT3BtRy9TamRmdlhSekZnYTJTOXM2REFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEF5V2hjTk1qWXhNVEl4TWpFMQpOVEF5V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzFxaklocFlSSnVEYUgrSlBXUHJGd1J0RXU4NHEzbEgza0FHWWZidkh4V1BFdzEwM2gKNjh2Rmw3NVRLRlBEOWtWMHRZOGt6VlRFRE5yU1RsalAvaDdVeW5RVHh1SzJacnhScjVmOEdXQ21yMXpyd1lrRQpEUmlaenlPY1hIOEFVRzJSRWI2ZitUb1JLUkR6MFppWDhoQW9UczNTM3NXSnFXZlc1TEVNU0l1cjA1K3Q2Z1hmCkdVcEs1TlpTOVRhVkthNVlLcERpMXcrL3JnQmFubm55WlNwQUFRU1FhUHlITzZyQzl5UXBBZTNZT1M5UXBmcm4KV2lqZC9HSHhvS0lzWkp1YnZGaVNSbDRsSUlxWkFFbjNITVBUTTgrRGdxbzdxQm4vbCtUWXQxVkRiaTAzdmlTTgpzQ0UyYm5OQkxFRTFHM05wMk5JQ1lWNjBVYmFOUDQ0MmxnclRBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVWR1RHUm1YOHduYjJOYmIyMjh4U1VmQVE1V2N3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFKQURQLzlJc0JFTGRNYXRJTTVPQ0xYa2RhTzJWMUcrU0J0VU10ZlY5YVRVK1lNMjFWYURzYkpBCjArZTBZaVl1VEtuSVpCR2ZjU1RhWHo4OHUvcU8vUFkzTUVkY3JLN2ZXcWovWUZxMGg0NlhISVU1Q0Z6L05PaXkKNVc0RTBRdldxdEtTdDF2RTJ4UU5DNFdSTzVrQUlrdzQ2cWduV1V2UC9CN092ZFVGR1JFRlhtK3laL3BjbDZETAp3elh5VWEwZ0JhL1JpVk5OU1ZHWmk4a1hLMGJ1WDRHUDdMcEd3emJ5SnJMYkhzSWYyTUc4K3AxeTRudHZjZnVQCm9iRWJGS0toUUNSV2EvM3FMSk0vdHVNNnpWQ1JmYW5sT1dTZFZKamlYUmpQOHQ4cjI5YVVJN2tqMFQ3aFExYUEKYWkrTTMvSGh5YjNRQUZXWkgvU0s2UWtqajNVYkE5TT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lRWXJnNURJaGJhbzU5QXc5RDRZR3J2ekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEF5V2hjTk1qWXhNVEl4TWpFMQpOVEF5V2pBUk1ROHdEUVlEVlFRREV3WnlaVzF2ZEdVd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3CmdnRUtBb0lCQVFDMmhoc1FqWDF3by9XeEtNTWZobER4LzFqWVNXeU1pQlRUMFFxaStUVGhMa0JiUkM3UTh5VXgKQUR2RVduaVNRRmlLaGtna3FTN0I2b1RqRW1pcUJ5S3hXYmZ0ajVOL3ZJNTRuNk9Vd2o1TEdDR3REWTVzcVJnQQpRSEwwMGtHRTVXVFQyZ1MxK056dzl3alVoMlh3cnY1dFFyN3R0OXB2UGgxa09YTlJFK1lvdGdnNStuMWNCR3I4Cm52a3dCcFVQajNQRjY1Vk1FZ1YyaGdKbjdkSTFobjFxdFdBcGVHVEJ6eTFjaEgyOS9XUjRKZkpMR3M2QXVpY04KNkwrZ3VGQmRQd3NtZmZsR2Jwd1BkM0c5K1hnd25YcXMraVFncy9QZGx3c0M2ZFRCVVNweDE3RWYxTUtJbDZLeQpXSTA5R2VVZE5ZTlBZVVd5cExSSHdaWGR6NDR5Um95ZEFnTUJBQUdqWURCZU1BNEdBMVVkRHdFQi93UUVBd0lGCm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWYKQmdOVkhTTUVHREFXZ0JSVVpNWkdaZnpDZHZZMXR2YmJ6RkpSOEJEbFp6QU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBWCtJN0xnNEFQY01lRE1DdUVVMW9ybmlSVEsyb0pIcXBBZDRuVU9MaFA3RFJ0ZENhcHNUNDZzOS9aZkQ0ClFGL3YxeU9HMklybFF3emdqeFhRelZ0MVkzZlNzcnBuUFNjSi8wT0U0TjZvWmwxL2xLMVRyVTVQSEVnM1BxY0YKZnRFVmdtWGoyaXp6aTdEM0NyaEljMWVKU1RUMWVBRVdFMXFvbnVNdjQwb1IrcWtsUzE3NlR5MituZlNsckYwbQpzdDR2azYveUoyWTBRWDU2cmx6NVBndTczZStxUk81cG9yMTBvU1o2NU9GTGduMWxSZDlxZi8zQnRadlNnZU80CnBQSVBnZjRNYVdjL0cxRkNJT1Zwd1VoeVZPTWY1YURoM3ZvaDB4c1duSU5ST0hEQythdXU3b3EvSmRqZ0g4L2UKS1BZV1RmcWs0TEtPaVRWc2YrNnRjMndubGc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdG9ZYkVJMTljS1Axc1NqREg0WlE4ZjlZMkVsc2pJZ1UwOUVLb3ZrMDRTNUFXMFF1CjBQTWxNUUE3eEZwNGtrQllpb1pJSktrdXdlcUU0eEpvcWdjaXNWbTM3WStUZjd5T2VKK2psTUkrU3hnaHJRMk8KYktrWUFFQnk5TkpCaE9WazA5b0V0ZmpjOFBjSTFJZGw4SzcrYlVLKzdiZmFiejRkWkRselVSUG1LTFlJT2ZwOQpYQVJxL0o3NU1BYVZENDl6eGV1VlRCSUZkb1lDWiszU05ZWjlhclZnS1hoa3djOHRYSVI5dmYxa2VDWHlTeHJPCmdMb25EZWkvb0xoUVhUOExKbjM1Um02Y0QzZHh2Zmw0TUoxNnJQb2tJTFB6M1pjTEF1blV3VkVxY2RleEg5VEMKaUplaXNsaU5QUm5sSFRXRFQyRkZzcVMwUjhHVjNjK09Na2FNblFJREFRQUJBb0lCQUdyYldEejRtTmU1SmIzeAovMG9WZUk0MHorN1FEWnk0am5qemlTYWdmelRWdnhldmN6a2hJRVR2dmczV2FZQTE2NkF0dlU2NVBZYUpwZ0xLClpEd21zVWpqSGFzV3cyT2xJRU8rTWlhRkViTWxEWklpdlo4ZjM4MUY3Z2Nta1BVYzEwcXYrTklRUUVsU1Z2a1YKeTdoOHVyZDh2QXF2K0ZIb0s0emhsWUdDQk4wUHQ5RjN0OEZEQ0c5cC8zNzdmcEkvWXlxV2tNdURnR3FTT2NYYwpUS2lwaUxJNXlQa09PTFRiQUl6eFV1MS9idGtQWjZBdHZZNHVsa1c5clphTGhKQ21NMmIvc1V3UDNac1VnczhyCm1rcjdRbEgweEJPY295QSs3S0dHVjlBUGJaUU5OS2lSUFptSi8zZXk1VHMrcDhXaFlQbktoY3NOQWhmUElVcXYKUWJ3TElJRUNnWUVBMHJZbnByLy9mYnp5aWNleWFFbmJ6WmZ4cDgvMW5nWGx2UTkwRkNDRFFyd1J4cnd0OGJUVApZL1JIakR3cThycWxuMW1IZkU5alJPWWRJU2x1Yi95Qlg5S3ZHTVpZb0ZLNmVhMjk4bXBmZkVvaDYrNGgxcTBuCkhLbzZ3WFlOTytUNVdKcllDTkRYbml1OEt3Y2U5R3dmbXE1VDd1akRBeTF4M3ZDTDdsN3I3aU1DZ1lFQTNjRC8KWnBBWTdwN0d6NlFsTi84bVlCVFM0c3VkZjYremRUbVZLWEgwbURwNDdkb0czSUUzTnF3RDc4NlFSN3FHRlkvYgp0MnlkVC9wbDI5S0EvcmpaWmcvSXZJMVEyUk5OaDd0ZlZFMTI2WlpjUEdsd09qOWVqUHQzWkxTeERVWE4yT2h4CnNFQll1Wkp4NmxZeHl0OGttTTdoVzhUWWJGSHNRNndJWmhvblpqOENnWUVBem1XVkUzWndTZmNCMEVvbkRKYUUKVXErcUMwbmQrb3NtVFhuTXAwWnRyTG5SNDh4Q2FNZEtaVmRMbWliNW5zZUxJanF0UnV2d2ZmVzF4Tnp6aTRoWQpKY2VXc2ZyZnB6TkI2NXh2T2Z4T1NjM0h5blY0K2ZLa0pDVHU1cisvR05NaUYxT2RsNDBTRjZJWmNFQktadnRlClBjTFMvbXRMVWxwNmR2bEM2QnhjbCtjQ2dZQTk1YUlraWJJNzROdlRsNWkvOFp0UGxHQnM1N0xWc2tCZ1J5dG8KZnlOcjNsNWszY2V1Z3U3YmR0WStlS1R6TUpBK3NvSDh4L2Q5SElLVUFrVDVWTFZ4OUpQdWRXK011QU9iRUdVQwpqZ0RVSUtFc1I2NEl4Q2xySnNIanZUL3lXWHFrd2ZVQjRtUWhvRXZsd2h0eDZpazM4ZjhiYzIySmhyQnhEekxrCjlRWHNWd0tCZ0RyZTJ3RjJMNm5HMis1bDk4bHRaSWVZUWY0OWVHT0J2a1JIVENYeDZ5b2xpVjJ3djJadHVyTGMKSlVqL28rcnVONTFNYW9KUXhaQWxWVG5paUR4ejNsWnJWckxVZm5EMjRxQ3JNTFF5VHQ1Q3NpclpueDZVc1VJVApXY3FrbmREeEIxUVFNU2xES0hUWXlieTVzaXZGeHFmZ1VtTWYzd2huQVVMVk5LSGRVSmxiCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRT3BtRy9TamRmdlhSekZnYTJTOXM2REFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEF5V2hjTk1qWXhNVEl4TWpFMQpOVEF5V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzFxaklocFlSSnVEYUgrSlBXUHJGd1J0RXU4NHEzbEgza0FHWWZidkh4V1BFdzEwM2gKNjh2Rmw3NVRLRlBEOWtWMHRZOGt6VlRFRE5yU1RsalAvaDdVeW5RVHh1SzJacnhScjVmOEdXQ21yMXpyd1lrRQpEUmlaenlPY1hIOEFVRzJSRWI2ZitUb1JLUkR6MFppWDhoQW9UczNTM3NXSnFXZlc1TEVNU0l1cjA1K3Q2Z1hmCkdVcEs1TlpTOVRhVkthNVlLcERpMXcrL3JnQmFubm55WlNwQUFRU1FhUHlITzZyQzl5UXBBZTNZT1M5UXBmcm4KV2lqZC9HSHhvS0lzWkp1YnZGaVNSbDRsSUlxWkFFbjNITVBUTTgrRGdxbzdxQm4vbCtUWXQxVkRiaTAzdmlTTgpzQ0UyYm5OQkxFRTFHM05wMk5JQ1lWNjBVYmFOUDQ0MmxnclRBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVWR1RHUm1YOHduYjJOYmIyMjh4U1VmQVE1V2N3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFKQURQLzlJc0JFTGRNYXRJTTVPQ0xYa2RhTzJWMUcrU0J0VU10ZlY5YVRVK1lNMjFWYURzYkpBCjArZTBZaVl1VEtuSVpCR2ZjU1RhWHo4OHUvcU8vUFkzTUVkY3JLN2ZXcWovWUZxMGg0NlhISVU1Q0Z6L05PaXkKNVc0RTBRdldxdEtTdDF2RTJ4UU5DNFdSTzVrQUlrdzQ2cWduV1V2UC9CN092ZFVGR1JFRlhtK3laL3BjbDZETAp3elh5VWEwZ0JhL1JpVk5OU1ZHWmk4a1hLMGJ1WDRHUDdMcEd3emJ5SnJMYkhzSWYyTUc4K3AxeTRudHZjZnVQCm9iRWJGS0toUUNSV2EvM3FMSk0vdHVNNnpWQ1JmYW5sT1dTZFZKamlYUmpQOHQ4cjI5YVVJN2tqMFQ3aFExYUEKYWkrTTMvSGh5YjNRQUZXWkgvU0s2UWtqajNVYkE5TT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURwekNDQW8rZ0F3SUJBZ0lRUEZWNU44ejlMcG5OTEpSanFnbHVIakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEF5V2hjTk1qWXhNVEl4TWpFMQpOVEF5V2pBcU1TZ3dKZ1lEVlFRREV4OWpiSFZ6ZEdWeWJXVnphQzFoY0dselpYSjJaWEl1WTJsc2FYVnRMbWx2Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBc1MvVElqWTFQREFEU3p0SjdIQUcKb21saHloSGczcjZrRXQ4ZDRyUmppSXNFd2kreEx3QklYUEFIdzVQMkhXeCtQNW0rRUV2cDhaeHZvVDVIdmdIcApWRFNBUjdjbzRrSmJqaUx6cWh1ZlZjTnlUYjdYT0JES0pBK1RiZjVOSzdYNUcrRU1NalRtTXZnK3FXYnhKL0wwClRickZYR09Wbk9QZ0lKaUoyZllCS3VWU0FPRnMwQVlYWUtGVW5MVHdndXZRbTFZak9kZEtkL2dHcXJkRHZrSksKb3hTTG53V2NFb2dJN1c4UU1UbnBhZHY5NnZhcUQvL29TWnQ5ekRGVG1RbHFCdUdISHJ6ZFdNNzdzOHBsLzg1YQpDYkIwMEFLTE53dzBkRmh4eEtOSUcwZEgyZE92MUo3Ums5ZDZxOGprdGZJK2ZkaVpieUNGVHBQd1BUNDdOUVMzCmlRSURBUUFCbzRIZU1JSGJNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0QKQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JSVVpNWkdaZnpDZHZZMQp0dmJiekZKUjhCRGxaekI3QmdOVkhSRUVkREJ5Z2g5amJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXVZMmxzCmFYVnRMbWx2Z2hBcUxtMWxjMmd1WTJsc2FYVnRMbWx2Z2lWamJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXUKYTNWaVpTMXplWE4wWlcwdWMzWmpod1IvQUFBQmh4QUFBQUFBQUFBQUFBQUFBQUFBQUFBQk1BMEdDU3FHU0liMwpEUUVCQ3dVQUE0SUJBUUJXdDJMVFR6YnlWWTV6amV4UzFQUkVOZGhmM01rRlQwQUxYeXdQWjJXQlBaUTdJcTRoCmdINEdXS3hpVlZoR2p3eXFjK0RQNzl4ckVnNUdGS0gwcGxCZVBzYTdXcGtyS0hpRFM5UU0vU2RYbnc0dXdCWVQKRmpUZERtV2RqMjI3b2V4YksrRHNuNUd3T3RVVFUzNlByaGcyOTdmZlB2R1dqcnpyOUNzVkZxcUJ4SjA1a2F2Vgo0VE1LaGQwdUcvdWhDSXRTMFdDaGhlQmJYWWF0ajBtUWlwV3c3M01nZzVHT0pTMWhRTjFISG0rdEU0MlVaeTNvCmgyQXNXVzhYWUwyQzVXUDVGdS9GYjlJdDdFOHhFc3gzdVRRSUpwTFVLaUpqYVdNS2hMTGt1Wkd3RnVXTWZYS0MKZ1dBaEFLaHpFTmdjRTlsbEdRaU5heGZINGtSdWEyOXRDcTVPCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBc1MvVElqWTFQREFEU3p0SjdIQUdvbWxoeWhIZzNyNmtFdDhkNHJSamlJc0V3aSt4Ckx3QklYUEFIdzVQMkhXeCtQNW0rRUV2cDhaeHZvVDVIdmdIcFZEU0FSN2NvNGtKYmppTHpxaHVmVmNOeVRiN1gKT0JES0pBK1RiZjVOSzdYNUcrRU1NalRtTXZnK3FXYnhKL0wwVGJyRlhHT1ZuT1BnSUppSjJmWUJLdVZTQU9GcwowQVlYWUtGVW5MVHdndXZRbTFZak9kZEtkL2dHcXJkRHZrSktveFNMbndXY0VvZ0k3VzhRTVRucGFkdjk2dmFxCkQvL29TWnQ5ekRGVG1RbHFCdUdISHJ6ZFdNNzdzOHBsLzg1YUNiQjAwQUtMTnd3MGRGaHh4S05JRzBkSDJkT3YKMUo3Ums5ZDZxOGprdGZJK2ZkaVpieUNGVHBQd1BUNDdOUVMzaVFJREFRQUJBb0lCQUJnUlRQYUtzblI0ZVJvUQo5WnVlSStpUHMrN0V1dXpHckhhN3c4MTFmMGVleW9pdC9iMUtwb21wT1FUQjVsNWN6RkZMU3R2ZjAra3p2SjRFClhhNWJpQndkL1liQVJGZG5lQlE0Znl5T0QvaVFVY2hwc2NZMTBaOVFWbEJNaUtMMVZ0OElsS1dGTmZlYWJMaUoKK1J2YURvRTRhM0ovUEdWUk5ySjJ4ZExMYmFFcnh5WFN4MlFZenlWMW5mUW1BRWVQckllbHQ3RHRKcmUwVU55eQp3dHBmL3d5NnI5QUd6WkNXclg3ZTdCQTJ5K3BSSGNUZnNVV2t2RFl0UHlYekcwQmNPOUJRK2xPQmIvYTl5V3pnCmRSWVMrWHlWNyt4T1RhdzlrY3M5K3VOSExTdis1ZE4xOUtjYVBQd011V2hUZ2hGRFNHeGVHTjhhNFlGZ2dGM3QKcXEvUWN3RUNnWUVBeWpUcHl0UzMvLy82cHlPMmd5R3N2Lzg3R2M0bis3YUg3ekRqTDhzVHdLR1B6WmJBTDdhUwo2eFpudmlZZXQzNHZsaTJBaWtEVXpSUmFucm10V0VRYU12WGJlaHJReDJZaytrbW5LQjQydmVGNTA5ZTlBWHZECjVRVEdQVzBLZ0RHSk5RM0swOC9HZ01NakszV3BJLzVETkxpTEEwZ3JPZjRxRTQ0MkJGV1RTakVDZ1lFQTRGTDEKSCtvbzVwalNTbjdyVWVaejZ5L2EzbkEwU3Y0V0xlQ3RKeTlSZDZOQ1BUdy9SK2wrempIR2lCTXc3cGlJelFaSwpoZ2hsVU5mci81ZHMvNmtteFE0OWVodVJWNUZNVHZ2RStiWGhBeEI1NkNxbC9kYkw1MnpSSDFBZU5BSURDZ3RkCmRnT2NqZytFN3Jwd3FsSnJFSFBZdk5OSDNsRENKN3FJdmppUEZOa0NnWUFoMWw3MVFVbVZQbW5jaEY1cmJUd3kKV095ejhjckJGWmVEMEdPRVFQQ0tRTDhHd1Y1aDNhU1NVSXFGeUcxRmVZbFBFVWc4V29NQjJwRWJsS2pNWjRFVwozQXVoVUZGMXZNTWRXeXZzeTdtUFp1YnpLMXdHbm9aMmthajI2SU5rVm1YR2lndFNES2dFTGlONWgxUUpvT2Z3Ckw1MmJxLzBIMUYrSUxEa2YybzR1VVFLQmdRQ2N3cHcxejBjQnptMjJUWGRZNW5pL005UDVlZU94UEZwM2VQakgKMTFOUkRhK3Vaem01b1R4U0Q0cXpjT1hTOXBreTNXQ2F4YWMzbFl5QU1tdWpSYXVvTFVsYzJZTDU5TG1rd0dCbwpPR2VqNHBHdVlvOVpFZyt3QytVZndyYzRsT2RXejVaaWNDZXBSc01ZcVFVdW9TWGNlM2hNakVFKzVLU3BhcnRBCll2bnFFUUtCZ0NCMFRYQng4elpHYjEzZXh1ZE03S3FRZSs3RGJWalJrMVdtdUpjQWtRSVV3YityMTZBb2FFZ3IKY1FpbTJWbUgrMDBaYndmUm1KNnhSNTIrMHVRQVhGazM5NGMvUmQrQVUyQXVCTUxrSTQyT0hVMzVZTTRsN0U5YwpkNlg0ZG5tYjl1ZlpJVjliY09QZXZLeHgyd1RCRDdsb2JPcVhpMEUrODNScmswa1JRem9HCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRT3BtRy9TamRmdlhSekZnYTJTOXM2REFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEF5V2hjTk1qWXhNVEl4TWpFMQpOVEF5V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzFxaklocFlSSnVEYUgrSlBXUHJGd1J0RXU4NHEzbEgza0FHWWZidkh4V1BFdzEwM2gKNjh2Rmw3NVRLRlBEOWtWMHRZOGt6VlRFRE5yU1RsalAvaDdVeW5RVHh1SzJacnhScjVmOEdXQ21yMXpyd1lrRQpEUmlaenlPY1hIOEFVRzJSRWI2ZitUb1JLUkR6MFppWDhoQW9UczNTM3NXSnFXZlc1TEVNU0l1cjA1K3Q2Z1hmCkdVcEs1TlpTOVRhVkthNVlLcERpMXcrL3JnQmFubm55WlNwQUFRU1FhUHlITzZyQzl5UXBBZTNZT1M5UXBmcm4KV2lqZC9HSHhvS0lzWkp1YnZGaVNSbDRsSUlxWkFFbjNITVBUTTgrRGdxbzdxQm4vbCtUWXQxVkRiaTAzdmlTTgpzQ0UyYm5OQkxFRTFHM05wMk5JQ1lWNjBVYmFOUDQ0MmxnclRBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVWR1RHUm1YOHduYjJOYmIyMjh4U1VmQVE1V2N3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFKQURQLzlJc0JFTGRNYXRJTTVPQ0xYa2RhTzJWMUcrU0J0VU10ZlY5YVRVK1lNMjFWYURzYkpBCjArZTBZaVl1VEtuSVpCR2ZjU1RhWHo4OHUvcU8vUFkzTUVkY3JLN2ZXcWovWUZxMGg0NlhISVU1Q0Z6L05PaXkKNVc0RTBRdldxdEtTdDF2RTJ4UU5DNFdSTzVrQUlrdzQ2cWduV1V2UC9CN092ZFVGR1JFRlhtK3laL3BjbDZETAp3elh5VWEwZ0JhL1JpVk5OU1ZHWmk4a1hLMGJ1WDRHUDdMcEd3emJ5SnJMYkhzSWYyTUc4K3AxeTRudHZjZnVQCm9iRWJGS0toUUNSV2EvM3FMSk0vdHVNNnpWQ1JmYW5sT1dTZFZKamlYUmpQOHQ4cjI5YVVJN2tqMFQ3aFExYUEKYWkrTTMvSGh5YjNRQUZXWkgvU0s2UWtqajNVYkE5TT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTRENDQWpDZ0F3SUJBZ0lRZHROeGdRWjBNaVhXU3l5REpxZ09DREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEF5V2hjTk1qWXhNVEl4TWpFMQpOVEF5V2pBak1TRXdId1lEVlFRRERCZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEVUpPdU5HbHNGSGp2czg2NFdXdDRCbnBzMXBhdHUKQ3c0K2IzRUhycnIyb2JMYlN5VXBuVHp0T05KNzZuQ2lZS0tWRklKb1l6VmtCRXVCNG0vOTI0ZDlhL0ZRVHVETwpkUThKd2NBM1F1MUtkcWRDUmJvTzArNWRDTHlKaWczNnFqKzVULzBhZ2oyWlpMT0NITTBxRXlSclBVSjhrYTZrCmFzRkh5U3Zla0h6SHlwRXdiNGQxZUk3NEpzK2pySEc2VFhHVS9YOTJFbnd2aUl0TXNmcG9hQnpvc1pDMzQwUUEKckxnb05xdWhUZFpSMXhySDdkWlZpd2VlcDRaN2tlUGU0QXhFdjViQjdzd3p1VEkxWVRkWDJUaVZENmhoMTdZVwpidlViL3FDbjRSM2pEaHdSdHlsSjUyQ0lpK1V6TFpLMEtXSVhYYjllQlBBSS9vOVZXR3pEcXlQdEFnTUJBQUdqCmdZWXdnWU13RGdZRFZSMFBBUUgvQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUYKQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUI4R0ExVWRJd1FZTUJhQUZGUmt4a1psL01KMjlqVzI5dHZNVWxIdwpFT1ZuTUNNR0ExVWRFUVFjTUJxQ0dDb3VhSFZpWW14bExYSmxiR0Y1TG1OcGJHbDFiUzVwYnpBTkJna3Foa2lHCjl3MEJBUXNGQUFPQ0FRRUFMK0ROZnZHNncxU0liQXpnT2VNTHU4M21DRUxxLzc5VW1wL2JtNHhLRzhhV2dzemQKaGc3bnl3aFJWWk1LMGJCVktuQksvTGRZSWsvVHBSOXRZdFVmRFBheDhVNi8xU3JUN1h1S09GbDhzMFgzSlRwZwp2YjM5OEg0Wm5VeFNJNWZPWDhGTU95c3VHcnI0Nkh3UU9vSzRJN01qL0c5bjgrMXZPNkM3Zmtybzc0anIyRUtHCjBmVm1XLzVtK3RGUnU5VWloRVIrdzFORk9lOFFPSVo0QTFYZm5Ha2ZVcjhuU0NVWGRLK3YwN0hQdUpJakNyTU4KeWtkcXdOS1FhOEdVNFk5OVkxVEVPWEEwVTFBLy9uRGl2blFDQlRTR2NPZDBjUS9ZOWwxb3BscGtWbzJTai9uOAp0ZXhDZHF2a1FaWWtDU1hqU0x5THl5VHhwcnloQ2x4NVlkTnhYZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMUNUcmpScGJCUjQ3N1BPdUZscmVBWjZiTmFXcmJnc09QbTl4QjY2NjlxR3kyMHNsCktaMDg3VGpTZStwd29tQ2lsUlNDYUdNMVpBUkxnZUp2L2R1SGZXdnhVRTdnem5VUENjSEFOMEx0U25hblFrVzYKRHRQdVhRaThpWW9OK3FvL3VVLzlHb0k5bVdTemdoek5LaE1rYXoxQ2ZKR3VwR3JCUjhrcjNwQjh4OHFSTUcrSApkWGlPK0NiUG82eHh1azF4bFAxL2RoSjhMNGlMVExINmFHZ2M2TEdRdCtORUFLeTRLRGFyb1UzV1VkY2F4KzNXClZZc0hucWVHZTVIajN1QU1STCtXd2U3TU03a3lOV0UzVjlrNGxRK29ZZGUyRm03MUcvNmdwK0VkNHc0Y0ViY3AKU2VkZ2lJdmxNeTJTdENsaUYxMi9YZ1R3Q1A2UFZWaHN3NnNqN1FJREFRQUJBb0lCQUNPUDFOU2dlR1dSUGVabwpxdVFnYzFxK0piS0doUWc3WGpYbEpJTnZMUFF2QXZaejBGVDdnTDBiYTExT1hYYzZ6OFpCMitKM3p2bG5KdWtzCjlpME40ZGFLZzdjOG9iNjZMTDByOTNiTUIwOFdPTStKTkxsTG1ZZUs4Vi8wL29ib2h5b2ZXSVJiRk14ajd4dCsKakgzakc1WEdmU0M0b3hmNHRWRzlUVmRQelRzSVVjNGhTZGJSQWxzaG5tcTJ1eGNpT1FzVDJyYTlwcHYrbE9CZApDWnVvZ21RNzUrVXYzcmd1RC8vbFpRUktjaFpKaXRXRGl6YmR0UDBTQlBJVUJSY1htNlZrQmNCM3RQM2Zub0RFCm9mR2ozZDg4S2YxTEl5OGdtK1E0VnFvUFdDTlVDaGJ0czducHlJeExpNVNlbURvQjZ5dFpZdWpCdXQ4Tm55bXkKRCtsdjFka0NnWUVBNVZNUWpleVdIMmgvZHdpU0F1TGQxdEVkRzh4aVlFSkpLb2tkMXpmVWhPNWtRQWl2eGlsYgo5d0tJVzZLaENxcVN5QlhYN0Zibkp5QTlCYWhURU5pNXdJSVZHRVBlaHRXM3pscXBEbGg5eTNqWHdJZERSSStCCjhUWTlvaFhLQkpwMVhwR0hPVHYxRDQyejhaMlJJRkdKWjFGZEVORnVHSVlpZ2pLR2xWVHVoUGNDZ1lFQTdOSkEKNmxiUHJHQ0piN2JPYk5jNERDdTgxYkRiUjc1VjNpZkg2b0NNTHE0a2xHQXFPQ3B3ckxCTU1Ddk5DWWNHWitCUApDTlptRlJlczloU2NBYkl5dU9LdzhnK1RoY2puRExIR0gvOFUrSjZHUkRERnZYeVZtNGV6T2JQczB0a2RLRytsCnZVT2xqQ3FFb0FTcWpHQnVYVndPbkZMSXo1SHlzam5jU2tkRXVUc0NnWUVBM2dnL3Bmb2tHOExVYnc2WU9EMHAKcHB5Ty8yUXk5NW9XTngzTkM1eWRvaHNpYXpFOTVySVN2YVR4R3kvcGxtY3llSkZWbnhsQTh3dnVxVFNoUUZWbAorN0syOCtoNllyZzRINDU5MGtyeGVQakdoRDB5YndZM1BMRlVtVU5aZG4yS0dBYjFFd0F2TkdEeGtZVUtoMjBLCmlVTW94V2pRbk9QNk0yN3lDVkhUSWw4Q2dZRUExN1FtVm92ZHVvZHZoMlo5bk50bS9JYjJCN2wvOFZmblJHTDkKajVXb21YZ2FiMThyOVY2S3BIQXI1UkJ3UUVaUlNsb2dBcyt0eVhaNEh1Zmt0UkxIYW1sb2ZBSTkvM1JmSnN2aAp4eEVDMi9VZ0hJcEVBZlN4SENtODBFa1c0M0hJUWlWM1UrMkNveW16QlVGYXltT25Bcmd2d3FrUXFTZXBaRGFaCmRMcDNXVE1DZ1lBa2hNcnVxSm9yNlBwekJtZUJ1OG1BVzVMd2lrRXJrc2N1U29xNWV3Wk9LWXJnd1JNYWdFV2cKSmc4ZXBDZmZOMWlqcWJrRklZRW9sK21md1JpSUY2dUVuTE00bTYxbk1hMWQzdmlVaENvdTUxVHRhUWJuN1NQZQphcjFNSmo5dG5RT0QrYW5sZEZlMHh2dmtraDdxZmNTZnowcmJ1MDd4UEdjbXUwTldaVHhEK1E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRT3BtRy9TamRmdlhSekZnYTJTOXM2REFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEF5V2hjTk1qWXhNVEl4TWpFMQpOVEF5V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzFxaklocFlSSnVEYUgrSlBXUHJGd1J0RXU4NHEzbEgza0FHWWZidkh4V1BFdzEwM2gKNjh2Rmw3NVRLRlBEOWtWMHRZOGt6VlRFRE5yU1RsalAvaDdVeW5RVHh1SzJacnhScjVmOEdXQ21yMXpyd1lrRQpEUmlaenlPY1hIOEFVRzJSRWI2ZitUb1JLUkR6MFppWDhoQW9UczNTM3NXSnFXZlc1TEVNU0l1cjA1K3Q2Z1hmCkdVcEs1TlpTOVRhVkthNVlLcERpMXcrL3JnQmFubm55WlNwQUFRU1FhUHlITzZyQzl5UXBBZTNZT1M5UXBmcm4KV2lqZC9HSHhvS0lzWkp1YnZGaVNSbDRsSUlxWkFFbjNITVBUTTgrRGdxbzdxQm4vbCtUWXQxVkRiaTAzdmlTTgpzQ0UyYm5OQkxFRTFHM05wMk5JQ1lWNjBVYmFOUDQ0MmxnclRBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVWR1RHUm1YOHduYjJOYmIyMjh4U1VmQVE1V2N3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFKQURQLzlJc0JFTGRNYXRJTTVPQ0xYa2RhTzJWMUcrU0J0VU10ZlY5YVRVK1lNMjFWYURzYkpBCjArZTBZaVl1VEtuSVpCR2ZjU1RhWHo4OHUvcU8vUFkzTUVkY3JLN2ZXcWovWUZxMGg0NlhISVU1Q0Z6L05PaXkKNVc0RTBRdldxdEtTdDF2RTJ4UU5DNFdSTzVrQUlrdzQ2cWduV1V2UC9CN092ZFVGR1JFRlhtK3laL3BjbDZETAp3elh5VWEwZ0JhL1JpVk5OU1ZHWmk4a1hLMGJ1WDRHUDdMcEd3emJ5SnJMYkhzSWYyTUc4K3AxeTRudHZjZnVQCm9iRWJGS0toUUNSV2EvM3FMSk0vdHVNNnpWQ1JmYW5sT1dTZFZKamlYUmpQOHQ4cjI5YVVJN2tqMFQ3aFExYUEKYWkrTTMvSGh5YjNRQUZXWkgvU0s2UWtqajNVYkE5TT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQVBMQXVGU0xtd1ZBOXBTd0tCMWFmQmd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV3TWxvWERUSTJNVEV5TVRJeApOVFV3TWxvd0pURWpNQ0VHQTFVRUF3d2FLaTVqTUM1b2RXSmliR1V0WjNKd1l5NWphV3hwZFcwdWFXOHdnZ0VpCk1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQysvWnBjSzhlMkNFR1lRNEtJMXJhWGI0ZlQKVXYvditWK2FYSWljUHBiVVp3VGFraU1Gb3VpZ0JSN0F6VjQ4YktrRW5kMEFLc05naVJwWEdVWEpuUlBNQ1VnSQprRVVzRHZmb011ajlwTStQN0x2VEFvRG1JemFaVzhOUWlNVnZqL2lORk8vU3BjYzd1RUtGM04zU3haYWxUNURFCkdzeXVkUldETEROZmxrdHc2WE5PcXYzTDRuRXhENzFWc3ZvUGN1VkVMaEdFRElNNUU3b1EzUllZTHJBNDhsZXEKQUlGLzA4Q2NrM3BsbGxleCs5T2FxOENhYllDNC9CRFczNXlhbWJqMnNjeGp6NUkyU2svdm1ZL3BoRkJGb0xwcwpHVW9XenUyVjFla0lYUWFKZkVya2Fsckh5bk96R2dFRmxTTUpEZmNzNFhtNnhqcU96TWtaVEFhbS9yVDFBZ01CCkFBR2pnWWd3Z1lVd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGRlJreGtabC9NSjI5alcyOXR2TQpVbEh3RU9Wbk1DVUdBMVVkRVFRZU1CeUNHaW91WXpBdWFIVmlZbXhsTFdkeWNHTXVZMmxzYVhWdExtbHZNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFDbTh0K3FHOHY4a1I4c2tsZ0o3TVM4bFl4dGFsWjdWRWxDdzg3WDNoQTQKeUFCa1dNTGc4RGlmdE5zcjc4R3QrK0tWTWRWbXI4ckhneFg3YWpqbGd3alZMMXFGS0FGbXJuNFQrdFE0L284WAo2R0luY2poREYwVWludk1oTmgvalVpd3pxeHpiRkFBbllNeGtSUm1vYzhMSVRZdis1d0RPMHdsQnhJMFZaQ3kvCm94aFk3TEJ0WTFsMktvOU5jWXlhek4vbjF3V2hMRWl2cHdwK0VRYXdrQUpJVGkwV0ZqTWFPWXVNWXFQbWpQQ3IKWlBtbVdCbnl5eHNJTk90cy9qVHBmRlBsUzlxQ1BuVHdWdHhCWlQxWmdZQklyQ1BadmNVTFFKaUM5QnVsRFZLWgpsajhBK09IbWRwZVMzUjR1bGZVTG9OSkxUUEdncm5GQUlSSUFYc0EyeDVldAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdnYyYVhDdkh0Z2hCbUVPQ2lOYTJsMitIMDFMLzcvbGZtbHlJbkQ2VzFHY0UycElqCkJhTG9vQVVld00xZVBHeXBCSjNkQUNyRFlJa2FWeGxGeVowVHpBbElDSkJGTEE3MzZETG8vYVRQait5NzB3S0EKNWlNMm1WdkRVSWpGYjQvNGpSVHYwcVhITzdoQ2hkemQwc1dXcFUrUXhCck1yblVWZ3l3elg1WkxjT2x6VHFyOQp5K0p4TVErOVZiTDZEM0xsUkM0UmhBeURPUk82RU4wV0dDNndPUEpYcWdDQmY5UEFuSk42WlpaWHNmdlRtcXZBCm1tMkF1UHdRMXQrY21wbTQ5ckhNWTgrU05rcFA3NW1QNllSUVJhQzZiQmxLRnM3dGxkWHBDRjBHaVh4SzVHcGEKeDhwenN4b0JCWlVqQ1EzM0xPRjV1c1k2anN6SkdVd0dwdjYwOVFJREFRQUJBb0lCQUMyMXVtelcyWXhhZTRCNgpuOUlxT1RjVExWbkpZcEhIaURjRWNIbWNqVEsybVRYS2hmRkNaUlJ2UlVYMW9Oa3JWR1JUZCtJaldmRlB2dXNiCmxGVkZiOGlFYkNZSWlWV2JHNEFLTnpNRmI5dk5WOEtQdGRQZWw2R3FrWnREc0tVYnV1dmhGK2k5WG1xUGxmUTkKd1NWQnZ1VS9uckVnak40d0RYOEFaQ2M3YkVEUVkrZWg4NHh5SUpzZGM2MHI3SDlzSk1PekZPd3daanFPclpWcAp0elJ2WjkzTTNJaldub3VKdC8zOVZqcXZtM211b0pzdmw4cnpQMFNUUjRGdm0xT2JSV0xrK29Pek5Cd0tZcURLCmhQWjZ5cGUzMUlSeEV1Njl0Z1lndHd1RVpzbXlRMkZMUVZiZFRjbWpURjlSQ2lxWFRNVXlIQms3VmphWU9DUXQKZUZ6SWFMMENnWUVBK3JlZmlEQ2RoamxkY2d1ektWQzZpakNsS2RSSDZteXRQV09oYnpjK3g1RWI0MmdsN3VBcQpvbmd5ZzQ2aWxQaFpvdjZXV1VmUmRaaVRjUnRORmdxeWx2bUEyTEZvZDZuMWg2SXI1clNPUEh1RFRVZEFYWjNqClk0N2pyTTY4V1NLOUU1UVQwTGVjc25TR3RpVkRTaGY1eWlsQlUrbHoyQTNWL2VGVC8yZ0tkL01DZ1lFQXd3UFAKKzBXT0RZZzh0L3FhUU5GaG10aW1Zek8wVFNaWlE3S01nNUs3VVFzZjhZK2JLSHZJTTRMd2JOTitwd29ZbEgvUAowMzNZRmdnNlZkbklBN1huelZQZUtkczE3aitEMDI1RHMrNFU3R1hZbko1RXRDSlhYSmRZWXpxeWs2MW1zQjE4Cm0wdnJyT3ppdnBuSjNkZ1pmWjM2Y3VYUWRiTGlTRC8wMGd6ekFYY0NnWUVBK2JnRFVpYjUvME1MN0JmekwyZVYKSlNjbW11OHhZakUwckR5Y0FxWklCWVptL0s0emVpWVUwUlpmV2VHcjFpMDNPcjNSQ3NRWndNTmp0L2kxWXdycwpycXQ4eGxpTjhRSjc1OGlEYVpyVlFURFVxeGdZNkNYbTRyYmoxcTlqc25TRFZ3amFZNzArZWhET1RJWDQ2OGZOCnFLcEd3MGwzZE83ekFaaDVqWjhYTGprQ2dZRUF1dm1GeUdHbzBCcW1OTE5HZ0EwQWF3bDdoak9GbEU3SFdSdncKa3huMUZMLzQwWThoY1ZBMDVBYVA0NWRub0ZvU3RSWlNPWEUzNCsvaGxueG13Ly85anFUeHBlbnlMRXFqWnUwYQpab0pIZDF3eXNmOGcyaUR1NSt5SHB5UVpJWFFvdDRTZCt2dHdxK3kzZlkxUHVhNit5ZXpVdXFMVEduWDNkTlExCk04dU1sZ01DZ1lBeFRJRndRS1VIM0hvSFVKMEVlTEJsL2JWUTNvNmlEazdjbktLQzYzUDY5WnJnMkZTNFZwbkcKd2lMdWszWGdZY3M3RndRZWd5L09kcW5NODV2VWRsQkl2RHQ4cDZmMHJIMW9RYVBpcWdFUkxOYmJGNVo4SVpLcgorbHFockZSTEtXcUVid3ZwbG5kQzROUEVBb2RON1RhZjdQVXlyWDJYdXljRG1uelRVa2lxR2c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  skip-cnp-status-startup-clean: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: c0
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "10"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  # Default case
  routing-mode: "tunnel"
  tunnel-protocol: "vxlan"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-wireguard: "true"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-local-redirect-policy: "false"

  kube-proxy-replacement: "false"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  enable-host-port: "false"
  enable-external-ips: "false"
  enable-node-port: "false"
  enable-health-check-nodeport: "true"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  ipam-cilium-node-update-rate: "15s"
  cluster-pool-ipv4-cidr: "10.0.0.0/17"
  cluster-pool-ipv4-mask-size: "24"
  disable-cnp-status-updates: "true"
  cnp-node-status-gc-interval: "0s"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "true"
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"
  k8s-client-qps: "5"
  k8s-client-burst: "10"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-connect-timeout: "2"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"

  external-envoy-proxy: "false"
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: c0
    peer-service: "hubble-peer.kube-system.svc.cluster.local:443"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-hubble-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-hubble-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumendpoints
  - ciliumidentities
  verbs:
  - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumexternalworkloads/status
  - ciliumnodes
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumendpoints/status
  verbs:
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumexternalworkloads
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: kvmesh-metrics
    port: 9964
    protocol: TCP
    targetPort: kvmesh-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: NodePort
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
    nodePort: 32379
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-agent: "unconfined"
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: "unconfined"
        container.apparmor.security.beta.kubernetes.io/mount-cgroup: "unconfined"
        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: "unconfined"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        lifecycle:
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - CHOWN
              - KILL
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
              - DAC_OVERRIDE
              - FOWNER
              - SETGID
              - SETUID
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Unprivileged containers need to mount /proc/sys/net from the host
        # to have write access
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        # Unprivileged containers need to mount /proc/sys/kernel from the host
        # to have write access
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Unprivileged containers can't set mount propagation to bidirectional
          # in this case we will mount the bpf fs from an init container that
          # is privileged and set the mount propagation from host to container
          # in Cilium.
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - cilium
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      # Mount the bpf fs if it is not mounted. We will perform this task
      # from a privileged container because the mount propagation bidirectional
      # only works from privileged containers.
      - name: mount-bpf-fs
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        args:
        - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
        command:
        - /bin/bash
        - -c
        - --
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
            drop:
              - ALL
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        resources:
          requests:
            cpu: 100m
            memory: 100Mi # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
      - name: host-proc-sys-net
        hostPath:
          path: /proc/sys/net
          type: Directory
      - name: host-proc-sys-kernel
        hostPath:
          path: /proc/sys/kernel
          type: Directory
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              - key: ca.crt
                path: client-ca.crt
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.14.2@sha256:52f70250dea22e506959439a7c4ea31b10fe8375db62f5c27ab746e3a2af866d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      initContainers:
      - name: etcd-init
        image: "quay.io/coreos/etcd:v3.5.4@sha256:795d8660c48c439a7c3764c2330ed9222ab5db5bb524d8d0607cac76f7ba82a3"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
        - |
          rm -rf /var/run/etcd/*;
          /usr/local/bin/etcd --data-dir=/var/run/etcd --name=clustermesh-apiserver --listen-client-urls=http://127.0.0.1:2379 --advertise-client-urls=http://127.0.0.1:2379 --initial-cluster-token=clustermesh-apiserver --initial-cluster-state=new --auto-compaction-retention=1 &

          # The following key needs to be created before that the cilium agents
          # have the possibility of connecting to etcd.
          etcdctl put cilium/.has-cluster-config true

          etcdctl user add root --no-password;
          etcdctl user grant-role root root;
          etcdctl user add admin-c0 --no-password;
          etcdctl user grant-role admin-c0 root;
          etcdctl user add externalworkload --no-password;
          etcdctl role add externalworkload;
          etcdctl role grant-permission externalworkload --from-key read '';
          etcdctl role grant-permission externalworkload readwrite --prefix cilium/state/noderegister/v1/;
          etcdctl role grant-permission externalworkload readwrite --prefix cilium/.initlock/;
          etcdctl user grant-role externalworkload externalworkload;
          etcdctl user add remote --no-password;
          etcdctl role add remote;
          etcdctl role grant-permission remote --from-key read '';
          etcdctl user grant-role remote remote;
          etcdctl auth enable;
          exit
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        image: "quay.io/coreos/etcd:v3.5.4@sha256:795d8660c48c439a7c3764c2330ed9222ab5db5bb524d8d0607cac76f7ba82a3"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/local/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=clustermesh-apiserver
        - --auto-compaction-retention=1
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.14.2@sha256:0650beac6633a483261640b6539c9609f5a761f4ab4504fd1e6ffe7f2bb82e9a"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt
        - etcd.config=/var/lib/cilium/etcd-config.yaml
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: IDENTITY_ALLOCATION_MODE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: identity-allocation-mode
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        ports:
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir: {}
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "clustermesh-apiserver"
      serviceAccountName: "clustermesh-apiserver"
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: clustermesh-apiserver
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.14.2@sha256:a89030b31f333e8fb1c10d2473250399a1a537c27d022cd8becc1a65d1bef1d6"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            tcpSocket:
              port: grpc
          livenessProbe:
            tcpSocket:
              port: grpc
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          - name: tls
            mountPath: /var/lib/hubble-relay/tls
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Always
      priorityClassName: 
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      priorityClassName: 
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.12.0@sha256:1c876cfa1d5e35bc91e1025c9314f922041592a88b03313c22c1f97a5d2ba88f"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.12.0@sha256:8a79a1aad4fc9c2aa2b3e4379af0af872a89fcec9d99e117188190671c66fc2e"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
---
# Source: cilium/templates/cilium-secrets-namespace.yaml
# Only create the namespace if it's different from Ingress secret namespace or Ingress is not enabled.

# Only create the namespace if it's different from Ingress and Gateway API secret namespaces (if enabled).
