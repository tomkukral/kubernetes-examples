---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRUHVqQ0pTTk80b2RkRlBmSXFJUU9WekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOekU1V2hjTk1qY3dOakV4TVRreQpOekU1V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ29yOElMcUZBQ1p1S0I0LzdaRFVBc0d4YW1PZmRETmFEb1hIbmpDUDVqK0RqdlMzejgKRmlncG1xTXdpRlVhK0VUQ0JKcUdseWVKRnF5ZEhIL1pYdW51b3A0WUFlSXR2SmVadi9ybXhsSzJUQWNiVWVpNApETmZ4MjBkSVBmajhyS3FGWkRoOWRNenhueEJ5cTdOM2ZNRlU2MEpWbWxHaWhBZXp6bytYZW8ybENtYStORmVWClo5b0IyWHBEU29udUdCc0VxMFhGUW5iMS85SThnYjhHVHBxcWVYbURSOVBTbXFDYUJLRElHbzU3U0FpSGVMRGkKVXNFYWtHc2YxcGQyUmROOVpRQlE0N29wWU0zK2o2VWdPcnJ4eGhoTmFWM0c0Y1RtSnVlZS90UHdOUnplUXAwagpLREcwZm1FcHU2Rjd6NHdZMndGeDBtc3ZkbE9SSXUydGNGOHBBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVJZEdqaXA1WEJtL1pkTXl1WmVNK0I3eWlNOGt3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFFcW4xeTFxejBaTkZaOEFtcDZGZmtmcE5kUTk4aWliVDdFeUVDUjJGakdDT1I2Qm1meGRkQ3hVCjI1aUJtNEQ0WkVYUSt5OUwvdzBUaXVoMTM1QlVkWTgxMzFNS0grOExNbDl2b3drLzltMDlYZzNNOHBtZkNDRkkKRFNSay9za2lmblhzL0J1QmNBNHlVOFRha2NwS3FlWGR1ays1MEZ1YXZhcmR4bU5lZ0hPaVJPcVdDcDdMT0IwTQowUjBFZVVOSGhQWVhzN1dubnRPZ2p6VFI1bW93dEVzMWZPbWk3K1MzbUhLbTZ6aWF3ejk0K1ozY1RsMm5DS0tJCmljNkpxMnB5U0VQNWcvbE1tQjl4NVhiajQzaHVVQzRHeE1RWUFaVXpSTUJ2VWdXZG8zRldkUHhScUF1NFU0SnIKN3VLL0xCb3hmaTEwU1c0aXhoa3RKTDJoWW9TMFp2Zz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcUsvQ0M2aFFBbWJpZ2VQKzJRMUFMQnNXcGpuM1F6V2c2Rng1NHdqK1kvZzQ3MHQ4Ci9CWW9LWnFqTUloVkd2aEV3Z1NhaHBjbmlSYXNuUngvMlY3cDdxS2VHQUhpTGJ5WG1iLzY1c1pTdGt3SEcxSG8KdUF6WDhkdEhTRDM0L0t5cWhXUTRmWFRNOFo4UWNxdXpkM3pCVk90Q1ZacFJvb1FIczg2UGwzcU5wUXBtdmpSWApsV2ZhQWRsNlEwcUo3aGdiQkt0RnhVSjI5Zi9TUElHL0JrNmFxbmw1ZzBmVDBwcWdtZ1NneUJxT2UwZ0loM2l3CjRsTEJHcEJySDlhWGRrWFRmV1VBVU9PNktXRE4vbytsSURxNjhjWVlUV2xkeHVIRTVpYm5udjdUOERVYzNrS2QKSXlneHRINWhLYnVoZTgrTUdOc0JjZEpyTDNaVGtTTHRyWEJmS1FJREFRQUJBb0lCQUFxQkQxTk1ndGJ6Y3kxbApkaXdyOEJBUEM4VUVIUXFaWDFDNDJYb3l5Q3lQZTNRalBrQXdYUVhpTkVGRWJCQkczM2s1Y2lucFpiUGFycHNGCitFd2Y1ZTlQUHdyOXF3andFbnluZ01jNEdGUnp2WW1NK3pIaTB0dWpyUGVwckVTSHVBS2djQWdYNnQ4czZZaEsKZXQxNDdrME1iVkFKVVFZT3RMQVVyOHBkL2s0Rmt0bnNJWTR6ZGpNZGFlVDNvYVNkbUFaZGU0aE1wUnB6VjZkMgpiam81T1hjd291UU9BK3FRTHBwN3BuR01UNnlEd0N2cmVWcEdQbjFRZEhLMi9ZZ1ZqTEl5RTVZamxmN2pNcWJDCnZYVzBab29XaEMzdHZXRVVZNEhRWVdhS1pIVEE0ZTFrRFRGZkhpTjFCUHd1NHViRWJUQ0Z5U2J3RFhvUlk3bDUKT0RyVytaRUNnWUVBM2pmMGhsUmpLSHd6T0dHcHpEU0p1U202RUVqNm5ucmJrejVVVWN4WnhudjJWNmZ2RFE5WQphYlJSdDM5UlZhRUxITTl6MkE5SkZlZ2ZucG5NYWV2UTNyUDVHL20rWlU2aUxOM01WeVNnSDVKbkVUMndNNm1KCk5yTlFSNXZwbHV5NWFaTGlOaUYwYmFsRXRBMFNrcytRZGhLVUVmdHp1bVdNVVR2OXkrWDZ2eTBDZ1lFQXdsU0IKZHljOFB6RTlUMWduY2o3WGpETkw3Q3NJMXZneVdvc2dOY3VHRVZFeUJJVEpJSTR1NGh1Uld3QTVIalFLVVV5Rgp2VTFDdEhJdGNTMndWVjZhaTRyVTJqbzNjN0FUaUJuMnFwdFNrL0NXUnBRbW04ck80Ny9Na3loTGIrRFZ6Tjc3CkhyY282YlZXb1M0N2xyRk9sVDViNkZRYlN2aUgyYUV0VGpBa2ZXMENnWUVBeHZwOXB3YkxIMFpQS3U0d2Q1eVgKc2NoT1JpVEMzTU9QOThHNUNPR2RoYUFjVGhNZWQ2aEU5Nm14L2tndjBTZjU1bHRRRktoalBnMXl1clptbG5YRQp1cFdXdXRrZkJtR3B6OWp2RHh6SmtGdXNsSUNUVlQ4NmtWTncwQjRveEs3RnUyWDl6cENZUzFWbElvQU9JSTFoCmdvaFNNK1BmbFlrMllzc0FEK0tuYXlVQ2dZQlV2NC9haS9UZFJqY0x0RkUzcEtwU0RVanVEUEtFOWFiWUQ5YVQKUDFnUGswNXg1QXJtdEx0RGhteEV1SHN3YmRlV0R2NUFTVUp1K1dCUi9HL3JPeC9BL1dISWJoMGl5Y1lxMDgvYwpKWExFNitaTmoyeXJBcTVwYW9yb0htbVB1QWpsbU5VQlZ6Vnpmczd4NmZ5NHdraVlFNkwzVmo2MDJtQThpK3I3CkwwbXFuUUtCZ0hYVkpJaHJtWVZnRm5vaDNrM0MvZDErb1RtNjdPaCtEL3R5aW13VmZTeUFRekM2TDBxU2hyTmkKNXF5akk1bGJKUmxBVTk4LzB4azhPbVZMSW14M3doamxyZVJZMndoZmprVXMrWktXcHN4TGJuUmlYU3JMVFhMego1QUh2VFRHN2tLSHM2YmRGS3R3MjBPUTlsN1QrUDQyWnlmU3hzWUZJejFDQ3BhY3k5YUxkCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRUHVqQ0pTTk80b2RkRlBmSXFJUU9WekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOekU1V2hjTk1qY3dOakV4TVRreQpOekU1V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ29yOElMcUZBQ1p1S0I0LzdaRFVBc0d4YW1PZmRETmFEb1hIbmpDUDVqK0RqdlMzejgKRmlncG1xTXdpRlVhK0VUQ0JKcUdseWVKRnF5ZEhIL1pYdW51b3A0WUFlSXR2SmVadi9ybXhsSzJUQWNiVWVpNApETmZ4MjBkSVBmajhyS3FGWkRoOWRNenhueEJ5cTdOM2ZNRlU2MEpWbWxHaWhBZXp6bytYZW8ybENtYStORmVWClo5b0IyWHBEU29udUdCc0VxMFhGUW5iMS85SThnYjhHVHBxcWVYbURSOVBTbXFDYUJLRElHbzU3U0FpSGVMRGkKVXNFYWtHc2YxcGQyUmROOVpRQlE0N29wWU0zK2o2VWdPcnJ4eGhoTmFWM0c0Y1RtSnVlZS90UHdOUnplUXAwagpLREcwZm1FcHU2Rjd6NHdZMndGeDBtc3ZkbE9SSXUydGNGOHBBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVJZEdqaXA1WEJtL1pkTXl1WmVNK0I3eWlNOGt3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFFcW4xeTFxejBaTkZaOEFtcDZGZmtmcE5kUTk4aWliVDdFeUVDUjJGakdDT1I2Qm1meGRkQ3hVCjI1aUJtNEQ0WkVYUSt5OUwvdzBUaXVoMTM1QlVkWTgxMzFNS0grOExNbDl2b3drLzltMDlYZzNNOHBtZkNDRkkKRFNSay9za2lmblhzL0J1QmNBNHlVOFRha2NwS3FlWGR1ays1MEZ1YXZhcmR4bU5lZ0hPaVJPcVdDcDdMT0IwTQowUjBFZVVOSGhQWVhzN1dubnRPZ2p6VFI1bW93dEVzMWZPbWk3K1MzbUhLbTZ6aWF3ejk0K1ozY1RsMm5DS0tJCmljNkpxMnB5U0VQNWcvbE1tQjl4NVhiajQzaHVVQzRHeE1RWUFaVXpSTUJ2VWdXZG8zRldkUHhScUF1NFU0SnIKN3VLL0xCb3hmaTEwU1c0aXhoa3RKTDJoWW9TMFp2Zz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKekNDQWcrZ0F3SUJBZ0lRUTd4VlJoRnBzdjZmOUJNMERnRks4ekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOekl3V2hjTk1qY3dOakV4TVRreQpOekl3V2pBVE1SRXdEd1lEVlFRREV3aGhaRzFwYmkxak1EQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQCkFEQ0NBUW9DZ2dFQkFMY1pSQ0tvUmhwVmNJL1hYUzVZM1hBODlGTU8vUDNabWlZT1JNTFI5K1gyL1dkdmI1NE4Kck00ODFiTXNWbVVRWDk1MXIwUC9uWE43RnE4TlhqOVJGeklIR0hobG9iTkl5S0RVaGNCMFgzaGYwTHdoYzVOZwpWdTBLcTAxbm9sd0UzR1NBWmdIcUc1QUNzSGRWSGFZaGpxV0lPR2dhYXBzYmNENkJ1VkZiSDJsL1FRaDlVVVJtCnpZME1PQThTL0p6QkVNdFB2eVQxbmZlenpqcDRiZWQzdlRlTjBVLzcyRzVmVzRCSUg1S01XWTZFbFk0bXpla3EKV0x4WGdCVXRJa05sMEtKWDdyZkVjcnRIbXZRU2l3QUtDWFZqNWFYYW9PNm0zT0NpRkhBRS82ZmxwVXY0eUhlTwpPcUZJcnhxOVIzNGRCa1JWdE4wRzlMV2wwU2dXMllKdThDa0NBd0VBQWFOMk1IUXdEZ1lEVlIwUEFRSC9CQVFECkFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUEKTUI4R0ExVWRJd1FZTUJhQUZDSFJvNHFlVndadjJYVE1ybVhqUGdlOG9qUEpNQlFHQTFVZEVRUU5NQXVDQ1d4dgpZMkZzYUc5emREQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFscm5JOXNoY0NIMERqNk40MXRQOE91TmcvdTNTCnlTS2EzNEVmNU5aNjVkeXc4eWhMOHgrUkpETFM4Q0VVdExyWkJuL3U3Wm9GY3crT29nNDJWVTd2bC9QQytjQXUKbzRkVVljd1RxNCtKTCtod3BNc3drcGJRU1RKd29wZHZVZUxLcVB0ZzZLTkQ2U3RXNmZOeFRSRlZ4eXBIM1J6SApiMnJha0dDdEFpeVhzZ2hvenVzYVpESk83NkcwM1FJb2lRc3N4V214Vmg1SXY5dkRTVjlaeTlFbld3Z0ZDU21jClJlcGlCZlNmTWQ4aGZBbUNNaUVUaFJSaitiSkRiMjQyQXQrWDVWbUJhZks5NjlIclc5a1EzQWdoQUtpcE9pOUQKbWFsK2VZYmFoVjZUdlFaL01vWmZha3JyUDBiMFNlR0hXOTY2VHkzOWpFS2c3NWt2anJvOWVrTGt4Zz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdHhsRUlxaEdHbFZ3ajlkZExsamRjRHowVXc3OC9kbWFKZzVFd3RIMzVmYjlaMjl2Cm5nMnN6anpWc3l4V1pSQmYzbld2US8rZGMzc1dydzFlUDFFWE1nY1llR1doczBqSW9OU0Z3SFJmZUYvUXZDRnoKazJCVzdRcXJUV2VpWEFUY1pJQm1BZW9ia0FLd2QxVWRwaUdPcFlnNGFCcHFteHR3UG9HNVVWc2ZhWDlCQ0gxUgpSR2JOalF3NER4TDhuTUVReTArL0pQV2Q5N1BPT25odDUzZTlONDNSVC92WWJsOWJnRWdma294WmpvU1ZqaWJOCjZTcFl2RmVBRlMwaVEyWFFvbGZ1dDhSeXUwZWE5QktMQUFvSmRXUGxwZHFnN3FiYzRLSVVjQVQvcCtXbFMvakkKZDQ0Nm9VaXZHcjFIZmgwR1JGVzAzUWIwdGFYUktCYlpnbTd3S1FJREFRQUJBb0lCQUZLbnZFTnM5V0NUNjJGegoxbVBDeUF3UDZEZktqMWpGTDdvNFBNQTU2dy9NSk83WnRtaUNRZDFFUnpCQU5xd2U3VGhPcGhVclFsZk1YQndnCkM4akhnWklhOCtmOThUWXZDQ3JhWlpyUXJmeDRQSkdCQkZ5bVkvZFVGcXExdXV5UllUQ1phZk01VE1JQkJNcUsKQ1AxakxyTDVRSVYyVDJPL3lqYmRkdHdNSjYwR2VsY3NqbTlBRzRpUTRvczMxWW5jR2NJZlE5WDB3ZWFSVnV2aApNdFcyUzBsbnc1WmpWR0YvUFZOaW0yNTZ5Q0YwSkF2OTJvLzltZUJFSzhlWGhKdjhwcFhxNHZNdTZCR3pIZmN4ClhLNUYzMTIwMGZIL0QyRWdoRlZOU0dic29maWUxbGFNVUNVU2pBVjRNVGVZSG1xZjlqSWZwNHR1OEg5ck85Q3EKL044WWhVVUNnWUVBeWo0QVVoZE9SQ25ubEJPTjBJc096K3hlRW0zRng1Qm9CUlN5c2RQZnRpTk1ITSt1MGdlSAo0d1BRakoySnZwM3NvcE1Nd0ZIME1uS3AwamNVVE9EZkIxaDhLYWZSdVRmekpHT2xvN01iYi9FaE1DZGlkZXNHClAzd0tmRStUTzV1blVMVUtEc3VxemFJMml2ZkZTeXZwd2xycEdvZHVqdUNFSnhCVUNkRTdjVnNDZ1lFQTU4U2EKNTdHSTFEWi9uaHN2NFp6SGxpQ1Y4Ky9RMnJvcUFBTzR2N3FZcHBNT3ltc0JxTG01UmVtWFVLRjlQNEJOQURvKwphc0FseWE4bTgzZEpxUzVKTUdTazZTTGRhekJzY1k5ZDdSd2Z4eXBBQjQrY2E4V1lQa3d6M0tndktoQ2RhMEhYCmM0YlFFNmRWL2dmTnpVKzJxL3NxQys0OVFZZXIvNXBhc1g0TXQ4c0NnWUFRbUpucUlxTjNrSURDZEFCVk5yUVcKZCswWVVnM0MzS1RNbGZBOEM0ajJKMXRkbWVWY3N1V0J5WlJabGF2eUNuK2FyN3FDSmJlR1ZFWi9TNm5NelQ5QQpHUkRIVWxBeGhOZmRDcGhUSUtXRndDSGJFOEJPc09Tb1hRTjNSQWh2QWN6dklJd2N2clhiZmc0L3hTbFppOWI0CjdnRG0vbW9pSzJaczFqZ3ZQZzVFdFFLQmdRRFdDVWZ4RHBCSlFxY3FjUHNRQk1TQkRVak9SVHVBczRuVUI1dlgKWEZCYkROWU04ek5PQ1c1amRTeXJadWVPL0VLZ0lpbkFWZ0RQdC9SbHhWVCthMk5sMEp4SFBVNTBEZjBvQm5sOApYb3V1VjROWU9EVUJoakpwM2QvTE9IcU9BMWdOVkhuUEU4SVhWR0xpdlh3K3pnM3AxNExtRDdiOFRIbjREQ2tUClgxQUpid0tCZ0hYUDNQK2IyTDh2WmN3a3M0aGQyUVUvV1pjTE1nemhSWmJaYjhucFFtWjdONkx5WmdCWk5EZzkKNlhweDJDVVU2ZmhwSGkxS041VnZMYXBuR21FMlNtcVNLb0wzSjdBSnp4N2pyaVd3bkNCOUp5THkxNHlNOGxWRQo0OFY5VFNzMmZpUi95Ymd6VXd5VmptOFpDalA3ZWVXSjIxbGo2VmM5SUI4ZjRMU0JRSy9oCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRUHVqQ0pTTk80b2RkRlBmSXFJUU9WekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOekU1V2hjTk1qY3dOakV4TVRreQpOekU1V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ29yOElMcUZBQ1p1S0I0LzdaRFVBc0d4YW1PZmRETmFEb1hIbmpDUDVqK0RqdlMzejgKRmlncG1xTXdpRlVhK0VUQ0JKcUdseWVKRnF5ZEhIL1pYdW51b3A0WUFlSXR2SmVadi9ybXhsSzJUQWNiVWVpNApETmZ4MjBkSVBmajhyS3FGWkRoOWRNenhueEJ5cTdOM2ZNRlU2MEpWbWxHaWhBZXp6bytYZW8ybENtYStORmVWClo5b0IyWHBEU29udUdCc0VxMFhGUW5iMS85SThnYjhHVHBxcWVYbURSOVBTbXFDYUJLRElHbzU3U0FpSGVMRGkKVXNFYWtHc2YxcGQyUmROOVpRQlE0N29wWU0zK2o2VWdPcnJ4eGhoTmFWM0c0Y1RtSnVlZS90UHdOUnplUXAwagpLREcwZm1FcHU2Rjd6NHdZMndGeDBtc3ZkbE9SSXUydGNGOHBBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVJZEdqaXA1WEJtL1pkTXl1WmVNK0I3eWlNOGt3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFFcW4xeTFxejBaTkZaOEFtcDZGZmtmcE5kUTk4aWliVDdFeUVDUjJGakdDT1I2Qm1meGRkQ3hVCjI1aUJtNEQ0WkVYUSt5OUwvdzBUaXVoMTM1QlVkWTgxMzFNS0grOExNbDl2b3drLzltMDlYZzNNOHBtZkNDRkkKRFNSay9za2lmblhzL0J1QmNBNHlVOFRha2NwS3FlWGR1ays1MEZ1YXZhcmR4bU5lZ0hPaVJPcVdDcDdMT0IwTQowUjBFZVVOSGhQWVhzN1dubnRPZ2p6VFI1bW93dEVzMWZPbWk3K1MzbUhLbTZ6aWF3ejk0K1ozY1RsMm5DS0tJCmljNkpxMnB5U0VQNWcvbE1tQjl4NVhiajQzaHVVQzRHeE1RWUFaVXpSTUJ2VWdXZG8zRldkUHhScUF1NFU0SnIKN3VLL0xCb3hmaTEwU1c0aXhoa3RKTDJoWW9TMFp2Zz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lRYzBXTUtDQk45UUlocEhCYVl3VCtOREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOekl3V2hjTk1qY3dOakV4TVRreQpOekl3V2pBUk1ROHdEUVlEVlFRREV3WnlaVzF2ZEdVd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3CmdnRUtBb0lCQVFDOWlYdmRmZmJ6SFc3VlcyWi9pWUI4VEJuR0sySzN5cXArVlIvVGlwMGRHbXRHWG5tUm5tMSsKb2lCUHpFSVpaTFBSRk9Hd0diaFRBRjVEd0h5TXZVSkc4eUlhcmQxVnNkUEVYaDRRYktVWUhtZTFodW16bGlPTwpDdDNoZnlUSTNGK1VwTkJSWWwrdVZheTR6MFdmdHV6SDNtS0hqam9jYW5sMmhsTmt4YUdidXpnQ09mM3V2T251CmJKSFdkMFJKV0t0V2dUMjltUUg5emVtamg1Z2NRQnhEYjduRVh2V29UNkNvT2pxbXF1UDlKYitTMjdKQzhweTAKQnArVXhPY0dEMFZ0NmZtTGNKNGMveUdPRENLbDFnSWdzOFV1cE5wODBnUUt6b0RxTlZsS3U1blU5dTFBUzgrRgpKU0x6MkR1MlFkNkQyakYwS25ncTRxdnArbXFvYUR1VEFnTUJBQUdqWURCZU1BNEdBMVVkRHdFQi93UUVBd0lGCm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWYKQmdOVkhTTUVHREFXZ0JRaDBhT0tubGNHYjlsMHpLNWw0ejRIdktJenlUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBWlNMKythbUNBYzR1dTZjNkx6bDhYT3EvVVUzYXlFNnZvOW8vSkV6Ry9CNGV3cC9CZ0lGL3dRZUtCeS9rCkxvU1p2cmMxK3RJaDNIRmFNM0xsTHMzSmJGUmVWcVlPU05XNzkrQkdpbVJoc3d0S3d5djdDR1hBMkhSR2NYelAKdUU5L2NyeXhBTFloZlBkTkRuVnBscER2WkdHVkdDZkZTd0I3Mk9UR3hrYmJMWGMwTVIzMkp3UU8wS2U5dnZzVAphSGRBakNabzR3UzlwVUNMZWVHL1F6N0M3czczN2hxVmNrVUlDTENtclRHbG1HSDlEWHc5SVNzeEdWMk1oK3ZqCnJYclFkVElxTy9PL09MLzJyVjVUL2QrWklYbGxDaVV6Vk1ud2IxMDliNFREUHUwTTZiU1FSMHExYjdiOFVWWUQKVWRMeWZlOHhZeHFEMENFVi9lWEJCditJQmc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdllsNzNYMzI4eDF1MVZ0bWY0bUFmRXdaeGl0aXQ4cXFmbFVmMDRxZEhScHJSbDU1CmtaNXRmcUlnVDh4Q0dXU3owUlRoc0JtNFV3QmVROEI4akwxQ1J2TWlHcTNkVmJIVHhGNGVFR3lsR0I1bnRZYnAKczVZampncmQ0WDhreU54ZmxLVFFVV0pmcmxXc3VNOUZuN2JzeDk1aWg0NDZIR3A1ZG9aVFpNV2htN3M0QWpuOQo3cnpwN215UjFuZEVTVmlyVm9FOXZaa0IvYzNwbzRlWUhFQWNRMis1eEY3MXFFK2dxRG82cHFyai9TVy9rdHV5ClF2S2N0QWFmbE1UbkJnOUZiZW41aTNDZUhQOGhqZ3dpcGRZQ0lMUEZMcVRhZk5JRUNzNkE2alZaU3J1WjFQYnQKUUV2UGhTVWk4OWc3dGtIZWc5b3hkQ3A0S3VLcjZmcHFxR2c3a3dJREFRQUJBb0lCQVFDZjhJOVV0Z0lZMzJKeQpxb0ZRNkRCRE0xaWdrR1hxWUJ3RkpVSUpHYlJCSmRVV2VZeXVvL2tUM2kzVUNMSlNpVmJ2L1dZQlc0TGVqN1g4CkNFZFI0RGM0ZGR6MmxIYnM1SFdtQkNIc2pERzRxNWVxYUNGM3lSOVJzcnZQbUtIcTJZUFNoRTNDRDNoY1BiSFYKOWhwemowSTUydUJjTVZtNk51TXVjR1dZNk9qWjV1dTFmQng3bmk3RFBjM2hUbk4rOWtpV1kzVkdyRlZDMVB2NwptdmxRWURrblVVelRHR3RReDN2YzFldW9qbExnNURNbTB3TkJFampGRjMwUldFUWhHd1VvaEtpU3c3d3pFak9JCkc2d3BpdVp0c2lNZzg4NVprNnh4WEVTdjJndTQrU0RyVG9nUTdwVFkwTUEyb2VySng3VmhCQ0dRN0YrU3BaK3EKR2J1SitoREpBb0dCQU50bUNGVzNtTDJYM1IzN05WQXdYZUwxaHc2bDhZeTNid0ZHd3VyTmxOYzFIeEdrcnhrQgpVYWwxRFU2S3c4QzlzVVdsYklYeVlpRkpma0NSRGtoVGhjSlM0RlB1UkdnU3Q5ZDMwZ0wzRk05dFlBR1c5cERRCnNCVTJjOEdIZWIvYUZ6QnFJd1lBMlZycVZQeTF0WFRMbXh0dTk2ekIwS25iT3p6azVpeDNqT0JWQW9HQkFOMG8KSTlwNmt2b1M4aWczcHR6cDFYWDVYcXc3dlVVOUVMSTZSS2xCV1VsMHBJR3VyNjN5NytQdXJqYTlxUWNkdmNXNQpLKzVtbnB4VThqN3pMQmYxUnl3TjBEZjFqdWczc21FcFFyOFZMNVVWVzhTNTZJUGZJRUNqY05MREpkUWhya0lkClhQMmZXNTNuT2dCb1k1K1RaWElML0VhNk9HLzlXblhpMENSaGNmUkhBb0dCQUplQ3JMclZJUXU4OWh3Z1FMN3gKeDhSV0hrQ0ZaSHZ5cVJ2T2pBaXVrOXpTZUhRc3NDYXFmSVJ6cXc3VVVUNm5RT2FCeUtIdnNzaWVBaXdBZ0VaKwpOMTdzOExIRlYwUXZ1UGw1YTNSVXdQQkY3Z2pyQWJjY0JwMS9qd3pVeThVcmpOd0lUOHR6aHFaOE1OaWJlNFgrCm5VeWlvek9RWE5NUDdLYXV4QzF0R2NKSkFvR0FaV0N6SHNHMWdrRVJGSEorWVNJbm9jN1FJUys1VVhYdW8yU20KZU5mbDhCQXlJT2hNeS9aakZSOGlhU0dEekNsTUJza2RaRWxTUitPQXNHNlVOZDlQNHRmcUxOeTV4NlZRZGMyTwpOVDJtOURZNFBQUGpyQitxRHpkY3pxQjZSTVd6dGNiMEM2YnpQbXp5WDZGNm1YbmR0T3ZkbHlaaUhLUU14YUZWClBIZ1czcDBDZ1lFQXRaMWI5OVRCWjc2L2J2YkUrR3BXUkhDQkJOcFozdzc5Y2RUYjRwWXRkR2U0NTlNaktvTzIKNjVKYW5sanA2WlBVeGtSTU5weGh6RTZSdFd3UUphQzRXNTFqaEorZzNTOW9JQTRvbWl4VlN6NDc1S2tYNHN6Rwp0OGN5OWhETVczY0h4cmRzeFJ6S2QxeVBjMms4a0djWkZrbm5PWHZLTGQ4WE9KalZ4V2k2eDdNPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRUHVqQ0pTTk80b2RkRlBmSXFJUU9WekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOekU1V2hjTk1qY3dOakV4TVRreQpOekU1V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ29yOElMcUZBQ1p1S0I0LzdaRFVBc0d4YW1PZmRETmFEb1hIbmpDUDVqK0RqdlMzejgKRmlncG1xTXdpRlVhK0VUQ0JKcUdseWVKRnF5ZEhIL1pYdW51b3A0WUFlSXR2SmVadi9ybXhsSzJUQWNiVWVpNApETmZ4MjBkSVBmajhyS3FGWkRoOWRNenhueEJ5cTdOM2ZNRlU2MEpWbWxHaWhBZXp6bytYZW8ybENtYStORmVWClo5b0IyWHBEU29udUdCc0VxMFhGUW5iMS85SThnYjhHVHBxcWVYbURSOVBTbXFDYUJLRElHbzU3U0FpSGVMRGkKVXNFYWtHc2YxcGQyUmROOVpRQlE0N29wWU0zK2o2VWdPcnJ4eGhoTmFWM0c0Y1RtSnVlZS90UHdOUnplUXAwagpLREcwZm1FcHU2Rjd6NHdZMndGeDBtc3ZkbE9SSXUydGNGOHBBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVJZEdqaXA1WEJtL1pkTXl1WmVNK0I3eWlNOGt3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFFcW4xeTFxejBaTkZaOEFtcDZGZmtmcE5kUTk4aWliVDdFeUVDUjJGakdDT1I2Qm1meGRkQ3hVCjI1aUJtNEQ0WkVYUSt5OUwvdzBUaXVoMTM1QlVkWTgxMzFNS0grOExNbDl2b3drLzltMDlYZzNNOHBtZkNDRkkKRFNSay9za2lmblhzL0J1QmNBNHlVOFRha2NwS3FlWGR1ays1MEZ1YXZhcmR4bU5lZ0hPaVJPcVdDcDdMT0IwTQowUjBFZVVOSGhQWVhzN1dubnRPZ2p6VFI1bW93dEVzMWZPbWk3K1MzbUhLbTZ6aWF3ejk0K1ozY1RsMm5DS0tJCmljNkpxMnB5U0VQNWcvbE1tQjl4NVhiajQzaHVVQzRHeE1RWUFaVXpSTUJ2VWdXZG8zRldkUHhScUF1NFU0SnIKN3VLL0xCb3hmaTEwU1c0aXhoa3RKTDJoWW9TMFp2Zz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURxRENDQXBDZ0F3SUJBZ0lSQVBEdWdUWEZZQ0szSWVOWnIzMGFoNEV3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN5TUZvWERUSTNNRFl4TVRFNQpNamN5TUZvd0tqRW9NQ1lHQTFVRUF4TWZZMngxYzNSbGNtMWxjMmd0WVhCcGMyVnlkbVZ5TG1OcGJHbDFiUzVwCmJ6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUxqZjNIeWgzei9BZ3ZjdzNOYTYKemJMdGNqdERxYmlMVnNlNmpaZXFqa2g1dWhDK210SzgwTm9OcmFiNk1QVTJXN1lIcVljb1J6M21oZDd1MHYxSgpzR01nbWdzYSt2dFBXWjQwWjEwNCszbEsxc2R2T0haVFExYUJLbm1YeFNJSXV6dFoyclVCMEw4YVYzdGRzWlJrCnJUSlpxdGdEMDVLc0dqYk1nNFFNN3h4ejlpZGMweFd5R2NMM1UxMVZTQnBZL2c1NjJMNXdxbDV3TXMwUU1xa0wKWk14NnJDUEppUFRBUWY1RUNmQi9id3FsallEMkFueHk3SndMZU9qZHNoQXVqS0ZUYkc0dUlTam5sYXRzNzRreQpFMEx6QWpWU2Z1SlRZQnBCeGFFVGQ0NVNWVTE2Rm5pRXJFd09sWGo1VEVsenRURWVBWlQ0alBYc0F1aVJ2QWZtClRGa0NBd0VBQWFPQjNqQ0IyekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUgKQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3SHdZRFZSMGpCQmd3Rm9BVUlkR2ppcDVYQm0vWgpkTXl1WmVNK0I3eWlNOGt3ZXdZRFZSMFJCSFF3Y29JZlkyeDFjM1JsY20xbGMyZ3RZWEJwYzJWeWRtVnlMbU5wCmJHbDFiUzVwYjRJUUtpNXRaWE5vTG1OcGJHbDFiUzVwYjRJbFkyeDFjM1JsY20xbGMyZ3RZWEJwYzJWeWRtVnkKTG10MVltVXRjM2x6ZEdWdExuTjJZNGNFZndBQUFZY1FBQUFBQUFBQUFBQUFBQUFBQUFBQUFUQU5CZ2txaGtpRwo5dzBCQVFzRkFBT0NBUUVBTkVZbyt4WXJsSkp4ODlhamVSK1NlWm81NEM4emt2VjAxTUhpQ2VqTVhQRnc2bHBpCkt3SXFIM2ZNRTVCbTJxL3o0UjFncy9TQUVVWXhPbHIyMFpmL1ZBWmpKUHM2bkFPWjNoS09yVEdESEVhTkNEWTAKRzZHeFZnQUtsWjNxZHpvN0ZqMWpaSFR5eW5zN1VxWVBmU1haS0F1dkxVRGZMSjc5b3Yyc3FaRWNsNHkvdjNPSwprcW53b2Qzd2g3RFR3WHNTbWhjODNPeVQ4bW1Tb1NlYm5OTHJTY3AyVXNxNUZIVDVIV3JtYXhLbW1MMSt1VWNNCkhYbTljTEZjdWFha0VIeTBzWDBZbzd1T3l6WDIybnNBQS82STdoQlBNY01CRER2RVd2eXFGWFdKTk9yanVneGEKTjNkZzdpM1BKazZnV2hHRjlHSVJPWWVQYkIrUFQrRlFHSUs4dHc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdU4vY2ZLSGZQOENDOXpEYzFyck5zdTF5TzBPcHVJdFd4N3FObDZxT1NIbTZFTDZhCjByelEyZzJ0cHZvdzlUWmJ0Z2VwaHloSFBlYUYzdTdTL1Vtd1l5Q2FDeHI2KzA5Wm5qUm5YVGo3ZVVyV3gyODQKZGxORFZvRXFlWmZGSWdpN08xbmF0UUhRdnhwWGUxMnhsR1N0TWxtcTJBUFRrcXdhTnN5RGhBenZISFAySjF6VApGYklad3ZkVFhWVklHbGorRG5yWXZuQ3FYbkF5elJBeXFRdGt6SHFzSThtSTlNQkIva1FKOEg5dkNxV05nUFlDCmZITHNuQXQ0Nk4yeUVDNk1vVk5zYmk0aEtPZVZxMnp2aVRJVFF2TUNOVkorNGxOZ0drSEZvUk4zamxKVlRYb1cKZUlTc1RBNlZlUGxNU1hPMU1SNEJsUGlNOWV3QzZKRzhCK1pNV1FJREFRQUJBb0lCQUNtQVY0YkM3OUxuN0g2QgpRWklTclVxVmN5ZEtzVGIwVUs3VmVpT3A3ZmJuSEpYVnMvdksxemVjQ25lSmdxUUpaOTBkS3psa0dWb1QvY2xsCjQ0ZG9tMmdsVVc5Y3h5clRUVkx1Z0tXMHZQOGxoY0dQZmlWUjI3UDNtd2xnd0tnN1BZeTlSeE9MTE1rNXFKblIKRnFReFZaQVFBUUl0R2JtN1dNY2tjZ0dheGJLbEUzQVQyZ3hvVTNWUlZ3VDdlMVVZTHMyT0ZMRTZqOXFZZXkxYgppNnBkTUFVZGxBVXlGb0lCZ0I3c1FBZVN4OXZVVlVIVjBNUTV2QnpKZytaMWhZMmRaeUd3NldmSXRIQndsUy9ECjJ5QnVodjdwdG9MVzlQMUlGOEZ6QXVDNWdaekEveGovcnZKenFLSlpYWXdaL1lUajVQWmp4aFlrbHRMblYyV08KN0xpOXpBRUNnWUVBN2x0Q2NTbU9jVGxYdStPWlU5djJjMSs4WnBoNjRZdWUzM3lCUEk4MzdzL0Jna0graW1JegpTR3E4cXNSN1JmUTN2eTRwNDBmNGhoVGVwUkxGbWR2eGxtUEY2ZnRDaHdGa1FrZ3VzZGkyVmZQSjdsdXdXazNICnpId1QwMmlEUndTVzlFSEptQ1BqeXpsMXlXVzByUEZnV01ieEs4M0RJN2dtN1lTOWduY09mOUVDZ1lFQXhvOGsKcFpKekFoYU9RVEpxeXB4dFZQMElMNTZxTFQyVk9pZnV0Nkk3cjB6Ty84c2lvVHV2bWFmcWdUWDlmUTJXQklHbwpCYkhiK21QL1M0M1NTRkNWc1Zsa3F4WEJOY1JQbFJZK2VCVFNlWTkyR25QcTgxM2pVL2xQc3EyUExLdW5JSTc3Cll5WHk5UU9ISHFzbVl2SzFnUHgzeWcwdXlEQk1mYldTZXR2NGJna0NnWUJlajdYOFR4QkR1d3dqYmxnVi9OMzUKUjdIbXdmZCtJM1lVRThEeDFaL0xEb0VtdkNmUG5zWFpwUDdVZ0w2bk1nd3J2SlRCcG52aU5jVmVsK1BzOW1VUgoxT05md0Y3VVVLa0Y0cjBqc1dZbEUySzVQWWJwVEpKSGZiSWYzUWEzMWdwTlBReE5YMit2NEV2cWFuOFRYVzlyCnlRRkU3NHpMVHZPaXAxYkh1NVAxQVFLQmdGSkxIV3NxQ1ZTQ09LODQwQjN0T3pzUUxBWmdnak9CNUlsWDU0NWcKUk5CZ3l5SWs5Tk5TUTNNeHJ2V2loTThCaEgyVnB5ZkZFV0R6ZE9uQmU3ZlEvbG1rclI1alE5S2U3RVRrRlR2NwpsVWdnZDFoN1ZwTkxCRjdYWTNxd2lEaUJaQ0VRWVl3MFBEL2tHR3BUa1BOTm1JQS9JdjZ3L0FTb1QrdUNCNVczCitYelJBb0dCQUtQYzNJWjcrV1U0WHB1L2xDWEJjK0xEdmtqU1VrbUtJbzZRNjJncFRIQzhPRjRJZys2dENCTkcKYXh5RkxIdU5JMmh6ajVKMjFvTzJScHRUeFFaTE5PZ2RBWVlDQUxETVhLODZFZTBLaUpqTjNnL1hPVTdHOWZNWQplc1NnTGRDZUE2VmlCMHBraVFuNksrUDZrZW9KSUFPSUZDNS9vZUFJVlF0bEx3LzZENVUyCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRUHVqQ0pTTk80b2RkRlBmSXFJUU9WekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOekU1V2hjTk1qY3dOakV4TVRreQpOekU1V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ29yOElMcUZBQ1p1S0I0LzdaRFVBc0d4YW1PZmRETmFEb1hIbmpDUDVqK0RqdlMzejgKRmlncG1xTXdpRlVhK0VUQ0JKcUdseWVKRnF5ZEhIL1pYdW51b3A0WUFlSXR2SmVadi9ybXhsSzJUQWNiVWVpNApETmZ4MjBkSVBmajhyS3FGWkRoOWRNenhueEJ5cTdOM2ZNRlU2MEpWbWxHaWhBZXp6bytYZW8ybENtYStORmVWClo5b0IyWHBEU29udUdCc0VxMFhGUW5iMS85SThnYjhHVHBxcWVYbURSOVBTbXFDYUJLRElHbzU3U0FpSGVMRGkKVXNFYWtHc2YxcGQyUmROOVpRQlE0N29wWU0zK2o2VWdPcnJ4eGhoTmFWM0c0Y1RtSnVlZS90UHdOUnplUXAwagpLREcwZm1FcHU2Rjd6NHdZMndGeDBtc3ZkbE9SSXUydGNGOHBBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVJZEdqaXA1WEJtL1pkTXl1WmVNK0I3eWlNOGt3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFFcW4xeTFxejBaTkZaOEFtcDZGZmtmcE5kUTk4aWliVDdFeUVDUjJGakdDT1I2Qm1meGRkQ3hVCjI1aUJtNEQ0WkVYUSt5OUwvdzBUaXVoMTM1QlVkWTgxMzFNS0grOExNbDl2b3drLzltMDlYZzNNOHBtZkNDRkkKRFNSay9za2lmblhzL0J1QmNBNHlVOFRha2NwS3FlWGR1ays1MEZ1YXZhcmR4bU5lZ0hPaVJPcVdDcDdMT0IwTQowUjBFZVVOSGhQWVhzN1dubnRPZ2p6VFI1bW93dEVzMWZPbWk3K1MzbUhLbTZ6aWF3ejk0K1ozY1RsMm5DS0tJCmljNkpxMnB5U0VQNWcvbE1tQjl4NVhiajQzaHVVQzRHeE1RWUFaVXpSTUJ2VWdXZG8zRldkUHhScUF1NFU0SnIKN3VLL0xCb3hmaTEwU1c0aXhoa3RKTDJoWW9TMFp2Zz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTVENDQWpHZ0F3SUJBZ0lSQUp1c0VEelpQQjgvYkFOcDF6RmJIeG93RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN4T1ZvWERUSTNNRFl4TVRFNQpNamN4T1Zvd0l6RWhNQjhHQTFVRUF3d1lLaTVvZFdKaWJHVXRjbVZzWVhrdVkybHNhWFZ0TG1sdk1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTZHTVp2cFFORjRqVmhqam9JckJvWDUrTyt3UzAKdGtWMkRwWStsQy9TWWdhd2ZWZnVzQkI4RkU5UVpsZUE4RW4rL2E1YkV4dmxVcSsrWnRkQnV5cE8xTFVYS3VSeQpFb0dWTThZZnQ5Kyt6ZDNGRU9sSWRSNERCUjBseGN5bjNiZUtyV2pBVnZrYk1CV0ZXa0llV2kzWmdHS2VrTmh3CjFzbkJZUG0rQXJVWEJucUtPWE9QYVp4alA1WmVFNUV6dngyeFV3dXhnc2JabUNhbEtOdUU0UTh6ZG1JN2tVVzQKTEp6YTQzZ1J6NElaUEd1Vi9TSjRLR3lYTnk1eWpDVXBSSjJEY08rNVppYVp6aTlGY2d6VEhjRlN4OE51ZXNuVQpnK0l1dGR2SkRvUnRCN1NqVEowTFlIZjFUL1ZrbHBMYWlNUG1jMlFqNUFlaFdKYThjOXY4VHY2NDd3SURBUUFCCm80R0dNSUdETUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUIKQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCUWgwYU9LbmxjR2I5bDB6SzVsNHo0SAp2S0l6eVRBakJnTlZIUkVFSERBYWdoZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d0RRWUpLb1pJCmh2Y05BUUVMQlFBRGdnRUJBSGN0UldhQmthRmdOWWRGOWhGL2ZISlNOYTUzdUhsUzRZM0Jna01OQ1pxSHRwS0gKRm9lTm1NbU1BZnhtdDlKM0F2VEJydmQrMTFTMEk5VWNzWFFnVEMvb2NXUFc4ZU00emV0MzZDNEFLZWZNQlVvOApNcUVmN24xT3pOT2ltK2FZYWdsU2NiMTdmb2lKR05ueUtHUXZDOVFsNHhxME9DR3lTT2YzakNBeW1DQjlra2x6CldnT0FKR3FGS1VDT2lqNWNvTFA5VzVhWnlVR3B3QWJGNzBqZy9sM21VcHR4QnNxaE9nV01iY2JIMUZ3eVh5S3cKUVFVOW9PMXhtTXZkbGkwM1VxN2NnRXpEVVpTeGF4K05PZFlycXJxMngrVEZKT1VRZlBkU2QxM1pzRWxTM3h1NgpvTy8zUHJwNWNOdXVxdU4vY0pUbzdrTko0aFVHZ3NPNXFMekhubzQ9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBNkdNWnZwUU5GNGpWaGpqb0lyQm9YNStPK3dTMHRrVjJEcFkrbEMvU1lnYXdmVmZ1CnNCQjhGRTlRWmxlQThFbisvYTViRXh2bFVxKytadGRCdXlwTzFMVVhLdVJ5RW9HVk04WWZ0OSsremQzRkVPbEkKZFI0REJSMGx4Y3luM2JlS3JXakFWdmtiTUJXRldrSWVXaTNaZ0dLZWtOaHcxc25CWVBtK0FyVVhCbnFLT1hPUAphWnhqUDVaZUU1RXp2eDJ4VXd1eGdzYlptQ2FsS051RTRROHpkbUk3a1VXNExKemE0M2dSejRJWlBHdVYvU0o0CktHeVhOeTV5akNVcFJKMkRjTys1WmlhWnppOUZjZ3pUSGNGU3g4TnVlc25VZytJdXRkdkpEb1J0QjdTalRKMEwKWUhmMVQvVmtscExhaU1QbWMyUWo1QWVoV0phOGM5djhUdjY0N3dJREFRQUJBb0lCQVFDVVQzc0V1RFJLeXRlTApYQkk2NFY4YmVCZW1lSEJreTV2MjMwaDlCckE4UTR5cjBrelJMUlFqV2lNenpiREtxazhFMUJ2bjdDdkZROGcrCmxpNnJKdXM4c1g1aHIzNWw5VEdsNDFJbTViTSthOFR6Y0E4QVAvRXBlRnE5REVvdUpJOXE4S21nV0VkVHZzaG0KdkQvbXlkQkFNYkNGUEwxM056Z2xqZjRJZUU2RG9NWDFsUWpDOFljcjFMREpaVjNybHlBNkdxOWZvV3d3WUJpOAprTm5xZGFpYU92SUJFd1FaWjkxZnNwRDRqbXVxNjBLRTdZSkppa25rYTAycEE1U3AvSkpNdHc1YXBSQm1lUW53ClM3MkU0NEdwOWVXQm5kLytRU1FHWGhHR3lETjRwT0gyYmNMNHcwM3NaOUgzZGFLOVdwU1d4ZFlRVjYyRnBRMVMKQWRISEkxSnhBb0dCQVBTdHpuU1FDeHJudjBOeSs5QkdhRHpsL1BLT0JjZnNvcmM1OExyd3FsUHR5MlpXeFZ4UgpzUm1WN0tRK1NIYncycktDcWpnMkNib2wxYXJSNUlNZkw2d3AranBydSt0Rmp1dXdOREdnSnNPY3h6Y2tkcC9hCloyOGw2UTlpWkZ2VUYrQytaZUhLZFdwbWRlcTZXRlBHUHRObXhJWmRmN3dJUzgwT2FCNEx5ZU90QW9HQkFQTWoKc3V4UEd3dFRJTlEwQS9lb1VoVDVVdVZVaklHblU3M0Z1bUpidWpaV0pXRlJDeDRsRGNUQjhreUNXeFozMWpCOAprQk54bExOdVgxMk95ZWxVR04rQjlBVkE3ZlpPZnhPWVE4MjIxbGVDcncwTUFCUURsSGNmTit6bGczMFQrcHdHClJEbzdGS2ZIVW5aL2s5WS9nYXYxUFg5QWdDWGRsdGxlTDhXVUU4S0xBb0dBRGdmQlpQRzFrVTlrcWt0M29SUEkKZW1WOXdiTGZKZjJ0dnUvMW0rS2RBYjhMQU0xTTkrUS9VWVpGVVkyNHZnbEZvU0xZKyt3dFZwMUF5VkRMMTdEOApITlV6WWhJM2JtQkl0NzhjM3hPZDVXMmlCc2x5ZSt3Y0xrVndQYytZamFOMTB3OVg3RUNkeHdJbEZOYW1wZmNpCk55RVhkOVQ0dENHTnB5NkNUZWJESnVrQ2dZRUE2bTJ3TlVKc2kvWEJ3SGpLbm40dmJrT2ExcjAzb0VjS2FmNTgKb0J0Ykpzcld6Y2NMVml4WjR5MHhCdTNsRDN2S0RBUCtFcEUvMCtXR2s3bDZHcnZZSTZDei9HREhUK1lOaG9JWQpWZitGR09sTENPUmFLdkhzc3hKcHBNTUNqWlcyMjdyN0M3NHRRenZlMlp4V21ZdXY1bkhWc3AwcE1kaytlaVRqCklMaU9lTk1DZ1lFQTVDcEs0b1EzR21Pb3V3RmwrRXd6c3l0M3NZNllvYWI2MVREcDZTOU5HdmxwQjFPS1A0TFMKcERwWU8zeTNSbWNXYnNpdzRydzM2ZTZNR0hOL01jdGMyakprWCtselhNcnlqV3RnM0d0RjdKdGl0aW52MlZRNQo4algyekgzblFTVGNoNWhQRVFtREtnQ3BIZnp2ZWFqcDNSVVg5VjZZNThMbFVjcFBBQU9TZGFjPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRUHVqQ0pTTk80b2RkRlBmSXFJUU9WekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOekU1V2hjTk1qY3dOakV4TVRreQpOekU1V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ29yOElMcUZBQ1p1S0I0LzdaRFVBc0d4YW1PZmRETmFEb1hIbmpDUDVqK0RqdlMzejgKRmlncG1xTXdpRlVhK0VUQ0JKcUdseWVKRnF5ZEhIL1pYdW51b3A0WUFlSXR2SmVadi9ybXhsSzJUQWNiVWVpNApETmZ4MjBkSVBmajhyS3FGWkRoOWRNenhueEJ5cTdOM2ZNRlU2MEpWbWxHaWhBZXp6bytYZW8ybENtYStORmVWClo5b0IyWHBEU29udUdCc0VxMFhGUW5iMS85SThnYjhHVHBxcWVYbURSOVBTbXFDYUJLRElHbzU3U0FpSGVMRGkKVXNFYWtHc2YxcGQyUmROOVpRQlE0N29wWU0zK2o2VWdPcnJ4eGhoTmFWM0c0Y1RtSnVlZS90UHdOUnplUXAwagpLREcwZm1FcHU2Rjd6NHdZMndGeDBtc3ZkbE9SSXUydGNGOHBBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVJZEdqaXA1WEJtL1pkTXl1WmVNK0I3eWlNOGt3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFFcW4xeTFxejBaTkZaOEFtcDZGZmtmcE5kUTk4aWliVDdFeUVDUjJGakdDT1I2Qm1meGRkQ3hVCjI1aUJtNEQ0WkVYUSt5OUwvdzBUaXVoMTM1QlVkWTgxMzFNS0grOExNbDl2b3drLzltMDlYZzNNOHBtZkNDRkkKRFNSay9za2lmblhzL0J1QmNBNHlVOFRha2NwS3FlWGR1ays1MEZ1YXZhcmR4bU5lZ0hPaVJPcVdDcDdMT0IwTQowUjBFZVVOSGhQWVhzN1dubnRPZ2p6VFI1bW93dEVzMWZPbWk3K1MzbUhLbTZ6aWF3ejk0K1ozY1RsMm5DS0tJCmljNkpxMnB5U0VQNWcvbE1tQjl4NVhiajQzaHVVQzRHeE1RWUFaVXpSTUJ2VWdXZG8zRldkUHhScUF1NFU0SnIKN3VLL0xCb3hmaTEwU1c0aXhoa3RKTDJoWW9TMFp2Zz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQU1xaXJ6UkVoS0xYM2tFcHdzMWl5N1l3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN4T1ZvWERUSTNNRFl4TVRFNQpNamN4T1Zvd0pURWpNQ0VHQTFVRUF3d2FLaTVqTUM1b2RXSmliR1V0WjNKd1l5NWphV3hwZFcwdWFXOHdnZ0VpCk1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRFd0OHI2ay9FSG9iTVZrSjZXUXJFanA1NFgKOW51M0dBSURmTnJWallkL0tUN3NvM1lQV21nd2trRWN5dm9YY1NEUUVKMXRsOVZBdzBKUmZmYTRPZWlnT0tkOQpWd2dwNGxwMkJRNmlldHgrRHozankrSENxUEd2OHBlMWE2K3YxVDlmYjhmZEhnbzdubCs3dDZqTXFqS1JmU2tQCjZLTmxneGlXSmRXRldqTkFPeWF5MFNOOWlXdXFoNDhLaWpYZnFEak55YkpGRzQwRUgzTzYveTJGdUQzRlVMUisKWU9CeTBSRUZTZUlpZzBxb0REaTlObmJleWIvTEFwN0ZpQ2hWYmZ2SW1sK2ZkSkdFcTg5UWpGbFRNaVFNc2JjUAp4ZEF6MU1BczA0QjN3ME8xekFzc3prVThMVVRaTjBVZ0JjOEVOemJmVHRPSFk5Qzd6SDNSMUlIcUl1MmpBZ01CCkFBR2pnWWd3Z1lVd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGQ0hSbzRxZVZ3WnYyWFRNcm1YagpQZ2U4b2pQSk1DVUdBMVVkRVFRZU1CeUNHaW91WXpBdWFIVmlZbXhsTFdkeWNHTXVZMmxzYVhWdExtbHZNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFDUkVUWkE5WEwvVGFlUVBub1pZQnhTL2JtNmZGcHk0aXlOZUM1a1RFSk8KRzQweTdhejFqNjc1Z1N4UWpxbjg3UmNramdSb3QvTmJ4bTAzSzJSSU4wMUY0dkJuNk1VWHhwYTlONUdrZ3JOVQpCU2ZPMGJ1NEd0bWhFMkZOZEZEOVg0TU5BamNiTEpFS0wzZlJnUVE1QjlBV2dQMEEzYjdvczNtSHJrR0V4cjcwCklpZGZOMWN5blhENzdNdVllNFlYZXBielV1Z3RmYlRycW5hdjZxZW5lZG9sYkJDeGtzMEJnM1RnMkUzK3ZqaXEKbnMyZklkejBDWHNjQlpvM0JFVXJrM0syaHZUMmZOKzllMk4rQlZ5clFhSk5VbXBIMENWRjVWWjJxbi90Tm9ZVAprZCtRbnRadTlFYVhjeEwxbHB5SVJzb282d3kyc0EvblpqcHlaNk91Nms3OQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMXJmSytwUHhCNkd6RlpDZWxrS3hJNmVlRi9aN3R4Z0NBM3phMVkySGZ5ays3S04yCkQxcG9NSkpCSE1yNkYzRWcwQkNkYlpmVlFNTkNVWDMydURub29EaW5mVmNJS2VKYWRnVU9vbnJjZmc4OTQ4dmgKd3FqeHIvS1h0V3V2cjlVL1gyL0gzUjRLTzU1ZnU3ZW96S295a1gwcEQraWpaWU1ZbGlYVmhWb3pRRHNtc3RFagpmWWxycW9lUENvbzEzNmc0emNteVJSdU5CQjl6dXY4dGhiZzl4VkMwZm1EZ2N0RVJCVW5pSW9OS3FBdzR2VFoyCjNzbS95d0tleFlnb1ZXMzd5SnBmbjNTUmhLdlBVSXhaVXpJa0RMRzNEOFhRTTlUQUxOT0FkOE5EdGN3TExNNUYKUEMxRTJUZEZJQVhQQkRjMjMwN1RoMlBRdTh4OTBkU0I2aUx0b3dJREFRQUJBb0lCQURsQm9YcllZSG1zZ05qTApTNzY5NGdhajkrQmo5ZkdKRVdCa3R1WWphM0paU1ZKSTlINTdtVFQ2aXlwbVpmSkNWSUduTEpQQTNUajcySDlxCm01UGN2VStjUysxOGU4elBjMWZ0V1UyeWZZR1FCdXpydlRQdllTT09DUzV6bk5IQ2g3ZW5VeUIvbGpMM3RJZVcKSGdrVmlZNktWWnpNYUdYMVkyVUdpYjJaby9rSVQ1eVVZRnFkL1NFbUR5ZG5va1Y3QVlkaFBiS1paWWRPTXlLMQo2c1p4ZUJaQ3pCZmdaMXhYQ2J3Unh4M3pKREZKT2k2YW1JamgxWUxGMWtvdXg4RExKZVdLQ2Qrb00wR2poN3JsCittYXd4d0ljaHlhN2t1WXU2WUxzMUxJTUtJUjBkV0NVL0JYdDJHdk1lV0dlSCtIRVZMN0ZHY3ZnSFlNSjlBTTQKT1VXRm5tRUNnWUVBMnBCT1RBYXZuOVd4L005ak02ZVlzRXhvSlk3UUNCWFEvVjBPMm5qdmgzS0R1cXBlR1ZWagpjdkc5QjVzNklQZFNVTnRvbHozQUtmUmx3VzNXZjZzNkhENndFMDIwL251OStFbzFya3hQajlsTGNoM0UyTVNNCnUxQnJhQnltQjBiUzlnbVB5WUZTZVQxVnpZZkJDOHRBV244UkV3MzkwVTdFMitzUGsrMEtHQVVDZ1lFQSszN2IKUDA4SDJ2WWd2bVBWdHAyV0k3OEtaMVMvaU9ld2RKaUVtdzYyemNQbm1ocWNNSk1ORk90Y2htUDZqbG1FUGFyRgp2ZFBjNXJDbktXWHFzNkRYOVJkc0dBY3ZnWXYyNXUxTEtodmZ2ZEc2b0lvaVYzSVJQTXE4UGh0M3lTczVLSVJyCkFXWnpPV1FrNUc3WmRDNFFCUTNGZ2VGK1BGRndoOTVGQXFXaHA0Y0NnWUFuRGtoZmY0WmNtblFleC9Sakk1eSsKVERrRUZSd0poZFI5b2Vab2xkbS9xMi9zcUVyK1hlclNmRzRaOE53WFRmcXdwalJ2YWtKdmZOTytGK0dQbU1wZQpoN2t4Q2Q3QTV0M1FnM3BLTmlxMWVzL25pWGhHZ0FEaDdBSDFiY0VoWmIrRzViaUMrcEFCU0R1UDZhVk9kVGgvCnMxc2F1NUpTbDYvSDJKNUZBY09lL1FLQmdRQ2ZubjBTNmxzRyt1My9TS2ZzbG9vak4rNG5kUjkzaWUxeG94ZU8KdmtFQnlkUGw5L3VuekwwaHlOdlpvL3p6ZWhjM2VIcTJwNC90anJNWjBFaXRKMm5KY2NzMldPRXE3S1dSSFl4MgpObWpFTmllb0d1UCs4alBFakx2N0F6MzhuUVZURlBCQlhEL0hiaXNJSE43QklUY2pyZ0RzRlMwa3BWK3hyRDNLCmwwdEpZd0tCZ1FDT0ZqUnRDcTZZZlNsYXNCbzVlbkxjQXNjNWxBb1ZqSnBva0cxTERVc1c0T1lWdDFaZHBubS8KaVR2WTY3Q2lpRm1oVld0Qis4SnRYSXhzMDZndDRTcWk0Q3JsWE1EbGxKRG5XSm9KS09rRFIxYVJFWDNQRWZRRwpWRVBnMk93VXFFQkpCZmxBRHJkSTl5ZGV2cUdFeldVYjlmMnlPZ1BlZEhNa2NXdEtWd2wzYkE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  skip-cnp-status-startup-clean: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  policy-cidr-match-mode: ""
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"
  # If you want metrics enabled in cilium-operator, set the port for
  # which the Cilium Operator will have their metrics exposed.
  # NOTE that this will open the port on the nodes where Cilium operator pod
  # is scheduled.
  operator-prometheus-serve-addr: ":9963"
  enable-metrics: "true"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: c0
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "10"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  # Default case
  routing-mode: "tunnel"
  tunnel-protocol: "vxlan"
  service-no-backend-response: "reject"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-masquerade-to-route-source: "false"
  enable-wireguard: "true"
  wireguard-persistent-keepalive: "0s"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-local-redirect-policy: "false"

  kube-proxy-replacement: "false"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  enable-host-port: "false"
  enable-external-ips: "false"
  enable-node-port: "false"
  enable-health-check-nodeport: "true"
  enable-health-check-loadbalancer-ip: "false"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  bpf-lb-acceleration: "disabled"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  hubble-export-file-max-size-mb: "10"
  hubble-export-file-max-backups: "5"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  ipam-cilium-node-update-rate: "15s"
  cluster-pool-ipv4-cidr: "10.0.0.0/17"
  cluster-pool-ipv4-mask-size: "24"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "true"
  bgp-secrets-namespace: "kube-system"
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"

  k8s-client-qps: "5"
  k8s-client-burst: "10"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  # default DNS proxy to transparent mode in non-chaining modes
  dnsproxy-enable-transparent-mode: "true"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-xff-num-trusted-hops-ingress: "0"
  proxy-xff-num-trusted-hops-egress: "0"
  proxy-connect-timeout: "2"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"
  proxy-idle-timeout-seconds: "60"

  external-envoy-proxy: "false"
  max-connected-clusters: "255"

# Extra config allows adding arbitrary properties to the cilium config.
# By putting it at the end of the ConfigMap, it's also possible to override existing properties.
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: c0
    peer-service: "hubble-peer.kube-system.svc.cluster.local:443"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-hubble-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-hubble-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n\n        # Liveness probe\n        location /healthz {\n            access_log off;\n            add_header Content-Type text/plain;\n            return 200 'ok';\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumbgpnodeconfigs
  - ciliumbgpadvertisements
  - ciliumbgppeerconfigs
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  - ciliumbgpnodeconfigs/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumbgppeerconfigs
  - ciliumbgpadvertisements
  - ciliumbgpnodeconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumbgpclusterconfigs.cilium.io
  - ciliumbgppeerconfigs.cilium.io
  - ciliumbgpadvertisements.cilium.io
  - ciliumbgpnodeconfigs.cilium.io
  - ciliumbgpnodeconfigoverrides.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  - ciliumbgpclusterconfigs
  - ciliumbgpnodeconfigoverrides
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumendpoints
  - ciliumidentities
  verbs:
  - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumexternalworkloads/status
  - ciliumnodes
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumendpoints/status
  verbs:
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumexternalworkloads
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-bgp-control-plane-secrets
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: etcd-metrics
    port: 9963
    protocol: TCP
    targetPort: etcd-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: NodePort
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
    nodePort: 32379
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-agent: "unconfined"
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: "unconfined"
        container.apparmor.security.beta.kubernetes.io/mount-cgroup: "unconfined"
        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: "unconfined"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
          initialDelaySeconds: 5
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.memory
              divisor: '1'
        lifecycle:
          postStart:
            exec:
              command:
              - "bash"
              - "-c"
              - |
                    set -o errexit
                    set -o pipefail
                    set -o nounset
                    
                    # When running in AWS ENI mode, it's likely that 'aws-node' has
                    # had a chance to install SNAT iptables rules. These can result
                    # in dropped traffic, so we should attempt to remove them.
                    # We do it using a 'postStart' hook since this may need to run
                    # for nodes which might have already been init'ed but may still
                    # have dangling rules. This is safe because there are no
                    # dependencies on anything that is part of the startup script
                    # itself, and can be safely run multiple times per node (e.g. in
                    # case of a restart).
                    if [[ "$(iptables-save | grep -E -c 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN')" != "0" ]];
                    then
                        echo 'Deleting iptables rules created by the AWS CNI VPC plugin'
                        iptables-save | grep -E -v 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN' | iptables-restore
                    fi
                    echo 'Done!'
                    
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - CHOWN
              - KILL
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
              - DAC_OVERRIDE
              - FOWNER
              - SETGID
              - SETUID
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Unprivileged containers need to mount /proc/sys/net from the host
        # to have write access
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        # Unprivileged containers need to mount /proc/sys/kernel from the host
        # to have write access
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Unprivileged containers can't set mount propagation to bidirectional
          # in this case we will mount the bpf fs from an init container that
          # is privileged and set the mount propagation from host to container
          # in Cilium.
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-dbg
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      # Mount the bpf fs if it is not mounted. We will perform this task
      # from a privileged container because the mount propagation bidirectional
      # only works from privileged containers.
      - name: mount-bpf-fs
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        args:
        - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
        command:
        - /bin/bash
        - -c
        - --
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        - name: WRITE_CNI_CONF_WHEN_READY
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: write-cni-conf-when-ready
              optional: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
            drop:
              - ALL
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
      - name: host-proc-sys-net
        hostPath:
          path: /proc/sys/net
          type: Directory
      - name: host-proc-sys-kernel
        hostPath:
          path: /proc/sys/kernel
          type: Directory
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              - key: ca.crt
                path: client-ca.crt
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/port: "9963"
        prometheus.io/scrape: "true"
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.15.6@sha256:5789f0935eef96ad571e4f5565a8800d3a8fbb05265cf6909300cd82fd513c3d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        ports:
        - name: prometheus
          containerPort: 9963
          hostPort: 9963
          protocol: TCP
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      initContainers:
      - name: etcd-init
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - etcdinit
        # These need to match the equivalent arguments to etcd in the main container.
        - --etcd-cluster-name=clustermesh-apiserver
        - --etcd-initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --etcd-data-dir=/var/run/etcd
        env:
          # The Cilium cluster name (specified via the `CILIUM_CLUSTER_NAME` environment variable) and the etcd cluster
          # name (specified via the `--etcd-cluster-name` argument) are very different concepts. The Cilium cluster name
          # is the name of the overall Cilium cluster, and is used to set the admin account username. The etcd cluster
          # name is a concept that's only relevant for etcd itself. The etcd cluster name must be the same for both this
          # command and the actual invocation of etcd in the main containers of this Pod, but it's otherwise not
          # relevant to Cilium.
        - name: CILIUM_CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        # The clustermesh-apiserver container image includes an etcd binary.
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --auto-compaction-retention=1
        - --listen-metrics-urls=http://[$(HOSTNAME_IP)]:9963
        - --metrics=basic
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        - name: etcd-metrics
          containerPort: 9963
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - clustermesh
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt
        - etcd.config=/var/lib/cilium/etcd-config.yaml
        - --max-connected-clusters=255
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        - --controller-group-metrics=all
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: IDENTITY_ALLOCATION_MODE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: identity-allocation-mode
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        ports:
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir: {}
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "clustermesh-apiserver"
      serviceAccountName: "clustermesh-apiserver"
      terminationGracePeriodSeconds: 30
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: clustermesh-apiserver
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.15.6@sha256:a0863dd70d081b273b87b9b7ce7e2d3f99171c2f5e202cd57bc6691e51283e0c"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 3
          livenessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 3
          startupProbe:
            # give the relay one minute to start up
            grpc:
              port: 4222
            timeoutSeconds: 3
            failureThreshold: 20
            periodSeconds: 3
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          - name: tls
            mountPath: /var/lib/hubble-relay/tls
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Always
      priorityClassName: 
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 1001
        runAsGroup: 1001
        runAsUser: 1001
      priorityClassName: 
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.13.0@sha256:7d663dc16538dd6e29061abd1047013a645e6e69c115e008bee9ea9fef9a6666"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
        readinessProbe:
          httpGet:
            path: /
            port: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.13.0@sha256:1e7657d997c5a48253bb8dc91ecee75b63018d16ff5e5797e5af367336bc8803"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
