---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRUk1RTU4wQVNtdFRrOGltRjgzUGRXakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek0yV2hjTk1qY3dOakV4TVRreQpOek0yV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRGJBV2p4YW9NTDB6NXNlVlJONk1nejFNSWtMbzZQRTlVVDB4bmQrZ2RMUnJ6LzZVVVYKWmRTNllqVmFROVBSbm5UUWljd2I3eGNDNnBiMHVHdFhZd1UrcnBGdDdDUUJLRmhQemtrRlRZbDVURmhYSG93SwpOdHc2OXNKdlNQVmV2RU9RR3QvV2tSZU5XZzR4bFRNaHdpclIvalRrZ0xTL090Y3JNbGxnMzZEOE5qNFhlODl6Ck5sR1NvQ3FIMytoek1VQkRDV1h3ajl4c1FjVUJxbTdrUGtxODZMRUpNYjNHNHlENXk3NmF6RXpwb3RmQm5Rbk0KUFNXa1lBTTFJNWFybmRVWXhJSkQ1eUxqbjB5K0JTRlVTdkRqTFR6K2pnblN4andtSEJ1eFhyc3NHR0duY2ZFRQpMK00wVUNsZkJLd1o1TGhBcnRQbU9ZWjNoS2pwZzFIdk9JRnhBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVXbDhqTWlwcCtxZjUxbkpqa2loVml0MjBsQ0l3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFOaURxT2VVNVJFdVB4aFFxWWJCRDVTUkQyUGdMSkYwOUp4QVVJazkycW9yb3RBbGl5Tkk1SDVaCmdOSWd1Q0hyOUFsalNJdEJEUklMdmdwRldaYi9zTkd3K1lncTZLdXFVRkhmbjNYM3QybWpVWnVmUGZTYk5tOWQKVzg3OUUrRUxWSDJNc3JHVG85SmYvaGM2dWVvd2dnbGxvSEVjOVZHSkpqUTE2NzNVZkJ2VEE0dlBVdGdwaGordApjbXpsSVJlOTgzcGxBTnVTSUUveGhhMXhMT29MYTg1ei9LblkwVVV6SzFOSEs1T2tEeDFFS3VCM0EvWTR3bWg0CkhjUXZGNnJhRDVtN2VPVS9RTm1zcGZMVXF2YlNHWGliTFJoVDN3UDc2R2VaY05SeEp5eEpLeGZ4eTRLbVBIQkIKSE95bTBmbUs2QzV0ZzU0UHhEdVBwdm8rY2xOS1JFQT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcGdJQkFBS0NBUUVBMndGbzhXcURDOU0rYkhsVVRlaklNOVRDSkM2T2p4UFZFOU1aM2ZvSFMwYTgvK2xGCkZXWFV1bUkxV2tQVDBaNTAwSW5NRys4WEF1cVc5TGhyVjJNRlBxNlJiZXdrQVNoWVQ4NUpCVTJKZVV4WVZ4Nk0KQ2piY092YkNiMGoxWHJ4RGtCcmYxcEVYalZvT01aVXpJY0lxMGY0MDVJQzB2enJYS3pKWllOK2cvRFkrRjN2UApjelpSa3FBcWg5L29jekZBUXdsbDhJL2NiRUhGQWFwdTVENUt2T2l4Q1RHOXh1TWcrY3UrbXN4TTZhTFh3WjBKCnpEMGxwR0FETlNPV3E1M1ZHTVNDUStjaTQ1OU12Z1VoVkVydzR5MDgvbzRKMHNZOEpod2JzVjY3TEJoaHAzSHgKQkMvak5GQXBYd1NzR2VTNFFLN1Q1am1HZDRTbzZZTlI3emlCY1FJREFRQUJBb0lCQVFDUUJJQlhhWHlkMVIrUwp3OEs5clJ1aWdnSGRPMFNDTUQrSjF1T0d4cm52TmFocC9hTnhhOUtWY3FtMUh5OTNCR1c3RVRMSkY5UWhGZFdKClBwRlFHUXpFNkpVNEhQYWNVRVNxem5QVWFlWENmNE1FWDFFbUVtZUcydWlIdUFtcmI5QmFQbUgrUHRHbklaWjkKNHFpS1JaNVZFMzhDMk9TRGNKVTRrZGFXenRpVm9YcDViYVpyaXFXVy9rK1JBS0ZDNG5CVzZ0Zm9PQisxclFjSgpicHJaMkliYm9rMmFucno2d1dzNG16dm1WQVhvc2dNb29FYmlNdDQxOGVOeXd1bXA5Ynd3aFZCdHlDejVIVmhyCkY0SWZNOVdVejhIS1dxVjNyOGJxdWtacllVSWtTUUM5cEhMSCszZlRGbVJhSHVjTjZ6TFZjRCtkNnorOXE2U0oKUDF1c1NmUnhBb0dCQVBKRW9GZDA0WlRxZWM3bVhMcVNUWGxQeXkvRnhNdStjWUVxQWo4eWZMQzRmQVZyMUQ0VQpWRW9YN2Rjc09ZZnA3WlQxbzJ2T2VzZ0FpWlZMYXgwV2lQQXg3dFQ4NzV2aFRZdCt6L0JCM1NER2FBVlEyRm00Clp3Y1hPVGl1YkZheGhveHRWbFFGYVd3MW10S2dIL0ZINURWeVMyUmNMK0lsYk1QM2VUdHYvR3o5QW9HQkFPZHIKUE5idFJVcTc2RHV3YnNrSzI3Y1IrRkpSSGxWdnllZW1SZkVHRkZyUjJZRFZxMWNSL3JpWmZYVXUwQmYxdGhyego2MmxQekoydVl2bTNES3hVUy9DbjFraDJJakRIOERLWDFCSHBlT2tLQW5OR1dYNHJMTXBHcjdNOHlBM3NLc1FyClRkV04zdG1iNTlPMTBNVWduNTRoL1I0S1NubFp2ZXlzbHFrWnVncUZBb0dCQU5FRFRnWkY2M3pMa2sxalJ5c2IKbjhXQ2h2enZOZXJGb2kxYWJkZlNHZXRwTG02SzZmQ3BIMU5STTd3SkJwVnd4NjFWQXltMldRMkdFUzBCaFNieQpVekJQRkFzak1TR2VEb1hENFdnWm1zcDFBamRiMlZ3R2tMUjRYOEM4RXZIMGRPMWdRek4zKzgwRXJrNzdJTFBNClgyR1ErdVJaK0dHMkFoRkx4NGIxQmFXTkFvR0JBSXoyVldqVnZvOTNSazZWZWVZY0p4bXNhSVk3d3k1bm1hVHgKTTBsTldyaTNlclZ2Y1o3bjV6Q3F6akREQXg2VkhRZnQ3RWVKeENtSVArRzhEb3dxRE5mYVpEeGZPUlJkdFlJYgoyYUhQaFVidVFlL1Z1azJRSHdoWFprN1hoMFJ6eHRrWFI2SDllUEUwZGxJUFBjdlZ3MlNmYjM4TTViQmxhYnJ3CnBoVDdCc2ZCQW9HQkFOWDliRzFob09Da1pKT2JMOGNhSThqZ0t0UFJ6a1V0aGhlNmtEQ1dzbFdibU5WQnpER3UKWlpmUjZLNUhuZ0VSWVJPNTN6dFo0eERsanh1RGhkNWRZVm5tVGY3VDZaRnFXcFlOYkxPOWlER0d1M2hrelRURgpTak5zOWdlK3VIb2l2VVNIM2JRSDFkT3Z6aFZuSXFlTDF2TTlnQ3Yvbm1OeE9YR1hYYUtDeloycQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRUk1RTU4wQVNtdFRrOGltRjgzUGRXakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek0yV2hjTk1qY3dOakV4TVRreQpOek0yV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRGJBV2p4YW9NTDB6NXNlVlJONk1nejFNSWtMbzZQRTlVVDB4bmQrZ2RMUnJ6LzZVVVYKWmRTNllqVmFROVBSbm5UUWljd2I3eGNDNnBiMHVHdFhZd1UrcnBGdDdDUUJLRmhQemtrRlRZbDVURmhYSG93SwpOdHc2OXNKdlNQVmV2RU9RR3QvV2tSZU5XZzR4bFRNaHdpclIvalRrZ0xTL090Y3JNbGxnMzZEOE5qNFhlODl6Ck5sR1NvQ3FIMytoek1VQkRDV1h3ajl4c1FjVUJxbTdrUGtxODZMRUpNYjNHNHlENXk3NmF6RXpwb3RmQm5Rbk0KUFNXa1lBTTFJNWFybmRVWXhJSkQ1eUxqbjB5K0JTRlVTdkRqTFR6K2pnblN4andtSEJ1eFhyc3NHR0duY2ZFRQpMK00wVUNsZkJLd1o1TGhBcnRQbU9ZWjNoS2pwZzFIdk9JRnhBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVXbDhqTWlwcCtxZjUxbkpqa2loVml0MjBsQ0l3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFOaURxT2VVNVJFdVB4aFFxWWJCRDVTUkQyUGdMSkYwOUp4QVVJazkycW9yb3RBbGl5Tkk1SDVaCmdOSWd1Q0hyOUFsalNJdEJEUklMdmdwRldaYi9zTkd3K1lncTZLdXFVRkhmbjNYM3QybWpVWnVmUGZTYk5tOWQKVzg3OUUrRUxWSDJNc3JHVG85SmYvaGM2dWVvd2dnbGxvSEVjOVZHSkpqUTE2NzNVZkJ2VEE0dlBVdGdwaGordApjbXpsSVJlOTgzcGxBTnVTSUUveGhhMXhMT29MYTg1ei9LblkwVVV6SzFOSEs1T2tEeDFFS3VCM0EvWTR3bWg0CkhjUXZGNnJhRDVtN2VPVS9RTm1zcGZMVXF2YlNHWGliTFJoVDN3UDc2R2VaY05SeEp5eEpLeGZ4eTRLbVBIQkIKSE95bTBmbUs2QzV0ZzU0UHhEdVBwdm8rY2xOS1JFQT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLRENDQWhDZ0F3SUJBZ0lRSm1TaC80a3JDWFhGQ2p5UkplTVpsVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek0zV2hjTk1qY3dOakV4TVRreQpOek0zV2pBVU1SSXdFQVlEVlFRREV3bGhaRzFwYmkxak1UVXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRG92RkZnT2RhWER2N2xEL0lPK0RYZVBkUzJMeDk5K29kc0dwR21FQW1QRkFhMXVaa0cKeUEzUzlVcCtJNGNqNEhheTVRU0RudnJlK2Q3UVJsR1BhOVR4OGR3bHNodThBTS9Sb2loOStNRnJtOUVYTHNFSgozek82VEsvZlhwMHVKSEFXZ3RGQXpMeW9KQkJDMENybWM0Rnh5RkhKV05UbHlIT2xpY0NkcWxGSDl1M1RabThNCmdVb28xdENlMGNpQkhucGZuT0orb2tUOEk1VGN3aW9tZ25JODBSTkNmcjhoSW5YTmZRY2d2LzdtZDcvYUpSV0sKQlRHS2E3RStDYWVaZGp3eEw4WDcxRFVXZUJZUjdjTlFVanJ6dmlseHRwNm5KQWR1VkVVZGlKcWtjRk9RU0pURApRVUxVWS95NG93U2ptS2l5STY2YUE1ckNLU0c0VVJ5WUpTUUhBZ01CQUFHamRqQjBNQTRHQTFVZER3RUIvd1FFCkF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXcKQURBZkJnTlZIU01FR0RBV2dCUmFYeU15S21uNnAvbldjbU9TS0ZXSzNiU1VJakFVQmdOVkhSRUVEVEFMZ2dscwpiMk5oYkdodmMzUXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQ29LOUhGcUZTTkpxTGpmcUx6MEpndzA4UXRCCjlJWGZxRHN3dXA0YUNqbHNVeUVzdnZkR3A4T2trbzJJa0FGNXd4UW5nZElGL0xkVnRJZWFwbWZ4ZXIyWlZMNHgKSWEvTXM4Rm5tR2g0V21vb2FRbExqYzZjTGhvQURyWU5Kc0IrNmtsOXVoN3F1ZHA4c0Jlb1ZGK1VhL0E3RkRuZAoycks0QW9ncGtGWDA0bkJIdm5hWjMwbXF5Q29ZOVFxNUhKQ29nK3VwbjdRRjRpaWtsL0N1QVJxWEUvanZLL3E4CmxCaEs3Z1NyM2F3VVJ5MEZBMW9DUmp5VXNpbGQrYXYrMjR0bWNYQm84QkZ4a1d0d1VSWlNwMGZYRHlmUmVJM2EKVzFxT3hjdHlmR09ucTFsTkxZaTJRdWZCaWlOWFJHZHpiS3pzRmJ3M2NsOW9LdWk2eGRkckFzL0s2VTA9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBNkx4UllEbldsdzcrNVEveUR2ZzEzajNVdGk4ZmZmcUhiQnFScGhBSmp4UUd0Ym1aCkJzZ04wdlZLZmlPSEkrQjJzdVVFZzU3NjN2bmUwRVpSajJ2VThmSGNKYklidkFEUDBhSW9mZmpCYTV2UkZ5N0IKQ2Q4enVreXYzMTZkTGlSd0ZvTFJRTXk4cUNRUVF0QXE1bk9CY2NoUnlWalU1Y2h6cFluQW5hcFJSL2J0MDJadgpESUZLS05iUW50SElnUjU2WDV6aWZxSkUvQ09VM01JcUpvSnlQTkVUUW42L0lTSjF6WDBISUwvKzVuZS8yaVVWCmlnVXhpbXV4UGdtbm1YWThNUy9GKzlRMUZuZ1dFZTNEVUZJNjg3NHBjYmFlcHlRSGJsUkZIWWlhcEhCVGtFaVUKdzBGQzFHUDh1S01FbzVpb3NpT3VtZ09hd2lraHVGRWNtQ1VrQndJREFRQUJBb0lCQVFEVWNNR2ZJbXg4NnRWRQo1ZTlBTnRXRkRjK1NsU1ViNjRtZDVncTVHTDZBK2ZpOS9MSndmRUFTSnBGZTNyTkd6bWZMR0Qyc24zdkQrVFduCnkrZzdFR1VLaklrMVo0VGxjYUJCYk5HbFcySERCakl3QlI5MEVXZTRVTFBoSXc0Nnhrd0NZRnI5MldVRDNoZHgKeFc3RGVQL1ppczhOQ2FjY01JTlB3WlF1MXY3bXZnUExPOTYrTGFQU0pBajVid1dDM2Q1eHI5dzVBcGZjWUtYegpVdE9UMDNJbnh0QmxIUW1VWkdyZ2NGTVBQeFVvLzl3U2JKQUJ6dkxZWTMzbE9OcGRpM3dEd0xpVkI3Q0lpNzhSCjdwSEtGbWFkSTdkdWFHWElTMmNyQWRVWDZWTk5rWFNlZThuR2hGTjEwVjRJdHpSeE54TG1YN2d0Y2FGb0RDZHMKWkhadjduN3hBb0dCQVBwRjBtcUd3Y1c4WDEyaGMxdHF3ZEprSk1rcWRSa2ZWRWw2VlhqTkU3TUdSZDFoRUR6MApNNGNnNzBRZzRJTkRrOCt1T3lRbVVPK2hONHlyMUNwYkQ0eldpVzY0a2Jvd0RNa3kzRWlxUzR4RFFFOVJTNlNPCit0MW5KelVZVUxzbHc1RnRZK20rWE5YbExpUExZamNuelpaVC82SjBST2phZGlHSTJWdHBQMGFyQW9HQkFPNFAKd2dENGFwQTZKRlNraStMU1Z3QjIyK1Rna2YxSUpIeVNVdzQzbndzOEozZGpya2JPWEFReUVKRWN6ellKVVJ2UgozNU9UWVhValE3NkRpMjNjcmFGUC8rT3RvRmh4RDRzNUdWcTBYcVZjeE0wckRwNXgwU0dsdEhwd3p1VWp4eWNVCkFnUEo5TnUrWExhU1dxdTFnKzVmUW1UeW9nM0dtc0dSUk5GdlBRZ1ZBb0dBUkRCQjVFUlRCMDBMcnJjT2R4bmYKTlRPVDBqdC9MQmtkSGVmMjRiTCthd2lLZ0lheHBlbmpJQzRaQXJieWRORTB0S0VEL0JWMGQ5VzFETjdFTDhZZgp0bis5Y2kxWGh5TVFXTUZDdzRtaWk5VEc4TlYxaHFCdU9XU2hpaFhWNlNlZzRUNnN1a0xqaUdPbzdwZTdhc3V0CmVBZnEzcGhQTGlKWGpVdDc3U3YvMFlFQ2dZRUF5RVFCVkllbVBjWnJvYmo2NU1sRjMySWVBaURaTDFWdFBFNXMKQ0YzS01jMWM5aGFwR1crb0FPK00rRVpnR25rai9sOUQwZ1g5eW1qc0tHekk4cGJlaWdHZXBvMzlnZWs2eGtnMgppQk9NTzFnYlJ1MmQwclMwMWJWc2FrUlVDSGRjcGdjeTJyVWVnMjFVMlZHdGJSMjU2dUhBSE9Qd1o5NVhlZGNYCktZaUdzekVDZ1lBeHNmcWpTakd0K0dScWxDUWF4Z0Z2SmxFaFY0MFJ6NUp6WVNZQThsYzZoTFVXZUZCdjFCL0EKejJ1V0hrR0IyTis5enNITmh6SVhGL2JPa2Q3ZXJNM1VBSHdCOUVOTk5PbXlFN3NkUVd3U3k4WjdwUkpnU1FqSgpjTU1RTk1aTGZrYWxHR3lUYTJwYjZ4RTE2dFU4R2RZSXBwN25NdGtDc0IxR1BSckFIZHNIYlE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRUk1RTU4wQVNtdFRrOGltRjgzUGRXakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek0yV2hjTk1qY3dOakV4TVRreQpOek0yV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRGJBV2p4YW9NTDB6NXNlVlJONk1nejFNSWtMbzZQRTlVVDB4bmQrZ2RMUnJ6LzZVVVYKWmRTNllqVmFROVBSbm5UUWljd2I3eGNDNnBiMHVHdFhZd1UrcnBGdDdDUUJLRmhQemtrRlRZbDVURmhYSG93SwpOdHc2OXNKdlNQVmV2RU9RR3QvV2tSZU5XZzR4bFRNaHdpclIvalRrZ0xTL090Y3JNbGxnMzZEOE5qNFhlODl6Ck5sR1NvQ3FIMytoek1VQkRDV1h3ajl4c1FjVUJxbTdrUGtxODZMRUpNYjNHNHlENXk3NmF6RXpwb3RmQm5Rbk0KUFNXa1lBTTFJNWFybmRVWXhJSkQ1eUxqbjB5K0JTRlVTdkRqTFR6K2pnblN4andtSEJ1eFhyc3NHR0duY2ZFRQpMK00wVUNsZkJLd1o1TGhBcnRQbU9ZWjNoS2pwZzFIdk9JRnhBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVXbDhqTWlwcCtxZjUxbkpqa2loVml0MjBsQ0l3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFOaURxT2VVNVJFdVB4aFFxWWJCRDVTUkQyUGdMSkYwOUp4QVVJazkycW9yb3RBbGl5Tkk1SDVaCmdOSWd1Q0hyOUFsalNJdEJEUklMdmdwRldaYi9zTkd3K1lncTZLdXFVRkhmbjNYM3QybWpVWnVmUGZTYk5tOWQKVzg3OUUrRUxWSDJNc3JHVG85SmYvaGM2dWVvd2dnbGxvSEVjOVZHSkpqUTE2NzNVZkJ2VEE0dlBVdGdwaGordApjbXpsSVJlOTgzcGxBTnVTSUUveGhhMXhMT29MYTg1ei9LblkwVVV6SzFOSEs1T2tEeDFFS3VCM0EvWTR3bWg0CkhjUXZGNnJhRDVtN2VPVS9RTm1zcGZMVXF2YlNHWGliTFJoVDN3UDc2R2VaY05SeEp5eEpLeGZ4eTRLbVBIQkIKSE95bTBmbUs2QzV0ZzU0UHhEdVBwdm8rY2xOS1JFQT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lSQVAreFJhOHVYd1ZxS2d6L3lNaXI1bnN3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN6TjFvWERUSTNNRFl4TVRFNQpNamN6TjFvd0VURVBNQTBHQTFVRUF4TUdjbVZ0YjNSbE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBCk1JSUJDZ0tDQVFFQTBraUhxeDhvdlVQWE52c3ZzcGVxaVNmSkppNFB1eFl0WkxFOXBRRHovZU9PUHg5bEdtR3EKVTAxYkU1bkl2ZDFoMWtXZ2h2ZzVQLzRHSUQzbXY2K1ZCRWE5ZVM3cURwdy8xalhvcDdSRFBuTk9CVFJkOTZ4WQp3dWs2T3EzVkxNM3ByMzlYUHJDZkdPWEt1ODFyU2d1aTlmTlhvT1FkY0dPV2t4QVBZRzY0TktWa0t4cG9hQU5SCjNMaWZpQ3ZRdGVLck4rTXFMOXVTNEdSMGRpVDh0ZDNlQjZhNzVTYjlQUldXcG5LSzhmeGN0KzlsaDkwRFUwTVIKLzV6ai9hNHRWMU1vOGlBTzFaTDNoeSttZ0htZFFhcmJkK0dKeTNjTmhqYnUzMTRXWElNbWhvQ3ZPSGZOK1YwMQpYVllpV0xycDZPYi83ZURqb05FUlRVN1p6SFhLbDJoMU5RSURBUUFCbzJBd1hqQU9CZ05WSFE4QkFmOEVCQU1DCkJhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXcKSHdZRFZSMGpCQmd3Rm9BVVdsOGpNaXBwK3FmNTFuSmpraWhWaXQyMGxDSXdEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUdzUzFQRHhHT1Eyd0xaZHlJQkJvV0M0YXNwUkI3TFlET1kzU090SHdxa3pHN3FxZFlURFE3S1pEVEVlCnhDd29OWG43Tk1HVWxZNC8rc1hDb2xUYnRCY0JXVkhHNzlreG5UZ1lJclJZTzY5dmhjRVQ0THRqUmI3ODkxVnQKUUxtKzRKUVVoVkxXd29veWM3b3ZPWkhDaEtSMnFGaGs0dWFFVFB4N1J4ZXgxNVl2dVJidVc5Vkd4WTBmT3RCTApjclpJV0hIWjZwVWNxV2MwSjBwM0pPMEFlS0s3TFBRTm1mQVQ4bHorQlpWMHpCdittM2RUbnpQQkpGU0llZi8rCmxCVVVKSGFmR0FzblpleEZzUUhqQ0MzSFc4T0xlTTI4S1piUm5JSU1KcnR0NU0zNi9zbzQvT0JnNi9vU21OTTYKNXczWWVmK1hNd2JITmUxWENnUCs4T3FpSnNFPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcGdJQkFBS0NBUUVBMGtpSHF4OG92VVBYTnZzdnNwZXFpU2ZKSmk0UHV4WXRaTEU5cFFEei9lT09QeDlsCkdtR3FVMDFiRTVuSXZkMWgxa1dnaHZnNVAvNEdJRDNtdjYrVkJFYTllUzdxRHB3LzFqWG9wN1JEUG5OT0JUUmQKOTZ4WXd1azZPcTNWTE0zcHIzOVhQckNmR09YS3U4MXJTZ3VpOWZOWG9PUWRjR09Xa3hBUFlHNjROS1ZrS3hwbwphQU5SM0xpZmlDdlF0ZUtyTitNcUw5dVM0R1IwZGlUOHRkM2VCNmE3NVNiOVBSV1dwbktLOGZ4Y3QrOWxoOTBEClUwTVIvNXpqL2E0dFYxTW84aUFPMVpMM2h5K21nSG1kUWFyYmQrR0p5M2NOaGpidTMxNFdYSU1taG9Ddk9IZk4KK1YwMVhWWWlXTHJwNk9iLzdlRGpvTkVSVFU3WnpIWEtsMmgxTlFJREFRQUJBb0lCQVFDSHFFRFZ0VkZMNEVNcgo5aG9NUmVtL2Q4bzlka094dHhucnRxZ0ZGYnRTRkFaRlZKU2QwMW5WU2JjeXl1Z0ZESmU4YXNpbnFlVU5FbXlUClNqdmRkNEZUOCtyeURjRHpVZnVnenNCYnlHQUZIcys3YmRBZElyTlVjcStkQVYzZi9Lc0FDOCtWNHMyUWUxWXgKbDlEYVFPMk5hOEloU21odmc5KzAyZ3lCY293bGNVM3hwRzZiTVJLUVRWSVhCNVNuRWp0TmUwNE1yRGRWbXBYOAo3LzZ4QmxoME1GVk9nSUlab2xIRG9LV0lNSUE2cXZvYlppdDRXb3VlNEl2UjduelY0OUZqaXNPOWV6SFp2NVVPCmZpWVpQNk81cU1WcnpXV0JqT1g2blBsSkJmcGZqWDQ1QW8zd1VreGtzWUxnTFZiN25BNHE5RGpQd1VVbG1rNCsKMWp4THIveEJBb0dCQU9uV01udS9BejRjSTQ1K1VKK0RmSW56NnhnNU1ZaG45OFE1UStyaGNZWnF1djB5V1JRNgpVL3A2YWdpT25Uc2VXTTBUL0xyS3hqbzVmcE14bkZ3VnNjQUZpWmI0U01WY2RrcXArZGlSOHhiOWxzMEpFR3hPCkFIQ1loQ09MdXlTUGRhQW1lOGxSNGJvcG5KSGg3VjM5blNzNmczRjRvMEpsa3dSaS9GUU5ya1p4QW9HQkFPWTIKMVovcjBjQndaWHZlL3FpSC9rdlltcGJ4cEp3SXVOenRQTmQ2TzhpL2FWcHNIb1JZWTh3YWxJZlZKclZFeGovMgpYYmE1cDRBbnY1eG5PajM2V2x2T2pFT0pGVWQ0QWZXbG5aODcxUjNHZDVNQnJ0Y0svZGJlNHhSLzV5RElKZDJqCjNvbGY5eEpvYnpGelhsQ2c4ZGM1dkU0aXcrZ1d1dUpJdTJuWTN1VUZBb0dCQUtnQ3J1TWFxMG5GRGdjajJ1bkIKbjRtL0ovdVBuSGRWdkQvUXBXdnQ3NU9VdkNXUU4xREJWL1Z3WHg4bTJQSFJMQnl0YjdrR1dNY2M2RVQ2TUU0NQppQzFmelN3YjJLMTFjY2pUdUNCVFBVWVhqbkpqUU5tUWNlQjB0UHlWT1RGYm9qZ2ZibkdIMDVmZXJoQmpOQm1FClQ1anZ3ZUdWdkRmSW80bFRWZGxPdXhrQkFvR0JBS1E1VTdVTVJZblE1Q1EwVkZlbkE1blpmNVhUOVVnMTFLSU4KUG95OExxK3JGQjJqNlRVaDFMZEI4dGpmRGdqYmNjMHBFM3NJLzFzbGY4T3p3OUY0cVVLNm1rYUhJTDNsOXdmawpTQWZTWjlvZ3ZTWUtXazRmRWl0WXZvYmVJdU80dzRKVHBxazY0d2FucDBLUWVTUnRXM2ZjUU45QVg1NU5zSzFCCmt5Z1R4QlY5QW9HQkFNKzdxSWt5ckg1a25WZXlpSk00OHJSU2lJQ3daQmlSZHdQL0NFeElmaUIyVmRUejJkU0EKTWx0T0lCMzg4NkZkV1ZEWUZqMHFzd0xwL0J2UTJBMklEWU92R01aV3kxN29iWTlnVTZ3VE1UaTJrWWVWQm1laApPZnFoN2FlVzVmNEFCRGlBZFNlNWpyelE3RlY3WlBPV3VPcGtML0pYWGlEWVFwbE1RTUhZRjdndQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRUk1RTU4wQVNtdFRrOGltRjgzUGRXakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek0yV2hjTk1qY3dOakV4TVRreQpOek0yV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRGJBV2p4YW9NTDB6NXNlVlJONk1nejFNSWtMbzZQRTlVVDB4bmQrZ2RMUnJ6LzZVVVYKWmRTNllqVmFROVBSbm5UUWljd2I3eGNDNnBiMHVHdFhZd1UrcnBGdDdDUUJLRmhQemtrRlRZbDVURmhYSG93SwpOdHc2OXNKdlNQVmV2RU9RR3QvV2tSZU5XZzR4bFRNaHdpclIvalRrZ0xTL090Y3JNbGxnMzZEOE5qNFhlODl6Ck5sR1NvQ3FIMytoek1VQkRDV1h3ajl4c1FjVUJxbTdrUGtxODZMRUpNYjNHNHlENXk3NmF6RXpwb3RmQm5Rbk0KUFNXa1lBTTFJNWFybmRVWXhJSkQ1eUxqbjB5K0JTRlVTdkRqTFR6K2pnblN4andtSEJ1eFhyc3NHR0duY2ZFRQpMK00wVUNsZkJLd1o1TGhBcnRQbU9ZWjNoS2pwZzFIdk9JRnhBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVXbDhqTWlwcCtxZjUxbkpqa2loVml0MjBsQ0l3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFOaURxT2VVNVJFdVB4aFFxWWJCRDVTUkQyUGdMSkYwOUp4QVVJazkycW9yb3RBbGl5Tkk1SDVaCmdOSWd1Q0hyOUFsalNJdEJEUklMdmdwRldaYi9zTkd3K1lncTZLdXFVRkhmbjNYM3QybWpVWnVmUGZTYk5tOWQKVzg3OUUrRUxWSDJNc3JHVG85SmYvaGM2dWVvd2dnbGxvSEVjOVZHSkpqUTE2NzNVZkJ2VEE0dlBVdGdwaGordApjbXpsSVJlOTgzcGxBTnVTSUUveGhhMXhMT29MYTg1ei9LblkwVVV6SzFOSEs1T2tEeDFFS3VCM0EvWTR3bWg0CkhjUXZGNnJhRDVtN2VPVS9RTm1zcGZMVXF2YlNHWGliTFJoVDN3UDc2R2VaY05SeEp5eEpLeGZ4eTRLbVBIQkIKSE95bTBmbUs2QzV0ZzU0UHhEdVBwdm8rY2xOS1JFQT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURwekNDQW8rZ0F3SUJBZ0lRU2lmQ3krMGkydFJvdU1aT25jYnJKakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek0zV2hjTk1qY3dOakV4TVRreQpOek0zV2pBcU1TZ3dKZ1lEVlFRREV4OWpiSFZ6ZEdWeWJXVnphQzFoY0dselpYSjJaWEl1WTJsc2FYVnRMbWx2Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBN01hZGkrdzV6cE9KWnJaVEQxL3UKZk1pZktFSW42L0htdldaWHVKSjJSdVNrY09vcE8vSUkyNXcvT2sveGhWbmxIQndqMGQzMFcrN2lXWmZoV3NVeQpza0lTL0ZpczNFR1pqRHowNGRUdlFGU3dUVUN0cmI2M0RiaTY1c25ERGN3QnlicnJxMzhxVi84UEltNDZwVndpCktyMnAyWW05NmJwbkJINUNUN2JYenBjUXQ5Qm9JSHoxRnZFUDF2U0xRcEJmVjIvTE9sQTBkeGFUTFhYWjNGN1IKZGxlSmFDNGZsWFFpWGNSM3p3U0t2dUZnbnNPcFJXOGRocXVQYTlOTFYvbXF2Z0JDd28yeHR3eFNTRFVsci9pWgpBQUlrQnhuMVJUa3NiWmhRS3lmV0ZYNTZKbmVmYm1mL3BnRHl6TnQ0VmdwVTdrNHZyakNqejVkekFTeWQyMkxPCjB3SURBUUFCbzRIZU1JSGJNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0QKQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JSYVh5TXlLbW42cC9uVwpjbU9TS0ZXSzNiU1VJakI3QmdOVkhSRUVkREJ5Z2g5amJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXVZMmxzCmFYVnRMbWx2Z2hBcUxtMWxjMmd1WTJsc2FYVnRMbWx2Z2lWamJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXUKYTNWaVpTMXplWE4wWlcwdWMzWmpod1IvQUFBQmh4QUFBQUFBQUFBQUFBQUFBQUFBQUFBQk1BMEdDU3FHU0liMwpEUUVCQ3dVQUE0SUJBUUJtV0FKRk4rR2VZbWE0UUpFeVh6VCt1YU9POG1Id3V2RE91TndWYlZteVo5aEFlQnRqCmVQNVkrb1BFTE1HRVYwTVRxS24rWEhFYThkWFd0N2kxUGEvRWVCWDdWaklhVEx1QTlqejNlWG80bmxYN3AxNzEKQkl0U0M4Z1dLM0pIejB6MEtYWUF1OTJMR2VwL3Bzd2ZTZThhQ1o5NU9RY09CeDhINk9GcUZnbGk3QnpWMjVZZgpVMXRESUZFa0dBelQwY2tscjBSS0QwaVN2WlAwVzhHOVlVVEFiMTY5bTd3aWxtRTZZMmVTN3dYaEhQMjh4VDNpCjU2a0lYZFZzUU5DUFg1QUFManJrNFYxcGR4N1pZMUkxOTlYUlBXUE1VVCs4VjBoQXg0Tlh3TnZDL0xlY2ZKRFUKRDdlOE5sczJ3UlAvODNVYjNsYnJDQ2ptQ1dPbFNtZXN0TVFSCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBN01hZGkrdzV6cE9KWnJaVEQxL3VmTWlmS0VJbjYvSG12V1pYdUpKMlJ1U2tjT29wCk8vSUkyNXcvT2sveGhWbmxIQndqMGQzMFcrN2lXWmZoV3NVeXNrSVMvRmlzM0VHWmpEejA0ZFR2UUZTd1RVQ3QKcmI2M0RiaTY1c25ERGN3QnlicnJxMzhxVi84UEltNDZwVndpS3IycDJZbTk2YnBuQkg1Q1Q3Ylh6cGNRdDlCbwpJSHoxRnZFUDF2U0xRcEJmVjIvTE9sQTBkeGFUTFhYWjNGN1JkbGVKYUM0ZmxYUWlYY1IzendTS3Z1Rmduc09wClJXOGRocXVQYTlOTFYvbXF2Z0JDd28yeHR3eFNTRFVsci9pWkFBSWtCeG4xUlRrc2JaaFFLeWZXRlg1NkpuZWYKYm1mL3BnRHl6TnQ0VmdwVTdrNHZyakNqejVkekFTeWQyMkxPMHdJREFRQUJBb0lCQUUydEt1cElhUDU0TUU5ZAo2UW5XTXVzRTloSERBazNKWWlVb2VnYTNKYzVFSEI1ZTg0QVMrd3p3eVYxYjlLUUd4YjdmREhGQkczVTlmVXhmCkl6TWdGbTJjZDVZSmtVd0F5VnJVZEpIUnhWdVpiTzByRnM4MURlQ1doZHBJdnBDOEtLb0JoR2NTcE5XUmUybVUKTi9FZnRLWEk2dnZPMEZycEovcTFZUk85ckRhOWZ0TWtwUVlidDEvQ3RVYi9ITU9FOGZMMisrL3JIN1RqbWx1NAp0QjRUeHdla3gvRkdUc1QwSmVqWktKK0dkb3NpM3ZCR0d4ODB4aXZrOUZTMHMvUVJkNU45RzQ3NlBFT0F4OHBYCkU2emQxa3hrdFk1RTgwOExFSTkvUk5WU0FnMW5yWDM5YldFS1ArL1Iva29yQVFLbFJLeXd1bFZHVC9tTkdlQW0KZCtWMUVJRUNnWUVBOGp4N2JGMU9YM1Q0VnRuNmNEazFLSlc0L0QxNEZqV1FJaksrazdRK081RGRvMVlIcHkwagpPSlpua25jNVpHREdnVDBCQzdnV0xCVjNBWUFUMUlVZUxweTE1OGVrbkhORi96clp6WEgzNUlnMG0ybjN6ZTNECloveERHRDhuZEFTZFEvOHAyM3I4RTFvenRZd0xBK0V1UHpTTUVPMW1QQ3p6azFiMDJGcmYxZkVDZ1lFQStqcTEKREFTMWkxbnU4ay9ZU3VzOE1NM2xUblA1Q0pYSmdxaElmbE1Xd3REL21GMkV1YmJSMndDVE9NZGxpUEExNW9sSAphTVBKa1JVL0I2TlhWM211Vm40YjdmVjFwRjJyL3A1TlVXNmM0d1dCK1BydU9IQ3NyK0p6Z1gvK3hXeTd2ZE5aClFGTlpQY05HODNuRENKdDFkRzhvQWdKMk96OXJHNmxDM2tUM0hRTUNnWUVBa0luNFYydkJkUUgxb05WR015cGYKaHN6MzZVTEFZZmdwL2Mzcm0zVEVZWVNLUzRqczNocjMxaThncyt1Q0Nsd1lka3N4VVkzUlpSS1Z4UVpvVHJuegpqWHFpckIrYklHTkVGQXhJbyticU5LbjFRZnJVQzBOaEFxNHFWdEJ3T1REN3FmUWFSTVU0bmsrSFpUK2YzdnZCClBhT2NKQW1UcERwcVNMTnRPNS9WeWZFQ2dZRUFnSHpzd2tNWXhYbGtqT0FhL0QxV0p1bFN1Ym9yUWhGSDYrTmwKZGhoTU03VUZ5Y01iaUJFc0tQeGVuR1VtNmU0T2YxWTJhTUZBRzFPQmpmWjl2dGtvZ0JrNVZqTVlPVkl3SXdvKwpRWFkrOFFPKy9ZNDhESmN1MVJHK3BkeUhnZkNYWnAzRDBwZjUxeEVTdWFyb1R0OGtyS2ozTGpEOWJPYmZwTkNCCkdZam9LdWtDZ1lFQTNINkpRT3pGY2xqQzBBNEM2R3M0WkdYU2tOdDh5ZkJJdWljYXF6b2lxNTd2MytuNmZHNCsKSE0xUnc5R0hvTmE4Sm1TQWh2TlBVN2VubjU1WDVjeGxNaGF3dXJTTGlQbjFvcHFpSmppREdTUmlwQ2htVFU3UgpXd1NPbU5OZEp0VzZvdElJOWJtSGZmSHR4T2dicy9oVW8rVTV6cWkwYkFIZmFhRVZUaVp1ZGhRPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRUk1RTU4wQVNtdFRrOGltRjgzUGRXakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek0yV2hjTk1qY3dOakV4TVRreQpOek0yV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRGJBV2p4YW9NTDB6NXNlVlJONk1nejFNSWtMbzZQRTlVVDB4bmQrZ2RMUnJ6LzZVVVYKWmRTNllqVmFROVBSbm5UUWljd2I3eGNDNnBiMHVHdFhZd1UrcnBGdDdDUUJLRmhQemtrRlRZbDVURmhYSG93SwpOdHc2OXNKdlNQVmV2RU9RR3QvV2tSZU5XZzR4bFRNaHdpclIvalRrZ0xTL090Y3JNbGxnMzZEOE5qNFhlODl6Ck5sR1NvQ3FIMytoek1VQkRDV1h3ajl4c1FjVUJxbTdrUGtxODZMRUpNYjNHNHlENXk3NmF6RXpwb3RmQm5Rbk0KUFNXa1lBTTFJNWFybmRVWXhJSkQ1eUxqbjB5K0JTRlVTdkRqTFR6K2pnblN4andtSEJ1eFhyc3NHR0duY2ZFRQpMK00wVUNsZkJLd1o1TGhBcnRQbU9ZWjNoS2pwZzFIdk9JRnhBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVXbDhqTWlwcCtxZjUxbkpqa2loVml0MjBsQ0l3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFOaURxT2VVNVJFdVB4aFFxWWJCRDVTUkQyUGdMSkYwOUp4QVVJazkycW9yb3RBbGl5Tkk1SDVaCmdOSWd1Q0hyOUFsalNJdEJEUklMdmdwRldaYi9zTkd3K1lncTZLdXFVRkhmbjNYM3QybWpVWnVmUGZTYk5tOWQKVzg3OUUrRUxWSDJNc3JHVG85SmYvaGM2dWVvd2dnbGxvSEVjOVZHSkpqUTE2NzNVZkJ2VEE0dlBVdGdwaGordApjbXpsSVJlOTgzcGxBTnVTSUUveGhhMXhMT29MYTg1ei9LblkwVVV6SzFOSEs1T2tEeDFFS3VCM0EvWTR3bWg0CkhjUXZGNnJhRDVtN2VPVS9RTm1zcGZMVXF2YlNHWGliTFJoVDN3UDc2R2VaY05SeEp5eEpLeGZ4eTRLbVBIQkIKSE95bTBmbUs2QzV0ZzU0UHhEdVBwdm8rY2xOS1JFQT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTVENDQWpHZ0F3SUJBZ0lSQUl5TnRvS3Rza24yL0JLSTRvZHJQQk13RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN6TjFvWERUSTNNRFl4TVRFNQpNamN6TjFvd0l6RWhNQjhHQTFVRUF3d1lLaTVvZFdKaWJHVXRjbVZzWVhrdVkybHNhWFZ0TG1sdk1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXVPVWJ5djRFTDhCMzlhL3lUVGJwbzNzK2d2d3cKNTJPeFpmRitKTFEyOVZZNHM0alVmQ3FzQmkxNXpja1RnUlN4dnJLMVQ0cDZBWGtlbEc0SkgyRnc5dU93eC9ragpmYXorUEVadEQyZ09DWnAydzFvWmM0S2M0aXo4Nyt5TCtTZTN3WlZxSFVpVEtydnVMMkVJNEp2UGZUYUlqZ3pNClVWR3pDR2R3Y0F2dzFtOUY5cmRjM0tUYkZTdGR3bkF1UlpWV0h4c2FXRGFIekE2SnpQb2pWWHo1ZUI2SUhRNW0KVjV3c0JBRGFXSTFBeUk2UG9QaXdlTlg2UlM1Q2pCL3pRbTRsTnBhY3F1a2c1Z0w3VXpERHlDdjJDRUZsRE52cwp5REpBV05teHFacjYzZDdldHZTTWF5TDY0b0EyaXpTbE9QN25IcTJUMXJBQjByM1Z6LzhmaklLTzN3SURBUUFCCm80R0dNSUdETUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUIKQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCUmFYeU15S21uNnAvbldjbU9TS0ZXSwozYlNVSWpBakJnTlZIUkVFSERBYWdoZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d0RRWUpLb1pJCmh2Y05BUUVMQlFBRGdnRUJBRTN2TUx5UGhnbUcyV3E2NEJQclFaMUxIVXlFbWFoelk4Tk5RdW9lUi90VFprMDYKbHhNT21wMGxjS3NyVC9vMVZOZVhNQnRiY2ZMMmdSYjkrSXVaOWVHTlArdWNxbUlaVHRjL3hnQjZ6aVFrUDREMwpEZ3pCMHVxVUJKNTl1QWVyNk1EVTdYODJEcnZYalpPZjNLOXhiV0cyRzlXVHd6WkUvRXQyNGlnU2NjajJGZllOCnVlTlpXOXZQbW1POGJJL0dGQzlWbVJmMTkvMmh4YnRVMFpKOFNwSDVSVUdkWWo1UjJneS9FbU5wUytkNnNJbFQKT2Jadk5GUnFPY1R2Q3BsRHEyQVFCZDNRMTBuakttUWVQNWFzS1NSWjl6L2dXYnhwRDBmY21Ya0dxdyt1WXo1dQpuL0ZDZytpSEw0dHlZRFZWVWRWUHpFeTVJcHlMQmg5RWlUKzlZakU9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdU9VYnl2NEVMOEIzOWEveVRUYnBvM3MrZ3Z3dzUyT3haZkYrSkxRMjlWWTRzNGpVCmZDcXNCaTE1emNrVGdSU3h2cksxVDRwNkFYa2VsRzRKSDJGdzl1T3d4L2tqZmF6K1BFWnREMmdPQ1pwMncxb1oKYzRLYzRpejg3K3lMK1NlM3daVnFIVWlUS3J2dUwyRUk0SnZQZlRhSWpnek1VVkd6Q0dkd2NBdncxbTlGOXJkYwozS1RiRlN0ZHduQXVSWlZXSHhzYVdEYUh6QTZKelBvalZYejVlQjZJSFE1bVY1d3NCQURhV0kxQXlJNlBvUGl3CmVOWDZSUzVDakIvelFtNGxOcGFjcXVrZzVnTDdVekREeUN2MkNFRmxETnZzeURKQVdObXhxWnI2M2Q3ZXR2U00KYXlMNjRvQTJpelNsT1A3bkhxMlQxckFCMHIzVnovOGZqSUtPM3dJREFRQUJBb0lCQVFDdUNxdkF4cDgyTzl3dgpuckZjVVlaWDV0a08vMGtoWmt4RWc2K1Q2VGVhZE5EbTNyUDFOVTI4ZXU0ZThWbTB0Y0FpbTZIai81dWM2MkFICnBCUmVQNkRRSmIvd1hPbzFrTE80RlNydng2ai9EVEVoN2h2ckNWV1g2WFVtZXVtL1hNMnlJVzFEcDE4d2FMcHEKU3RMS2FxQkRZeVBqWXRTbzcxaXhYbjBPVzQ4V3FRbEtqcGMyWjMxd2RPcSs4dnJTK1hwcEhpUTBWZlNRVHNwTwpkK1dDc1ZETzFqT1Rxd0dORzlWYmw0Q0daZGFkc3hVUVZGUkhKeFRYdWhsVUJmVHlUODREbHZKU2VzZG5ZMWlhCk5ZV21wWFkrQUpNNldKOG42Q0VROWFEUStDOUswSk4yRlBsaHgwNmdjcW9aWmJRNGZqODYybi9BeElpRlc1VUkKNFlWVDBHd0JBb0dCQU9iUmVFZzduY3BwRGZ0OXYvdmVXUUJsUXRabjA0WEEwUWdpZ2VJcmtNTkRsOElMcmIzUAprZFZKbTNPWWMyZkJhbjdmQ3NtM0VBNFlLclJwN01oN2VBeGY5Y05hRkplajcxbUxVWVZmeVNtUzg0Q0FSOWFqCnZhbU5EUTU4MkpqcW9pR1VyYVRvb2cydWNxMERlTTFwaWVQcXptOU9UUXJlam5XaERubHVlTGtCQW9HQkFNMFIKQzdjdUcrT3VQT3p0L2Y5NEV3RnU0WDlQNWI5TU9GLzB4bDYvenpMVG5kaEMxUTM4R3FEK3R1dFB1Uy9Wdmo1RwpWOUZoSUp5bFpTZFh6MGxBaDdwa1VxQTV0aHhHbnlvTGVMSHBmVU1rNlV3R05ZeFoweGVWalBCdTJEV1o5N3d2ClhSTWU4SEFVaEhuYUlmUkFqYU55TFhhUmxOQ1Yzay93YndpazZtZmZBb0dBQWk4QklFM1FGRllpRjdyODBma3MKaG1CdTNYQm1BK0hyR0ZTYlBmU0RqaFZabmpCV0dIR2FRNVpLcmpGSEJqaENOYWtPaFJJQ1NOL1pwNU5JOWl5VQoyaWtlUGhiZ0V2OHVDSDdVNnBvWllSZE96bXhvUVpPUys4T2wxL2srWTFQMDdMUm5ZQ1FEUkhYZUI5ejhpNVR3CkJRUDNwLzNwcEt5dVZGYU51SUJmREFFQ2dZQm1PTklMUFN2ZjRqSXl0U3hCVmZ5N1lTZDlURG10azNRaXVTVE4KaEhYbjB6OUMxNFhYRTgyK1pWcVBrRTB6QUN4MlpLQlFHa2VrYm5vdkU0R2I5VlB6WVNFakI4RzA5S3RRelNrYwpIdFUzVEVZVGhLRGExc2Y0WUs5Q0J5ODJBUXRTUHBYNSt4bEY5YVJZRFptUlpVQjFzbXZoU0E3VHIzR0RqY243Cm1DSFZKd0tCZ1FDL2VFaTZiQXpWdU96L2pDcU9ieU5nRTJDd2NqcEJLeGpobUdKN0pHU1JGZGxuVE5FMjBUY2MKbU9MUWxzcHpIanBoYmQ5VGFVOEtiV3ovSWptNk4xcUIzbGZNek04eVZSeFJDbGs0anhZSXlkRWZUQXIwaGRiMApGQk5sN3o1TmM5dmhKbXducjNJdnFKSnZncWZpcU43ZWh6UFZMZUhLeUdXcWw1V2w5NDM2MUE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRUk1RTU4wQVNtdFRrOGltRjgzUGRXakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek0yV2hjTk1qY3dOakV4TVRreQpOek0yV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRGJBV2p4YW9NTDB6NXNlVlJONk1nejFNSWtMbzZQRTlVVDB4bmQrZ2RMUnJ6LzZVVVYKWmRTNllqVmFROVBSbm5UUWljd2I3eGNDNnBiMHVHdFhZd1UrcnBGdDdDUUJLRmhQemtrRlRZbDVURmhYSG93SwpOdHc2OXNKdlNQVmV2RU9RR3QvV2tSZU5XZzR4bFRNaHdpclIvalRrZ0xTL090Y3JNbGxnMzZEOE5qNFhlODl6Ck5sR1NvQ3FIMytoek1VQkRDV1h3ajl4c1FjVUJxbTdrUGtxODZMRUpNYjNHNHlENXk3NmF6RXpwb3RmQm5Rbk0KUFNXa1lBTTFJNWFybmRVWXhJSkQ1eUxqbjB5K0JTRlVTdkRqTFR6K2pnblN4andtSEJ1eFhyc3NHR0duY2ZFRQpMK00wVUNsZkJLd1o1TGhBcnRQbU9ZWjNoS2pwZzFIdk9JRnhBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVXbDhqTWlwcCtxZjUxbkpqa2loVml0MjBsQ0l3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFOaURxT2VVNVJFdVB4aFFxWWJCRDVTUkQyUGdMSkYwOUp4QVVJazkycW9yb3RBbGl5Tkk1SDVaCmdOSWd1Q0hyOUFsalNJdEJEUklMdmdwRldaYi9zTkd3K1lncTZLdXFVRkhmbjNYM3QybWpVWnVmUGZTYk5tOWQKVzg3OUUrRUxWSDJNc3JHVG85SmYvaGM2dWVvd2dnbGxvSEVjOVZHSkpqUTE2NzNVZkJ2VEE0dlBVdGdwaGordApjbXpsSVJlOTgzcGxBTnVTSUUveGhhMXhMT29MYTg1ei9LblkwVVV6SzFOSEs1T2tEeDFFS3VCM0EvWTR3bWg0CkhjUXZGNnJhRDVtN2VPVS9RTm1zcGZMVXF2YlNHWGliTFJoVDN3UDc2R2VaY05SeEp5eEpLeGZ4eTRLbVBIQkIKSE95bTBmbUs2QzV0ZzU0UHhEdVBwdm8rY2xOS1JFQT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUakNDQWphZ0F3SUJBZ0lRYTlHOGFjTzY3QXplbTZhcmN5UmZ3REFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek0zV2hjTk1qY3dOakV4TVRreQpOek0zV2pBbU1TUXdJZ1lEVlFRRERCc3FMbU14TlM1b2RXSmliR1V0WjNKd1l5NWphV3hwZFcwdWFXOHdnZ0VpCk1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ2Q2ZU54MVE4ZHhLeWtPak1rdlkyQzlTMSsKeTdJNWxYV2VJMjg4Y1VxaVNkYXNDYkp1ejdYbWdwRlpvY1VyUkNQeTJQMkdPWTlpY2haeEo0UHRxNVRNTExVaAo1dVpXbjc3SCtGT2FhQkdjVkZSZ0pCcEh1VmRIUTZsU2NoV1oxQWZRSDFHSG5VTmtLdW9FaCszVGNJRU5Jd1ZiCi9wNzZmQlpGaE5ndktWaER5bXgrTnZkVmlkNElZYitEQTcwVnNPMCtLbjNtaGUxOTJDdW0vek1KbGFlNi82Zm8KOWI1ai81NCtlUWttTEcrVlYvamdaTHBmWk03aWpMd2F4Ym43ejI3OE84b3dHM0pacFg1N0JCT2E2OHNkRGhMTgo2U2pTeExYdmdWMG1IR2tQK2VoVnJBZGd3UVJSQlcyY242Y2s0czdiQm1IL2RkY0srYXFmTCtPYlhTeFhBZ01CCkFBR2pnWWt3Z1lZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGRnBmSXpJcWFmcW4rZFp5WTVJbwpWWXJkdEpRaU1DWUdBMVVkRVFRZk1CMkNHeW91WXpFMUxtaDFZbUpzWlMxbmNuQmpMbU5wYkdsMWJTNXBiekFOCkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQVJ3THc4aW1XdjlZVEQ4V2tIQXVsWFJrdkludm5hQ3ZlMGxvQk1yQmsKQnI3T0YwMDJpeUgrVXZEcmlmb0JOaGdWeGVuS1Y3MEwrNFhjenlPNzVNYU1jWUxsVGx0RFVabG5aOEQ4OWxSTApYdEFVRFg5YlVvYzlSTXdnK21WSG03RGtRaVVRSXJJczJENy95NlJWNXB5OGE1anh2T09TNkZxQ1l1SmErTlVCClZzWm9ZNGZUbkxhZ1ZqQlRMRVBKSk5zcG9MZ29kVnkrQlR6VkZaMldPMS9FNHJzNUpMeGpNUmZ3QU9DMkNCK0oKazkwdXlVcHFrS3grQ2UxUVhGRXhCZStSMGM2MUpOdzNOL3h4djBZdkxJSlUyOXN6SU4xMDJicnZIS0twQ0M4YQpiekdiSXpubWE4ZEVXcTJiRmhvaE84OHBmSnB3S2VVTWNRNnFyMjVINkhITzd3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBbmVuamNkVVBIY1NzcERvekpMMk5ndlV0ZnN1eU9aVjFuaU52UEhGS29rbldyQW15CmJzKzE1b0tSV2FIRkswUWo4dGo5aGptUFluSVdjU2VEN2F1VXpDeTFJZWJtVnArK3gvaFRtbWdSbkZSVVlDUWEKUjdsWFIwT3BVbklWbWRRSDBCOVJoNTFEWkNycUJJZnQwM0NCRFNNRlcvNmUrbndXUllUWUx5bFlROHBzZmpiMwpWWW5lQ0dHL2d3TzlGYkR0UGlwOTVvWHRmZGdycHY4ekNaV251dituNlBXK1kvK2VQbmtKSml4dmxWZjQ0R1M2ClgyVE80b3k4R3NXNSs4OXUvRHZLTUJ0eVdhVitld1FUbXV2TEhRNFN6ZWtvMHNTMTc0RmRKaHhwRC9ub1Zhd0gKWU1FRVVRVnRuSituSk9MTzJ3WmgvM1hYQ3ZtcW55L2ptMTBzVndJREFRQUJBb0lCQVFDRDc3cWNqUXJJTUY2ZQpDQkpiREJTRDZoMU01eHZOaU5ad2ZlS2VlWG1HQm5OWjRmQTNMVXdwZjhXNVFiUGU1bHV5dHlGN1YvUTRxR0dmCndRZzFOenBuTEtOWjQvVm5RcWkvb3ZjVzl3UmZ2UVdTSGhmbS9TK3kxeEZOVlF3L0xpd284MEhITU5ueGd2bHIKTjdhNUJqS01xMG43QnM0Rk1rL1pYWmpTTHBVVWJXZmhITXhmNkZGSlhBRm4zeUpTZTkwWWZqcU80cEo2L0NzWQpOejlTOU1hWW1TMUZoU1cvWHFMV2lRTXRzTmdVS2kyckZXV1d5VEZxMDg0L2dEcjk3ejdNRnRnRTMzbWF1U1BFCklXUi9pWGpBOUpXWkpnVHV4MEJ6b0ZvUWN6UGxFYmp6Skt1Y2Z4dG9BY2cxK2dpaGlLRnNBSVdRRVdaaWVvWGoKTjl0clB1bWhBb0dCQU1Fd2szM1FkQm1zazFnZFNIKzZEaUVURU12ejB1VUI3LzRtNUxWcXluZVIxSUFzaVNqRgo2a1BDdytpdXZKZjJzeVREL1NYYTJmcVVMc2dDOGdveVJrRktaRXpGNEtER1BQdjhSdHZ2bndacnBFV0lJN0RwCmpWRGhLaERWMmNqQXZpWW5YM1RWY2pvaG5WMWZreU1pZVJGcWdVaDdGUUVMTUVwak5CdWdsazhyQW9HQkFORkIKUEk0cG9oaElFZzA5WHk2d1RmUFFLT3dhZUszZW92bEk5aWdTS1IzaUpJYTVxZTE1SEFUNTRvWnpNUTNpdmkzQwpJM2VwT0kvZzUwb29zOU96dUVpRDUzRUVkZUpObFlNRFJNdyswdktjbDdoTTZyK3VxWWdORlpNSm1mVjk4UHRkCmF4NERDZHVabjVyVmMrYnd4WitsU1JTVHhpOUhiUzF6MnJsU2RLR0ZBb0dBRTNBUnh2enNVWkQ5bWtZSC8ySDIKL2ZqdkhiWkFwKzRUK1p4c01weTJGbVhEM2NtZFcwN2VqVWJSYzEzeGQ5RElvWkJlcmlwZytFZGtsWmRHUnlSYgowVUhzNlpTWFQxWGkyTysvS1czb3NEcXdZcGFhRUxqUEVTNDJqMDhWQkkvd0VlS3dSZzhiMlNGOHRlSmg2WTBVClpWNHo5OWo2ZWdwb0ozUG4wRWZPRjlVQ2dZRUF1S3FGc2ovem1OSWhmQ1dwRmg3bzdEM0xuM0ZOQnNQdnQyYzQKTk95eDlIbGFHcnRHeHhlV0xwNEgxdmRaVnhPL0djcTJXaWV3anVpL3RLWnU3R2t5UEd5TGx5V0VrdzQ4MzczRwp2U2pFS084Z3hiaTdnaVcxM3ljTTN4SWVHSlBvVXl5Q0Y1NCsyTm1lREpwTENvZDVJQVpSbENORlJ2d1YwWUxvCmg1dkk2YkVDZ1lBUG5HVUZRcG8rNk4zMVJ4bnNhN1lCZ3NoNWxjU3FFQmpBVDQzRFRWR0ZOditZZ2hBNWdHNVAKa2Z3dGpoV3J5RS9nUVQ3aThHekFmZFV3eGYraTN5WTFkMFRhYmJSYTR6NU5RZXA5VkNLajRhcUV4dDJ0R3N0SApjU3RheDBnZk9ZR2RZeXNsRXNITW5SRG5LWnNqdDJ3NTlRa2NNdnlwRDFzMFFMZlBrWmt0Nnc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  skip-cnp-status-startup-clean: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  policy-cidr-match-mode: ""
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"
  # If you want metrics enabled in cilium-operator, set the port for
  # which the Cilium Operator will have their metrics exposed.
  # NOTE that this will open the port on the nodes where Cilium operator pod
  # is scheduled.
  operator-prometheus-serve-addr: ":9963"
  enable-metrics: "true"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: c15
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "115"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  # Default case
  routing-mode: "tunnel"
  tunnel-protocol: "vxlan"
  service-no-backend-response: "reject"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-masquerade-to-route-source: "false"
  enable-wireguard: "true"
  wireguard-persistent-keepalive: "0s"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-local-redirect-policy: "false"

  kube-proxy-replacement: "false"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  enable-host-port: "false"
  enable-external-ips: "false"
  enable-node-port: "false"
  enable-health-check-nodeport: "true"
  enable-health-check-loadbalancer-ip: "false"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  bpf-lb-acceleration: "disabled"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  hubble-export-file-max-size-mb: "10"
  hubble-export-file-max-backups: "5"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  ipam-cilium-node-update-rate: "15s"
  cluster-pool-ipv4-cidr: "10.15.0.0/17"
  cluster-pool-ipv4-mask-size: "24"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "true"
  bgp-secrets-namespace: "kube-system"
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"

  k8s-client-qps: "5"
  k8s-client-burst: "10"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  # default DNS proxy to transparent mode in non-chaining modes
  dnsproxy-enable-transparent-mode: "true"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-xff-num-trusted-hops-ingress: "0"
  proxy-xff-num-trusted-hops-egress: "0"
  proxy-connect-timeout: "2"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"
  proxy-idle-timeout-seconds: "60"

  external-envoy-proxy: "false"
  max-connected-clusters: "255"

# Extra config allows adding arbitrary properties to the cilium config.
# By putting it at the end of the ConfigMap, it's also possible to override existing properties.
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: c15
    peer-service: "hubble-peer.kube-system.svc.cluster.local:443"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-hubble-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-hubble-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n\n        # Liveness probe\n        location /healthz {\n            access_log off;\n            add_header Content-Type text/plain;\n            return 200 'ok';\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumbgpnodeconfigs
  - ciliumbgpadvertisements
  - ciliumbgppeerconfigs
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  - ciliumbgpnodeconfigs/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumbgppeerconfigs
  - ciliumbgpadvertisements
  - ciliumbgpnodeconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumbgpclusterconfigs.cilium.io
  - ciliumbgppeerconfigs.cilium.io
  - ciliumbgpadvertisements.cilium.io
  - ciliumbgpnodeconfigs.cilium.io
  - ciliumbgpnodeconfigoverrides.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  - ciliumbgpclusterconfigs
  - ciliumbgpnodeconfigoverrides
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumendpoints
  - ciliumidentities
  verbs:
  - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumexternalworkloads/status
  - ciliumnodes
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumendpoints/status
  verbs:
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumexternalworkloads
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-bgp-control-plane-secrets
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: etcd-metrics
    port: 9963
    protocol: TCP
    targetPort: etcd-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: NodePort
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
    nodePort: 32379
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-agent: "unconfined"
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: "unconfined"
        container.apparmor.security.beta.kubernetes.io/mount-cgroup: "unconfined"
        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: "unconfined"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
          initialDelaySeconds: 5
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.memory
              divisor: '1'
        lifecycle:
          postStart:
            exec:
              command:
              - "bash"
              - "-c"
              - |
                    set -o errexit
                    set -o pipefail
                    set -o nounset
                    
                    # When running in AWS ENI mode, it's likely that 'aws-node' has
                    # had a chance to install SNAT iptables rules. These can result
                    # in dropped traffic, so we should attempt to remove them.
                    # We do it using a 'postStart' hook since this may need to run
                    # for nodes which might have already been init'ed but may still
                    # have dangling rules. This is safe because there are no
                    # dependencies on anything that is part of the startup script
                    # itself, and can be safely run multiple times per node (e.g. in
                    # case of a restart).
                    if [[ "$(iptables-save | grep -E -c 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN')" != "0" ]];
                    then
                        echo 'Deleting iptables rules created by the AWS CNI VPC plugin'
                        iptables-save | grep -E -v 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN' | iptables-restore
                    fi
                    echo 'Done!'
                    
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - CHOWN
              - KILL
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
              - DAC_OVERRIDE
              - FOWNER
              - SETGID
              - SETUID
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Unprivileged containers need to mount /proc/sys/net from the host
        # to have write access
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        # Unprivileged containers need to mount /proc/sys/kernel from the host
        # to have write access
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Unprivileged containers can't set mount propagation to bidirectional
          # in this case we will mount the bpf fs from an init container that
          # is privileged and set the mount propagation from host to container
          # in Cilium.
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-dbg
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      # Mount the bpf fs if it is not mounted. We will perform this task
      # from a privileged container because the mount propagation bidirectional
      # only works from privileged containers.
      - name: mount-bpf-fs
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        args:
        - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
        command:
        - /bin/bash
        - -c
        - --
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        - name: WRITE_CNI_CONF_WHEN_READY
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: write-cni-conf-when-ready
              optional: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
            drop:
              - ALL
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
      - name: host-proc-sys-net
        hostPath:
          path: /proc/sys/net
          type: Directory
      - name: host-proc-sys-kernel
        hostPath:
          path: /proc/sys/kernel
          type: Directory
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              - key: ca.crt
                path: client-ca.crt
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/port: "9963"
        prometheus.io/scrape: "true"
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.15.6@sha256:5789f0935eef96ad571e4f5565a8800d3a8fbb05265cf6909300cd82fd513c3d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        ports:
        - name: prometheus
          containerPort: 9963
          hostPort: 9963
          protocol: TCP
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      initContainers:
      - name: etcd-init
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - etcdinit
        # These need to match the equivalent arguments to etcd in the main container.
        - --etcd-cluster-name=clustermesh-apiserver
        - --etcd-initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --etcd-data-dir=/var/run/etcd
        env:
          # The Cilium cluster name (specified via the `CILIUM_CLUSTER_NAME` environment variable) and the etcd cluster
          # name (specified via the `--etcd-cluster-name` argument) are very different concepts. The Cilium cluster name
          # is the name of the overall Cilium cluster, and is used to set the admin account username. The etcd cluster
          # name is a concept that's only relevant for etcd itself. The etcd cluster name must be the same for both this
          # command and the actual invocation of etcd in the main containers of this Pod, but it's otherwise not
          # relevant to Cilium.
        - name: CILIUM_CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        # The clustermesh-apiserver container image includes an etcd binary.
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --auto-compaction-retention=1
        - --listen-metrics-urls=http://[$(HOSTNAME_IP)]:9963
        - --metrics=basic
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        - name: etcd-metrics
          containerPort: 9963
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - clustermesh
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt
        - etcd.config=/var/lib/cilium/etcd-config.yaml
        - --max-connected-clusters=255
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        - --controller-group-metrics=all
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: IDENTITY_ALLOCATION_MODE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: identity-allocation-mode
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        ports:
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir: {}
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "clustermesh-apiserver"
      serviceAccountName: "clustermesh-apiserver"
      terminationGracePeriodSeconds: 30
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: clustermesh-apiserver
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.15.6@sha256:a0863dd70d081b273b87b9b7ce7e2d3f99171c2f5e202cd57bc6691e51283e0c"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 3
          livenessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 3
          startupProbe:
            # give the relay one minute to start up
            grpc:
              port: 4222
            timeoutSeconds: 3
            failureThreshold: 20
            periodSeconds: 3
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          - name: tls
            mountPath: /var/lib/hubble-relay/tls
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Always
      priorityClassName: 
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 1001
        runAsGroup: 1001
        runAsUser: 1001
      priorityClassName: 
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.13.0@sha256:7d663dc16538dd6e29061abd1047013a645e6e69c115e008bee9ea9fef9a6666"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
        readinessProbe:
          httpGet:
            path: /
            port: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.13.0@sha256:1e7657d997c5a48253bb8dc91ecee75b63018d16ff5e5797e5af367336bc8803"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
