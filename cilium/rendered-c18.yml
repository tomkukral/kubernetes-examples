---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUx3U21OR3hrYkR4Zk14eVpEemtCWGN3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV5TTFvWERUSTJNVEV5TVRJeApOVFV5TTFvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFzMVA5RVg0SDAvWVVFTkpMMUJzUWVmei9EQVN1dTlleWcwM0dLK2d6K2ViQU5EUmIKbklOdjlkVWdGd3E3dWk2WENJclhLd1NsaForL3phTTR5RWFoMFF4ZldyM29zZHdxaUFtQjRFcy9PUTlKY2lYWQprUksrRVlCRkdnVUlyL21Cd3gxRDFkVG00Y25xSDRNTGlmWEdtOEZKeUd3NCsydEcrQy95eXFMd0NtRENJTG9ZCjJmcWRpYk9LdS9nZlRmQzRRSnFvZWFKSzMyR2ZzNjdDMzlOeUhxNU5FaGh0Q3FNdjZ1L2RXZFZFQjBNVkcxdjgKMG43Vm1BWWo5ZFdqNElSQllUclROU3lvcVdNTjlUWTErZFIxTVNmc1puT0FQSG93MnV6eGs1cVRrSFY2YVhMdwpjSHJUcWd6YmVmWjM0WWxNYnVUMCtBdUwyM3lQNnFtZDEvN0Z2UUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQ2M5UVRNZjRaUU9wZXh4S24ydWdqR2k1cS9vTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ28vVlZYYi9YZ0NGT1l2ODl4UUhlUXV1N2pFRzR5bjdUb0drUjBXSWl3R0NrK3IwenpPL2syCitLQ3kwZEpLOTQyWlRyb0YxREtIcm5ocUFtS0lUVERVUUUyVEpjcCtnc3FCYzAwV3pTbEdrMnZlb3Rubk5qTmUKY0dVd3JlZFRKU3k3YnFaRzRaYVVya3krb1ZIUXVSenlYWjJGNTY3cW1wSVdvT3lWWk9ubFp4Y2U1OFZ0WXZnbQpHaE5XKzJNam5FVkgzeWF6MnNUVnhQZTB3azNQc3Z4YUNlWmlpd1ZiOU9IdFErdWwvRmp4OEJPTXZPM0VMNkt5CldnRUpyV0JTYzFnRlpKSm83dTkwMC94SGJDOUdOR2kvc1NUbGo0SitPUnl4aWdaS2JUMUZpd2phVnRpRUk0aGQKOC9qRE12MkxEL2Z2K2l5ZDlsKytrM21qSlk4SFhEVnAKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBczFQOUVYNEgwL1lVRU5KTDFCc1FlZnovREFTdXU5ZXlnMDNHSytneitlYkFORFJiCm5JTnY5ZFVnRndxN3VpNlhDSXJYS3dTbGhaKy96YU00eUVhaDBReGZXcjNvc2R3cWlBbUI0RXMvT1E5SmNpWFkKa1JLK0VZQkZHZ1VJci9tQnd4MUQxZFRtNGNucUg0TUxpZlhHbThGSnlHdzQrMnRHK0MveXlxTHdDbURDSUxvWQoyZnFkaWJPS3UvZ2ZUZkM0UUpxb2VhSkszMkdmczY3QzM5TnlIcTVORWhodENxTXY2dS9kV2RWRUIwTVZHMXY4CjBuN1ZtQVlqOWRXajRJUkJZVHJUTlN5b3FXTU45VFkxK2RSMU1TZnNabk9BUEhvdzJ1enhrNXFUa0hWNmFYTHcKY0hyVHFnemJlZlozNFlsTWJ1VDArQXVMMjN5UDZxbWQxLzdGdlFJREFRQUJBb0lCQUNmWElRSWgzZHRaY0Z2TQpYTXhpdHVaakxzYWN3N1UzMXBFVlZsR3E1T0ZBUXJOV2JvUDNMNGlPTVBMdGo0ZHRrbUJ6ZUJvMmpnK0J6anNCCmFEd1dkUnpjZ3RMR0hreGxmWTE3ano4bGVJWlV2eHg5REFBdkNjc1psRUNUbmJwNjFEbGs1dzA2bjVES0t4bVYKSTVzaTMxejdORWt5d2ZZWmYwcmtYQ3hveHF1SE5FS3dzQ29DU3VYNlJaS05qY1VsMzgxeGxDbmpIWnlMNmh3SgpEOTlsMDJzWWYwUDlqNkFyVGhPV21TYVBRa0w3bE9UYlhkck1TdEM5czJRYWgvaldxNVdXMTgrQTJ0OUNzenJ6CmVjcEJBdTdCVm02U0VTajBBZHo3eUxaM2F6TmlVbk4xbFVHaWUyUzFoRkd3eHp0VnJIbXJJWDU5dnppVFV2cnAKRmVHMjNBRUNnWUVBeXhuTW9CSncvUVh0cHdWU1hsV052TlpqMkJTN3p4aSs2MEpBSE9rS09CbGs4dVRFdUFSaQpHZkJ3ZnJkbWZudHV3dXdKSjMvbDlHNEdJWGplS2s0V2VHVUhBV0hraE9XNUZXZURPckJkak1nbzdDL0VKaG11Ck1HRGYvYjNDMDYrOEVlbDdFcUFjclRPTDMxYk1Yb2lHNG5mTTZYaHFLaDFCVDQyZ1RjWkFPM1VDZ1lFQTRna1gKVm8xQzdnTm1tY2hReWpUT1c5bFBpclR5dXN3WUxkVStuV0F1SzZnOTZ0WXNpazNNWHBRRDdaZ29TWEg4YVQ3SwpvSnVQeDFXOGE2dHJ1bjlTczJPdlhUOXY1NDlob05MSkgxWHZGSlRPaGRkeko1WUw4OHpNdGkvY3lMQ3BqVUEvCnV4VzNxVzVVWUxrRWh0bFlYREV4Y3RyS2ZwdVZvZ01WWlVKNFFDa0NnWUFTRkdmYzBBZHkzclk3S2dRZEZheWEKWk5OYWh1MzVENURmVEhSOG5sb2tpRTR1T1NNeDVtSDlRU1FpZzUwQ0lXYkl2MDVKVDk5ZWxQVEN3Z20wNW1LbApzUWlnbk9CRTNGWlBpM2xwSGc0VjNET1lZdUFwTEJ3UGZuQXlIRlJkbDhVOEt2YWp2OUVOc2dyL2hMQ0lzY3FnCkdsNEpZb2pBMnYzWFlSb21Fa0hoaVFLQmdHTm82aW0zc09McS9mbk9YckcvcmE0NWtjRUlPZVNybEVxOENYQy8KZHk3ZUxIVVd3cm9FNDBnSlF2MEF1VjhyMFg0Y0RwTzZOdTdOSnpRWFRTYlZqbkswK2RCQjhSNWZNZW5BS3BJcwpnaHlFSVp3OW1EaWx4aFh3VVd3aStyQU0rbFRVRi9OWTV0Q09aRyt4ajJzYk5jQStKbWhFRDJERlhuYkZjbWg1ClpsZVpBb0dBWnpoeGRTeTFyTzl3WFJTVlRsamdLa1oxZ3dOSG5Od1EzL2paRC9IaHNmSkF2U3VvUVBUbGtXUkkKemFEMWRMSXR4UThpME0yUXBHZ1d2bDUvR0NHQzA2TW81UkRKYTZCUWtHZjY3T3ZJV2wxanAyTWdVTGJJRmtnLwp5RHRNRjhqZnV5UXNOK0pQaGZvQXA0Yys1cTB0aGN4OXRWWTNQZU1ieHhIR3hvTmFJem89Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUx3U21OR3hrYkR4Zk14eVpEemtCWGN3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV5TTFvWERUSTJNVEV5TVRJeApOVFV5TTFvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFzMVA5RVg0SDAvWVVFTkpMMUJzUWVmei9EQVN1dTlleWcwM0dLK2d6K2ViQU5EUmIKbklOdjlkVWdGd3E3dWk2WENJclhLd1NsaForL3phTTR5RWFoMFF4ZldyM29zZHdxaUFtQjRFcy9PUTlKY2lYWQprUksrRVlCRkdnVUlyL21Cd3gxRDFkVG00Y25xSDRNTGlmWEdtOEZKeUd3NCsydEcrQy95eXFMd0NtRENJTG9ZCjJmcWRpYk9LdS9nZlRmQzRRSnFvZWFKSzMyR2ZzNjdDMzlOeUhxNU5FaGh0Q3FNdjZ1L2RXZFZFQjBNVkcxdjgKMG43Vm1BWWo5ZFdqNElSQllUclROU3lvcVdNTjlUWTErZFIxTVNmc1puT0FQSG93MnV6eGs1cVRrSFY2YVhMdwpjSHJUcWd6YmVmWjM0WWxNYnVUMCtBdUwyM3lQNnFtZDEvN0Z2UUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQ2M5UVRNZjRaUU9wZXh4S24ydWdqR2k1cS9vTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ28vVlZYYi9YZ0NGT1l2ODl4UUhlUXV1N2pFRzR5bjdUb0drUjBXSWl3R0NrK3IwenpPL2syCitLQ3kwZEpLOTQyWlRyb0YxREtIcm5ocUFtS0lUVERVUUUyVEpjcCtnc3FCYzAwV3pTbEdrMnZlb3Rubk5qTmUKY0dVd3JlZFRKU3k3YnFaRzRaYVVya3krb1ZIUXVSenlYWjJGNTY3cW1wSVdvT3lWWk9ubFp4Y2U1OFZ0WXZnbQpHaE5XKzJNam5FVkgzeWF6MnNUVnhQZTB3azNQc3Z4YUNlWmlpd1ZiOU9IdFErdWwvRmp4OEJPTXZPM0VMNkt5CldnRUpyV0JTYzFnRlpKSm83dTkwMC94SGJDOUdOR2kvc1NUbGo0SitPUnl4aWdaS2JUMUZpd2phVnRpRUk0aGQKOC9qRE12MkxEL2Z2K2l5ZDlsKytrM21qSlk4SFhEVnAKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLVENDQWhHZ0F3SUJBZ0lSQUx5dmdHVHU2c0ozREc2NGFKWmJaZUl3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV5TkZvWERUSTJNVEV5TVRJeApOVFV5TkZvd0ZERVNNQkFHQTFVRUF4TUpZV1J0YVc0dFl6RTRNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFyeXNEdHNCMVFmOHYyYVZ4ZjR0K0R0a0RmVnYzaTVPQnZGdmQ3c29aNGRPMGY1bHcKYXhvZVBvTjBCcU9EMVJLRHA4a1dyc0tyQlZhOXg3anhWZ0hBTTE5QUZDd2tySHFDK1NONmxyWnZOKzdmWnc3YgovOG9KZ1RSc0R1N1hxdnRYQTVuK0FRQkRPZ2tpSmJlR1kySEVMVVdZSyttcjlQOXpBaDZzemNRS3lJSnhWT1g2CmNoZVNZSlExZjVic1JYZndPNThmdGpMNjVtRkM2Rm1hNU91UzJGTUdmYkJQRHBsUWw1MDdZMWxNL3lGRE1md2cKR0QwNWhMQm9PSEYrNjNPN0d0dkpyWXRidnBpQUxYQitRejVYQkpUdVZXZEM1Tm5lMkk0ZzB5UDZYWVZVM0pNTQpObUZldmpyY3J6MXRORGlDSE55QWt3S1NjVENZUzI4ZnNHeFlxUUlEQVFBQm8zWXdkREFPQmdOVkhROEJBZjhFCkJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUMKTUFBd0h3WURWUjBqQkJnd0ZvQVVKejFCTXgvaGxBNmw3SEVxZmE2Q01hTG1yK2d3RkFZRFZSMFJCQTB3QzRJSgpiRzlqWVd4b2IzTjBNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUIyZk43MjZCb042dk0wUU9nQlB4TjBEejZ3CnNZSHRCaUd6TmxmbjJrTkFuaFFkSWdzMnhFdjdZMWZheGlDV25BbWdkOUduYmRyOWc1Y3dLRnZIaU0rZjBFZk0KS0Juem1hdlpQVHpHQlpxMXpOTGU0ZlhYdVV2NmI5d0Z5U0NHSThubCttZkI0S2d6ZkpaWTIxT1dabDdoQTlvSApUTS9ZZVpxN0R5bU4vWnlhM08vMit0MEtvb21xc3ErMmZpM2JnOWZkTXJ2eVdmT1UyeUE4blVJc0JXWnc3bytvCkVnWE5KMDVhYk9LZWFNT1Q4SFFWYjBkcGpDSFJRSXhhdkFZVmJDRWRDYkFqeC82QkNGVW05b3dZV2F3WTg1Q2IKVjZTMjBJT0d3bnFnUlZLYkpocjNRRWo5N2tjQ3EzU0NhNjNPamJkQ0RrL1lyUU8wRzRoNCtGQk9ZRDlVCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcnlzRHRzQjFRZjh2MmFWeGY0dCtEdGtEZlZ2M2k1T0J2RnZkN3NvWjRkTzBmNWx3CmF4b2VQb04wQnFPRDFSS0RwOGtXcnNLckJWYTl4N2p4VmdIQU0xOUFGQ3drckhxQytTTjZsclp2Tis3Zlp3N2IKLzhvSmdUUnNEdTdYcXZ0WEE1bitBUUJET2draUpiZUdZMkhFTFVXWUsrbXI5UDl6QWg2c3pjUUt5SUp4Vk9YNgpjaGVTWUpRMWY1YnNSWGZ3TzU4ZnRqTDY1bUZDNkZtYTVPdVMyRk1HZmJCUERwbFFsNTA3WTFsTS95RkRNZndnCkdEMDVoTEJvT0hGKzYzTzdHdHZKcll0YnZwaUFMWEIrUXo1WEJKVHVWV2RDNU5uZTJJNGcweVA2WFlWVTNKTU0KTm1GZXZqcmNyejF0TkRpQ0hOeUFrd0tTY1RDWVMyOGZzR3hZcVFJREFRQUJBb0lCQUUraTY2NVRNendNNjFFMAowVFBlVkRJbDRWdEZ5M1l1V3FZcTBldzAvNjFXbFZJSmpUMTBBMW9DWTJaOVFudEZUb3VpZFdpQVlrWXNHRjNMCnJCU2crU09oNHowSWtLZkZqdlA3ZUVrNnFiZXhKdW53ckg1TytTRS9sdnozQXgvZDRzSmxhVUJGUVVzS1NmY0IKeDl3NDMzcUJrRnd1Z1JvQ1pPUUsxQjg4U0hhOWJqcUc3RlBHTHVWNmlqck0vdWdPcUpUY0tCRW9aZzZBUXBTSQpaaERFaHBlY0YyMkpFb25VcFBQeXJGZ0I2QnZVYTFoU2I0dzNsaUNmK0g1Z0lnbGRpT1ZOQ2l0eGF5SjFyd21XCmowZGJpbFllYU9aVURCZTBFckcwcXBWZ1JmUXMzcmNXMFZ5ZDh6OTNJRGpvWEtrOE9aYTJnOTVOa1loYnQ3OEIKMzBIWjRMRUNnWUVBeUtJVDd4NzVRT1JqTWhwL1J5aXYvdW1qVTI5V1l5ZEJQNElLdnV6QXNORThZVFk4MC94TApjeFhZU1JvV1pEVkhrMDZKaDJHbHFzNEoxRHVTaUpKNjZwdTUxTXVZU3BxdC8ycEsvdTJEbzhuN3ppYlY5M1M3Cm9XWVBqU1ZTa2wzdGJXZEZudXpIbVV0b2xyRjd3WjVIeElMSTRSL2ovNkppTytHeEIySHlPejBDZ1lFQTM0SHUKTVdwek5lWWkzNDMyZVQyeE9uZnRwY0dHdlR3S3hlWkphQ0ZJc2JqWDZpNlNwTG9BakJ2Lzc5bEpwUDJzU3pXSApncnpmSkxoZVJtWU1wSVZ1VE1HVmhpMjFocGc0TWxLN1N0SXRsQkdIeFFYRjRncWViaEFjeDV2ak8xNFNzYW5zCmxRTnRQNXROeTVzWS9yTTB0SW1zYldsQ3RvakF4SGxEV01JRFdkMENnWUIzcm1kaHZ3SkV1WGlLek0rYjdTTi8KVm5POU02OCttbzRMaWxGS3J3UUs5ZVdrdjZ2dGNKUzVaQkNQR3VhOGhDUGNOWDlJcVBFZ1FLUVFYREQvRXhJTApuVFZ2UUx2cDFQZHlZeisxYm8yV1NNalNvc3dFUHpnbUFUSEpxcmZrNCs3YjBqenZucU02U0lkdFRSWmIyMFZJCmJoUFNaeW1rdG9NTzRZU3V1TGk4cVFLQmdRQ2FhYXlDN1ZVdExwSjNPaC9IQVUwWTVOUUZTUjlxU3pueUlUZ2oKdmFMNFRZaTEzSGtwWHV1VDRLQkFOekQrME5hZ214bkV3L0d4NzhJS0J1VERJUC9qL1hYczNsVmo2SFFpcUMrRwo4SS9XbFFua255bG9FZ2dFYUJOS0FEUEx4eUZKSnVrd3hjNUxQR05Sd0JSVG1zRlYzU3VINTBuVXk4UEp1VEZDCjk3N1M3UUtCZ0E3YXNWd2pNQmlkNmdWa1dYZmNWb0xXY3Qvd2M0aHo5U2g1cklnSXhLOFBiQ3g1bGhKYUV6VUwKaW1YRE03dnV5elRZM2tmNDlibVVDWlhZVTVTY2h0Q1pGb1R0UGFpeFlENnhqTjJUa0hjZjRZZ2dYUk1sbmRmbgo0ZmY5emRHYWpRRkllenM4cjhMQ0U0NFhrV2grY0xGTDRnMjZoMlJnWVVuV3JMc04vQzJ4Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-ca-cert
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUx3U21OR3hrYkR4Zk14eVpEemtCWGN3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV5TTFvWERUSTJNVEV5TVRJeApOVFV5TTFvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFzMVA5RVg0SDAvWVVFTkpMMUJzUWVmei9EQVN1dTlleWcwM0dLK2d6K2ViQU5EUmIKbklOdjlkVWdGd3E3dWk2WENJclhLd1NsaForL3phTTR5RWFoMFF4ZldyM29zZHdxaUFtQjRFcy9PUTlKY2lYWQprUksrRVlCRkdnVUlyL21Cd3gxRDFkVG00Y25xSDRNTGlmWEdtOEZKeUd3NCsydEcrQy95eXFMd0NtRENJTG9ZCjJmcWRpYk9LdS9nZlRmQzRRSnFvZWFKSzMyR2ZzNjdDMzlOeUhxNU5FaGh0Q3FNdjZ1L2RXZFZFQjBNVkcxdjgKMG43Vm1BWWo5ZFdqNElSQllUclROU3lvcVdNTjlUWTErZFIxTVNmc1puT0FQSG93MnV6eGs1cVRrSFY2YVhMdwpjSHJUcWd6YmVmWjM0WWxNYnVUMCtBdUwyM3lQNnFtZDEvN0Z2UUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQ2M5UVRNZjRaUU9wZXh4S24ydWdqR2k1cS9vTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ28vVlZYYi9YZ0NGT1l2ODl4UUhlUXV1N2pFRzR5bjdUb0drUjBXSWl3R0NrK3IwenpPL2syCitLQ3kwZEpLOTQyWlRyb0YxREtIcm5ocUFtS0lUVERVUUUyVEpjcCtnc3FCYzAwV3pTbEdrMnZlb3Rubk5qTmUKY0dVd3JlZFRKU3k3YnFaRzRaYVVya3krb1ZIUXVSenlYWjJGNTY3cW1wSVdvT3lWWk9ubFp4Y2U1OFZ0WXZnbQpHaE5XKzJNam5FVkgzeWF6MnNUVnhQZTB3azNQc3Z4YUNlWmlpd1ZiOU9IdFErdWwvRmp4OEJPTXZPM0VMNkt5CldnRUpyV0JTYzFnRlpKSm83dTkwMC94SGJDOUdOR2kvc1NUbGo0SitPUnl4aWdaS2JUMUZpd2phVnRpRUk0aGQKOC9qRE12MkxEL2Z2K2l5ZDlsKytrM21qSlk4SFhEVnAKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBczFQOUVYNEgwL1lVRU5KTDFCc1FlZnovREFTdXU5ZXlnMDNHSytneitlYkFORFJiCm5JTnY5ZFVnRndxN3VpNlhDSXJYS3dTbGhaKy96YU00eUVhaDBReGZXcjNvc2R3cWlBbUI0RXMvT1E5SmNpWFkKa1JLK0VZQkZHZ1VJci9tQnd4MUQxZFRtNGNucUg0TUxpZlhHbThGSnlHdzQrMnRHK0MveXlxTHdDbURDSUxvWQoyZnFkaWJPS3UvZ2ZUZkM0UUpxb2VhSkszMkdmczY3QzM5TnlIcTVORWhodENxTXY2dS9kV2RWRUIwTVZHMXY4CjBuN1ZtQVlqOWRXajRJUkJZVHJUTlN5b3FXTU45VFkxK2RSMU1TZnNabk9BUEhvdzJ1enhrNXFUa0hWNmFYTHcKY0hyVHFnemJlZlozNFlsTWJ1VDArQXVMMjN5UDZxbWQxLzdGdlFJREFRQUJBb0lCQUNmWElRSWgzZHRaY0Z2TQpYTXhpdHVaakxzYWN3N1UzMXBFVlZsR3E1T0ZBUXJOV2JvUDNMNGlPTVBMdGo0ZHRrbUJ6ZUJvMmpnK0J6anNCCmFEd1dkUnpjZ3RMR0hreGxmWTE3ano4bGVJWlV2eHg5REFBdkNjc1psRUNUbmJwNjFEbGs1dzA2bjVES0t4bVYKSTVzaTMxejdORWt5d2ZZWmYwcmtYQ3hveHF1SE5FS3dzQ29DU3VYNlJaS05qY1VsMzgxeGxDbmpIWnlMNmh3SgpEOTlsMDJzWWYwUDlqNkFyVGhPV21TYVBRa0w3bE9UYlhkck1TdEM5czJRYWgvaldxNVdXMTgrQTJ0OUNzenJ6CmVjcEJBdTdCVm02U0VTajBBZHo3eUxaM2F6TmlVbk4xbFVHaWUyUzFoRkd3eHp0VnJIbXJJWDU5dnppVFV2cnAKRmVHMjNBRUNnWUVBeXhuTW9CSncvUVh0cHdWU1hsV052TlpqMkJTN3p4aSs2MEpBSE9rS09CbGs4dVRFdUFSaQpHZkJ3ZnJkbWZudHV3dXdKSjMvbDlHNEdJWGplS2s0V2VHVUhBV0hraE9XNUZXZURPckJkak1nbzdDL0VKaG11Ck1HRGYvYjNDMDYrOEVlbDdFcUFjclRPTDMxYk1Yb2lHNG5mTTZYaHFLaDFCVDQyZ1RjWkFPM1VDZ1lFQTRna1gKVm8xQzdnTm1tY2hReWpUT1c5bFBpclR5dXN3WUxkVStuV0F1SzZnOTZ0WXNpazNNWHBRRDdaZ29TWEg4YVQ3SwpvSnVQeDFXOGE2dHJ1bjlTczJPdlhUOXY1NDlob05MSkgxWHZGSlRPaGRkeko1WUw4OHpNdGkvY3lMQ3BqVUEvCnV4VzNxVzVVWUxrRWh0bFlYREV4Y3RyS2ZwdVZvZ01WWlVKNFFDa0NnWUFTRkdmYzBBZHkzclk3S2dRZEZheWEKWk5OYWh1MzVENURmVEhSOG5sb2tpRTR1T1NNeDVtSDlRU1FpZzUwQ0lXYkl2MDVKVDk5ZWxQVEN3Z20wNW1LbApzUWlnbk9CRTNGWlBpM2xwSGc0VjNET1lZdUFwTEJ3UGZuQXlIRlJkbDhVOEt2YWp2OUVOc2dyL2hMQ0lzY3FnCkdsNEpZb2pBMnYzWFlSb21Fa0hoaVFLQmdHTm82aW0zc09McS9mbk9YckcvcmE0NWtjRUlPZVNybEVxOENYQy8KZHk3ZUxIVVd3cm9FNDBnSlF2MEF1VjhyMFg0Y0RwTzZOdTdOSnpRWFRTYlZqbkswK2RCQjhSNWZNZW5BS3BJcwpnaHlFSVp3OW1EaWx4aFh3VVd3aStyQU0rbFRVRi9OWTV0Q09aRyt4ajJzYk5jQStKbWhFRDJERlhuYkZjbWg1ClpsZVpBb0dBWnpoeGRTeTFyTzl3WFJTVlRsamdLa1oxZ3dOSG5Od1EzL2paRC9IaHNmSkF2U3VvUVBUbGtXUkkKemFEMWRMSXR4UThpME0yUXBHZ1d2bDUvR0NHQzA2TW81UkRKYTZCUWtHZjY3T3ZJV2wxanAyTWdVTGJJRmtnLwp5RHRNRjhqZnV5UXNOK0pQaGZvQXA0Yys1cTB0aGN4OXRWWTNQZU1ieHhIR3hvTmFJem89Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUx3U21OR3hrYkR4Zk14eVpEemtCWGN3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV5TTFvWERUSTJNVEV5TVRJeApOVFV5TTFvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFzMVA5RVg0SDAvWVVFTkpMMUJzUWVmei9EQVN1dTlleWcwM0dLK2d6K2ViQU5EUmIKbklOdjlkVWdGd3E3dWk2WENJclhLd1NsaForL3phTTR5RWFoMFF4ZldyM29zZHdxaUFtQjRFcy9PUTlKY2lYWQprUksrRVlCRkdnVUlyL21Cd3gxRDFkVG00Y25xSDRNTGlmWEdtOEZKeUd3NCsydEcrQy95eXFMd0NtRENJTG9ZCjJmcWRpYk9LdS9nZlRmQzRRSnFvZWFKSzMyR2ZzNjdDMzlOeUhxNU5FaGh0Q3FNdjZ1L2RXZFZFQjBNVkcxdjgKMG43Vm1BWWo5ZFdqNElSQllUclROU3lvcVdNTjlUWTErZFIxTVNmc1puT0FQSG93MnV6eGs1cVRrSFY2YVhMdwpjSHJUcWd6YmVmWjM0WWxNYnVUMCtBdUwyM3lQNnFtZDEvN0Z2UUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQ2M5UVRNZjRaUU9wZXh4S24ydWdqR2k1cS9vTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ28vVlZYYi9YZ0NGT1l2ODl4UUhlUXV1N2pFRzR5bjdUb0drUjBXSWl3R0NrK3IwenpPL2syCitLQ3kwZEpLOTQyWlRyb0YxREtIcm5ocUFtS0lUVERVUUUyVEpjcCtnc3FCYzAwV3pTbEdrMnZlb3Rubk5qTmUKY0dVd3JlZFRKU3k3YnFaRzRaYVVya3krb1ZIUXVSenlYWjJGNTY3cW1wSVdvT3lWWk9ubFp4Y2U1OFZ0WXZnbQpHaE5XKzJNam5FVkgzeWF6MnNUVnhQZTB3azNQc3Z4YUNlWmlpd1ZiOU9IdFErdWwvRmp4OEJPTXZPM0VMNkt5CldnRUpyV0JTYzFnRlpKSm83dTkwMC94SGJDOUdOR2kvc1NUbGo0SitPUnl4aWdaS2JUMUZpd2phVnRpRUk0aGQKOC9qRE12MkxEL2Z2K2l5ZDlsKytrM21qSlk4SFhEVnAKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lRTXBxMmRsa3dBQzdxQ2RSL01kckMzVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEkwV2hjTk1qWXhNVEl4TWpFMQpOVEkwV2pBUk1ROHdEUVlEVlFRREV3WnlaVzF2ZEdVd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3CmdnRUtBb0lCQVFEQUtpbE94ZVJmbXVqQTN3VXZOcFc2eHV1MkNHYnJ5dkI1UDB1WHRPVEUwMzJPcEVrTEp4N1IKRXNUQk9vT1RpTythaHZnUUxUM0Y4cWw2ZWc5QmdZWDRWc05JUXBQblBuaCtqTkdKTmt0YjVGYm5sNXRaeDZxdAo2UDRpd2dkRmJ1TjhrdmpyQU56SDJIekJ4azgyUFl6WkxOWi8rRWlMRndJZTBJc2NXVjY0WmRmcXNVWkxvMTNLCmlrZ0lSQVV4Nkc5MitRRzFmRGdMVFZrd0V0anNqRjNIdTlkM2JjVjU1M1l4aWlwRXFaVjR3WHJWaW9YWnI1OGIKZHc5eVVJaDUrTk90U1E2Z2VRSCt3MVpUTGIzbGlxTGZOMjgwNEpleHh4L2M1WllHdkllK0NhUkUzMW1QSk5STwpucFVrakpEMTJLcEtHSUxUTDBoSlZUV2xOM2F0RGJUUEFnTUJBQUdqWURCZU1BNEdBMVVkRHdFQi93UUVBd0lGCm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWYKQmdOVkhTTUVHREFXZ0JRblBVRXpIK0dVRHFYc2NTcDlyb0l4b3VhdjZEQU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBTm9LblBvOGJyS05ZenZ3OXdxMHlrMTR5Q0E0N0RmMElXMnRqVURsTmN2eEY0aHRLOXl0RWpTMW4wMWdOCnhGc3ZzSFFidVVDd00xUk5pQ21pL3NVU2hXL1Z2ZXkvWGRXMWprRS9BbndpeVpyT2FqNGZVUnR0aHFycTJvMkcKWlVQcTVVNiszYzVZNXpPbFBaMnE3Y29MUGRKVE9HRDRTdUk2TzVrL3BGaTM5eHZ1ZElWSFM4WFYzNnZtSGR2NwowaktHdTlZeEdnSGJ1d3NaQkUrZmVlNEJZNUtrYnpuaU1IWjFKa0pOc0pFWHdpbHVsRDNSSjExQyt4OHhBZ3k4ClUyTUpLa2JHOVJpZlo3NVU1cS8zalppS0xjRWZ2SXZwSG91T3VJNWdBNk9mdGtHT0F5OE9aeld2QkJtVm40VnUKdzg3VUo2YitRTE10TVlRWW9xT1JpU3VDWlE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBd0NvcFRzWGtYNXJvd044Rkx6YVZ1c2JydGdobTY4cndlVDlMbDdUa3hOTjlqcVJKCkN5Y2UwUkxFd1RxRGs0anZtb2I0RUMwOXhmS3Blbm9QUVlHRitGYkRTRUtUNXo1NGZvelJpVFpMVytSVzU1ZWIKV2NlcXJlaitJc0lIUlc3amZKTDQ2d0RjeDloOHdjWlBOajJNMlN6V2YvaElpeGNDSHRDTEhGbGV1R1hYNnJGRwpTNk5keW9wSUNFUUZNZWh2ZHZrQnRYdzRDMDFaTUJMWTdJeGR4N3ZYZDIzRmVlZDJNWW9xUkttVmVNRjYxWXFGCjJhK2ZHM2NQY2xDSWVmalRyVWtPb0hrQi9zTldVeTI5NVlxaTN6ZHZOT0NYc2NjZjNPV1dCcnlIdmdta1JOOVoKanlUVVRwNlZKSXlROWRpcVNoaUMweTlJU1ZVMXBUZDJyUTIwendJREFRQUJBb0lCQUd3MkVjYmJKMHd6Sm9pZAp6Z1NWUDJITGJLYTRPb1RqWmVGUkpGZE10VnFsSWRvMlp5K1Jtd2Z2QXI4eEhURHlkc0xVNkZIcnVCS0ZJS3pvCm1UaXhJR2tGS3JqQlRScDJFbEpwS0FHVmdvQS9xRFNJS2lJM2pzU2FKS29jQ3c0dGNJc1JGSHo1b2xvamJiV00KMzhSU2lzTXRQYWtZZm5sY3ZvUHR1YmlBRnhmTXZaenY1a0wrUXlPVk9XdHh1Z2hZT3NqK1JKQ2J2US83RXFHKwpzdkE0bS9zOHlsaHhLNjYvdkIzZTBzSGd4dWFGTzUzQkljZGlDSzlURGgyb2VPVjBTNCtQa21kMDhyRmh4OTR1Cng4ODRoSFJWU1N3ajZIVXdiemlsTStPNi9RTm1HZjBUNk4xVGJZUWVhYWVMaFlzaUFTU040WHd3V3ZxMDg5akEKVmI0ZEFpRUNnWUVBLzlnNWpqczE1WFF3a3I4aDhEZWdublE3OFBRQkZiTkpOM0pQVU54SEpwd2tnL0lnU05QagpuZ0NUaUM5KzlyaG1kWi8vaVVqbWN0RHZaOHZMZ1RqN1BtQ2x0QlVCVjlqeXRiUUF5ZHVQb2JKTlpPQWZqZDhsCnVqNi9Va2IzbndRdUNhMnZCdzF5d2RiWVNPVjR1Z3lCdktMU0x0ZEhCKzUzclBmMHNGNzB6RDhDZ1lFQXdFZ0oKVlZ5NG1BdlIxcUlCYUJtWkdhTC9WNDlSeEFwNTkvMkg1Z3pEZG11aDhUMVJFTDNGT2tJd0R0YTdjbHF3bmw5SwpOdkxObVNJRHB4NUt4UlAyZ2ZRdUZPTE9LK3J5VXdjY2JoYzZOUmRKakhZT2hrRE9xY2NMcFF0TUVPdnllTGxtCnd4dmlHS0YrR2hnWlNva0lmR0w1dTRBV2RLMmlpSDNYRUlueE0zRUNnWUVBL011MTh5Zm1WVmE5T0FMTGtnUWwKSE94VTNmejdwV21GaXRmVUwxMjRvQm5ncXM5dnZ3WSsvandyaW9FRHZ0enR3SVBiaHRjVmZaV2RPTDVSMHRsdQp4Mi9QeTJTRjh6dFdkdHZwZTRzTEhRYUZHb3VxSWhDL3dvdUZsOUt2a2R3YmNVekFpUU5zeE1ONDZtNXpIOEtECjN0UXpRajFNM2pWdTR1WU9UTWRHc3hrQ2dZQlVGNjB0VGczVlFXWVdUbWY3RlNibUZXbEM3QVZBamF4bUR0VisKZ1JxREVmT1RROVBPVkpDTE9DTTRlaVVra0JFcVVsWnN6YWVwVHp6MXU4UExpVDJIL0RpakhjWTVZdGwwQW1vbQpvN1hyUGpJR1lpTmNCNy9hZEpqZEo2R3V6T0lRZGxWQkExTFFudUE5blVpQ1ZvZ0ZqbXZWMnVEM1NuRUk3TEJBCkpYUDlvUUtCZ1FDeXZrbnlzZllheTAwR243bEJVWjlXYnRJTlVjNWg0WXJ1ZS9jOEZZdEtHRUNvczFGeHZ0UTcKYlRIaVEvUGhxemZacTg0UHl0TWhzUDVFUDlKUFphSkJYN2xPdS8yaEFJUEYrVVZsRzVQYVozS0hUWkpGbHljdAptQmE4aGRFUUxOUEdtWGtpd2dWbUsxSlN1TlhTdmRYWUtCdEs0OWJ4SktNN3pWKzdKb1Rjcmc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUx3U21OR3hrYkR4Zk14eVpEemtCWGN3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV5TTFvWERUSTJNVEV5TVRJeApOVFV5TTFvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFzMVA5RVg0SDAvWVVFTkpMMUJzUWVmei9EQVN1dTlleWcwM0dLK2d6K2ViQU5EUmIKbklOdjlkVWdGd3E3dWk2WENJclhLd1NsaForL3phTTR5RWFoMFF4ZldyM29zZHdxaUFtQjRFcy9PUTlKY2lYWQprUksrRVlCRkdnVUlyL21Cd3gxRDFkVG00Y25xSDRNTGlmWEdtOEZKeUd3NCsydEcrQy95eXFMd0NtRENJTG9ZCjJmcWRpYk9LdS9nZlRmQzRRSnFvZWFKSzMyR2ZzNjdDMzlOeUhxNU5FaGh0Q3FNdjZ1L2RXZFZFQjBNVkcxdjgKMG43Vm1BWWo5ZFdqNElSQllUclROU3lvcVdNTjlUWTErZFIxTVNmc1puT0FQSG93MnV6eGs1cVRrSFY2YVhMdwpjSHJUcWd6YmVmWjM0WWxNYnVUMCtBdUwyM3lQNnFtZDEvN0Z2UUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQ2M5UVRNZjRaUU9wZXh4S24ydWdqR2k1cS9vTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ28vVlZYYi9YZ0NGT1l2ODl4UUhlUXV1N2pFRzR5bjdUb0drUjBXSWl3R0NrK3IwenpPL2syCitLQ3kwZEpLOTQyWlRyb0YxREtIcm5ocUFtS0lUVERVUUUyVEpjcCtnc3FCYzAwV3pTbEdrMnZlb3Rubk5qTmUKY0dVd3JlZFRKU3k3YnFaRzRaYVVya3krb1ZIUXVSenlYWjJGNTY3cW1wSVdvT3lWWk9ubFp4Y2U1OFZ0WXZnbQpHaE5XKzJNam5FVkgzeWF6MnNUVnhQZTB3azNQc3Z4YUNlWmlpd1ZiOU9IdFErdWwvRmp4OEJPTXZPM0VMNkt5CldnRUpyV0JTYzFnRlpKSm83dTkwMC94SGJDOUdOR2kvc1NUbGo0SitPUnl4aWdaS2JUMUZpd2phVnRpRUk0aGQKOC9qRE12MkxEL2Z2K2l5ZDlsKytrM21qSlk4SFhEVnAKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURwekNDQW8rZ0F3SUJBZ0lRT2xhSnJvSm5SMEVpZHgzc01wRGx1REFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEkwV2hjTk1qWXhNVEl4TWpFMQpOVEkwV2pBcU1TZ3dKZ1lEVlFRREV4OWpiSFZ6ZEdWeWJXVnphQzFoY0dselpYSjJaWEl1WTJsc2FYVnRMbWx2Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdEJJb1JsdThNbkZDN3VVK0dDMHEKK0V6UUk0a3ROc1RwYnJSYVhMc054VFRsZ2V6R1g5ZnB3d0hKbzRIYkllNVRzZHB4dmg1YXg5VnJhV2xwZ1MwWgovb0svMGxqOGFNaXFkRUpjSktEQmhpVklKMUV3TzRXelVQbURPZGtnUXNHWEgwYnBrRU96Y25Pa0dtbFhEbU5SCmZWSUtncHQxV01sdTFGUk1LVkdQQlRDNG9tS1EzTWFVbXlEUVJYNEpzcytGelZOKzl1aHZyZTRkNG9Xc1oyd28KQ0dGTWE5VFFtVktkM0dHbmM2ODV0UjJrUFFvOFFtN2JsOE0zelRtUGptN3VFNitsaDIyUWtnMEJXZkFDeXRxQgpaZFhWTFVnNXhwTW85ZklhZFNzSlU4Y3lkNlQ2WG1SMnlvYytjYTB4dmxSQWx5bjFtL3JHQWZjZnp6R0hFNHJ4CjlRSURBUUFCbzRIZU1JSGJNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0QKQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JRblBVRXpIK0dVRHFYcwpjU3A5cm9JeG91YXY2REI3QmdOVkhSRUVkREJ5Z2g5amJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXVZMmxzCmFYVnRMbWx2Z2hBcUxtMWxjMmd1WTJsc2FYVnRMbWx2Z2lWamJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXUKYTNWaVpTMXplWE4wWlcwdWMzWmpod1IvQUFBQmh4QUFBQUFBQUFBQUFBQUFBQUFBQUFBQk1BMEdDU3FHU0liMwpEUUVCQ3dVQUE0SUJBUUExRXpoOGZqanpKZlZpYTdGVlZlSlh4SHJwM3o5Uk9FK20yVnNDVm1DTjRjNDI4OGpvCkI1QlFrOUtoMXRvVmxPRC9OVXgrMzAvQ3B6Z1UxSVhhVU1JUU9BQmRGOW4xQ2RMZXkzTjd2eHlyMWZhRTBIb1UKWGQ1NjdMckFQaFhZbVhQVGh1cHVHdVhRTk9JYmticlhsYVRJRjdRVWdXSEU2eVpYdEJwSTdSc0F0eHdBaEgxUAprSXVFbWlhWmRmclBwd3ZHUjNpUk01RGp1U21DTVlKQXE3NTdIbEwxcURWZ3BVWDdDZVN1eDhYV2xlSWZYWG56CkF4d1V6Q1BjMGtzVVVXM1NmN2FxTVJiN2dWajhpUjh6TVlmYisxRncxUEx3STFyUHVUejZBWHJXcytpNDJjajgKcDUwVHExaTMwVk5makJ5dm94UjJjTG1TV3NPNDE1bis2RVdLCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdEJJb1JsdThNbkZDN3VVK0dDMHErRXpRSTRrdE5zVHBiclJhWExzTnhUVGxnZXpHClg5ZnB3d0hKbzRIYkllNVRzZHB4dmg1YXg5VnJhV2xwZ1MwWi9vSy8wbGo4YU1pcWRFSmNKS0RCaGlWSUoxRXcKTzRXelVQbURPZGtnUXNHWEgwYnBrRU96Y25Pa0dtbFhEbU5SZlZJS2dwdDFXTWx1MUZSTUtWR1BCVEM0b21LUQozTWFVbXlEUVJYNEpzcytGelZOKzl1aHZyZTRkNG9Xc1oyd29DR0ZNYTlUUW1WS2QzR0duYzY4NXRSMmtQUW84ClFtN2JsOE0zelRtUGptN3VFNitsaDIyUWtnMEJXZkFDeXRxQlpkWFZMVWc1eHBNbzlmSWFkU3NKVThjeWQ2VDYKWG1SMnlvYytjYTB4dmxSQWx5bjFtL3JHQWZjZnp6R0hFNHJ4OVFJREFRQUJBb0lCQUUrUzZvdFZCSkNCN3FNbApXTkJVUFhYbWMrQVFRWk8vWnF5T05KUmY4TkRoOUQzN0JScmJqaWlueEpSbDBSRm9nVUhLRjVOOVZINlVlRmZuCnhrRFlUbkZqRkNOL1FXT0lzWktZdEtGWERNNGI4WXUyWEFzaHBVRTJVZUFoYkJrejlYVlQzK2pwa2dZVXhrTUoKby9mdXVkY1loeDU2Vmx2Ni8rZ0NySGxoMmtMZkxCUlRvSXVSVzRFNEpkYnREd2Nxa3BtOGE2MnB5aXpOUWJ3VwpyV0N5TitNRGtQYnE3V0ZYaWxPMlRWTlRDU0xjaFdxZEMyaHdHZnAwQWUwaU1kKzBCbmlSb1ZmMGtlVkVjZXlMCkI5dERjT1JUOTFvaERaS1JNUHlLUHNOQVVOOTZYWHJ5MDQ1d3piTVZJNXRPS1NtNFdCK1RkOXc2SEp2aEhFbEcKT25rdGFnMENnWUVBM0lTcmtSaUYyam5nWlVKUVRTRi9iRGtGLzhOaDR5QVZsd0hXdmxFZGdqazQrUzBIZkNTWApEQnk0VDFmMDl4UERFR3J6bHBGTzhhaEVMM3NsVHVMTXF2UTVXWk1YVHF6SFEvS0Ntb015TC84ajJ6bmkxaFNtCmp4NWFPQVc4SDcreHdQdzBLOVFFUVpudWhkSjV2TXVSS1cyNTQ1U291U1JXZFlTNFhQOUtVemNDZ1lFQTBRdHQKdGs4Um5PNDFmZTJoQVBUbTVRSWJRaXc4MnhRb1pVYVpTN1BrWDllOGxMM1Z5V0hWcUZUUUx6cWkwcUJRVkh3UgpSY3dKVHI2dENlSkxSejAwQThZamFPUERnWHEzNktmWmtFam10dVhsZ1NaUkVmTnZocjRRRnYvT3hENEp5TTM0CjNBazZXTmxxRFM5cEJSZzZaZkxrbXk4L3FDR1VRTXdYUGk5eGtqTUNnWUVBbnFMcWNZVDh0ZEt3OU9kUnNVc0oKeWFiMEE5eGdqTzNGMms0K1Y4Y3V2VUhCRkxBcUZFcVdSdVphU09uemxkTW5ucVh4K2owcVYzby9JeEVwODZnQQpxSExzMXQyVUJNc1N4blN0TTg1eHlrbDNWL3c2ak50cVBzY05EQVJFSTJyWnl3VWoydXU0N0NCNmtOYXJNUUFZCnUzN3VIU1FTaEszNWJLMC9tOWNqZHQwQ2dZRUF6aXlFWjROeWJxR3VWbVlSSG4xc1lMK0VITzYra3FBOSt5ejMKTW1mWlBRSHM5NUtIa1JnUi92U3ZZM1ZrYzNJejZDOTVaYXFJSDRjRjZUS3NaaldoNEhzQ0g0aE1JWjdrVmUxKwpNY1VFNzZ5c2Y0VkgvZmxuckxBMTlFa1dLQXk3MzdYdDFTNnd3a0trU3g3UWFIcnQxZkVLc1ZlWFkvN0NWbW8wCkhsdnltbXNDZ1lFQXhwdU9UME9HU00zN3VvbFFzZEN2TnJXcFJ0SUE5c0xRWlNlQU5yeFNiWUN1Z2JNTEVDN0wKZVRNS0sxdm5KZkQyNFU0UjdWTCtGbS9lNFZYWDZqbEttdHRmODRhbW5UR3FiT0JaMHlyeVVob1hwNW9RLzB0MwozWlBIeDNzdzNOTkMzU0trOXB6ZlZvVGJqY1lOUjdmRWZoZ3o0cVdMc1JmYUt4emZhckhybTY4PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUx3U21OR3hrYkR4Zk14eVpEemtCWGN3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV5TTFvWERUSTJNVEV5TVRJeApOVFV5TTFvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFzMVA5RVg0SDAvWVVFTkpMMUJzUWVmei9EQVN1dTlleWcwM0dLK2d6K2ViQU5EUmIKbklOdjlkVWdGd3E3dWk2WENJclhLd1NsaForL3phTTR5RWFoMFF4ZldyM29zZHdxaUFtQjRFcy9PUTlKY2lYWQprUksrRVlCRkdnVUlyL21Cd3gxRDFkVG00Y25xSDRNTGlmWEdtOEZKeUd3NCsydEcrQy95eXFMd0NtRENJTG9ZCjJmcWRpYk9LdS9nZlRmQzRRSnFvZWFKSzMyR2ZzNjdDMzlOeUhxNU5FaGh0Q3FNdjZ1L2RXZFZFQjBNVkcxdjgKMG43Vm1BWWo5ZFdqNElSQllUclROU3lvcVdNTjlUWTErZFIxTVNmc1puT0FQSG93MnV6eGs1cVRrSFY2YVhMdwpjSHJUcWd6YmVmWjM0WWxNYnVUMCtBdUwyM3lQNnFtZDEvN0Z2UUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQ2M5UVRNZjRaUU9wZXh4S24ydWdqR2k1cS9vTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ28vVlZYYi9YZ0NGT1l2ODl4UUhlUXV1N2pFRzR5bjdUb0drUjBXSWl3R0NrK3IwenpPL2syCitLQ3kwZEpLOTQyWlRyb0YxREtIcm5ocUFtS0lUVERVUUUyVEpjcCtnc3FCYzAwV3pTbEdrMnZlb3Rubk5qTmUKY0dVd3JlZFRKU3k3YnFaRzRaYVVya3krb1ZIUXVSenlYWjJGNTY3cW1wSVdvT3lWWk9ubFp4Y2U1OFZ0WXZnbQpHaE5XKzJNam5FVkgzeWF6MnNUVnhQZTB3azNQc3Z4YUNlWmlpd1ZiOU9IdFErdWwvRmp4OEJPTXZPM0VMNkt5CldnRUpyV0JTYzFnRlpKSm83dTkwMC94SGJDOUdOR2kvc1NUbGo0SitPUnl4aWdaS2JUMUZpd2phVnRpRUk0aGQKOC9qRE12MkxEL2Z2K2l5ZDlsKytrM21qSlk4SFhEVnAKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTVENDQWpHZ0F3SUJBZ0lSQUk1WVpTVVIyd2t4TWNhbkZsN2xQSjR3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV5TkZvWERUSTJNVEV5TVRJeApOVFV5TkZvd0l6RWhNQjhHQTFVRUF3d1lLaTVvZFdKaWJHVXRjbVZzWVhrdVkybHNhWFZ0TG1sdk1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXZDOE5uQlBMQXAveGJyZFBlOVpCa21zaTM1U2MKc3MyRXZTVEVrWGxtajFwMXp6UWxIc3dBU1JYOUpNYi9RZjJJVkY5QmVOYWg5V2NXeWN2WmtpUzhsZDVxWEtTZwp2VzRnK0MzWHFXcHovb0k1b01paE1xUmt5R29vNVVUY21BMjZITTlWYVc0cDJ1S2YycnhWajVhQU1yV0FPbHh4Cnp3blB2aWdwaGw3R051MjNrc2RPNWNlSWM3YktmelZtRnAxRDUvM2JESktlTmUrdDl4ckxKay80eG9wczQxaTcKNnZEOUZZTFhHZHV1ei9jTzVHandBUnhURjFzWnc3c3V5N1dtRWw4SmY4TWRmVlo2eGFybVJnMytHellROWk0cwp0NmcxeVJBMEdRNDdrYUpUbDNEaFJqaG1QcGYwL3NTRFh0ei9jNUNTbUcvM1JGVzlrbVp3TlJlTGd3SURBUUFCCm80R0dNSUdETUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUIKQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCUW5QVUV6SCtHVURxWHNjU3A5cm9JeApvdWF2NkRBakJnTlZIUkVFSERBYWdoZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d0RRWUpLb1pJCmh2Y05BUUVMQlFBRGdnRUJBSW1Xb2s3cnlycE90d3IrZk5PZk0zTHhsWDZWVmlNakhEUVFaUGRPQUNRQ0M2NDcKUHhoeWJETCtSeHg4cUt5VllkWFV0SURhME1hNG4yL3dkNHJTbHB2SzV2dS9ENXV6RUk0dVZRUmNXMHJOUGNXTApKN3I1RzJ4UWlpblZuQUZud1pSSXU2SWtXc2IvNzRXaUJ6SjBJTFFnM1M2S3JtSmQ4WTRlenZYb3dzREh4TnVRCm1UOURLWVpPeVFnRFczMVpuRldUTFBQbjlidUhjUmUvOTZML0V0VkpzQk12clorOFhwZ1pFUWcxUFdXRllGdlkKUGY2aG5HczBZOWRaUTNxTnVoWW0zRVZxSng0YjdrWTJoTzhNMldOYS81YWRQQzJ4UnJCS3RMdCtrcXg2N2RHMApvRGJvQUl2TzJyTUVDa3ZnYWVNMHhmTFhEK3VmR2FUNkdBY3EzWGs9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdkM4Tm5CUExBcC94YnJkUGU5WkJrbXNpMzVTY3NzMkV2U1RFa1hsbWoxcDF6elFsCkhzd0FTUlg5Sk1iL1FmMklWRjlCZU5haDlXY1d5Y3Zaa2lTOGxkNXFYS1Nndlc0ZytDM1hxV3B6L29JNW9NaWgKTXFSa3lHb281VVRjbUEyNkhNOVZhVzRwMnVLZjJyeFZqNWFBTXJXQU9seHh6d25QdmlncGhsN0dOdTIza3NkTwo1Y2VJYzdiS2Z6Vm1GcDFENS8zYkRKS2VOZSt0OXhyTEprLzR4b3BzNDFpNzZ2RDlGWUxYR2R1dXovY081R2p3CkFSeFRGMXNadzdzdXk3V21FbDhKZjhNZGZWWjZ4YXJtUmczK0d6WVE5aTRzdDZnMXlSQTBHUTQ3a2FKVGwzRGgKUmpobVBwZjAvc1NEWHR6L2M1Q1NtRy8zUkZXOWttWndOUmVMZ3dJREFRQUJBb0lCQVFDYk1tOFY5bGpwL0VDZwpIN3dFbElvVm1CZjFybG1oT00rdE1nS1BPMER6SHhhajRReHdIcXhwbWlIZ3orRTZhajZoM3NGZlNCdmdDTG9KCmlQNFJnZ3lweVBtTkdCU2N4Wk9aT2kxdlFpVVJsQkswNEdIWkl5MGZBRFprQnV1cTF6OVRmVWFpb2NFUkRPL3EKOUlIWDNyWXhtL0I1c1Q0SEVyOXF3ektqNTh1dkJlZ1didHI5QVlXSmdHNXRwaG5TOWdyT013eGJqemdiT2NpQwpkY00zOGcxN3hITytNUFFlZWliL01jMzJLWldvK2VvY0wrQk1IcEFRWW1xdHdwV0RIeUtXVk9iU3liajVjRk9UCjh0aTVrSDV1SzY2VythQXE2Ym95by94YUd6akxwMEU0R1RaZUluVEJVVEc0a3hGWU1Tdm02VnZFbVRNKzVBSWoKWVdPaTB2V1pBb0dCQVBLRWYwVVZvWmVMNHJscysvakRlL05mVkpJZTY4QVUyUnBMUFRSMU5kV2NEY3RvNy9CZAo2VmhsU3ZQdXN6RG9ZaERsK0lka0JpL0s0S2NPRzFHeTJqL0wrdTliZ2NTQ2lUdVR5UmlpVTFNUjZaZkZLNWZDCjdnUmozUzRFd2ZNTnlTZ2gwcDB1a0pTVzJjeFp4b0M0eU02cVd5VHExQnJXd0tvTXdDL21KT09GQW9HQkFNYWwKUjRzeSt5eFJ4TC9XQ1N5MjhSdXhaQUNWOUMvZEt3b2VnVkhNQVBtd2xkY25PWUorZEZ5RFJtL2VtSUU2R1B0eAorYWQ5YTFZT0FkQzQ1OVB3THAvN1NHNWJaMkNxaXBKbURVeXhWTW1KTHFGVm5MOW13eTF0M2JyY0FlTnZhUXRvCkFPN3dZYjAwVU9FZTNkd1kvTDF3WVZZMnltTkxDSlE2YzM3UzNVMW5Bb0dBZldYVFpRWmxVcllMR3JQbXFkOXkKbFFuaThkYzVNVTNXWUVrdE1aVzFxMmtRbk8vNnVQL21LMFhjOXJxalB4TzV1V0VnRyttMVpUcnk1STVmdytQRwpCQnpWK0xRSktuSVF3WlNOODhYamJkMmlPazdDVnF0OVpSbTZBUlNHc01XZEVMcEVhKy9xNUZvSDdpa3hnZGVLClJZcENySmtiNlhESG1HWVZiZThEZmYwQ2dZQkNYVitNa3NpMVl0QVBveXRIaEFzRFRIMXpjS1czQS9Yb0dJN3QKeS9FYmVqSmxRaGFGa1VmQXpKN1FxeFphUGhXd2s4QnJnNHhEb01SY2ZobjloWVdlTHk1Z3FDcmVjYnQvODVaSAo1QXJHbGcwOUcwUVY4ZmdOQ21LRWxoSVBjTjR3VUZ2WGQvbS9ZMllOLytqeEttdnR3a2pTcTlWcjNOcU40d1ZJCi9wdXV5d0tCZ0Z4K1krTDQyM2hodGtULzl5eWswakdJdXdMS2J4NEJoNHY5L2hKSllJby91UzBGeUtLOWtRUkcKT2s0UXVPRnJHNVloV0ZVbm45NnlOZmRHYTIwT0phMHRLRGRwRzcrZnRwRWFzUkZjUTRBdUp0M3ZjQisyYW0wZQpvc0ZkdmlvbFphZ042WkNucXkrNkVEUm82QnRzZytuTGttTEpvakNuWXkxeFpnL2FDc2V3Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUx3U21OR3hrYkR4Zk14eVpEemtCWGN3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV5TTFvWERUSTJNVEV5TVRJeApOVFV5TTFvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFzMVA5RVg0SDAvWVVFTkpMMUJzUWVmei9EQVN1dTlleWcwM0dLK2d6K2ViQU5EUmIKbklOdjlkVWdGd3E3dWk2WENJclhLd1NsaForL3phTTR5RWFoMFF4ZldyM29zZHdxaUFtQjRFcy9PUTlKY2lYWQprUksrRVlCRkdnVUlyL21Cd3gxRDFkVG00Y25xSDRNTGlmWEdtOEZKeUd3NCsydEcrQy95eXFMd0NtRENJTG9ZCjJmcWRpYk9LdS9nZlRmQzRRSnFvZWFKSzMyR2ZzNjdDMzlOeUhxNU5FaGh0Q3FNdjZ1L2RXZFZFQjBNVkcxdjgKMG43Vm1BWWo5ZFdqNElSQllUclROU3lvcVdNTjlUWTErZFIxTVNmc1puT0FQSG93MnV6eGs1cVRrSFY2YVhMdwpjSHJUcWd6YmVmWjM0WWxNYnVUMCtBdUwyM3lQNnFtZDEvN0Z2UUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQ2M5UVRNZjRaUU9wZXh4S24ydWdqR2k1cS9vTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ28vVlZYYi9YZ0NGT1l2ODl4UUhlUXV1N2pFRzR5bjdUb0drUjBXSWl3R0NrK3IwenpPL2syCitLQ3kwZEpLOTQyWlRyb0YxREtIcm5ocUFtS0lUVERVUUUyVEpjcCtnc3FCYzAwV3pTbEdrMnZlb3Rubk5qTmUKY0dVd3JlZFRKU3k3YnFaRzRaYVVya3krb1ZIUXVSenlYWjJGNTY3cW1wSVdvT3lWWk9ubFp4Y2U1OFZ0WXZnbQpHaE5XKzJNam5FVkgzeWF6MnNUVnhQZTB3azNQc3Z4YUNlWmlpd1ZiOU9IdFErdWwvRmp4OEJPTXZPM0VMNkt5CldnRUpyV0JTYzFnRlpKSm83dTkwMC94SGJDOUdOR2kvc1NUbGo0SitPUnl4aWdaS2JUMUZpd2phVnRpRUk0aGQKOC9qRE12MkxEL2Z2K2l5ZDlsKytrM21qSlk4SFhEVnAKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUekNDQWplZ0F3SUJBZ0lSQUpSTk1BOGsxc1BZVWtTWklnL1k1VmN3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV5TTFvWERUSTJNVEV5TVRJeApOVFV5TTFvd0pqRWtNQ0lHQTFVRUF3d2JLaTVqTVRndWFIVmlZbXhsTFdkeWNHTXVZMmxzYVhWdExtbHZNSUlCCklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF1RGc2K3drMktCd3FyN1VpM2hIQlRWUFoKY21sc3FDLzVHekxtSVVUdGJvdVFRMEtZbU5IdTA2b20xMlJaRCtDY2tTNDhmaU8yRjlnakZ1N0sxamhaZmcyKwp1YXAyYTB0VFlnSTE4RWtNLy9ud3hydEpHZWFpK0R1N2s4aUZORnpaYXU3T3JrZUR2ZkpZY3BVS2hsZzFheWZJClY4S1lRU0NVYlBqcThLMUFFUkZPUk9BTnNkazZRSG15Q2xTS0xtS0xTYnpvQkJHejV4WVUzVG1yZ1FwMFpkcEcKMnh5QUFrRWFwR1RUNjFHOHNoczdjSzdhV0JIYnBiM3JGSk9SMDJYdStNT2FMYmxhblljM05qSmwreGJ6RllEVwpoTFhwQ2svSE9LdklVZlZteUpBU3FNanQrbmRNNHZXS2Q2b1kvbGFqTTM0cUpuMUdaaWVKL1NYdEZVeVJjd0lECkFRQUJvNEdKTUlHR01BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWZCZ05WSFNNRUdEQVdnQlFuUFVFekgrR1VEcVhzY1NwOQpyb0l4b3VhdjZEQW1CZ05WSFJFRUh6QWRnaHNxTG1NeE9DNW9kV0ppYkdVdFozSndZeTVqYVd4cGRXMHVhVzh3CkRRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFCWGQrNWhwRDE2TXEvb0V4ZHVtaFo2VXh4WHgzdGJhbW1ncG9YajcKMFRFRk5pUUNyeVlEcGkwcFVLanZOWnZFRnJFREthajRIeGphVStXT1pXOVBLZGdFVzFtZFBYOWVxRUw0cjFaTgpZanNoVlRrOXQzNzdMQTV0dkl3dG1Gam54cDdGaFF5b2k1RmhVMW9mSkVsQ3VtTm9Ub0Ivemx3L1BBRzRYVkphCjAyMzR4eXNESy9iOHhkV0plZHB3TjI0YnpnT3p4QzZrVCszamI2d1FTSWRBVy9wVnQzSmNTWkJEVEVWMlhNY0EKTVl0OHJwQnpNdG1xMVRjb2tMNnh5ODRxMmhtRWJpeWxCQ2VEZms0N0txQndEUXJzRzdSUHRZcUUxWGUzWmNNYwpMdHVwZCtzNmlwdnp6WldRWGhPMWp1V1YzZVFpZVJPYjhzSlZPeU1kazdwRjdwRT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdURnNit3azJLQndxcjdVaTNoSEJUVlBaY21sc3FDLzVHekxtSVVUdGJvdVFRMEtZCm1OSHUwNm9tMTJSWkQrQ2NrUzQ4ZmlPMkY5Z2pGdTdLMWpoWmZnMit1YXAyYTB0VFlnSTE4RWtNLy9ud3hydEoKR2VhaStEdTdrOGlGTkZ6WmF1N09ya2VEdmZKWWNwVUtobGcxYXlmSVY4S1lRU0NVYlBqcThLMUFFUkZPUk9BTgpzZGs2UUhteUNsU0tMbUtMU2J6b0JCR3o1eFlVM1RtcmdRcDBaZHBHMnh5QUFrRWFwR1RUNjFHOHNoczdjSzdhCldCSGJwYjNyRkpPUjAyWHUrTU9hTGJsYW5ZYzNOakpsK3hiekZZRFdoTFhwQ2svSE9LdklVZlZteUpBU3FNanQKK25kTTR2V0tkNm9ZL2xhak0zNHFKbjFHWmllSi9TWHRGVXlSY3dJREFRQUJBb0lCQUVtUDJxMkgzaUppTFFHQQorVzFuOWFLbFN2Mk83NTZ4bVcydEE0eGhjOVppMExhckR6aG5ERkZsYnFFd0p3aGFEdXRDWlZHUmZSTkVjYTZrCnFFYW10Y1hLUTFEc3F1RHBjV0IvdFg1QURYcmlHYTJoOSt6cDFrWDl4RWVkR09QeDk3ZmxxSTZiYkJZYmdnb3YKVGNhYnpxajlkOWpqa2R6ZjM2VXNPTlRtdWVDV05SUEI3Z1N1cEppdDVLL0UzdXpJc2FQZ0ZyUTZuL0lucVY5SApJTmJnMVhZQjhmcUdZLzlOOHl1WUVsRzNXL0xJa3psTytMelVvejI3cVJFU0ZPRFgzLzdtcktISlYxTnZ3UWQzCmV3S3VKQjdyL25xL2oyQ3VEaWhQdGZkSVVRQmNHV0I3aVYxYkgvZmJUaWJYTmwzZ0xtTHY3MXg4V0VpOW4rcFMKSjQyV04zRUNnWUVBMTN2b0VnYitKZm5ZL0ZqRGl0dWdFMWltc3JyRklzdGFqRWpZWGdVdnFXY3NsOFd3Um5SNApsMWlBUzV2all1QmNXR20rcG0ycXRmc1Z3NG1DQk1oMU81RG9odnpyQnE4clVTNG5hcTBvWkNZUkYxRXRSZi9vCkloV0wzT0RYS1N0OVBNem04V2JhVkJpeUdhQzVLS3VEM0h2TjNMOG04OWFhVGNvczRsVCtBM2NDZ1lFQTJ0dHkKZWxkQUxPb0JVeXV4RG4weTBwajRyZ2pjVGY2dTYwclZLVzAwUWZBbDNqcXdkZFd1MGZnbEhZZXBpVkg4THBYOQp2YXVnZlZtLzBjNFF1dEI1ZDV2OUFSSEw4eDV3QzVwSUhaNW9rdFo0b28xQmNOc0xoeG92WDNMdlVvOTNMd2NYCmNDSjhzbnhUZHNRbFlRcjZRUzM5eTBIYXpoUmxFQ1FCWUs0MlNPVUNnWUVBcTVLM0I1T1Z6UHNROEd4azFpMWwKV2NJZWlQVDVmbWpZWWhhbVlNWlVXdGdSdzQ3ZWVsckdvZ3NQckNRbGUxY1ZjRGhTV3dXN0JVYzAzd3FnQWRyeQpyVWtHUEdVcFpac1lMSDFKV1VFaWhndGhWR1dJWE5JVUxQOW02Nm9DNTM3L0t1Z2pnbGJZeEZrZGhoWlpGNjdwClFTYzZsT2VHeG1RN1hIRDhLQUp3ZHFVQ2dZRUFzb3pVTVlGYlJ3bEdPVzlzek5CUmxVVGRwVVp2VFdaWm1IWjkKdjRWclc5d3JXTWx5eXorZ2w0YWw2UmlUdFFkaEFUUzNSWFZ1d3JWazdDcjh0Ung5N0pvamFDcjN4QW55Q1ZVKwpQb1BNOXZib2hsMU5wVi9mWU1KNUlacm9LdWdHcVNSVTk5UDYvYmEyZFMrQyswLzBhUmEzZG9yc2tySkszVWN5CnBJaWNtdzBDZ1lCcm1OQUdHSzJ6WHZLOVpIbWF1OVhYTjMrbWNxU2dTUXpXb1c3RDBrazJxWlh1K2cvNHhZTTgKaE1nUDZxa2dMQXFpcktrZlc1STJyN21HOXVwSFZUTGZhY2k3cTIwZTJ5TEh4NHk1a2dUaDV6V2hpeDVlQjBUTAp2Y0Q5YWhFSkR4VnRDNzhRSHlOd2p0bmd4d2RWSzZxZU1nME9uS1kyMElibHJaYnAwc3BpbGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  skip-cnp-status-startup-clean: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: c18
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "118"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  # Default case
  routing-mode: "tunnel"
  tunnel-protocol: "vxlan"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-wireguard: "true"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-local-redirect-policy: "false"

  kube-proxy-replacement: "false"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  enable-host-port: "false"
  enable-external-ips: "false"
  enable-node-port: "false"
  enable-health-check-nodeport: "true"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  ipam-cilium-node-update-rate: "15s"
  cluster-pool-ipv4-cidr: "10.18.0.0/17"
  cluster-pool-ipv4-mask-size: "24"
  disable-cnp-status-updates: "true"
  cnp-node-status-gc-interval: "0s"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "true"
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"
  k8s-client-qps: "5"
  k8s-client-burst: "10"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-connect-timeout: "2"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"

  external-envoy-proxy: "false"
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: c18
    peer-service: "hubble-peer.kube-system.svc.cluster.local:443"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-hubble-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-hubble-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumendpoints
  - ciliumidentities
  verbs:
  - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumexternalworkloads/status
  - ciliumnodes
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumendpoints/status
  verbs:
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumexternalworkloads
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: kvmesh-metrics
    port: 9964
    protocol: TCP
    targetPort: kvmesh-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: NodePort
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
    nodePort: 32379
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-agent: "unconfined"
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: "unconfined"
        container.apparmor.security.beta.kubernetes.io/mount-cgroup: "unconfined"
        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: "unconfined"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        lifecycle:
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - CHOWN
              - KILL
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
              - DAC_OVERRIDE
              - FOWNER
              - SETGID
              - SETUID
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Unprivileged containers need to mount /proc/sys/net from the host
        # to have write access
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        # Unprivileged containers need to mount /proc/sys/kernel from the host
        # to have write access
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Unprivileged containers can't set mount propagation to bidirectional
          # in this case we will mount the bpf fs from an init container that
          # is privileged and set the mount propagation from host to container
          # in Cilium.
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - cilium
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      # Mount the bpf fs if it is not mounted. We will perform this task
      # from a privileged container because the mount propagation bidirectional
      # only works from privileged containers.
      - name: mount-bpf-fs
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        args:
        - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
        command:
        - /bin/bash
        - -c
        - --
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
            drop:
              - ALL
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        resources:
          requests:
            cpu: 100m
            memory: 100Mi # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
      - name: host-proc-sys-net
        hostPath:
          path: /proc/sys/net
          type: Directory
      - name: host-proc-sys-kernel
        hostPath:
          path: /proc/sys/kernel
          type: Directory
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              - key: ca.crt
                path: client-ca.crt
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.14.2@sha256:52f70250dea22e506959439a7c4ea31b10fe8375db62f5c27ab746e3a2af866d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      initContainers:
      - name: etcd-init
        image: "quay.io/coreos/etcd:v3.5.4@sha256:795d8660c48c439a7c3764c2330ed9222ab5db5bb524d8d0607cac76f7ba82a3"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
        - |
          rm -rf /var/run/etcd/*;
          /usr/local/bin/etcd --data-dir=/var/run/etcd --name=clustermesh-apiserver --listen-client-urls=http://127.0.0.1:2379 --advertise-client-urls=http://127.0.0.1:2379 --initial-cluster-token=clustermesh-apiserver --initial-cluster-state=new --auto-compaction-retention=1 &

          # The following key needs to be created before that the cilium agents
          # have the possibility of connecting to etcd.
          etcdctl put cilium/.has-cluster-config true

          etcdctl user add root --no-password;
          etcdctl user grant-role root root;
          etcdctl user add admin-c18 --no-password;
          etcdctl user grant-role admin-c18 root;
          etcdctl user add externalworkload --no-password;
          etcdctl role add externalworkload;
          etcdctl role grant-permission externalworkload --from-key read '';
          etcdctl role grant-permission externalworkload readwrite --prefix cilium/state/noderegister/v1/;
          etcdctl role grant-permission externalworkload readwrite --prefix cilium/.initlock/;
          etcdctl user grant-role externalworkload externalworkload;
          etcdctl user add remote --no-password;
          etcdctl role add remote;
          etcdctl role grant-permission remote --from-key read '';
          etcdctl user grant-role remote remote;
          etcdctl auth enable;
          exit
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        image: "quay.io/coreos/etcd:v3.5.4@sha256:795d8660c48c439a7c3764c2330ed9222ab5db5bb524d8d0607cac76f7ba82a3"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/local/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=clustermesh-apiserver
        - --auto-compaction-retention=1
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.14.2@sha256:0650beac6633a483261640b6539c9609f5a761f4ab4504fd1e6ffe7f2bb82e9a"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt
        - etcd.config=/var/lib/cilium/etcd-config.yaml
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: IDENTITY_ALLOCATION_MODE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: identity-allocation-mode
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        ports:
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir: {}
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "clustermesh-apiserver"
      serviceAccountName: "clustermesh-apiserver"
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: clustermesh-apiserver
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.14.2@sha256:a89030b31f333e8fb1c10d2473250399a1a537c27d022cd8becc1a65d1bef1d6"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            tcpSocket:
              port: grpc
          livenessProbe:
            tcpSocket:
              port: grpc
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          - name: tls
            mountPath: /var/lib/hubble-relay/tls
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Always
      priorityClassName: 
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      priorityClassName: 
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.12.0@sha256:1c876cfa1d5e35bc91e1025c9314f922041592a88b03313c22c1f97a5d2ba88f"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.12.0@sha256:8a79a1aad4fc9c2aa2b3e4379af0af872a89fcec9d99e117188190671c66fc2e"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
---
# Source: cilium/templates/cilium-secrets-namespace.yaml
# Only create the namespace if it's different from Ingress secret namespace or Ingress is not enabled.

# Only create the namespace if it's different from Ingress and Gateway API secret namespaces (if enabled).
