---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUlhdndHc3FMdExLY3VPb05pTUFSVGd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamMwTUZvWERUSTNNRFl4TVRFNQpNamMwTUZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUExb2xSUldHYXdBNGlXR0kxaWRiOU9VTU9iZlJHeTdCMjFoNEV5dWt6OExQTTZNRGIKOHd3eXJ3QVowYUNtbUhZaCtCbDdzY1IvYlRWaW14TUdUOWxtUzc2dGpYSjduQ2dDRUdGRkFNU3VSU1dldG16bQoyckkzTExMenFmTFZxQnJqaExaYyszMUNHSVIrbHhnM1k4YmdkUTFsSnptNGp5TEI1Y1Q2WkxpK3lKVzF4WVhOCktlNHZ1Ykt0TXdrRU04VWZZczczcTRzSGhkRENrUUVIQjlNdVlnMU5zd2N0MFZuSGw2RmlSektXaklabmpPY3MKbGJRY3QwUE1BWlJaZ0pxWWEra3FuaUlidlNrWTc0V2pub1RoUkpqV0tsblBZdG8xVFlEbTg2cWJMYkhVb0Vvcgp0V3RSZmV5QWJZNGhXWmVNT3pGcFU5WGpwNGtiNW1sMmFNTGtPUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGRDBManhPdEFtTHJZNVJBTnpZZGpHZ2xEQlAwTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQXBVZk5qL09yb2xLRXJ3QUNsaHZPVmoveGg0UDZ6ZFdmdXpucDgyTUgxVmtjSGFUd3pWcGg4Ck5GSGI3MHZVTFZodkx0SXJVMzJKSTBDWnJSM2lyZzF5WWpaanEwZkhRdmdPR3lwbFRQU2lQL2hTRm5mSFJ4TUMKaUJ4U0t4ZXZmSktEMTVxSmVnRS9qL1MvZTZZNlQzUWRrRk0zem1uZk0vSmRNT1Jwd05PVGpsdHVPN1F5MDgxUwpuVFpPYzJtTHh2RVdPMlhmMHJSYTFJMStTOHZmUHVEVUtveVBRZFpiaUN5WXdZK0tYaGlFQjhCcWY2by9aNG9WCmlQY1ZGSTBxMkhwUDhIUmR3cU1SM0k2N0plRkFDdlNxbUxvb0tEQWhrNEpxT0l5U3g0TjFETkVwNk5DYXlMakoKd0tvTDlyaXQ4NDZFcFFvaW1ZdkJwb0s3YXYwaGtvemMKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMW9sUlJXR2F3QTRpV0dJMWlkYjlPVU1PYmZSR3k3QjIxaDRFeXVrejhMUE02TURiCjh3d3lyd0FaMGFDbW1IWWgrQmw3c2NSL2JUVmlteE1HVDlsbVM3NnRqWEo3bkNnQ0VHRkZBTVN1UlNXZXRtem0KMnJJM0xMTHpxZkxWcUJyamhMWmMrMzFDR0lSK2x4ZzNZOGJnZFExbEp6bTRqeUxCNWNUNlpMaSt5SlcxeFlYTgpLZTR2dWJLdE13a0VNOFVmWXM3M3E0c0hoZERDa1FFSEI5TXVZZzFOc3djdDBWbkhsNkZpUnpLV2pJWm5qT2NzCmxiUWN0MFBNQVpSWmdKcVlhK2txbmlJYnZTa1k3NFdqbm9UaFJKaldLbG5QWXRvMVRZRG04NnFiTGJIVW9Fb3IKdFd0UmZleUFiWTRoV1plTU96RnBVOVhqcDRrYjVtbDJhTUxrT1FJREFRQUJBb0lCQVFDQ290MVZOVWtKTjlJYwpKYmxhTlFxL0txRUh2VjY2dTdxeFNWZzd3dU40NTlPWHk1QmpvSUxnWTF4VmRORGROOW9aZkZNQS9abG1nOEtHCmtZQWZjVTlFUWxqbUw5Y3JVSVZwT2dITnBQWkZidElGWGF6NWNObitJdjRTOTZhNGxaOERlaFNHbzFCekk0TCsKT0tYSjRSbGV6WWhSNldrRDUvTlFHYkVyVWdBQ25XRkVPWTRobnVuV2Q2azFNMHhJZ3hTazdRbmNoU0diVnJZSQo3bDJJQ1VUNndmVnh3VWprMVJJdEVTeHdVMWpiU0xUNnRRZUI0QnhkNEgzUnRGZGNKSS9HZVZua3A2djYxcnRXClp5UmlwSFN1a282M0VzRFNRN01aalJFWDBnN3ZOYlNrSUxlT2x0NWpHOFc2L3dKMXk4Q055aVB3TThkTHZaTFQKc1lyV0EwSUJBb0dCQU55dEdtUXJGRE44UnNEYW9PTERxRDBQWjRJYzMzYndzUkM1VTJDWFVGU0xwa2UyZjNhTgpJVzY2dk9OaGV1eDdPbjlTeW5Td1N4QXZnK2hpRkFhN1RHZFNVSmUyT1NZeDh1YWRFT0lCdXQ0cS9IUGdUV1V5CkNSb1hCSlZYc1ZGd25OVVgvWlVXSHF4bW8vL3k3RnpHc05MWTZJZ0JBMFVDb2l2VmI2VkdqYkQ1QW9HQkFQamcKbmd3VXJMenNHbGpLVlJndXREcnNFWHptRjduUWg4Rkt1aXp1bVBuU2RTa2FnSnFmaGhpSWdJcXFYamF0cnA0LwpYMUt4N3VBV2UzbmRraW1zZGdKN2ljREhadWwwYnlkSm5xSmNRWTd4NjVaSTFVUTIyemhraGo2MGlyd25QcWhYCml5Um92b1hKUzhzemtiTzExRURkQ3Q1eWk5cUVnNWUrZWtqM2t0MUJBb0dBQmtKMnhDNmdwUkU2WkpBUERqK2sKanc3WHpjNEozTExaSXZOTzFTZVZwTUJOV0MxcUVpL1FxZlpzRXpzWnBJbWVVQ3hHQitkVVNjSS9TS0UzbGpWTAo1b1prT05sM1o0ajFMZXQ0cGlDTWIyN2l1RnE5ZDBoakQ3VmxjT01LNlpkN0syUkIwaS9OY1BCOGFHODRteTBiCnFPOTBNUjl1TzAvbXo3MS9MRDRER09rQ2dZRUF6TUFXcHIrM29USHBOeFUyenM5VnJZZ2JseExCZ0RpRUIwelEKUURrSGw3aENkVTk5Y0RnL25SMW9DeXpBbCtGcDRIMG9raU1hOERidTNNS2lCakVCWVdkN1hDTndraTRkYUVnVAovMlZBOWpZbmFKdUJBVDdVT2QvUjVmS29sTVVBc29SYlQ5ZndycVo5K2EzeWQ5UG16SHBOLzlaaklxS1VsSm03Cmh4NVBNRUVDZ1lFQW14MStSWkt4ZnR0YUdFUjFpeVZSS1NXeEN1OG11cjVlOTdDSlNFTFd6RDZOSlN1ZkZCWUYKQjRMUHpJZXhnZEV1UVlvdHBPT0lMRjAxN1BTalh0R3dGdnlyN2ExNXB1QUdnVElCU0ltTkR3UGNIcVJsQVhwQgozT0t4bmRrS09IU09TeUpjNCtnSUxOMFlVc1ZoeE8zTU1TVkJhTXdyMVdGL1pNbi80VTVTaTBFPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUlhdndHc3FMdExLY3VPb05pTUFSVGd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamMwTUZvWERUSTNNRFl4TVRFNQpNamMwTUZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUExb2xSUldHYXdBNGlXR0kxaWRiOU9VTU9iZlJHeTdCMjFoNEV5dWt6OExQTTZNRGIKOHd3eXJ3QVowYUNtbUhZaCtCbDdzY1IvYlRWaW14TUdUOWxtUzc2dGpYSjduQ2dDRUdGRkFNU3VSU1dldG16bQoyckkzTExMenFmTFZxQnJqaExaYyszMUNHSVIrbHhnM1k4YmdkUTFsSnptNGp5TEI1Y1Q2WkxpK3lKVzF4WVhOCktlNHZ1Ykt0TXdrRU04VWZZczczcTRzSGhkRENrUUVIQjlNdVlnMU5zd2N0MFZuSGw2RmlSektXaklabmpPY3MKbGJRY3QwUE1BWlJaZ0pxWWEra3FuaUlidlNrWTc0V2pub1RoUkpqV0tsblBZdG8xVFlEbTg2cWJMYkhVb0Vvcgp0V3RSZmV5QWJZNGhXWmVNT3pGcFU5WGpwNGtiNW1sMmFNTGtPUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGRDBManhPdEFtTHJZNVJBTnpZZGpHZ2xEQlAwTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQXBVZk5qL09yb2xLRXJ3QUNsaHZPVmoveGg0UDZ6ZFdmdXpucDgyTUgxVmtjSGFUd3pWcGg4Ck5GSGI3MHZVTFZodkx0SXJVMzJKSTBDWnJSM2lyZzF5WWpaanEwZkhRdmdPR3lwbFRQU2lQL2hTRm5mSFJ4TUMKaUJ4U0t4ZXZmSktEMTVxSmVnRS9qL1MvZTZZNlQzUWRrRk0zem1uZk0vSmRNT1Jwd05PVGpsdHVPN1F5MDgxUwpuVFpPYzJtTHh2RVdPMlhmMHJSYTFJMStTOHZmUHVEVUtveVBRZFpiaUN5WXdZK0tYaGlFQjhCcWY2by9aNG9WCmlQY1ZGSTBxMkhwUDhIUmR3cU1SM0k2N0plRkFDdlNxbUxvb0tEQWhrNEpxT0l5U3g0TjFETkVwNk5DYXlMakoKd0tvTDlyaXQ4NDZFcFFvaW1ZdkJwb0s3YXYwaGtvemMKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLRENDQWhDZ0F3SUJBZ0lRY3RBNGJTbHNCQzNzOVh1M3pNYnBPVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOelF4V2hjTk1qY3dOakV4TVRreQpOelF4V2pBVU1SSXdFQVlEVlFRREV3bGhaRzFwYmkxak1UZ3dnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRFlhZStSWDZpQVZ4TFliVFVKZlhTWTQ3MWpNak1LdkFZYVkvdFBDMkZpWjNwM2IyVW4KWVYwQ2owaUQ5b29qWjY3Z0wycC9NM3FZSXdFeXVLSk1WcFBKb1JUdXZ5QXhUYmtVVzVIeSsvWmU1MHZZaExjMgpVdHc2UU1hQy80bUk4cWpPdHVKMlc2aFFhaVBEUDNTOFJ4cTBmM0paM1d5OEhpSjZkbUp4R0k0NEJJTndLaFdHClBMK0JTcm54a05GUzVKVS9BTGNqUE5RNzROdEVHSVA0Yi9yOTVtVE9FNXprVkpYemc0WnZnTll0R08vcjlRUlMKUTJFY2VoNUczWDhzUXFaRWhGK1dOaU5wbjdkZ1R0NFdkZ3dMYjk5cnJraFRjSWVKUU51T0E3T01PNDArelRtTwozYUdBMzdOUGZBT2pSajJqZ1RDODNmYTV1a3l4YlRuUmt2cWZBZ01CQUFHamRqQjBNQTRHQTFVZER3RUIvd1FFCkF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXcKQURBZkJnTlZIU01FR0RBV2dCUTlDNDhUclFKaTYyT1VRRGMySFl4b0pRd1Q5REFVQmdOVkhSRUVEVEFMZ2dscwpiMk5oYkdodmMzUXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQzRPNW83YmZOZHNzUjNpem80U01ORElNZEI5CkhZa1Z1MUtJL1RhLzgyK0syRlVVQkx6eVJONFFTZ3NDNUVWSXJER09QY3UxbGt1R01ZOHlXT29vQ1k1VFlZOGUKb3dITHhVcW0wRU5Db0ZHc2RJN0lYT21TQzZvYm9uYnBlYXhsaXNibmUwWDF1R0NFbXVlTHpmKzA0TDVhMzhpcgpjZFI5SUlvMXkwaXNiVGNnb0V6MHJ3N09rWEJKZ1BENXo0cEpzQmcrM0ZiUXJuZjlPQ3hEWDBSWVJmWm8vVUs4CldZdXh5ckxDblBnNXYvOENoWUNYQXdHTmQydHVuNlZPdEdsMTlIWFpXbWtyWFF1ekk0YlB2QzE2cmpaUDFWWSsKczFIajNOaGwvRXN3UndKTTFpbm8wOVpUNENJMHJIa25CUlN0TTZpWjdqRWV3eHBBOCtHcU5taUNEVG89Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBMkdudmtWK29nRmNTMkcwMUNYMTBtT085WXpJekNyd0dHbVA3VHd0aFltZDZkMjlsCkoyRmRBbzlJZy9hS0kyZXU0QzlxZnpONm1DTUJNcmlpVEZhVHlhRVU3cjhnTVUyNUZGdVI4dnYyWHVkTDJJUzMKTmxMY09rREdnditKaVBLb3pyYmlkbHVvVUdvand6OTB2RWNhdEg5eVdkMXN2QjRpZW5aaWNSaU9PQVNEY0NvVgpoankvZ1VxNThaRFJVdVNWUHdDM0l6elVPK0RiUkJpRCtHLzYvZVpremhPYzVGU1Y4NE9HYjREV0xSanY2L1VFClVrTmhISG9lUnQxL0xFS21SSVJmbGpZamFaKzNZRTdlRm5ZTUMyL2ZhNjVJVTNDSGlVRGJqZ096akR1TlBzMDUKanQyaGdOK3pUM3dEbzBZOW80RXd2TjMydWJwTXNXMDUwWkw2bndJREFRQUJBb0lCQUJMcUwyWWxWalRoWjJSRApKeitORjRQRlkrZ25tdzUxSUpOdDZha2U5WVFFUjAvcERJNUVsRHlGQ1hGL090T2RYRXQ3MlhNRXJOSmZQTnVTCkI1MWtjOFpMcmVpd0M4QkRhc204dHlUbG9NTHF0RlpZUXlzY1V1TkVoaFV0QUhoWHZTbFVFcmNGaTlCN2RtUzYKUnhtdG5VZnBXN1UvQlNIc0FGZHp3V2JoSG8wR3Jzb1JhUmp1MGc4V24wMDVPQkVCMkRPQlJRRStoYlNYRHJoOQpBM08rdWI1Yi9GR2R2UTEwSm9ESExNdkdlU3YyUWZhV0xienV4ZHNla1AwTDZGa1NMZHdSMjZpbEczQnBkbzRPCmZ3cTUvWXRZS09UY3pzcVhWbDQrckpwbnhiQ2hYcXFsclZJU1JLa3BOVU9nWEpWSVhlQU9hRkZ6SmNUeGNURXgKSHh0a2ZRRUNnWUVBOUN6VjVIWmZZYWRSQi9HV1VLZWNwSDllK25oY3RPNUhGZEU3eWd6U29XdENjZXB6SjJUMApwZm9hWHQxSTRlRElYWEZlYXVTUTVYeE56VXdBaWxNcTcvU2g2REhmNEVsVlM0cG1tRzJFSUFKU2NHTFdETDNrCjJMKzVsaHNrUE9Od3dWTmhWU0htREVoREhSUU4xSWxnM29pT0diSjQ3Y1U3ZEc0R3RQTFB3VzBDZ1lFQTR1VHQKeXc3THRwMkZOV2RJN09lZXhPT3RnMWt5d3VzUVU4VkptYlVydzRrV21aeGlUbUlBcDRmUTh6ejZQR21vbnNhOQpCVVJnMXJiYnI1RXJYK05aTUt0dGovTlJ5Z2ZDUG5MLy8rSjJqdFlXenYwbUEzb1pPZnFrMGVvWXFud2tOcVVtCkxFMkZsV3pvZE1QQ2pmUjlpeEJqc3U5c2xBanBIamxKTCs1VmNMc0NnWUFCR1Y2Ukc3Tk1OanVZSkk4L3A3RjkKMEJEMllhcFJLaTFwdkxwZkszV2JRbWRYS2U0QXhHU1Jockd0c2FOTldQeXQ1dis4elhDVmg5eTF5dHpKd3B3VAozbThJSTRsVmNoOFBLdjFSUEZUMjYrdkJFOERRNTkzcTE5b1hBZUpFMytVM0NaQUxtUTUzQ2JBN3BrWjFxWFNsCks4b3Y5V3l6N1VwYU9OQ1E2ZkxqZFFLQmdCb1ZVemphdEpTRHUwS09ZeFhJOHJtVHF1akVvazlDRXBodXY2MUoKNUlRUUNHY1VVVUROaDJHNi9VeFpJRE05dWtLMmVoaFc2Z01FOW5CU2NmZ04vTHpabURqS01nYlZxWURnVzRtaApFUndPaElTN0dWbWcrYkZ1bk8vOHgyVWg3RS9UNEhXTFcrWDNwU2wzTDdCK0FNaXgwNlJJWGVVT3VTM2VUQW1VCmpvSHRBb0dCQUxkSDhYRUtQbEJhYUlpSFk0cmUwMDNHN0o2Sk5mN2Zaa3VicjVvNnVnWGo2eXVobzdFQlBnZW0KTzQ5T2kwQ2d5a0tiWVo1Q2dOWmpFUGYzUFBKQ3BJWngxMjI3YW45aGwvTFJkdW5xSkI3VGwvQmdjYWljNTB3WQpvaUF0aGQrTzhIY0VPdVVsVDhtSjU5QjdaQlJNSFJURVJmYUNuUFFWYStSem5MWThPSllvCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUlhdndHc3FMdExLY3VPb05pTUFSVGd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamMwTUZvWERUSTNNRFl4TVRFNQpNamMwTUZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUExb2xSUldHYXdBNGlXR0kxaWRiOU9VTU9iZlJHeTdCMjFoNEV5dWt6OExQTTZNRGIKOHd3eXJ3QVowYUNtbUhZaCtCbDdzY1IvYlRWaW14TUdUOWxtUzc2dGpYSjduQ2dDRUdGRkFNU3VSU1dldG16bQoyckkzTExMenFmTFZxQnJqaExaYyszMUNHSVIrbHhnM1k4YmdkUTFsSnptNGp5TEI1Y1Q2WkxpK3lKVzF4WVhOCktlNHZ1Ykt0TXdrRU04VWZZczczcTRzSGhkRENrUUVIQjlNdVlnMU5zd2N0MFZuSGw2RmlSektXaklabmpPY3MKbGJRY3QwUE1BWlJaZ0pxWWEra3FuaUlidlNrWTc0V2pub1RoUkpqV0tsblBZdG8xVFlEbTg2cWJMYkhVb0Vvcgp0V3RSZmV5QWJZNGhXWmVNT3pGcFU5WGpwNGtiNW1sMmFNTGtPUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGRDBManhPdEFtTHJZNVJBTnpZZGpHZ2xEQlAwTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQXBVZk5qL09yb2xLRXJ3QUNsaHZPVmoveGg0UDZ6ZFdmdXpucDgyTUgxVmtjSGFUd3pWcGg4Ck5GSGI3MHZVTFZodkx0SXJVMzJKSTBDWnJSM2lyZzF5WWpaanEwZkhRdmdPR3lwbFRQU2lQL2hTRm5mSFJ4TUMKaUJ4U0t4ZXZmSktEMTVxSmVnRS9qL1MvZTZZNlQzUWRrRk0zem1uZk0vSmRNT1Jwd05PVGpsdHVPN1F5MDgxUwpuVFpPYzJtTHh2RVdPMlhmMHJSYTFJMStTOHZmUHVEVUtveVBRZFpiaUN5WXdZK0tYaGlFQjhCcWY2by9aNG9WCmlQY1ZGSTBxMkhwUDhIUmR3cU1SM0k2N0plRkFDdlNxbUxvb0tEQWhrNEpxT0l5U3g0TjFETkVwNk5DYXlMakoKd0tvTDlyaXQ4NDZFcFFvaW1ZdkJwb0s3YXYwaGtvemMKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lRY1hTdWZsZUJsZFdmTkxidmE5L3JlekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOelF4V2hjTk1qY3dOakV4TVRreQpOelF4V2pBUk1ROHdEUVlEVlFRREV3WnlaVzF2ZEdVd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3CmdnRUtBb0lCQVFDeGdkcVVuUDlFcW91MnNzSGtBbXF1VmdCMHZ4UUd0WnJYMkJpQ1ZYSDlvd1BpSUUyNncxYVMKdmRTOXg3elBFNFE2WkVyY1JOMEh1UTlYNlc3UTkrU3phVXZQMU5odjJRU081bnJ1TGNLTG1xVHVEdGlENU1ucQorMTZZZXdpVEc4QmMzTDYzdEQ5MTNYUGxSRy83TGw4TTFsUVROUzhpOUpYMkVpVExDY0RZbzdFS1RrR0REY09qCmk0N1pReHVYTVBuQ2VBdGF4aVE0WWZheFNlak5DQTdHdXIycmRJZmlzdEZDRTNJdGVrQ3l1M083VGNzeXpuMXIKampmejJJbkxlWFI3ZW5HZk55cGs0Q2hXOGtodGprUlFwcHhkQW9CMzcrLzlNTGExOXMyWThMcmZVcFFRRmFWaApHOE5YMEVCV0NXZU5HMUErRm54VmZPYlFuaG5xcjZqdEFnTUJBQUdqWURCZU1BNEdBMVVkRHdFQi93UUVBd0lGCm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWYKQmdOVkhTTUVHREFXZ0JROUM0OFRyUUppNjJPVVFEYzJIWXhvSlF3VDlEQU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBTHpPWm8vT0pJUHkwN2luZ3VDYXhSK1dzcTJRMGJ3ZjFzdjBuMDB0R0EyUHJMWTdjS2lWb2orNGJvbWRyClpuK0xkNWZxWFo4VGRCakxvT2R0QVpEWktmQ29pY2RIWG93VnNKNXk2SmtNWUxVcnBuaUIyZHpXbDdzaGFXMjQKOWorVGtQNDZuMkl2K3dYSEhlQ3NvdDhsWWNLaXhGV0xBN1hpNVAwM2ttZGhTQktmK3VXeGU2UDhBRU50bGRnTwpsNk82dHNhUTVRY05XWlRLc3ZlR1NEWnRJMjBmQTMzSXBUcit4amd6YnFna0hhTXZjZk9HR2FEZzZEMGVQcy9MClRSUkZkblVHaHVVbm1jTDVBSXd5T1FGK1ZZcjZTd05zT1puSWxwdzJVdmRrSzJYM0tqcW5IL21ETldIVDlFSXEKMlRPSnZhcmpwQ0tTV3dZWlhiWXBwOEd6NkE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBc1lIYWxKei9SS3FMdHJMQjVBSnFybFlBZEw4VUJyV2ExOWdZZ2xWeC9hTUQ0aUJOCnVzTldrcjNVdmNlOHp4T0VPbVJLM0VUZEI3a1BWK2x1MFBma3MybEx6OVRZYjlrRWp1WjY3aTNDaTVxazdnN1kKZytUSjZ2dGVtSHNJa3h2QVhOeSt0N1EvZGQxejVVUnYreTVmRE5aVUV6VXZJdlNWOWhJa3l3bkEyS094Q2s1QgpndzNEbzR1TzJVTWJsekQ1d25nTFdzWWtPR0gyc1Vub3pRZ094cnE5cTNTSDRyTFJRaE55TFhwQXNydHp1MDNMCk1zNTlhNDQzODlpSnkzbDBlM3B4bnpjcVpPQW9WdkpJYlk1RVVLYWNYUUtBZCsvdi9UQzJ0ZmJObVBDNjMxS1UKRUJXbFlSdkRWOUJBVmdsbmpSdFFQaFo4Vlh6bTBKNFo2cStvN1FJREFRQUJBb0lCQVFDTk15SlF2V0pCbVBoeQphRmZickNCNGRXai9kVS9VMW5sSjRWZjl0VUpyNUZTZWQ5dmRDSzNCSk1ncC9zeXVYSFAranZFTnJxbTBEdjJwCmpNTGQ3NU01TkRWZUtZM1J5dXZaVUhYUktRMXNSNk9TeXJSb2xvSVlMY1Rkdm1EZnhGK01mdndtM1hidHB5OGQKM1FiRzQrZ3dLZjNQR2F0WlB2NWJNNnVZNXpWRUhmNTZ5bVBuaUVRVUd2aUtyMm9JUS9nVCsxWFJja1BPNlI0KwpjTE5uemdGN1pYTDNXUERnL2E0QzU0aTBuczRsQkZTQzAweEpGTEk0aThZMnFMRlBMb0o4c2RVc2JBZm4wUUwyCkMwUytDUFFCdGpVMGQxa1J2VnlNMEgxUmhIOEdxdWQvbTJtQlIxNGg2SXRVdFhnY0hxRWNlQnA2Z29BV0xJekwKVm03dHNhUUJBb0dCQU1uRUwreWlxVUlwaWY2RGlvakh6a01RYVdaRkNHalVjS3FhQllOenIzRkxsWUdsaTF2NgpKUGhkZ0tteXdnano5TnluSjh3SHF6NDZ4TmZnOW1ES29TN3I1d3gzYzNRR2hiU3N4OUYzRUJSZEhrd2dIMUtECkdaSmZOQVFkTHVxVWhURVNPclhwaERldHltZm51M1U0SzBoZGZvenQ1elA1eWgvZ0hpUlA0a2pCQW9HQkFPRTQKWFUvSG1sNEZLR25UMkdrTlJPVU5USnVpRVAxN1FPd0tuMlBwb2ZRb0FSU3M1RWVKTFcxb0VtdnhhOXFmQ29HWQpFV3AwSk5KWWZtMEJsWFRoOThBWUplc3FKNnZTUWtjbzJVVFBMaGhUOTB4dkNDaWd3WGw2cFM0WlFNMlNZdDJHClNaM2JoNWN0MVpCOFpLTE5kU3FMTXZsUkxvRDc2eXoyZnB6UitaOHRBb0dBTGdVVmVUL1FvMHFlTXZNRjBoVGcKc3VNM1p5QXZ2dGxWcVZQZ0ZnOTQ0THFBcTBWNjk4dWlTeFBvbU13dy9hSEhJOXpzY3RqODhnQ3RqUisra20wbApQbktJREl2aVJZQ0hWcUppSVNDckJqb0hBdzRBbHUxWUU4NnJLcFVOY212VnhVK0hISjdhaldpU1ZnakE5UWVPCnQ3NjdjcUdBcnBZMngvWnlhWTNlNndFQ2dZRUFsaDFkaEttRUtKckRmeFltcm82Ymx4Z3dNYVBxTXlvTjhjWjYKeXJ1VXFRcG8vZ0RtL3c5ZDZnaHVEdWlSZk54NHdqdzdqM3J1ZUExbjV2d2hSQkRCYzVZazRBUHZBVVZaeTloYwpTTkxXNUh4QzN2MDZzT25GUzFVRitCMzQ1WXhtdlVTZW1Nc1VLeDN2dFNoVVkzY1NXMU1Bbk5FUmNBTjVrelNRCjI3SFE4ZGtDZ1lBbENDQ1dUWjYwTUNQenRuMjNJQmVTclhqZ0V5VnJkcjREM05Qa05PcUVtVzNwVDNNODJsRjgKZDZ3WCszTzJ6ZkFzZmlNNk5Dc2RMa0lqUXhPQk5SV25jbXl0WlprOE5hSGtkczNBNzVEUW5SMmhUbFlvZ1lGNQo3cFZRYThmVlZOVTFqQmMwZVMzdW4yQytJR2NHU0t4cTd6UTBwRVlGMXhtbEtZSHBpYkNvU2c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUlhdndHc3FMdExLY3VPb05pTUFSVGd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamMwTUZvWERUSTNNRFl4TVRFNQpNamMwTUZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUExb2xSUldHYXdBNGlXR0kxaWRiOU9VTU9iZlJHeTdCMjFoNEV5dWt6OExQTTZNRGIKOHd3eXJ3QVowYUNtbUhZaCtCbDdzY1IvYlRWaW14TUdUOWxtUzc2dGpYSjduQ2dDRUdGRkFNU3VSU1dldG16bQoyckkzTExMenFmTFZxQnJqaExaYyszMUNHSVIrbHhnM1k4YmdkUTFsSnptNGp5TEI1Y1Q2WkxpK3lKVzF4WVhOCktlNHZ1Ykt0TXdrRU04VWZZczczcTRzSGhkRENrUUVIQjlNdVlnMU5zd2N0MFZuSGw2RmlSektXaklabmpPY3MKbGJRY3QwUE1BWlJaZ0pxWWEra3FuaUlidlNrWTc0V2pub1RoUkpqV0tsblBZdG8xVFlEbTg2cWJMYkhVb0Vvcgp0V3RSZmV5QWJZNGhXWmVNT3pGcFU5WGpwNGtiNW1sMmFNTGtPUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGRDBManhPdEFtTHJZNVJBTnpZZGpHZ2xEQlAwTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQXBVZk5qL09yb2xLRXJ3QUNsaHZPVmoveGg0UDZ6ZFdmdXpucDgyTUgxVmtjSGFUd3pWcGg4Ck5GSGI3MHZVTFZodkx0SXJVMzJKSTBDWnJSM2lyZzF5WWpaanEwZkhRdmdPR3lwbFRQU2lQL2hTRm5mSFJ4TUMKaUJ4U0t4ZXZmSktEMTVxSmVnRS9qL1MvZTZZNlQzUWRrRk0zem1uZk0vSmRNT1Jwd05PVGpsdHVPN1F5MDgxUwpuVFpPYzJtTHh2RVdPMlhmMHJSYTFJMStTOHZmUHVEVUtveVBRZFpiaUN5WXdZK0tYaGlFQjhCcWY2by9aNG9WCmlQY1ZGSTBxMkhwUDhIUmR3cU1SM0k2N0plRkFDdlNxbUxvb0tEQWhrNEpxT0l5U3g0TjFETkVwNk5DYXlMakoKd0tvTDlyaXQ4NDZFcFFvaW1ZdkJwb0s3YXYwaGtvemMKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURxRENDQXBDZ0F3SUJBZ0lSQUl6ZlpBNDFNK1NXOUtVT1Y2R29yTmd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamMwTVZvWERUSTNNRFl4TVRFNQpNamMwTVZvd0tqRW9NQ1lHQTFVRUF4TWZZMngxYzNSbGNtMWxjMmd0WVhCcGMyVnlkbVZ5TG1OcGJHbDFiUzVwCmJ6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU16TkZIam1kQ3IybHVvbll6cFgKaWdPeldRRUtuVW1ZUlNtNTBycmxJTW1BZUhxYVA4L2QxdXN1ajE5SnlhbzNYeEdYSE1RcGdwRHhpY09Va3B4dwoxM0lNcnB6YUs1d1VMaDI0UVhYMlpRbEUyOEtQdEJBRng5SzNtTzVjTEFvcTlEWnNpOXIxSm90bUh4dXJVQk9WCk9lQ0JGYnNwU2RlZzlLMDF4ZWROMHc4UXVCRy9ITnJ2R3ZNelkyemtYNVhybVdpdTcvZmEvOE85RFh2Qmdzck4KZ3dJZk9PMVY4bENZSCtzSmc2TkVXWUZ6Mys0Um5VaHhNY1hvUkJXVk9lWFBPS003MCtlYm1LMzMwRkpqQWZPUwo2YldFMktnbGIvbEU3bkpVT1JFSFhqa0Y5WGNHeWJOMHBsWUNkQ3VOcmRVNSs1bkxYZW9TVlY0ejZaOHdHSTRKCjlTa0NBd0VBQWFPQjNqQ0IyekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUgKQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3SHdZRFZSMGpCQmd3Rm9BVVBRdVBFNjBDWXV0agpsRUEzTmgyTWFDVU1FL1F3ZXdZRFZSMFJCSFF3Y29JZlkyeDFjM1JsY20xbGMyZ3RZWEJwYzJWeWRtVnlMbU5wCmJHbDFiUzVwYjRJUUtpNXRaWE5vTG1OcGJHbDFiUzVwYjRJbFkyeDFjM1JsY20xbGMyZ3RZWEJwYzJWeWRtVnkKTG10MVltVXRjM2x6ZEdWdExuTjJZNGNFZndBQUFZY1FBQUFBQUFBQUFBQUFBQUFBQUFBQUFUQU5CZ2txaGtpRwo5dzBCQVFzRkFBT0NBUUVBY2N1R0dXVmlLWHhJNXU3ckNDUVRzUHFWZTdjRHBXZGlVV1p1WEdqclMzWFJNUTJoCmdpTlZ1cjNaUklSNzUyaFdjdHN4aGJTTTFnV3FIREc0anRGWG1sdHRtb0pWWVk5U09kczZaVS9vTTIrR3YxU28KcmdGVXlBMGswYSt2QS95b3NneVRFa2VmSHhuL0twY1NRL000NE9kQi9zcm1renRTWXM1emk0QmxLMzZMcUZtRQpzQngxUjZXM1dWSnpGem0rM0JNdjJURTVWU1VXQzFVVTBQSHBwS2d5OTNyS21EUmd1MCswZTJEVm5yWml1cGd3Cm1CUFR4eUxidG03YldkZDgrbXBDVVMzaWxOQ3R6N2NZQTFOaUR1RGtnM25MSjQxeXZhaXpxbXIvUHlIc3pzdDMKajlGdUZGcktJNVdZSHlVZEtSeWpVS1o0NlVVWGxxUldyNnFqNlE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBek0wVWVPWjBLdmFXNmlkak9sZUtBN05aQVFxZFNaaEZLYm5TdXVVZ3lZQjRlcG8vCno5M1c2eTZQWDBuSnFqZGZFWmNjeENtQ2tQR0p3NVNTbkhEWGNneXVuTm9ybkJRdUhiaEJkZlpsQ1VUYndvKzAKRUFYSDByZVk3bHdzQ2lyME5teUwydlVtaTJZZkc2dFFFNVU1NElFVnV5bEoxNkQwclRYRjUwM1REeEM0RWI4YwoydThhOHpOamJPUmZsZXVaYUs3djk5ci93NzBOZThHQ3lzMkRBaDg0N1ZYeVVKZ2Y2d21EbzBSWmdYUGY3aEdkClNIRXh4ZWhFRlpVNTVjODRvenZUNTV1WXJmZlFVbU1CODVMcHRZVFlxQ1Z2K1VUdWNsUTVFUWRlT1FYMWR3YkoKczNTbVZnSjBLNDJ0MVRuN21jdGQ2aEpWWGpQcG56QVlqZ24xS1FJREFRQUJBb0lCQUZBQlpaZjlYekJSZUk4cwpwK1Rvd2EvRVptYXp3Tkk1Ty91YTdpbTR6T0FxNGVYelVDNWlHVTF5dU91ZXBidHJPaVpqQkFmVnQzM3IvY2Q3CnlQSjRXcEhoUm0xY0JXRkp1T0kvVXNORWFDQUEyR0RmUnBaank3WVRweGlteFVXTGxpK1VvK1g3a3YwdC9jVVAKWFk3bzR0MURVRHYzV3pOelcySTIrWUxzc2lEVjBhQmxhL2VNSnRqQ0xUOHN5OUFidERUYTdlRERwbmVGbkt6RQp0NEdJL29Oa3QvZHZZTUxOdmZtUmZBZkVpVjEyMU1hRS9wRW5oWEc1ZnBWS3BoWURqWGN1UFVaTkY3QWRwOEJqCnFJVVMzSWR1Y2l3V0d6cUFMZ0NEQVF3SXp2N0d1UUV0VDFBblBQL1ZPYmpJMldRdUhmZU1jaytvcW1GMjhpZVcKUThiMWFna0NnWUVBK2E3ek1DVFNFTG9OQmd2RWZjb29xK0ViWHFNYm1yNlJCYVBOWVNJVGpPdTlvZGkxVWtBWApRYjVJZXZuaHZFd1RUbVplTExDWFoyQys2S3BVRFpjRGxPdFFjSTUvVi90TTNJNkFib1BoOER2VDVTbnBGQWxEClV3bkZHc1B6c1REY01yY3BUYkxHL1RPcW1UY1Bkc3Urb0tWUGZJanlHemZxRnZma3M4b3czVnNDZ1lFQTBmdDAKUkpNbnJOZG9Rbkt1eCszTnVVN2VtREdPR3l5YnJoRVlZc3FlWnllYmlETkFhU3E4ZnRSRU1BYXNHTmErSG1mVApZdTdJZDBvSXhzMStuVS8xZ0YrMWxuVnNxcU0zTHIxNHNmSlR5U2Y4NDZFSHdBWU02OUN6YTRFeHVTZTBGNVYzCklLS1pwcFZwZFZmSGtVZWFGMmRVcjFKL1RLQjNMdUdHbUdpa3Fzc0NnWUJpcm9Dek1IcE4zaHF6bndjRDZGaDIKeGp0NUJlSXRJTkJVZUU3OTZ1ZnJOR2o0aEp2MWJCdEZBcDNHN09nSThkQlhsaUgyYTcwTFFMTnpaWTVlNkthagp2dlZGNXl2eGJBTU8wTXQxNG0zejh0Rm1xMC9SZVcvQWJBWVk5QVZtckxiNjNHVllyaVh6Z080V0xDclNldWhXCnViOVdxeEYxTEg0Nm9iTWtVKzlJTFFLQmdBMzA3TEZ5Sm56eWhGZUdUOSt5Q3E1NmM0a2lJaFBrVHlTdXRqUTYKeTNTSHlXcXdIV1BnRjA5R3hKRjhvQXUybWtSakdrWEZJVVhzZ2REVTc4bDgreEJoVEN5SCtZVU4vQ2o3SnY2TQo0TXpKLzZFUm52WkFjTE5yMThFWmdUaVJUd01TU0N5L0lmOVVod0hwcDdZY1VEMmwvSmI2b01OekZ2aml2Sk44CndSVXBBb0dCQU9KQmF1SlVrNHBNeVEwQ0hFOWFDeFMyQktFem5jS2w4clpEaW85RDArM3JCY0ZlS3dnWkRnVXYKdm1qcUFWODVJcjFMdXRTVzlmUWQ4RDhidHZJaStYczhhTFNueUFabW1XVm5BMUQzK1VkNkNvNnlyUkpDM2tqZQoyUnZwT3FCNjRxNTlkZG94ZWhldnhRQUtpQWxlL0JveG9HS3RQTHNta2N1dldHY1dRMEFSCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUlhdndHc3FMdExLY3VPb05pTUFSVGd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamMwTUZvWERUSTNNRFl4TVRFNQpNamMwTUZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUExb2xSUldHYXdBNGlXR0kxaWRiOU9VTU9iZlJHeTdCMjFoNEV5dWt6OExQTTZNRGIKOHd3eXJ3QVowYUNtbUhZaCtCbDdzY1IvYlRWaW14TUdUOWxtUzc2dGpYSjduQ2dDRUdGRkFNU3VSU1dldG16bQoyckkzTExMenFmTFZxQnJqaExaYyszMUNHSVIrbHhnM1k4YmdkUTFsSnptNGp5TEI1Y1Q2WkxpK3lKVzF4WVhOCktlNHZ1Ykt0TXdrRU04VWZZczczcTRzSGhkRENrUUVIQjlNdVlnMU5zd2N0MFZuSGw2RmlSektXaklabmpPY3MKbGJRY3QwUE1BWlJaZ0pxWWEra3FuaUlidlNrWTc0V2pub1RoUkpqV0tsblBZdG8xVFlEbTg2cWJMYkhVb0Vvcgp0V3RSZmV5QWJZNGhXWmVNT3pGcFU5WGpwNGtiNW1sMmFNTGtPUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGRDBManhPdEFtTHJZNVJBTnpZZGpHZ2xEQlAwTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQXBVZk5qL09yb2xLRXJ3QUNsaHZPVmoveGg0UDZ6ZFdmdXpucDgyTUgxVmtjSGFUd3pWcGg4Ck5GSGI3MHZVTFZodkx0SXJVMzJKSTBDWnJSM2lyZzF5WWpaanEwZkhRdmdPR3lwbFRQU2lQL2hTRm5mSFJ4TUMKaUJ4U0t4ZXZmSktEMTVxSmVnRS9qL1MvZTZZNlQzUWRrRk0zem1uZk0vSmRNT1Jwd05PVGpsdHVPN1F5MDgxUwpuVFpPYzJtTHh2RVdPMlhmMHJSYTFJMStTOHZmUHVEVUtveVBRZFpiaUN5WXdZK0tYaGlFQjhCcWY2by9aNG9WCmlQY1ZGSTBxMkhwUDhIUmR3cU1SM0k2N0plRkFDdlNxbUxvb0tEQWhrNEpxT0l5U3g0TjFETkVwNk5DYXlMakoKd0tvTDlyaXQ4NDZFcFFvaW1ZdkJwb0s3YXYwaGtvemMKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTVENDQWpHZ0F3SUJBZ0lSQUpocWdQalBROFpWQUFNR1EwRWRJNTR3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamMwTUZvWERUSTNNRFl4TVRFNQpNamMwTUZvd0l6RWhNQjhHQTFVRUF3d1lLaTVvZFdKaWJHVXRjbVZzWVhrdVkybHNhWFZ0TG1sdk1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXE3eXdzSGRqT1dERDlnU2xCVUJnZWhLamtkaXgKSmlOQ2x3dC8yVkNTRVpMeVJRVC9Gd2xoN3hNS2dlRWJ6Y1J0aDVlWitFU2hYdkxKaEQvVnI4VnpBSkJCT3kzcQpCa1BSc2NtMUdRUnFheWlDMmN5dHBqTjdOQURoSTB5WkhoNGdockZsMmdJWlpGVU9wVDUxcTBxaEd3U1RHemtRCllsa2NvQmlVME53M0ZQTFBNRm40UmJPR2VycEtSZms4R3lqMWJ5QnZrdGNXVHdIQ2dxQTN6dFphT0IvYXRjc0IKUkcydkdiT2YzdVI2dnFNYUUyYkpXWG9HTCtxR3N4eFJ0bml5MzFXK2liMjZQMUgweW5DMmZrT1ora0FiRnFVeAptTTBhSGEvcUpVbHFqVXBzWDdPR3lxbmhjRTRUbXZvS1VpWFltVlFIRTZVNXhibTFlajlSWVNGVkV3SURBUUFCCm80R0dNSUdETUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUIKQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCUTlDNDhUclFKaTYyT1VRRGMySFl4bwpKUXdUOURBakJnTlZIUkVFSERBYWdoZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d0RRWUpLb1pJCmh2Y05BUUVMQlFBRGdnRUJBQTJ4dC9LSkcwRjJsMGtVZmx3c3p6S0FuZGIrSWpTdGh6WktkNklTODU3VWVDN0oKdkRrUytkaUFKazExY0pXaVMzTXplN0RsL1Jpd3NRazNVdENRbEUwTFVWQU81VFNmWXpJenk4K2ZpNXhMQytycQpXQUR3T1pYNXlyQ2ZOWSsxWVlDQmd2MVNMaVcvQkxNMTkyZUJyZnk5TVl4dVJaTVBoS0YwR0tKd0FBK3kvZDJNCjVYNk12bkFMNWliOEZOUEkxWTRmUmpUTUtmeVFCY1d6VjZYZW9tdmFjNGtSTEUrMk15cVA1NGtzeE0reHRWcjEKUmMxY3hEakRtMDNDelFZNnJBL0NIZ1pIRW9FUFU0SnhIWktZU0xLN3U5WVBCb0VxWm80dkluNDhvUURocUZpUgo3US9pVWFLYjAyTWFrWTFvWFpkbzhyWFB6WUovUXpJOTk2MDl4c2s9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBcTd5d3NIZGpPV0REOWdTbEJVQmdlaEtqa2RpeEppTkNsd3QvMlZDU0VaTHlSUVQvCkZ3bGg3eE1LZ2VFYnpjUnRoNWVaK0VTaFh2TEpoRC9WcjhWekFKQkJPeTNxQmtQUnNjbTFHUVJxYXlpQzJjeXQKcGpON05BRGhJMHlaSGg0Z2hyRmwyZ0laWkZVT3BUNTFxMHFoR3dTVEd6a1FZbGtjb0JpVTBOdzNGUExQTUZuNApSYk9HZXJwS1JmazhHeWoxYnlCdmt0Y1dUd0hDZ3FBM3p0WmFPQi9hdGNzQlJHMnZHYk9mM3VSNnZxTWFFMmJKCldYb0dMK3FHc3h4UnRuaXkzMVcraWIyNlAxSDB5bkMyZmtPWitrQWJGcVV4bU0wYUhhL3FKVWxxalVwc1g3T0cKeXFuaGNFNFRtdm9LVWlYWW1WUUhFNlU1eGJtMWVqOVJZU0ZWRXdJREFRQUJBb0lCQURCbEI5VnlqeitJQ1RDMgp0bG40Zmpkb01UZlVQSGRtMEVrSU1Jcm9yWURPUy84dkhVTThuYUJsV1R5b1Z0RnhYUHdzdUhMQnhFZWhXekF0ClhPWWZXZno2cWFjbmxSOFcxV3lvVHFReUhscjhHNE9NcmhKN3gyZ3NKMFZ2UEdiRVRwNG1OM0ZyemdQOEJCaUUKdFZ3RHQ4cUpTM3NNWlpXUlR3TythWkZCdlRQbGtsRG5Kdkk0R1NBaEJlZDRFSlN5eWhFZWpmKzBuc0l3c0ZQRgpMMzJHWUsvU3plM3paK0ljUWlHZUEraHVqWHMzelFjSU9YWmk1QXlPbm92aHB4NTl0eURxcXBrV0xOdXd0cy85Cll0M0VMUGVMOFhCQXVkUkN4bnl2OTMzdGt2MmNwNTFUcUNqT0JhSlZZYU1oam4wVlpXa3R5VEJrSUthUFZGd00KdXk5K09VRUNnWUVBelA2OCt6MytzblVhVm0xbVV4S0pkbzRIYStwSnB1TGpOWHZFSk42bmRoNGxMM1BrVkFObgpyWFBZci9UeW9DQUc4K1g1REUzUXdsRndxOFJFb2U4S1dBT3d2SjRTRVROZUlrMVJzcmx6WlRCazRUeDdjYlFHCnFkeG5kNGl1VkdwZmljMjdDakhNazB5ZitVTkVFMzJxQS9mSDROV3p3R3BEbGlEd1k0U1R1d2tDZ1lFQTFuZVIKUEZUMUovZEtKYjNnWHBKQWVlUHF1bUdaWUxDYXQ4VXdhMlQ4RWhlYUhHb3hWcnc1cmhBWEU0aFN6Z0lzNnlSdAp5WHdvcGk5SDl4REdBMGZWMmoxREpscFZJcnBCdnhLTWU4UzNONUNSRkUvS3k0WWVTTWkwNW1vd2dRek1pZE85CnYxbG5EdEJORWhMcGM4V0R1WmV3WVFxVXNrT3N3TU95VFIzbjZqc0NnWUJPWmY0UWVCMDRVdURIdlA4dE5pR3MKWFpVcENHa3lrZ01qS1RwU2YzUzhEN3RZOHBHWUw5VXUyT2MrSkFmR2hYa2pQZ2lKVkJsS3Q2ckhoa0JaVGZvKwp2dXFRdUVOZ29LeVhvY3BrOTlmU0V6Z0JqQWdKN0RmQUxyTERYRnFQbmo3N2pOckRnMWdoM1dReENEQzQ0NDVxCkJoRkRRM2VEVnlDU0FmYnRtSDZIUVFLQmdFNk1ma29OaDdpNmpwS2lKNElicUxlNzdTV1VSM3V0VXcxSmtJRlUKL0NtWU1WNkUya3M5SnhjRVY1OVV4NWNpSHRlRWdSMVJkd1hldlVuVS8rRUZ0MkoyRzVqNWJzTUlXcm9qamdacQp0dndIMjhzSHFtdStWR3N0NzJ1UXF2RXBBZVRkQTFzSTRJRUJjNmpSK21UbmkyWTNFMmVIVzR5cTBxUExTUXVMCmozd3ZBb0dBUXpJM0U2Q1JQNk9XNzk4TWtOVTFrU0pnTXg4VG5qUUwxeHlQV1NXaXJSSy95ZWhXTUdyUllCSTAKVDFUNWs5N245L0RXb2JCcjdPcWozbzUzcHVQWjMwVUFKR3lCZVd6OStsSmV0Mm1KNXJNYkUvVDRxSWtuMEgrMQozcmdHYkwvdEk5N1hjNVR6OVp2OEh3SVVPdzhkWWNUN3JiUWMyR2IwOHlsWmd2S2ZFb0E9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUlhdndHc3FMdExLY3VPb05pTUFSVGd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamMwTUZvWERUSTNNRFl4TVRFNQpNamMwTUZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUExb2xSUldHYXdBNGlXR0kxaWRiOU9VTU9iZlJHeTdCMjFoNEV5dWt6OExQTTZNRGIKOHd3eXJ3QVowYUNtbUhZaCtCbDdzY1IvYlRWaW14TUdUOWxtUzc2dGpYSjduQ2dDRUdGRkFNU3VSU1dldG16bQoyckkzTExMenFmTFZxQnJqaExaYyszMUNHSVIrbHhnM1k4YmdkUTFsSnptNGp5TEI1Y1Q2WkxpK3lKVzF4WVhOCktlNHZ1Ykt0TXdrRU04VWZZczczcTRzSGhkRENrUUVIQjlNdVlnMU5zd2N0MFZuSGw2RmlSektXaklabmpPY3MKbGJRY3QwUE1BWlJaZ0pxWWEra3FuaUlidlNrWTc0V2pub1RoUkpqV0tsblBZdG8xVFlEbTg2cWJMYkhVb0Vvcgp0V3RSZmV5QWJZNGhXWmVNT3pGcFU5WGpwNGtiNW1sMmFNTGtPUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGRDBManhPdEFtTHJZNVJBTnpZZGpHZ2xEQlAwTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQXBVZk5qL09yb2xLRXJ3QUNsaHZPVmoveGg0UDZ6ZFdmdXpucDgyTUgxVmtjSGFUd3pWcGg4Ck5GSGI3MHZVTFZodkx0SXJVMzJKSTBDWnJSM2lyZzF5WWpaanEwZkhRdmdPR3lwbFRQU2lQL2hTRm5mSFJ4TUMKaUJ4U0t4ZXZmSktEMTVxSmVnRS9qL1MvZTZZNlQzUWRrRk0zem1uZk0vSmRNT1Jwd05PVGpsdHVPN1F5MDgxUwpuVFpPYzJtTHh2RVdPMlhmMHJSYTFJMStTOHZmUHVEVUtveVBRZFpiaUN5WXdZK0tYaGlFQjhCcWY2by9aNG9WCmlQY1ZGSTBxMkhwUDhIUmR3cU1SM0k2N0plRkFDdlNxbUxvb0tEQWhrNEpxT0l5U3g0TjFETkVwNk5DYXlMakoKd0tvTDlyaXQ4NDZFcFFvaW1ZdkJwb0s3YXYwaGtvemMKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUekNDQWplZ0F3SUJBZ0lSQU1MMUVEcWVHcERDVFBxQUY4aUthdjh3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamMwTUZvWERUSTNNRFl4TVRFNQpNamMwTUZvd0pqRWtNQ0lHQTFVRUF3d2JLaTVqTVRndWFIVmlZbXhsTFdkeWNHTXVZMmxzYVhWdExtbHZNSUlCCklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFzMU56V1gxVkh6N0hHUHhEbjQrS2tnTWgKNVBBTW5ZOTkwNzdyOG9mR2pBSUdpa21hVzI5bWxPc0pXaW1SdWRpemNqY244QU0zRk9kcHRSa2l5ZFJkaFNzaApmYkJwZVJia1R5VTNrN2duckY5aE9tejJwdWhrK2o5NGFCcFVFaU5zeHkvRUdQK2dIdFNUQ0VSWmxIbG5vUjJ1CjBFazRBTTZmaXRhWlRkWDZyYXRnK293aElKdzhRZkhFZmJKRk85SG5KaE9nRk1XeVRiY2JoanV4VkI5S2llZXkKTjN6ZDRhdDVzSVp1OFVNT1h6WDNpY29XSEphbEJQYUpwWld4UFFTeTJQK0Q0ZTlnVDlaRlRkaURUeXY1VGR6ZAp3bXB2WWpHdGYzMklIaGtkYklza2NadVNjYWcvY0NQQjlaeEduWEhGSk9mMzFEa01JT0lKblZ1UmVpbHMzUUlECkFRQUJvNEdKTUlHR01BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWZCZ05WSFNNRUdEQVdnQlE5QzQ4VHJRSmk2Mk9VUURjMgpIWXhvSlF3VDlEQW1CZ05WSFJFRUh6QWRnaHNxTG1NeE9DNW9kV0ppYkdVdFozSndZeTVqYVd4cGRXMHVhVzh3CkRRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFEYjdzTHBIOG0xYmwzeFcyZWNRaXRHK1UwZVhZVVhERjlyLzB4WksKekYxNnVyYVBEZjI1ZlJCS25pUzB0QnlKdzV3M1VySDJ4OEhjbGZiL0MwT1FTYkcrVE84ZWMyNGZzWHgzYjNIawpLQmNxOVg4cXBPM0V4NkZldXhMWG4zR0ZTcXY0T2xrN0x0azcvYkt1L1AyY2pyekZiclhKMlhZTEVLdGhRYThTClZqRVQycWRNb3FJWXViUUJCSXErWUFPWUVmcmpuTXd3SnpCWm5xQW45SXZLcGNNdldZckVwOTVEcUZDc2NZT20KUC9pTkV2M3dpck9FQW5Icjhvdm9sQ1BUWmFKSkcwcGE0VTJyU1NHeW1KRTd0UGo5MFlZMHh4dERVMkR0RVhpdwpMOWthVzZXYWNYUXErbWZBRGhuT2tMTHloc2hjQm5KbjduY0JwamdMMUs1dndlcz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBczFOeldYMVZIejdIR1B4RG40K0trZ01oNVBBTW5ZOTkwNzdyOG9mR2pBSUdpa21hClcyOW1sT3NKV2ltUnVkaXpjamNuOEFNM0ZPZHB0UmtpeWRSZGhTc2hmYkJwZVJia1R5VTNrN2duckY5aE9tejIKcHVoaytqOTRhQnBVRWlOc3h5L0VHUCtnSHRTVENFUlpsSGxub1IydTBFazRBTTZmaXRhWlRkWDZyYXRnK293aApJSnc4UWZIRWZiSkZPOUhuSmhPZ0ZNV3lUYmNiaGp1eFZCOUtpZWV5TjN6ZDRhdDVzSVp1OFVNT1h6WDNpY29XCkhKYWxCUGFKcFpXeFBRU3kyUCtENGU5Z1Q5WkZUZGlEVHl2NVRkemR3bXB2WWpHdGYzMklIaGtkYklza2NadVMKY2FnL2NDUEI5WnhHblhIRkpPZjMxRGtNSU9JSm5WdVJlaWxzM1FJREFRQUJBb0lCQUZiL0d5ekZBdkMva2ZOcgpIcHRnRmNlMFFWTkJxYjBlaWRxWit2bVVLUnh2TnlFTGlCam51SXB5WS8wYndaaTVxb1MwZ1dtTkJjSGNhb256CkFjK01lVHBMckZtL3BjdWE4WFA4Q0RSZjJNOWxEbFE3M0lVb3BTUktlbTEycUdhTVRROXMrdU50MEE1azdsZksKWVBNSTJ0OXMrUXdQR1Y0NjMyZUpxS0g4TnpyYzR5RUx4dEdYbFE5bkdnOUZqS3UxQlVaeXhwWVdWbC9zazJJWApZNW9RbFRwOVlzSE56ck5tcVpQcUcvZzEyYWp6OWl6YVhuS3NwbnIwelRZb2szU01EbVVYTXlJT0dacHJwZ2VvCjFrWDVOK2ZHZnpFNExOQURaemI5UWpTZC9CVGxXajZ5K2FiYzdKd2RYeWZpclpnTVU5RHlKRHhrTjI5a1RYNm0KanBGUGUva0NnWUVBNXA2MWN2Y3IvTXA2R0ptbTQ3MXRLdFFDcXFGNUNqeC8xREh5dmp3MTFueTYxWS9KSlRqaAo2NnZDb3B1SDRHdG9NenNSU0ZON3JmMFBQbThkdElnOHhpY3l3eVY3OW1TN0sxUUxrdkpockd6aGxvb1F5aGppCncrMm4xbUhVV20rdTE3UW5Cc1ZhdUVZbEF5VzRwc2Vpa3dkOXhCK0NQM1VhanZ3QU02THRHZHNDZ1lFQXh3K2cKOWFhd2gwd1ZOOHZrWU5MSGViUTN1bVFyc0VjcjhuMWdFN0VPYXJ3aSt2ZjlpVlpHK25UQWxCRHI4VVJyK2UwWQoyZ3hVVFFMekNES2JCQVk0bkVlWmNkM0twbXBwVURmd0I0TlVsVjZhWCtqSmZFQ3c2TTlFTkVHenVmWnNjMXN5CmE4NGh5MjlyREdPd29OUG81ZmR0T0U2cFZwWUNXTTRQYlk4YlhhY0NnWUJlVHFpRXl1OENBUXJNNUlpS3VQdmIKZDdkZmI0aS8xdDJ2T0gyN3JZT1dvb3NFcWpmbk1NdXlSQnJqeEJaY2Y0K3M0NHE5dU9YcTBJRmJWclVmRGxkTAo4TnVoVWNMUGo0RzZ4ak8xYzhqZGFla1dWbjluSmFZVjJTbTVVV2cxVTFaOGZ2ODJsWjN6blR1bGZkZDAzRTV2Ck1iRU1jcFlndlJLUFJoNE8vNkZWNFFLQmdRQ2ttNlhzdlVTby9SOW1ubkppSnFyUlYxZm1DRU9nWjVwTjBhT0wKWlJTWTZxNjZmaXZvVDdJdUZqSFJ2eFI4MUttOWFIVHVpdGVEUDNjZFJrdXR6ajh0N0g5VkM2VXliRGhlSDRPYgprdHgxRUYvMEE1bnA1OHpqRjlJOHJFQWsvVU85T0tLL1J4dm5FR0dqUXlTaU9kb1RvTUZ1bUkycmppeXVwdWRYCkg4bnZiUUtCZ0ZTN2ZVWTM5UWZzdXBnWDRXb0pob1BiS04xckIvdjVoNEtvRDE0QkJheXhaZkFjZVpWMFdacGIKaExDaVluckxWNFVDQnl4QzNFYk40N3Q1MnRUV1Y4amJFNTMxUG1VUXJLSXFhOElNL1dwWkNiNndJdVNwRGNYUApzcDJyQlpLcDBuWlV4VFJOK2wvS1VndU5aZS85eURWV08vaGxBS3J4SzNScTBtQmZlMW03Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  skip-cnp-status-startup-clean: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  policy-cidr-match-mode: ""
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"
  # If you want metrics enabled in cilium-operator, set the port for
  # which the Cilium Operator will have their metrics exposed.
  # NOTE that this will open the port on the nodes where Cilium operator pod
  # is scheduled.
  operator-prometheus-serve-addr: ":9963"
  enable-metrics: "true"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: c18
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "118"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  # Default case
  routing-mode: "tunnel"
  tunnel-protocol: "vxlan"
  service-no-backend-response: "reject"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-masquerade-to-route-source: "false"
  enable-wireguard: "true"
  wireguard-persistent-keepalive: "0s"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-local-redirect-policy: "false"

  kube-proxy-replacement: "false"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  enable-host-port: "false"
  enable-external-ips: "false"
  enable-node-port: "false"
  enable-health-check-nodeport: "true"
  enable-health-check-loadbalancer-ip: "false"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  bpf-lb-acceleration: "disabled"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  hubble-export-file-max-size-mb: "10"
  hubble-export-file-max-backups: "5"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  ipam-cilium-node-update-rate: "15s"
  cluster-pool-ipv4-cidr: "10.18.0.0/17"
  cluster-pool-ipv4-mask-size: "24"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "true"
  bgp-secrets-namespace: "kube-system"
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"

  k8s-client-qps: "5"
  k8s-client-burst: "10"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  # default DNS proxy to transparent mode in non-chaining modes
  dnsproxy-enable-transparent-mode: "true"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-xff-num-trusted-hops-ingress: "0"
  proxy-xff-num-trusted-hops-egress: "0"
  proxy-connect-timeout: "2"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"
  proxy-idle-timeout-seconds: "60"

  external-envoy-proxy: "false"
  max-connected-clusters: "255"

# Extra config allows adding arbitrary properties to the cilium config.
# By putting it at the end of the ConfigMap, it's also possible to override existing properties.
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: c18
    peer-service: "hubble-peer.kube-system.svc.cluster.local:443"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-hubble-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-hubble-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n\n        # Liveness probe\n        location /healthz {\n            access_log off;\n            add_header Content-Type text/plain;\n            return 200 'ok';\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumbgpnodeconfigs
  - ciliumbgpadvertisements
  - ciliumbgppeerconfigs
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  - ciliumbgpnodeconfigs/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumbgppeerconfigs
  - ciliumbgpadvertisements
  - ciliumbgpnodeconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumbgpclusterconfigs.cilium.io
  - ciliumbgppeerconfigs.cilium.io
  - ciliumbgpadvertisements.cilium.io
  - ciliumbgpnodeconfigs.cilium.io
  - ciliumbgpnodeconfigoverrides.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  - ciliumbgpclusterconfigs
  - ciliumbgpnodeconfigoverrides
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumendpoints
  - ciliumidentities
  verbs:
  - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumexternalworkloads/status
  - ciliumnodes
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumendpoints/status
  verbs:
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumexternalworkloads
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-bgp-control-plane-secrets
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: etcd-metrics
    port: 9963
    protocol: TCP
    targetPort: etcd-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: NodePort
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
    nodePort: 32379
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-agent: "unconfined"
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: "unconfined"
        container.apparmor.security.beta.kubernetes.io/mount-cgroup: "unconfined"
        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: "unconfined"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
          initialDelaySeconds: 5
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.memory
              divisor: '1'
        lifecycle:
          postStart:
            exec:
              command:
              - "bash"
              - "-c"
              - |
                    set -o errexit
                    set -o pipefail
                    set -o nounset
                    
                    # When running in AWS ENI mode, it's likely that 'aws-node' has
                    # had a chance to install SNAT iptables rules. These can result
                    # in dropped traffic, so we should attempt to remove them.
                    # We do it using a 'postStart' hook since this may need to run
                    # for nodes which might have already been init'ed but may still
                    # have dangling rules. This is safe because there are no
                    # dependencies on anything that is part of the startup script
                    # itself, and can be safely run multiple times per node (e.g. in
                    # case of a restart).
                    if [[ "$(iptables-save | grep -E -c 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN')" != "0" ]];
                    then
                        echo 'Deleting iptables rules created by the AWS CNI VPC plugin'
                        iptables-save | grep -E -v 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN' | iptables-restore
                    fi
                    echo 'Done!'
                    
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - CHOWN
              - KILL
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
              - DAC_OVERRIDE
              - FOWNER
              - SETGID
              - SETUID
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Unprivileged containers need to mount /proc/sys/net from the host
        # to have write access
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        # Unprivileged containers need to mount /proc/sys/kernel from the host
        # to have write access
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Unprivileged containers can't set mount propagation to bidirectional
          # in this case we will mount the bpf fs from an init container that
          # is privileged and set the mount propagation from host to container
          # in Cilium.
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-dbg
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      # Mount the bpf fs if it is not mounted. We will perform this task
      # from a privileged container because the mount propagation bidirectional
      # only works from privileged containers.
      - name: mount-bpf-fs
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        args:
        - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
        command:
        - /bin/bash
        - -c
        - --
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        - name: WRITE_CNI_CONF_WHEN_READY
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: write-cni-conf-when-ready
              optional: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
            drop:
              - ALL
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
      - name: host-proc-sys-net
        hostPath:
          path: /proc/sys/net
          type: Directory
      - name: host-proc-sys-kernel
        hostPath:
          path: /proc/sys/kernel
          type: Directory
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              - key: ca.crt
                path: client-ca.crt
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/port: "9963"
        prometheus.io/scrape: "true"
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.15.6@sha256:5789f0935eef96ad571e4f5565a8800d3a8fbb05265cf6909300cd82fd513c3d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        ports:
        - name: prometheus
          containerPort: 9963
          hostPort: 9963
          protocol: TCP
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      initContainers:
      - name: etcd-init
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - etcdinit
        # These need to match the equivalent arguments to etcd in the main container.
        - --etcd-cluster-name=clustermesh-apiserver
        - --etcd-initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --etcd-data-dir=/var/run/etcd
        env:
          # The Cilium cluster name (specified via the `CILIUM_CLUSTER_NAME` environment variable) and the etcd cluster
          # name (specified via the `--etcd-cluster-name` argument) are very different concepts. The Cilium cluster name
          # is the name of the overall Cilium cluster, and is used to set the admin account username. The etcd cluster
          # name is a concept that's only relevant for etcd itself. The etcd cluster name must be the same for both this
          # command and the actual invocation of etcd in the main containers of this Pod, but it's otherwise not
          # relevant to Cilium.
        - name: CILIUM_CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        # The clustermesh-apiserver container image includes an etcd binary.
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --auto-compaction-retention=1
        - --listen-metrics-urls=http://[$(HOSTNAME_IP)]:9963
        - --metrics=basic
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        - name: etcd-metrics
          containerPort: 9963
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - clustermesh
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt
        - etcd.config=/var/lib/cilium/etcd-config.yaml
        - --max-connected-clusters=255
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        - --controller-group-metrics=all
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: IDENTITY_ALLOCATION_MODE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: identity-allocation-mode
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        ports:
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir: {}
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "clustermesh-apiserver"
      serviceAccountName: "clustermesh-apiserver"
      terminationGracePeriodSeconds: 30
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: clustermesh-apiserver
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.15.6@sha256:a0863dd70d081b273b87b9b7ce7e2d3f99171c2f5e202cd57bc6691e51283e0c"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 3
          livenessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 3
          startupProbe:
            # give the relay one minute to start up
            grpc:
              port: 4222
            timeoutSeconds: 3
            failureThreshold: 20
            periodSeconds: 3
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          - name: tls
            mountPath: /var/lib/hubble-relay/tls
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Always
      priorityClassName: 
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 1001
        runAsGroup: 1001
        runAsUser: 1001
      priorityClassName: 
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.13.0@sha256:7d663dc16538dd6e29061abd1047013a645e6e69c115e008bee9ea9fef9a6666"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
        readinessProbe:
          httpGet:
            path: /
            port: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.13.0@sha256:1e7657d997c5a48253bb8dc91ecee75b63018d16ff5e5797e5af367336bc8803"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
