---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUw0Z2UwSnpCTjNqWlNOMlRkeUZkc0F3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV3TTFvWERUSTJNVEV5TVRJeApOVFV3TTFvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF5bGVXMmowS1lrMkE5T1lqVTZtdXEyYlQ0SlpTbDVjcWFlMjhlWGZHWlZVNXRPekEKcHcyOEx4RktEaTV2YnJJZUdvYXc0ZnZMeXpqd0FhalNSbGcvR2tBTUppbzRPN2psakRYL2FlWERCYmZkaWpaSQpTc3VRVWhPV1U1d1NKRCtlS1ZCSEZGcTBqT0dQR0VEcXFBWFRGZmRwN2hoMGRWa3RPSDQ0ZEw5cTdJdDZkRSs1CkxnOVhwTjE1U0tkdW1UeU5UVkhvdzl4YzY0ZUpCaUQ4UkkxWHFiczJyRDFwa1ozWWJEcGFDRVh3bzJvWDZvVloKLzlxQ0N6ZEJxTXlxNWYrNTVxM052eHB1QkUyZXpWcFd6K0N0WStGZy9LalFwVXQ2QlJjS3BsNUhhdWVLd2k5aApiRTFlYm1BTmNCUHFiQWpIc3FhU2NPaTVsZEpQYURJVEE1SkpKd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGUExLZG9KWUY2SE93Wlo2U0M1NmNEV0tOanZSTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQmFFanNJWFBqeG90Sk8vNG1UeFdCdnRRZmllU1lUWkxvaTY4M1lyUGhWbGhNcUMvQW9GOHJkCkhCQWkvYThtTDd5dkpCbWMrdDlwMjJjdks1YjBtTmZlVkNLM01zYXpPZ0UwWVd1OWNDVlV1dno4RE84UmVENDcKMlMxd3ljZkVIVkZacHJaSWkwMVZsVzlXL0ZHbEMzYmJIUVhkZytLa0E4QW9YN21XOEVwUGJqOStnYlBBSDlzWAozQUt5NmNoa0JyZWowanY4ZUsvd1F2NWUra3pIckpWOEZLY2lWZGY0SVQzN3c3RURSWTlhbG9zZ3lISXZnYUNMClJneVNtQnZHak5LRnY1Q1pVdkVCV1R6NE1jYTVUaWthMmRvV3A3SHdzQVVYeGZQTEtzV001NTFpbVNvUlNVNzcKMlhQTTRvdTNtSW85UFpacjJYalZNZTVYVlFBTloxK2YKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeWxlVzJqMEtZazJBOU9ZalU2bXVxMmJUNEpaU2w1Y3FhZTI4ZVhmR1pWVTV0T3pBCnB3MjhMeEZLRGk1dmJySWVHb2F3NGZ2THl6andBYWpTUmxnL0drQU1KaW80TzdqbGpEWC9hZVhEQmJmZGlqWkkKU3N1UVVoT1dVNXdTSkQrZUtWQkhGRnEwak9HUEdFRHFxQVhURmZkcDdoaDBkVmt0T0g0NGRMOXE3SXQ2ZEUrNQpMZzlYcE4xNVNLZHVtVHlOVFZIb3c5eGM2NGVKQmlEOFJJMVhxYnMyckQxcGtaM1liRHBhQ0VYd28yb1g2b1ZaCi85cUNDemRCcU15cTVmKzU1cTNOdnhwdUJFMmV6VnBXeitDdFkrRmcvS2pRcFV0NkJSY0twbDVIYXVlS3dpOWgKYkUxZWJtQU5jQlBxYkFqSHNxYVNjT2k1bGRKUGFESVRBNUpKSndJREFRQUJBb0lCQVFDaFIzRmhJRmcvaElFdQpNcVdqME5MOW9hZHVFc05nT3NnK3lKUjZ5U0prc0txZmNEb2FyVkw2dlRBbTM1SklURWE4WS9Gbkhya1FrYUNUCjRnbEFzcVFSZTAxenVpRTZVU1QrUGlnSU0yL2dCZTdhZEd2bzJocDlvVWtuK1hWb1dTRHEweWJrcld2T0F4ZDQKZ0gzSlVXTXYxaFlrQm5BRS9RQ1RUK0FXQm1EbWl0Y1VUTW5WanFPUmwvNGVLbUtuMWZmRHM2ZUZtMVIvUktnYQpRSXAxTG1mdDVrZXQrc1B0NXUzaG15Rlo2eUVMR0c0aDV1djZHZUkzcjc0Z1RLdUNIamF6dnQ0cGx0dTJUNVNBCnRoOHVzRFZtK3dQd3dIckdDYlBGYUZmSWZOK1hlNWpCUUZqMmNKSERYT29qNkhCRHA5TmUxTWFMalFVRVg2ZW4KUll3bG1PVzVBb0dCQU91eDJxaXJWSW1RY2RFTGRpamwrYTREaEROVGtpSTllL3IyTjRBTFdPTklqbUs5dzVheApEK0JJcWJlQ1dmNTlZNFZPM3pZVzZZQW84Uk1oY21PSHBNL203akZqbXk4d1ErUEtXMmNiRjFCUW5EOGtqVjl2ClJZWFZqcmJOTmxIV2pkbmNuNTZ1UWoyc3ora2pHMEtWaVdHQjM1Q3lTM1ZXb3FmNWl0WnVXbm5EQW9HQkFOdkcKS0hJV2Jrb0RjazhVUG90YWQyOURqWlRhTWhqek5XTEdQRzZFZDF2bUhkR214QndQd2xxNE9CYW1uZmNxY1o1Uwo5TDVzM3J4ZnRyVmxtMjRmNm9rNnJCVHUyUGQ2UVVnRThEbVBzT0pKU2ZNMGVDcWtpWnU0eS94NVNodDE0YXV5Cm9lKy9OUTJFSVFLWUlGRUVFYmN2ejZ0akZKWkloZzhSall0L3Naak5Bb0dBYlIvWWREVjNHNFlFSEZ4cEpjQnMKbkhQR1Zway8xSmlRK1gzYjdtM1NodERHRTlOMlppT3VqUkkzZWQ1aFdtR2xuVWdLTXBuakhGSllZNW9kd3hVLwphbjZxRTdYaFdMVEpDZ05iMUY0SHFrallQcWZteUtQVkZZVHQ0WmNicWtKalJOWlFGUURyYkhEQmhsaVp1M2RPCnR4V1JkQVlJeDlnSDBTdkphMFNHb1U4Q2dZRUFrT2wzVDhyRWpCNzdwM0wwenBRblBvRXZnTi9pdXByYkw3Y0EKcitxK2ZTVWRzbGlnNU5QclZrQTBFNU5uZzB0RVFaMzNiUHlDWFhsTEV3N2RUdDdTbWd2SzNiNmo1NEtBT3dtdQprSFhUcjFHZDVqUkpxK3gwSSs3VTZqUGJqb0hLL0ppN3VFYStwNXZnM0VJTXhQN0c0NkF0OFpkU1FzbXRRNUJTCllaSWdPMTBDZ1lCUU95U0UrR3VvTzIrbVVRVGdKcUE3U1BDalA0WS9WckgvUnB3WVdNZ29FM2tzUE5xL3ExREYKRlZmNmYySm85NDd2ZTZ6QVB2cWEwOEhEaU92UUlQRGhwbVhlY3hBVVcrT1p0QldiN2RjUnFSOVhSd081QlExNgpnOURuU24yUXZZOHV2WHVKdTVGMjN3Y2RIYm50a3FTUUpxWFJGVHdLSHA3MVZKbzdST00xOVE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUw0Z2UwSnpCTjNqWlNOMlRkeUZkc0F3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV3TTFvWERUSTJNVEV5TVRJeApOVFV3TTFvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF5bGVXMmowS1lrMkE5T1lqVTZtdXEyYlQ0SlpTbDVjcWFlMjhlWGZHWlZVNXRPekEKcHcyOEx4RktEaTV2YnJJZUdvYXc0ZnZMeXpqd0FhalNSbGcvR2tBTUppbzRPN2psakRYL2FlWERCYmZkaWpaSQpTc3VRVWhPV1U1d1NKRCtlS1ZCSEZGcTBqT0dQR0VEcXFBWFRGZmRwN2hoMGRWa3RPSDQ0ZEw5cTdJdDZkRSs1CkxnOVhwTjE1U0tkdW1UeU5UVkhvdzl4YzY0ZUpCaUQ4UkkxWHFiczJyRDFwa1ozWWJEcGFDRVh3bzJvWDZvVloKLzlxQ0N6ZEJxTXlxNWYrNTVxM052eHB1QkUyZXpWcFd6K0N0WStGZy9LalFwVXQ2QlJjS3BsNUhhdWVLd2k5aApiRTFlYm1BTmNCUHFiQWpIc3FhU2NPaTVsZEpQYURJVEE1SkpKd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGUExLZG9KWUY2SE93Wlo2U0M1NmNEV0tOanZSTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQmFFanNJWFBqeG90Sk8vNG1UeFdCdnRRZmllU1lUWkxvaTY4M1lyUGhWbGhNcUMvQW9GOHJkCkhCQWkvYThtTDd5dkpCbWMrdDlwMjJjdks1YjBtTmZlVkNLM01zYXpPZ0UwWVd1OWNDVlV1dno4RE84UmVENDcKMlMxd3ljZkVIVkZacHJaSWkwMVZsVzlXL0ZHbEMzYmJIUVhkZytLa0E4QW9YN21XOEVwUGJqOStnYlBBSDlzWAozQUt5NmNoa0JyZWowanY4ZUsvd1F2NWUra3pIckpWOEZLY2lWZGY0SVQzN3c3RURSWTlhbG9zZ3lISXZnYUNMClJneVNtQnZHak5LRnY1Q1pVdkVCV1R6NE1jYTVUaWthMmRvV3A3SHdzQVVYeGZQTEtzV001NTFpbVNvUlNVNzcKMlhQTTRvdTNtSW85UFpacjJYalZNZTVYVlFBTloxK2YKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKekNDQWcrZ0F3SUJBZ0lRUVUrcFF6VXpka2g0bGhrR2RhcnNMVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEEwV2hjTk1qWXhNVEl4TWpFMQpOVEEwV2pBVE1SRXdEd1lEVlFRREV3aGhaRzFwYmkxak1UQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQCkFEQ0NBUW9DZ2dFQkFOZGhNWUY2NFloUUd3amgvN25PQTRZZE5WZzltbTd3eDMzRGlWVFRzSVhXdzBXRERVQ1YKNnl0YjNFbnArZnpsZW9pK2E0WWo5OVJaTCsvMVZqSFp0K2Jqd2pwNTBYYXlYdlhWUkc1R3AzdkRCOXh3ckx5UwpDTERVLzdzYmNFdVJuNHphcU1QVHZ3czlTVC9ZWlVIQ3pzeTYzRC9ib0c2Ri9BQnpTOXNrL0Fyb2FqQWtBdktsCkFrc09vZlYreko2ZGQvZFVOeTQySnplVWJHRWZJd0k0bndRZ2VHandNZ0JlbXczdmpWZmxiRWE1WkxXRW9hMTcKZEkwU3JKSVB5VS9LaDMxTEg1SS9MdUNqYlJGTGlzSXlvaE1WTG5zUkg5cWM2VmNRdGZ5ZW1FWW85RHlPOG85SwpEcmdkOUxVUnNkZ0haaUNJUmFkM281QldBMUJsMmhNUXJ2RUNBd0VBQWFOMk1IUXdEZ1lEVlIwUEFRSC9CQVFECkFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUEKTUI4R0ExVWRJd1FZTUJhQUZQTEtkb0pZRjZIT3daWjZTQzU2Y0RXS05qdlJNQlFHQTFVZEVRUU5NQXVDQ1d4dgpZMkZzYUc5emREQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFUSzNHeFN1R2FQMW5LcmhaWlJGQkdTdTM4bWFmCjdQOGlNRXRwMG44TXBnaml1S1ZiaTZZcnpnRUhSRnNpWTZzTzZaYTJDL0ROWFVSOEpWMVBqeGJkR2dwQmJqeTMKc203NTlLSU5kcWNJeUVIdi9pTFZLTmxDcUxLdFNIMFE5Q2lidWw4RXhxMUxMR2dCZHpGLytYV3FZL2NqNDM0cApXcWhWR3lkOVFzSjlib3p6SWZyL2JaNlZnTzFGMFc4eVJ4engxS1J1eFF6cWp3eVdPT0JPdENMNVpWQU9qQmlvCmFtOWVUUmQ2TnZEWVN6alU4LzhRL1EzTkhxVHl1Ti81ak9KUC9BQ0QwQWlyVzdML1pNZVlzL1pRbHRsWXRhaysKSlN5aXR0WnBYbFJob2RxN3V5cHIwd2pFN2pBbjhka0hZVjJ3QnVISGl4T2hFQWdoVXgrZjB2NlZHUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMTJFeGdYcmhpRkFiQ09IL3VjNERoaDAxV0QyYWJ2REhmY09KVk5Pd2hkYkRSWU1OClFKWHJLMXZjU2VuNS9PVjZpTDVyaGlQMzFGa3Y3L1ZXTWRtMzV1UENPbm5SZHJKZTlkVkVia2FuZThNSDNIQ3MKdkpJSXNOVC91eHR3UzVHZmpOcW93OU8vQ3oxSlA5aGxRY0xPekxyY1A5dWdib1g4QUhOTDJ5VDhDdWhxTUNRQwo4cVVDU3c2aDlYN01ucDEzOTFRM0xqWW5ONVJzWVI4akFqaWZCQ0I0YVBBeUFGNmJEZStOVitWc1JybGt0WVNoCnJYdDBqUktza2cvSlQ4cUhmVXNma2o4dTRLTnRFVXVLd2pLaUV4VXVleEVmMnB6cFZ4QzEvSjZZUmlqMFBJN3kKajBvT3VCMzB0Ukd4MkFkbUlJaEZwM2Vqa0ZZRFVHWGFFeEN1OFFJREFRQUJBb0lCQUVUWEFPN0VxdDlaMHpwRQptZXIyYVBQdDFBWVBNcFF4QzJJc0pISGpjM0ZqMG1nZVdoY0JrL2Y0MVhFZWd0T05PVndKbU81NEFwZHhwanZKCks3S2xSdjFhWU5NMTZuaEl6TWRBVWkzNUVVRWlkaG5FUGNITDMxRTkwenNucXYzTVhyV3prZXQ5ZTN1SkxDZG0KNy81VDJLdGhNbEtLelQxbVA4U1pGVzdHNUhSTGZHNC9MdHgwamZWN2xvQ00vVk5PZlBDbGRxYnZWU2c4OWY5YQoxNm9xWGQ5NC9ZOGVsTjZkaFZXUUZpTXNlOEhFZTIrVTM5NWtLU3dNaWYybVRRTzMxZk9KbzlsZ29NVXBRdWJGCm1CZ3NtYUVhalgyVSttR3I4Z0UyRnY5N0xSNC90K1JvUzFOWkNvWVVEcHQvd3VhS1dISFVrZ1FidDNHdmdTbTYKYkk0TmV5MENnWUVBMjhYR2wvNFBxNkp5VWY4REg1dWVZMUNVeVBSTUM0aEVGdmYwNVFnNDlsNXBSNUpYL011bwp5c0VaaFpQbElIK0hERjQ0d0ZGZktoN29vaEhaQ2VTMTA1MzRvYnpscWtId3hwWEVOc0RqSHFEdlJQY2Z0TmNICkNJL3VjZDdJSlBla0MyOVBoMWEwU25TeXoyb1g0Qis5dzh5MFdEMnVRL1NxZytaTDRNbUVwMWNDZ1lFQSt1SUsKY2loK2s4MHJpK0hjRjJIbzBwZnVQQTJHM3JHR1FGQWMvbk0xbDB1R0h5MVcrNWVac1dwMGxNakZxTEdaUWlKVApUaXpaclh0SC9yZVk2ZG00Nlk1WlNDZzZsWVpLbnlZNjM0bnNtOVMvV3hZa0ZvdGxvZGt1LzRZRnR4UzUvMEF5Ci9qWVRQcGpwYTVJbCtFK2xTMDg3Z1VWTUNYM2pIbWsyMzYyRVZ2Y0NnWUFCWlIvOWx2OUNkNldDSDd4RlZ4ZUsKU2RpbjdlVU5yYS9BOVpINFlqVDZXMThQdFQ0WnZMRTFtRVF4Tk44ZmRhL0Z4Rk5YNVN4VmVCekI2cHNXRlAyUwplazQ1dUprOG0yNkwxQ2VLc1c2L293WGh5aS9KVmhRVldkU0pwSUJndTdHdTRPWUFWZXlQREc2V0luWkVWZTgrCmJ1NDJJUzRhQUZPVXdzRjRpODdyd1FLQmdRRE1RTE9ZZFhkNEJaWHFjSnVyUGI4N2xRNFVQajhMbHlSaHY5ZWIKSVZrRU1DeWx2VmdQeFVFUHZFZmx5ZitDYy9UK2JzdTczYS9yR1c5bjVUbk5TY0RPQldLUzZJMnBwb2VpUXBHego1S3FKeEE5MnJQUDhsc2pMbC9JM2ZubXdzR010ZUtzTFpDTU8xNWRTU000NDl6N3ZyVFlZN0w0WERES1lVN2lsCktyT1B5UUtCZ1FESm5pQUlkMTI3MGFHSXNvbm93OE82dmtUVUtXM05ETUF6L2hLcDVOUUcwSjFSQkFDRlpsWWEKNkVqVjZWamRPUlhQaDYzeXRSblN6SkpHUXpRYzJuQXpRS3lmSDlIakxjL09nSjNsV2JsaEtXMkpNelRCVnZYMwpwaWlLR3lpUWh2VFMxeVpOYUg2SUl6NjdqNG5MRDdqb0pIMnViUzR0N0xsNVhSQWRKSmtNMmc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-ca-cert
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUw0Z2UwSnpCTjNqWlNOMlRkeUZkc0F3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV3TTFvWERUSTJNVEV5TVRJeApOVFV3TTFvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF5bGVXMmowS1lrMkE5T1lqVTZtdXEyYlQ0SlpTbDVjcWFlMjhlWGZHWlZVNXRPekEKcHcyOEx4RktEaTV2YnJJZUdvYXc0ZnZMeXpqd0FhalNSbGcvR2tBTUppbzRPN2psakRYL2FlWERCYmZkaWpaSQpTc3VRVWhPV1U1d1NKRCtlS1ZCSEZGcTBqT0dQR0VEcXFBWFRGZmRwN2hoMGRWa3RPSDQ0ZEw5cTdJdDZkRSs1CkxnOVhwTjE1U0tkdW1UeU5UVkhvdzl4YzY0ZUpCaUQ4UkkxWHFiczJyRDFwa1ozWWJEcGFDRVh3bzJvWDZvVloKLzlxQ0N6ZEJxTXlxNWYrNTVxM052eHB1QkUyZXpWcFd6K0N0WStGZy9LalFwVXQ2QlJjS3BsNUhhdWVLd2k5aApiRTFlYm1BTmNCUHFiQWpIc3FhU2NPaTVsZEpQYURJVEE1SkpKd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGUExLZG9KWUY2SE93Wlo2U0M1NmNEV0tOanZSTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQmFFanNJWFBqeG90Sk8vNG1UeFdCdnRRZmllU1lUWkxvaTY4M1lyUGhWbGhNcUMvQW9GOHJkCkhCQWkvYThtTDd5dkpCbWMrdDlwMjJjdks1YjBtTmZlVkNLM01zYXpPZ0UwWVd1OWNDVlV1dno4RE84UmVENDcKMlMxd3ljZkVIVkZacHJaSWkwMVZsVzlXL0ZHbEMzYmJIUVhkZytLa0E4QW9YN21XOEVwUGJqOStnYlBBSDlzWAozQUt5NmNoa0JyZWowanY4ZUsvd1F2NWUra3pIckpWOEZLY2lWZGY0SVQzN3c3RURSWTlhbG9zZ3lISXZnYUNMClJneVNtQnZHak5LRnY1Q1pVdkVCV1R6NE1jYTVUaWthMmRvV3A3SHdzQVVYeGZQTEtzV001NTFpbVNvUlNVNzcKMlhQTTRvdTNtSW85UFpacjJYalZNZTVYVlFBTloxK2YKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeWxlVzJqMEtZazJBOU9ZalU2bXVxMmJUNEpaU2w1Y3FhZTI4ZVhmR1pWVTV0T3pBCnB3MjhMeEZLRGk1dmJySWVHb2F3NGZ2THl6andBYWpTUmxnL0drQU1KaW80TzdqbGpEWC9hZVhEQmJmZGlqWkkKU3N1UVVoT1dVNXdTSkQrZUtWQkhGRnEwak9HUEdFRHFxQVhURmZkcDdoaDBkVmt0T0g0NGRMOXE3SXQ2ZEUrNQpMZzlYcE4xNVNLZHVtVHlOVFZIb3c5eGM2NGVKQmlEOFJJMVhxYnMyckQxcGtaM1liRHBhQ0VYd28yb1g2b1ZaCi85cUNDemRCcU15cTVmKzU1cTNOdnhwdUJFMmV6VnBXeitDdFkrRmcvS2pRcFV0NkJSY0twbDVIYXVlS3dpOWgKYkUxZWJtQU5jQlBxYkFqSHNxYVNjT2k1bGRKUGFESVRBNUpKSndJREFRQUJBb0lCQVFDaFIzRmhJRmcvaElFdQpNcVdqME5MOW9hZHVFc05nT3NnK3lKUjZ5U0prc0txZmNEb2FyVkw2dlRBbTM1SklURWE4WS9Gbkhya1FrYUNUCjRnbEFzcVFSZTAxenVpRTZVU1QrUGlnSU0yL2dCZTdhZEd2bzJocDlvVWtuK1hWb1dTRHEweWJrcld2T0F4ZDQKZ0gzSlVXTXYxaFlrQm5BRS9RQ1RUK0FXQm1EbWl0Y1VUTW5WanFPUmwvNGVLbUtuMWZmRHM2ZUZtMVIvUktnYQpRSXAxTG1mdDVrZXQrc1B0NXUzaG15Rlo2eUVMR0c0aDV1djZHZUkzcjc0Z1RLdUNIamF6dnQ0cGx0dTJUNVNBCnRoOHVzRFZtK3dQd3dIckdDYlBGYUZmSWZOK1hlNWpCUUZqMmNKSERYT29qNkhCRHA5TmUxTWFMalFVRVg2ZW4KUll3bG1PVzVBb0dCQU91eDJxaXJWSW1RY2RFTGRpamwrYTREaEROVGtpSTllL3IyTjRBTFdPTklqbUs5dzVheApEK0JJcWJlQ1dmNTlZNFZPM3pZVzZZQW84Uk1oY21PSHBNL203akZqbXk4d1ErUEtXMmNiRjFCUW5EOGtqVjl2ClJZWFZqcmJOTmxIV2pkbmNuNTZ1UWoyc3ora2pHMEtWaVdHQjM1Q3lTM1ZXb3FmNWl0WnVXbm5EQW9HQkFOdkcKS0hJV2Jrb0RjazhVUG90YWQyOURqWlRhTWhqek5XTEdQRzZFZDF2bUhkR214QndQd2xxNE9CYW1uZmNxY1o1Uwo5TDVzM3J4ZnRyVmxtMjRmNm9rNnJCVHUyUGQ2UVVnRThEbVBzT0pKU2ZNMGVDcWtpWnU0eS94NVNodDE0YXV5Cm9lKy9OUTJFSVFLWUlGRUVFYmN2ejZ0akZKWkloZzhSall0L3Naak5Bb0dBYlIvWWREVjNHNFlFSEZ4cEpjQnMKbkhQR1Zway8xSmlRK1gzYjdtM1NodERHRTlOMlppT3VqUkkzZWQ1aFdtR2xuVWdLTXBuakhGSllZNW9kd3hVLwphbjZxRTdYaFdMVEpDZ05iMUY0SHFrallQcWZteUtQVkZZVHQ0WmNicWtKalJOWlFGUURyYkhEQmhsaVp1M2RPCnR4V1JkQVlJeDlnSDBTdkphMFNHb1U4Q2dZRUFrT2wzVDhyRWpCNzdwM0wwenBRblBvRXZnTi9pdXByYkw3Y0EKcitxK2ZTVWRzbGlnNU5QclZrQTBFNU5uZzB0RVFaMzNiUHlDWFhsTEV3N2RUdDdTbWd2SzNiNmo1NEtBT3dtdQprSFhUcjFHZDVqUkpxK3gwSSs3VTZqUGJqb0hLL0ppN3VFYStwNXZnM0VJTXhQN0c0NkF0OFpkU1FzbXRRNUJTCllaSWdPMTBDZ1lCUU95U0UrR3VvTzIrbVVRVGdKcUE3U1BDalA0WS9WckgvUnB3WVdNZ29FM2tzUE5xL3ExREYKRlZmNmYySm85NDd2ZTZ6QVB2cWEwOEhEaU92UUlQRGhwbVhlY3hBVVcrT1p0QldiN2RjUnFSOVhSd081QlExNgpnOURuU24yUXZZOHV2WHVKdTVGMjN3Y2RIYm50a3FTUUpxWFJGVHdLSHA3MVZKbzdST00xOVE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUw0Z2UwSnpCTjNqWlNOMlRkeUZkc0F3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV3TTFvWERUSTJNVEV5TVRJeApOVFV3TTFvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF5bGVXMmowS1lrMkE5T1lqVTZtdXEyYlQ0SlpTbDVjcWFlMjhlWGZHWlZVNXRPekEKcHcyOEx4RktEaTV2YnJJZUdvYXc0ZnZMeXpqd0FhalNSbGcvR2tBTUppbzRPN2psakRYL2FlWERCYmZkaWpaSQpTc3VRVWhPV1U1d1NKRCtlS1ZCSEZGcTBqT0dQR0VEcXFBWFRGZmRwN2hoMGRWa3RPSDQ0ZEw5cTdJdDZkRSs1CkxnOVhwTjE1U0tkdW1UeU5UVkhvdzl4YzY0ZUpCaUQ4UkkxWHFiczJyRDFwa1ozWWJEcGFDRVh3bzJvWDZvVloKLzlxQ0N6ZEJxTXlxNWYrNTVxM052eHB1QkUyZXpWcFd6K0N0WStGZy9LalFwVXQ2QlJjS3BsNUhhdWVLd2k5aApiRTFlYm1BTmNCUHFiQWpIc3FhU2NPaTVsZEpQYURJVEE1SkpKd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGUExLZG9KWUY2SE93Wlo2U0M1NmNEV0tOanZSTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQmFFanNJWFBqeG90Sk8vNG1UeFdCdnRRZmllU1lUWkxvaTY4M1lyUGhWbGhNcUMvQW9GOHJkCkhCQWkvYThtTDd5dkpCbWMrdDlwMjJjdks1YjBtTmZlVkNLM01zYXpPZ0UwWVd1OWNDVlV1dno4RE84UmVENDcKMlMxd3ljZkVIVkZacHJaSWkwMVZsVzlXL0ZHbEMzYmJIUVhkZytLa0E4QW9YN21XOEVwUGJqOStnYlBBSDlzWAozQUt5NmNoa0JyZWowanY4ZUsvd1F2NWUra3pIckpWOEZLY2lWZGY0SVQzN3c3RURSWTlhbG9zZ3lISXZnYUNMClJneVNtQnZHak5LRnY1Q1pVdkVCV1R6NE1jYTVUaWthMmRvV3A3SHdzQVVYeGZQTEtzV001NTFpbVNvUlNVNzcKMlhQTTRvdTNtSW85UFpacjJYalZNZTVYVlFBTloxK2YKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lRSXV6eDBDeEZIYXRMSXhXRUpwV3V6REFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEEwV2hjTk1qWXhNVEl4TWpFMQpOVEEwV2pBUk1ROHdEUVlEVlFRREV3WnlaVzF2ZEdVd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3CmdnRUtBb0lCQVFES0ttT2NOUXpkZHRUOVZwWG90K1FNL2NHMUlXVU9pTThZVk9peWhMM2FoQzNHMlNsb1VWdlcKbDhCaUppZ2EycXpwV1pERDNCZkRSUk44MlZzYjBLYWJraDRkSmRLZjJFZzdkQm0xVnlaN1gyOTEvaWkwdGhZMwpmNE9TTW4wWFFZY2w4WWxYOFBpYXpSeFpFdDR2K1NOc3JHdEhIWG5KK1BjYW1DTm10OFhiR2pKcVpybnZ0bWZGCldxd2YrUDRNM3NnQlBFU1NwY2poa0RxSlh5dWVTL3hHSlNaSGRjZ0M3dHcvdHZ4RFBSdjNWSzh5VlZjVWlqN0YKa05rckFzQmVmdlVLM01LKzNKVThaNnFFcWpBRFZ0eEMwNm5UdFZXSWo0dEVhcWJWbUQ1TXhjeXdnZ2JCOUVWZgpSa2U1N1BtQm5ubFNUZGJ6YzgzcktpUzRyNWc0RUg0TEFnTUJBQUdqWURCZU1BNEdBMVVkRHdFQi93UUVBd0lGCm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWYKQmdOVkhTTUVHREFXZ0JUeXluYUNXQmVoenNHV2VrZ3VlbkExaWpZNzBUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBY2dBb0V1VitsVms5QWxxMzg1bFhyZ2lycXh5UnRDdi9adE02SDlvbDZjSkFzK2pyNXBDdFVWUmJZSGVHCmdIZlRKRFBiRC9TekViajFJd2ZrcXhYTkZlQ3VtWTNoU2Rldm1yWHBTbWNlTTI2NHBjZUxOSEhMa2dKN0VVaisKV0RNTzhvdmhLZFpPcjZxVks0QWNiYmExaDVvTkYrTm9jd0lTWUpybUFIUzAwckRibzhPbHFRbEJBZFhTVEk3WApaUGZPN0szMk1yRXNSY3dOZWxhN1NJS3ZPKzQvZkVveUVPUDFQWElvb1VETXhiektzSFViNExRMzF0MUp6QmdRCmZTc2EweFRXTkR3cm1ubHJVaEx6alMwdklzRW56WDRtUkhKZysrOE9pTzZyWnV4U1NLeTlOdW9vRlAyTkVnNUoKY2xSNU1USmNUZ2UvbUVuZnJFNU1FYitCa0E9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeWlwam5EVU0zWGJVL1ZhVjZMZmtEUDNCdFNGbERvalBHRlRvc29TOTJvUXR4dGtwCmFGRmIxcGZBWWlZb0d0cXM2Vm1Rdzl3WHcwVVRmTmxiRzlDbW01SWVIU1hTbjloSU8zUVp0VmNtZTE5dmRmNG8KdExZV04zK0Rrako5RjBHSEpmR0pWL0Q0bXMwY1dSTGVML2tqYkt4clJ4MTV5ZmozR3BnalpyZkYyeG95YW1hNQo3N1pueFZxc0gvaitETjdJQVR4RWtxWEk0WkE2aVY4cm5rdjhSaVVtUjNYSUF1N2NQN2I4UXowYjkxU3ZNbFZYCkZJbyt4WkRaS3dMQVhuNzFDdHpDdnR5VlBHZXFoS293QTFiY1F0T3AwN1ZWaUkrTFJHcW0xWmcrVE1YTXNJSUcKd2ZSRlgwWkh1ZXo1Z1o1NVVrM1c4M1BONnlva3VLK1lPQkIrQ3dJREFRQUJBb0lCQUhtU3dqSW15T1RKV0U0OAo2b3QzUW1INW02cUVPWlJpK3o4am1JZjZRWDJON1VWZVJJTmlJYnRMcUxxZFBaTGduQWo3L28xNTVxUmIvdHNlCmpxYU1kQlNyNndZV1A3STJTMEhOa01RM2M0SFBvMlN1Z2VZaWRmdkw1K0JjRWxPUTZXZ005MDMyTUZwUExGUDQKZjdzVHRKVGVudWkyTmc0YWRPYitSSk81d2ZiK21WTnRnM1pIamx4eDdVZ1Z0eFI4YStuNFBObDdWZjU3RlIzWApiWjEwa2dmUlRGSUhZSlEzcVNHMzlSLzFWSC9zSi8yU0k5MjF6K0ZsQ3NQbkt3UFk3akNjbW9wSXdIZnhCVmNZCmUyREJLcW53aTk5RU9HWjN5YXNUQTViRldPQXNLcFJvN3hFTFZoa3hxU3BMQVcxODNpSXJDRng1YTUrcHo2ZGEKUllqM1VVRUNnWUVBM3JlYnhTc0RsbmdDZlFkOFZ2dWVaejhYWmtlVi9NSmJWcDVoSmZzaHdnZS8vbGJZcjI4RwpKc2RMWUxKN0FtbGN3NTlZRUdsR2ZpQitGTTVuQXVhRThNNDRDWDMrbHpmUjhNVWFWY2J4TEpVQXZpeEFJWjU0Cm9SVnlpWnVIdlhNMkttbk9vN1I4SXdHamxteTUvaFVuR1ZiUXl0Z0E5SWhLZGNqblhtem9qV0VDZ1lFQTZHQ0wKd3J2VThyUG5BeFpxTW9pOS9xVkRiTTgvT0Erd0lOeFFxQjBnUkR0RXd1WGcyU0dET1o4MGpUUkIyTVdXSDA2cQowdTQxL2F1TElWK1FkdFc2aW5QMGlvczlqU1VmK0h1RmF0cC9iUUFmVmloeW82RHIycStOZUlaSTZmQ0hoMmdMCnlpT0JvdTVCbGppMFN2V3ZXYk5yRFFobDk3aHBnWVpHRjdqc2R1c0NnWUJpVXdNRkQ5RmNxNHpGci9sWDJXdjgKUHVGUXVVZmhOOWpsSzdUTjlNblpoRnhocCt1dnY3OGlmWmVzai84NGVGV0kwNThvVjZIVWF2bmVxNlRVcGZxSQo2VEhhRnZLL3hkZjhpTGZ3cUl5dTF2VmwvOWtzUG04WkJvUHpkbU45NHhCRnQwS1FDVTFJa3grcWVFUEFoWXdtClpxcDA4dG14R3o1c000N1pwQkVpNFFLQmdRQ2FoOG1wWUR1R2dyaDNSeXFzSEY4c3ZqNE9WK3ZVbmlva1VCNmIKRFhOdHJIUlhuNE5kSVhvZ2tZemk4Z052NGtXbzRDbWRSNmhEM3hZUXhYcE9iR2MydDFIQjZFS3dZQ1hZbWx2bwo2UkNnTGRxbzh4RDVXNFE4MDAyaS9ybnlTRy80VGVxNUs4K0R5Q2w1ZW8vNjRWTVF0YzNVeHViNFMzeHVGQnI4Cm40OHdyUUtCZ0JENmgxaVUwRFJVSDJLQy9jVndNbTU0ek9DL0RIU2pML2RLODlFdDgyZVRhZHRhZmFIUTRHZDAKb1BYNTVGc2M2RmZpZ2h4TFRzQXJ2UVIxVGFHMk1UaU5Fc0t6SjQ4bzY1cDRrR1hVWHZ2Ri9rT1hBelAwVmo5bAo5QjZTODFHb29FZklhRmhnQ1QzUm10RkFxbk5mNlZsem1COEVkV2JvdU1NdUl5UGRQbWZnCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUw0Z2UwSnpCTjNqWlNOMlRkeUZkc0F3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV3TTFvWERUSTJNVEV5TVRJeApOVFV3TTFvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF5bGVXMmowS1lrMkE5T1lqVTZtdXEyYlQ0SlpTbDVjcWFlMjhlWGZHWlZVNXRPekEKcHcyOEx4RktEaTV2YnJJZUdvYXc0ZnZMeXpqd0FhalNSbGcvR2tBTUppbzRPN2psakRYL2FlWERCYmZkaWpaSQpTc3VRVWhPV1U1d1NKRCtlS1ZCSEZGcTBqT0dQR0VEcXFBWFRGZmRwN2hoMGRWa3RPSDQ0ZEw5cTdJdDZkRSs1CkxnOVhwTjE1U0tkdW1UeU5UVkhvdzl4YzY0ZUpCaUQ4UkkxWHFiczJyRDFwa1ozWWJEcGFDRVh3bzJvWDZvVloKLzlxQ0N6ZEJxTXlxNWYrNTVxM052eHB1QkUyZXpWcFd6K0N0WStGZy9LalFwVXQ2QlJjS3BsNUhhdWVLd2k5aApiRTFlYm1BTmNCUHFiQWpIc3FhU2NPaTVsZEpQYURJVEE1SkpKd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGUExLZG9KWUY2SE93Wlo2U0M1NmNEV0tOanZSTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQmFFanNJWFBqeG90Sk8vNG1UeFdCdnRRZmllU1lUWkxvaTY4M1lyUGhWbGhNcUMvQW9GOHJkCkhCQWkvYThtTDd5dkpCbWMrdDlwMjJjdks1YjBtTmZlVkNLM01zYXpPZ0UwWVd1OWNDVlV1dno4RE84UmVENDcKMlMxd3ljZkVIVkZacHJaSWkwMVZsVzlXL0ZHbEMzYmJIUVhkZytLa0E4QW9YN21XOEVwUGJqOStnYlBBSDlzWAozQUt5NmNoa0JyZWowanY4ZUsvd1F2NWUra3pIckpWOEZLY2lWZGY0SVQzN3c3RURSWTlhbG9zZ3lISXZnYUNMClJneVNtQnZHak5LRnY1Q1pVdkVCV1R6NE1jYTVUaWthMmRvV3A3SHdzQVVYeGZQTEtzV001NTFpbVNvUlNVNzcKMlhQTTRvdTNtSW85UFpacjJYalZNZTVYVlFBTloxK2YKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURxRENDQXBDZ0F3SUJBZ0lSQU5wWTJjWVRzSmR3RldoMlEwMUlPTzR3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV3TkZvWERUSTJNVEV5TVRJeApOVFV3TkZvd0tqRW9NQ1lHQTFVRUF4TWZZMngxYzNSbGNtMWxjMmd0WVhCcGMyVnlkbVZ5TG1OcGJHbDFiUzVwCmJ6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUxCcnJWOE9US2tEOTAzWHdMVVkKRjRPNTNFOHNiVE9od1ZNLzBrenQzZVAvQ21jeW94YUNNTHJWekpQbXUwSE92NG1SN3FkQjRzbldoa3hxSDVNTQpwK3JtNXI1SkFiS0Q0L1VpZjAxcHZVbktvOVpNV2tMRjZVN3pqQXF6d3JQaE8yL1dyMXFpejJFNE03S3BHMWhUCnVzZ2N4L3BJbWhoak9Jd3lsMXhVVGZCcUtaMmY0YnVjT3lBeE9ydThIYk9Ua1JBOVZWSUNIVU1wU1N5blBMRXIKOFpob2xSdXZhTWorZkt3ZWliWWw3d2s5V2VMMU9wc0hlNllTdUFVZVNWR21xMmMrY3J5a1dMeGZLWkl4ZElKSAp6Z1NRVUFYTzdvWUEveE1VaUhTcWJYdjA4R0NpTittcGJHNXR1TWRqeDErZUQ3cG5GVEUzMVVGM3Y5azV2Vml5ClNPc0NBd0VBQWFPQjNqQ0IyekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUgKQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3SHdZRFZSMGpCQmd3Rm9BVThzcDJnbGdYb2M3QgpsbnBJTG5wd05ZbzJPOUV3ZXdZRFZSMFJCSFF3Y29JZlkyeDFjM1JsY20xbGMyZ3RZWEJwYzJWeWRtVnlMbU5wCmJHbDFiUzVwYjRJUUtpNXRaWE5vTG1OcGJHbDFiUzVwYjRJbFkyeDFjM1JsY20xbGMyZ3RZWEJwYzJWeWRtVnkKTG10MVltVXRjM2x6ZEdWdExuTjJZNGNFZndBQUFZY1FBQUFBQUFBQUFBQUFBQUFBQUFBQUFUQU5CZ2txaGtpRwo5dzBCQVFzRkFBT0NBUUVBQzRQYUJIVGg3UzBxMWpSNEc1RXBMVnMvRDBZVjh0bHVnd3ZueU9OSnZFdXZkRE5SCklFUXlrclJSZkJvcFVsSGt5bFJaT0xBeVJDcEZvOHd5Ukp0TE1nWlhKWlFBUkR5SVIwbC92ck1LaWNMWGNTazkKTHl3QzYwbllMQ3dMemljN24zTi9HUzRiblFJYXRHekpwRlVNU3BEYkdNTFJUWVRSZ21BQ05IT1k2TlhqY2tZcgptUXlGYW9HTWJnUWxyWEhzUG81MEtmejIyUzljR0hLVVJmclJNN0ZJMENpRHVLQmdrK29CQ25tN0ZWRTZUcllrCkwxTUVFdEZFakdpR3pzUmFuQkJtTDB1T09GQmtKTzJVeXlnWXpCaWxCUS9VQ2d5ZUpvaFdtSHdnY1JVUmhXSjYKeDNvZ3dxM2xPaGNkY2h6L1NpU29DSzJhdHAyc0VCeG1KeUUyRkE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBc0d1dFh3NU1xUVAzVGRmQXRSZ1hnN25jVHl4dE02SEJVei9TVE8zZDQvOEtaektqCkZvSXd1dFhNaythN1FjNi9pWkh1cDBIaXlkYUdUR29ma3d5bjZ1Ym12a2tCc29QajlTSi9UV205U2NxajFreGEKUXNYcFR2T01DclBDcytFN2I5YXZXcUxQWVRnenNxa2JXRk82eUJ6SCtraWFHR000akRLWFhGUk44R29wblovaAp1NXc3SURFNnU3d2RzNU9SRUQxVlVnSWRReWxKTEtjOHNTdnhtR2lWRzY5b3lQNThyQjZKdGlYdkNUMVo0dlU2Cm13ZDdwaEs0QlI1SlVhYXJaejV5dktSWXZGOHBrakYwZ2tmT0JKQlFCYzd1aGdEL0V4U0lkS3B0ZS9Ud1lLSTMKNmFsc2JtMjR4MlBIWDU0UHVtY1ZNVGZWUVhlLzJUbTlXTEpJNndJREFRQUJBb0lCQVFDY21raWdxM0hUU2tqNQptWDVmZ281RkNQUU9kOUpMMWRkbGphNmhTVGtCalVCdjBOeENPN2tEOElzVDh1bmdoYVV5ZWc4Tis0ZFVRWkNmClBramU0SW9pRTJ0YUdEWmdmNEVYOWRKcEptYTNuU0NJTnVpY2cxQVNIRkVBb3djL1k3eStEeVZEWUdpVDFTN1cKOWhQbStSUkJWSU1Ub2VUZnB4dm9IM1NLcWU4eGE2SkFXY1ZjcFZmT01nY2VEQ1lZWCtDNjlwWk5OWmhTaFNPegpaTEwrdy9tRi9HS3o5bVFjOURMMFMweDNrZDF3WHNaaVVKMk01SHAvcWlPVGMxRTFFa3hRQlp2alJCSWFBaTIyCmRKbDk1MVcrSk43THRXRzFxN09uRVEvRlFpK1M1RWpJUTA5RGpnRDBLZXhLbmlldnM0VVFzRm9OcTFUdHExZzgKd3ZLMHNyUFJBb0dCQU5DK3RJMmNBVk1lTUt2emZ0WnF3QnFxdnA2NVJNU2o5eTJmMnBldXgvZCtJeDRlRXZRMQo0aU5ra3p3Y1JsMHJjUnZwNE1CdjhmVFdQMGtEZlJYTEhrYVZGa0RReGZpa0R0VGlKVWpkR2JIUUVna2FESWppCm9aVlRBNXloU1pUb2d4aHFYQUxVMElINDM2SHg2U0E5UnRSSnFMNzRtQlpNeUVQOHEvTXpFdUtaQW9HQkFOaGIKc2g1bmp5bnBkelA4YTJVdDVSM3N2M0dWa1R1cWZFUyt5cmxuVjhnb0xXaVhOTktwR21kMHJMc0IzRVlWaG1jUAphSUJTaDdvaFIvTU16OWJsdVBjTWRKUmRxRWw1MlpqcU5sR2cxbXNTeVhwTFhsdTIrK2NlR1Bxd2NWdURVVU44CmQ3S1g4a0dWa3QvODVzQU03VXVTWC9PR3ZZSWxJMnVVUkFvU0JuNGpBb0dBQUxkMjVUbVE0NWtwNzUweFpVa08KaWNqbVNLTTRNamloNDUwMTRlbHV0RkhSaXd2dFlydEFvSUI2NU96djdPZjJSbk5DRzBjSEhLRVRySXQvaFhDaQpGUG4wRHBybzR4YWxHbVFBWHNTcmp1bTQ5aUVKdy9xTE5Ya0lmU1Fzblg5QzIvV1poVVQzeGtwMWNoZmpoZ0hQCjJYQzdUSlNMNlIrd1hGTmt2N3dBSjVrQ2dZQmZUajB2SVlVeC9ETFRScHowUy94Q2ExaUZxMUgzaTRrRUsxdFgKd29zcmsyODFSRzR6WWVSTXNGdXFZUTVzSE8xQWxzdjh3dDRoQXFvVUNZL0FaUjlPVEVGS1hkdFV5b1VzMC9jcgpqQU1IMVpYRTlsQlJiRkNZcFd4eGVhbmxtdm9BRldNUTI5Z09SZG9XS3V4bXF3c1lvQmorU0Z0UWFoV3BQUDJmCnhnTHdLd0tCZ0huUkR0NldLRFZuZEFZeXBIbzJTT0dVUysrVjRZbTBmUEM4bW5vZWJtRng4RThBdGdzVElma0UKSWh1Y1VDS3Z0c1BNM0MzT1daSm1NbUtqZk1zK1lQdmdVdkdRZHZKS0ZOUjdnRGJudkhaQk1IejF6cENlbEh6QgpyQi93Q1RaWWw1ZUNUZjJncWVBSjI4RkJxck1vVXNTa0h3V2lKNWUxK2wzV0xKby8yWlZVCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUw0Z2UwSnpCTjNqWlNOMlRkeUZkc0F3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV3TTFvWERUSTJNVEV5TVRJeApOVFV3TTFvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF5bGVXMmowS1lrMkE5T1lqVTZtdXEyYlQ0SlpTbDVjcWFlMjhlWGZHWlZVNXRPekEKcHcyOEx4RktEaTV2YnJJZUdvYXc0ZnZMeXpqd0FhalNSbGcvR2tBTUppbzRPN2psakRYL2FlWERCYmZkaWpaSQpTc3VRVWhPV1U1d1NKRCtlS1ZCSEZGcTBqT0dQR0VEcXFBWFRGZmRwN2hoMGRWa3RPSDQ0ZEw5cTdJdDZkRSs1CkxnOVhwTjE1U0tkdW1UeU5UVkhvdzl4YzY0ZUpCaUQ4UkkxWHFiczJyRDFwa1ozWWJEcGFDRVh3bzJvWDZvVloKLzlxQ0N6ZEJxTXlxNWYrNTVxM052eHB1QkUyZXpWcFd6K0N0WStGZy9LalFwVXQ2QlJjS3BsNUhhdWVLd2k5aApiRTFlYm1BTmNCUHFiQWpIc3FhU2NPaTVsZEpQYURJVEE1SkpKd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGUExLZG9KWUY2SE93Wlo2U0M1NmNEV0tOanZSTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQmFFanNJWFBqeG90Sk8vNG1UeFdCdnRRZmllU1lUWkxvaTY4M1lyUGhWbGhNcUMvQW9GOHJkCkhCQWkvYThtTDd5dkpCbWMrdDlwMjJjdks1YjBtTmZlVkNLM01zYXpPZ0UwWVd1OWNDVlV1dno4RE84UmVENDcKMlMxd3ljZkVIVkZacHJaSWkwMVZsVzlXL0ZHbEMzYmJIUVhkZytLa0E4QW9YN21XOEVwUGJqOStnYlBBSDlzWAozQUt5NmNoa0JyZWowanY4ZUsvd1F2NWUra3pIckpWOEZLY2lWZGY0SVQzN3c3RURSWTlhbG9zZ3lISXZnYUNMClJneVNtQnZHak5LRnY1Q1pVdkVCV1R6NE1jYTVUaWthMmRvV3A3SHdzQVVYeGZQTEtzV001NTFpbVNvUlNVNzcKMlhQTTRvdTNtSW85UFpacjJYalZNZTVYVlFBTloxK2YKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTVENDQWpHZ0F3SUJBZ0lSQU94Y1hQWiswR1h6blpCN2ZTbDlQakV3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV3TkZvWERUSTJNVEV5TVRJeApOVFV3TkZvd0l6RWhNQjhHQTFVRUF3d1lLaTVvZFdKaWJHVXRjbVZzWVhrdVkybHNhWFZ0TG1sdk1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXpsQldnQk95Z1Q0YXBSdm1DSFhEY3pKSTM5MWMKR2VZbDdlVUZkdm56N2NYcVNrMExIZkNtNXY2bnNnZUZYalh2M1ZhYWthTTBpd0tNTS93em5tY25jVEp3KzFUTQpTNVJPS2g3U09CbUIwVzMvNzBmY20vL0NrQUMyNCtXbUkwdFBnOVBmM0IycVFyWC8yUnVmTkNEWmVZL3BBTzJOCjZLbnczb2Y1T2QzUnE1SitrNERIQTNhcmtlc1JVNEo3SDEyTjM4bFFKa2ZIVVNWYTNXczN3SXg1V29tV0tLdEsKTURYNzI0eTBPNkgyRDFpOW5QejhtWk5NMUFMRCtyblhvbTVBanJtY2svWVF1RVRsQ0c2dUI1aTNRWS9QazA0cAp2cTR5enM4Y0w5SVJseFFqSkpSd3pxUTI4bWp6aCt6ZHdEMTNaaXpGaGpxQnpwT3dNQ3Zrc09tcWZ3SURBUUFCCm80R0dNSUdETUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUIKQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCVHl5bmFDV0JlaHpzR1dla2d1ZW5BMQppalk3MFRBakJnTlZIUkVFSERBYWdoZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d0RRWUpLb1pJCmh2Y05BUUVMQlFBRGdnRUJBSUhNYTZmcVFBdVY0dGY1YjZtMnpqeWZHNmlCN3ltQ1V4cEtid2NEMkZJakE5WmQKSjQ1REROb1JqTENkbnNTcm9tTEtwajFKZUFYbExqZFllOEVNUW5RUjdCK2gzTDZ4bVNPMU0rdTI0ZXVMQUY3bQpvTysvTmFIM0NFR2ZWdGdXWjFuakxoM2dsejZQZ2REVzI0YktjWUZxaXBtTGVpR05Za3RGb0RveXovbVRmK2pCCmJwc3FwQlVUYnRNQkpXWklJS3U3OTRUVFZsaXZVZytQei96WmpPQWI3OTVoREVzVXpMZXVGOW5xcDZqVk53UEoKcWY4ZGxoRjVNM3M3V3JrSHJJa2JYQWRaWHh3UC9FVng5QXpjN0w5QzE4R3Q0REFlRmk4S0JudEY4Qld6WjZUQgoxcFJWVEh1c0NQSDBjcE04YVY3TXBMaCt1UXJvR0RmVVdyNjBoZkE9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcGdJQkFBS0NBUUVBemxCV2dCT3lnVDRhcFJ2bUNIWERjekpJMzkxY0dlWWw3ZVVGZHZuejdjWHFTazBMCkhmQ201djZuc2dlRlhqWHYzVmFha2FNMGl3S01NL3d6bm1jbmNUSncrMVRNUzVST0toN1NPQm1CMFczLzcwZmMKbS8vQ2tBQzI0K1dtSTB0UGc5UGYzQjJxUXJYLzJSdWZOQ0RaZVkvcEFPMk42S253M29mNU9kM1JxNUorazRESApBM2Fya2VzUlU0SjdIMTJOMzhsUUprZkhVU1ZhM1dzM3dJeDVXb21XS0t0S01EWDcyNHkwTzZIMkQxaTluUHo4Cm1aTk0xQUxEK3JuWG9tNUFqcm1jay9ZUXVFVGxDRzZ1QjVpM1FZL1BrMDRwdnE0eXpzOGNMOUlSbHhRakpKUncKenFRMjhtanpoK3pkd0QxM1ppekZoanFCenBPd01DdmtzT21xZndJREFRQUJBb0lCQVFERERhRTZKV1UyVzRqRgpZTUx5YktRRVhSNFl5Q2N6TlN2VzVoZHNqSlBaMEt2WTQwNEhXR1h6TGY5TmlWN0YyeWlUa2pWQVM1UjVlRWNsClB1TnVkd2dMTlMwcjhOZlUvTG1KaU9vbXI3YlVVYk1PZmxwTUFsbm4yMFVONFNoWlpmSWZLRWtVeWRjV2l3c0EKTCtVc1c0SkFNNWFPa2drQVZ1cXErTkxmcXA5NEhLdHh0L1U5Y0F5NGxsMjlWWm93ajJqTmNsR1dBSk5LUThYVgp1cmxYb1Rzcld5NDd1WWFlWjdtd21sRktUMFNCc2NPVDRCQkNaL3BjZkFwV2gwVGczNVNjSnhmeERTWGw2MGZkClF6Q3pPam9ueUVpS1lzeXlSQmF5SFVWREFEZlZtdGFoZmROM2djcTVHdjZWcDV0bFp3WllYN1pKaWtTNy9nQ2sKNW9VdmNNVkJBb0dCQVAycTNkeDl0WERLelE4T1dTNmhmSFFNdHZtem5wS0F1KzZwc1QrbFRyb3E3SW1oa3E5TApiZUpCa2ltNDIwNWhTSDhtWmwyMlQ3aHVSRHcxd3QyYzV6QTgvS3dIclZQQTNRVmUrTkl1RnR4TTJWUGpQa0lkCkJ6TEl3dzRNMWYzS0RKYXdTRWhkUTNBQWdVY1pPbWdEOVB0L0FYaUlOS2xCdHNGK0NrOFY4OVJWQW9HQkFOQTIKQURLWERaTVBzS3l0M0h2MjJVdHErUmE0SVhNc3F4RVJMdUl1b2cySmZqUVFkOEd5NlI3QnFOTWt2SHE1SEVscAo2ZTZBN2JoR2N2bUhlbnVYVHZ0eWNoOVo3Q2pPdnJid0ROc2hCZXBJMHZsWXNBMmZSTzBYWWtMMGhaR0x0RjVMCktSRlEvekdZelV4UFZqUDRvUVRoS1ZLMGsxS0djSGJsekNIY0x2ZURBb0dCQU83NGhVSXUrenRqRW9OWWxST2sKOWtXdHBNTGdRRWJzR0IvaXBTUzhhc3BmbmE2YkZFRW40a0VBWE40SlZERW0zTkZNTDZ1aEVNRkN2KzJwQ0FjVwp4WVZnTHZreDBrdlFxV2RoN1M2MFZMejllTS9haU5CbjRGd3JYZlppaVVZcGptcDNiK0VjVzJlc1VoM1UybjBiCkhUUEFsbllpZXRucEdtNTJldWUrV3BKeEFvR0JBSVlEN0Jha0FYbkI1SjhRL1ZUUkswWU80YXRNODBMVjRub0cKekYyTFZJVlFGV3BmbXlXVENkZmhJTkJlMmU1SURidjNMenB6eEE4VFVWZnBhdDM0SXo5WGg3dEVQdXg1UG1vegprcUxNMjZqVUhPK2Z0Um5maFJieU1TNFZnNCtPRTVlSjJ6SXBKMGorS0U1UTFwUjNHUFV5RkU0R3FyaTRqZFVKCnpsMlJBcTRQQW9HQkFKeFZlZlJ4Z0FWQm9NbWlJbXFpK0psVWhaYzFtaVZxRnlrTmpWRWRoMmh3RHdxbkZlSVUKWm1mZHN4SmRLcW8zMEk3STIydmhEME9pQW9sRzB1T3AzdVNKbmtXeHZweHBMcnk5RWtMMXJ0TldLbzM1WmxNWAp5L3ZWMFhyMWxUVnUwTXJNWDJyQjB6UkVhZkJHbjh1T0xlWmVvL2hEdjY3YzRMZWhBOXJwazZFbwotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUw0Z2UwSnpCTjNqWlNOMlRkeUZkc0F3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV3TTFvWERUSTJNVEV5TVRJeApOVFV3TTFvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF5bGVXMmowS1lrMkE5T1lqVTZtdXEyYlQ0SlpTbDVjcWFlMjhlWGZHWlZVNXRPekEKcHcyOEx4RktEaTV2YnJJZUdvYXc0ZnZMeXpqd0FhalNSbGcvR2tBTUppbzRPN2psakRYL2FlWERCYmZkaWpaSQpTc3VRVWhPV1U1d1NKRCtlS1ZCSEZGcTBqT0dQR0VEcXFBWFRGZmRwN2hoMGRWa3RPSDQ0ZEw5cTdJdDZkRSs1CkxnOVhwTjE1U0tkdW1UeU5UVkhvdzl4YzY0ZUpCaUQ4UkkxWHFiczJyRDFwa1ozWWJEcGFDRVh3bzJvWDZvVloKLzlxQ0N6ZEJxTXlxNWYrNTVxM052eHB1QkUyZXpWcFd6K0N0WStGZy9LalFwVXQ2QlJjS3BsNUhhdWVLd2k5aApiRTFlYm1BTmNCUHFiQWpIc3FhU2NPaTVsZEpQYURJVEE1SkpKd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGUExLZG9KWUY2SE93Wlo2U0M1NmNEV0tOanZSTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQmFFanNJWFBqeG90Sk8vNG1UeFdCdnRRZmllU1lUWkxvaTY4M1lyUGhWbGhNcUMvQW9GOHJkCkhCQWkvYThtTDd5dkpCbWMrdDlwMjJjdks1YjBtTmZlVkNLM01zYXpPZ0UwWVd1OWNDVlV1dno4RE84UmVENDcKMlMxd3ljZkVIVkZacHJaSWkwMVZsVzlXL0ZHbEMzYmJIUVhkZytLa0E4QW9YN21XOEVwUGJqOStnYlBBSDlzWAozQUt5NmNoa0JyZWowanY4ZUsvd1F2NWUra3pIckpWOEZLY2lWZGY0SVQzN3c3RURSWTlhbG9zZ3lISXZnYUNMClJneVNtQnZHak5LRnY1Q1pVdkVCV1R6NE1jYTVUaWthMmRvV3A3SHdzQVVYeGZQTEtzV001NTFpbVNvUlNVNzcKMlhQTTRvdTNtSW85UFpacjJYalZNZTVYVlFBTloxK2YKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURURENDQWpTZ0F3SUJBZ0lRWEk2RXhkaGNENTFFV084RlRJaXprVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEF6V2hjTk1qWXhNVEl4TWpFMQpOVEF6V2pBbE1TTXdJUVlEVlFRRERCb3FMbU14TG1oMVltSnNaUzFuY25CakxtTnBiR2wxYlM1cGJ6Q0NBU0l3CkRRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFNY2dBajVKV0VNSDVOZlJWbWJjYWozY042cXYKSmVjaEZpQVdrcTBPUzBpWUpIYTBuazdadFAvaFBCU2RDZm1LenloaW1JdzRzWmtaOFdkVjdKMU1jUVdHSTVnVAptSUc1eWFaOU1xbm1XeG9pbk8yVWt3ZFllczBvVVNtRTZGUUYvc2FhOUFybXVYdjdJSmdYd1pGTVV1YjUrUUxoCk5mVmF0bWhLVzYvS2hlK3FnVzNZM1NJbC9KdU9oby9wM1JENGk1eEJXWlQrdk9Kc3FzUXpZN0xIVXFmOGNCRlkKNVdyemtkeDRSbitMVWxxS1lFM2tqdTU4YmZtK2E5OHprMFI4NWtreVQxMXFBMWpWNWNpRWpIZHBHL1FrdGV3bgo0MmYvTklnRkFWUE9GamdvUXQ0dzZjVzRYZ1dpZVhqVWxUbGVaaVlkRmJmU0wvd25xUU5iM3NtcE9vMENBd0VBCkFhT0JpRENCaFRBT0JnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0cKQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBd0h3WURWUjBqQkJnd0ZvQVU4c3AyZ2xnWG9jN0JsbnBJTG5wdwpOWW8yTzlFd0pRWURWUjBSQkI0d0hJSWFLaTVqTVM1b2RXSmliR1V0WjNKd1l5NWphV3hwZFcwdWFXOHdEUVlKCktvWklodmNOQVFFTEJRQURnZ0VCQUVoc0ZOYlUzTFZtN1puc3MzUEFLZjlyVFpIQzhFRHZ3K1JkM2V5RU1RaEkKZEZzaTFYMy9tS0NBeVFCQ0pPWUZKWHdpSkpZMFN6KzI2OUp1cm4rUmRPM1RpR2dBbzI5SlVTNUN6UkNjV2FZcQpoNStKR25XQk96elJpZm9SMmJpcFlmTi9YbkpNT2hnSHZEcC9uYXZydWMrZyt3WHYwTzR0SDhDK3VDWGNQMGU0CllUTnNWRm5sdFNkM0ZIU2hwM05NUmoyaHZ1aGNCMlNKdFJ4cXQxaXprZFBFRHpPWFlpRVlkTnFNdEhxWm1tamgKd00zRGZyMGR4UnRNWGo0d0tKS2UwckJjeVR1UWd4R2dhVjdtVjd5QU9KVGhZcmppSUQrQkRFVjBIT3J2RGQ2TwpvaXBTdEp6d0IzQ3FPdnRuMU9KU1AyMExKdWJNN3pxWld4RjVUSzZyblNjPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBeHlBQ1BrbFlRd2ZrMTlGV1p0eHFQZHczcXE4bDV5RVdJQmFTclE1TFNKZ2tkclNlClR0bTAvK0U4RkowSitZclBLR0tZakRpeG1SbnhaMVhzblV4eEJZWWptQk9ZZ2JuSnBuMHlxZVpiR2lLYzdaU1QKQjFoNnpTaFJLWVRvVkFYK3hwcjBDdWE1ZS9zZ21CZkJrVXhTNXZuNUF1RTE5VnEyYUVwYnI4cUY3NnFCYmRqZApJaVg4bTQ2R2orbmRFUGlMbkVGWmxQNjg0bXlxeEROanNzZFNwL3h3RVZqbGF2T1IzSGhHZjR0U1dvcGdUZVNPCjdueHQrYjVyM3pPVFJIem1TVEpQWFdvRFdOWGx5SVNNZDJrYjlDUzE3Q2ZqWi84MGlBVUJVODRXT0NoQzNqRHAKeGJoZUJhSjVlTlNWT1Y1bUpoMFZ0OUl2L0NlcEExdmV5YWs2alFJREFRQUJBb0lCQUFUSkVTUzhFSUh6NDUwSQpLK0ptODZxdTZ5dVA4QUpBK2s0bEhMdEo5NmN6K05SZGZOeDZRTzVSVkdkT2F0bnphdzBXYVlJZExxOTJQeVh6Cm02OGdFaXRHMFA0cm9tT2p1bVBrNkYzSzZtK1RXMkFlVFBaRk94WkpITUk1cm5ldWVUUCtyMVMvdkw5dEJwaUIKSWFiRFJjN0ZQU1hEa2M5bXNiR0o3L0FtbHRkdW43SWt6TWd5YlIxcHg1TDNlR1M5QVg1TzNYMkpKWGlsYXlJdQpuUGQyVDlIUEZjSHI2M3dLeFB6Y04xQTFuSENTZzFtalRHOVc1SUp4a2FuTC9kdnF3NDJlSDhEdmJ5MHdGeVI0CmtWUHdJUW9zWnNVZVJIU3lJMWFzWmV4d3JvWXRrU2FkQjZwNStrSzBDdWNMWmhxbGhhcXozTkZVRVdOT2RYaEgKeTVCZW1XRUNnWUVBMGViTlJQVytRcGIrMU42M1BoQjduUmJQdGU3dW9hZGc3QlF4T3FLTmRienB4Y3I5UlZrTApscEl2dkNubDBoQmlKM3JTM0FBNTFVWHQyNHdZREdwY3pTcU91QWRyS0hwekJVME4wZnNCWEJUMi90TFhMdFdFCksvOXl5MVRWVS9qa1ZpNzFaK2h6TGxSZ05QSzBlWTAraFRrVC94YTJNdGNoWEdCOHNNYmw2d1VDZ1lFQTh0dFMKb3ViTjZkU2hGb0lOMUI1VWxZK2dLSXA5ZnBOOFFoV2pETzZJK1ZmVDFTOHF6Qi9YNHFUeWgxYjFoeFltN3l0aQpvY0tsY2ZhYkVpSm0xcXlEVlZ3aHFWNUJKeWxHRGIxVzUwUEVacGFkT2dWNnRiZEgwK2E1Y3MvbVBDeTRreGlIClhpK1N3cTRmRDRXV3ZPZURJN0YxdmkwOHRKZFFuY2t3SmxnN2Qra0NnWUVBMFB0OGNDWkRrY1VJWHlTSFNOSGMKWVNEdkdQS1V3SG9IYzhUKzVxUWxONDRwS25iYUI0dUtrQlZvVlcxWmxmWWQ0N1RUNzVxQitpZXZsQ0U5YUU4VgpxbWV1eE9jTjk3VkNnNHFlTWV3NUJGY1RPODdyMDROZUh2Z3NjT2s3cEdsdjNhYlBTdThTanBRUFhXZ3Y2NzJHCis5bENZWDFaVmZEL0ZCdzB5VVNlY1lrQ2dZRUFuL05MN2ZiTjBDQTNLTGZubTdtT1JDTWdmUk1ackhBKyt0ZDkKV0ZzUzVBYXdna3hhaDY3QlpZajJJNlZtZU41aUxrd0kzamx3OWlwUjRCUEFYOHVuaEdUMTFyTTVmaTEwOGordQpLUXM5SThRM01hdkNNa1RRamdQOFNGNGRhYXlhdEdjSFlVVThCL1RlaUQ2WUZUcjE2R0JOQ0VDTEp2WXlKbm9ICnVIbU1VV0VDZ1lFQXJ0Vzd0eUgxb1d3dDI1ODVaRWNuWS9YWlBGVC94a1MvS3ZiNVZHeWszSnduYnh5V2ZheFgKUjdFL3FrR3VHdm1qaExaZ3ZWUWxOdS9GRE5UZ0ZJQnVnbGxVSi83SEw0SkVIZFBjSTZuSXROMzBRaDRFYjZvegpMQTB6UUdOT1VEK3QrNzFaTFlyelc4dThxUkdhQXZXN1libURvREhSNnhma1NSdFJmUmpQUWdRPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  skip-cnp-status-startup-clean: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: c1
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "11"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  # Default case
  routing-mode: "tunnel"
  tunnel-protocol: "vxlan"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-wireguard: "true"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-local-redirect-policy: "false"

  kube-proxy-replacement: "false"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  enable-host-port: "false"
  enable-external-ips: "false"
  enable-node-port: "false"
  enable-health-check-nodeport: "true"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  ipam-cilium-node-update-rate: "15s"
  cluster-pool-ipv4-cidr: "10.1.0.0/17"
  cluster-pool-ipv4-mask-size: "24"
  disable-cnp-status-updates: "true"
  cnp-node-status-gc-interval: "0s"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "true"
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"
  k8s-client-qps: "5"
  k8s-client-burst: "10"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-connect-timeout: "2"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"

  external-envoy-proxy: "false"
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: c1
    peer-service: "hubble-peer.kube-system.svc.cluster.local:443"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-hubble-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-hubble-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumendpoints
  - ciliumidentities
  verbs:
  - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumexternalworkloads/status
  - ciliumnodes
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumendpoints/status
  verbs:
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumexternalworkloads
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: kvmesh-metrics
    port: 9964
    protocol: TCP
    targetPort: kvmesh-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: NodePort
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
    nodePort: 32379
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-agent: "unconfined"
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: "unconfined"
        container.apparmor.security.beta.kubernetes.io/mount-cgroup: "unconfined"
        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: "unconfined"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        lifecycle:
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - CHOWN
              - KILL
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
              - DAC_OVERRIDE
              - FOWNER
              - SETGID
              - SETUID
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Unprivileged containers need to mount /proc/sys/net from the host
        # to have write access
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        # Unprivileged containers need to mount /proc/sys/kernel from the host
        # to have write access
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Unprivileged containers can't set mount propagation to bidirectional
          # in this case we will mount the bpf fs from an init container that
          # is privileged and set the mount propagation from host to container
          # in Cilium.
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - cilium
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      # Mount the bpf fs if it is not mounted. We will perform this task
      # from a privileged container because the mount propagation bidirectional
      # only works from privileged containers.
      - name: mount-bpf-fs
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        args:
        - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
        command:
        - /bin/bash
        - -c
        - --
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
            drop:
              - ALL
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        resources:
          requests:
            cpu: 100m
            memory: 100Mi # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
      - name: host-proc-sys-net
        hostPath:
          path: /proc/sys/net
          type: Directory
      - name: host-proc-sys-kernel
        hostPath:
          path: /proc/sys/kernel
          type: Directory
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              - key: ca.crt
                path: client-ca.crt
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.14.2@sha256:52f70250dea22e506959439a7c4ea31b10fe8375db62f5c27ab746e3a2af866d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      initContainers:
      - name: etcd-init
        image: "quay.io/coreos/etcd:v3.5.4@sha256:795d8660c48c439a7c3764c2330ed9222ab5db5bb524d8d0607cac76f7ba82a3"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
        - |
          rm -rf /var/run/etcd/*;
          /usr/local/bin/etcd --data-dir=/var/run/etcd --name=clustermesh-apiserver --listen-client-urls=http://127.0.0.1:2379 --advertise-client-urls=http://127.0.0.1:2379 --initial-cluster-token=clustermesh-apiserver --initial-cluster-state=new --auto-compaction-retention=1 &

          # The following key needs to be created before that the cilium agents
          # have the possibility of connecting to etcd.
          etcdctl put cilium/.has-cluster-config true

          etcdctl user add root --no-password;
          etcdctl user grant-role root root;
          etcdctl user add admin-c1 --no-password;
          etcdctl user grant-role admin-c1 root;
          etcdctl user add externalworkload --no-password;
          etcdctl role add externalworkload;
          etcdctl role grant-permission externalworkload --from-key read '';
          etcdctl role grant-permission externalworkload readwrite --prefix cilium/state/noderegister/v1/;
          etcdctl role grant-permission externalworkload readwrite --prefix cilium/.initlock/;
          etcdctl user grant-role externalworkload externalworkload;
          etcdctl user add remote --no-password;
          etcdctl role add remote;
          etcdctl role grant-permission remote --from-key read '';
          etcdctl user grant-role remote remote;
          etcdctl auth enable;
          exit
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        image: "quay.io/coreos/etcd:v3.5.4@sha256:795d8660c48c439a7c3764c2330ed9222ab5db5bb524d8d0607cac76f7ba82a3"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/local/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=clustermesh-apiserver
        - --auto-compaction-retention=1
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.14.2@sha256:0650beac6633a483261640b6539c9609f5a761f4ab4504fd1e6ffe7f2bb82e9a"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt
        - etcd.config=/var/lib/cilium/etcd-config.yaml
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: IDENTITY_ALLOCATION_MODE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: identity-allocation-mode
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        ports:
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir: {}
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "clustermesh-apiserver"
      serviceAccountName: "clustermesh-apiserver"
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: clustermesh-apiserver
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.14.2@sha256:a89030b31f333e8fb1c10d2473250399a1a537c27d022cd8becc1a65d1bef1d6"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            tcpSocket:
              port: grpc
          livenessProbe:
            tcpSocket:
              port: grpc
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          - name: tls
            mountPath: /var/lib/hubble-relay/tls
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Always
      priorityClassName: 
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      priorityClassName: 
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.12.0@sha256:1c876cfa1d5e35bc91e1025c9314f922041592a88b03313c22c1f97a5d2ba88f"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.12.0@sha256:8a79a1aad4fc9c2aa2b3e4379af0af872a89fcec9d99e117188190671c66fc2e"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
---
# Source: cilium/templates/cilium-secrets-namespace.yaml
# Only create the namespace if it's different from Ingress secret namespace or Ingress is not enabled.

# Only create the namespace if it's different from Ingress and Gateway API secret namespaces (if enabled).
