---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU9pQWZLeTZwdXJ1VDVNM21oZXZ1eUl3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN5T1ZvWERUSTNNRFl4TVRFNQpNamN5T1Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFubzczMUswMUp0eXVYZytxdFRyVU9wSjlCYStjU3VjSDYrS3k5aGxzZ1MwSTlSZkMKb1ozSDdqcEF6TzgyV0dMM1dMaFV3SkhHYVNLZGg1anBXSHVUTmdaV01hUjRtNnoyNGMvT2V1VmpUbnJpc2hwcwovd3dnWS9qbHJvaVptUkluOGprRTNhTGhBMHM2ZXlhOVo5alI0aERNcnVJb2g3aU9YSnZTd3JCb1pUeXpHWGhBCjI0Zkt2VTFKU0VaOUhTaEZYWDBDRFhDMXdTaHpFckFUN2JUTFlFbDdlZVBFQXdWaCswK1JIdUxTL2ExalcyQXEKMmVYZnlNZ2hZajYzRDZPMi9kWjBSZUNUYzB2TlYvc0VKYStEa3FQQ0ZVRXVITXM1blEvNDFLM2VvTDc5bWNOaAowTkJ0VmNoaDUreUgwRi81S3cvN3VHdFZFS0hyNk9TZU9ETkY3UUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGTm9iclFnUUNxUnJwYWxqUFhyWkw3blZiMGxsTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQXU1UnVNbTJHRVFtY0RsTnhBbEpxQVlqUHRpckNvREI0SjlVajhWTm1WZ3pSaVFTdFkzdGNxCis5cTJHTEFEZWVhUnVGWStDODBmZTkyeDJmZ05XcXV5RUpoRFZMS1lGNENSNU0yc1I4Yk95K3VJeFpiL3RrbU4KdnFTaTM0ZVdxQWNuMExhajgrQXVoa09oT3lFMlQvSy9FeVRyQ09hd2g1UVA5VEZjMW4rbzJJTDdiVy9kTHVRcAovWlg3VWhtWW1ub3NlU21nZEFaWjQrWGFsblIxTEZUalZ1KzYwanNOV1N5UFF4MDJEdzhFY3R4MEhYaEw4djFrCjQ4YU1WUVM2c2NrMVhHSklWQ2o2WWVOUVZhU1F3VnloMTlTbzhMckpuYlNJT000c29kZFltYk1oWWk2bHoxRHAKUkZFZm1ObHR3em9SRDIyRm5NZ1YxQjhibFpiVmZrMm8KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBbm83MzFLMDFKdHl1WGcrcXRUclVPcEo5QmErY1N1Y0g2K0t5OWhsc2dTMEk5UmZDCm9aM0g3anBBek84MldHTDNXTGhVd0pIR2FTS2RoNWpwV0h1VE5nWldNYVI0bTZ6MjRjL09ldVZqVG5yaXNocHMKL3d3Z1kvamxyb2labVJJbjhqa0UzYUxoQTBzNmV5YTlaOWpSNGhETXJ1SW9oN2lPWEp2U3dyQm9aVHl6R1hoQQoyNGZLdlUxSlNFWjlIU2hGWFgwQ0RYQzF3U2h6RXJBVDdiVExZRWw3ZWVQRUF3VmgrMCtSSHVMUy9hMWpXMkFxCjJlWGZ5TWdoWWo2M0Q2TzIvZFowUmVDVGMwdk5WL3NFSmErRGtxUENGVUV1SE1zNW5RLzQxSzNlb0w3OW1jTmgKME5CdFZjaGg1K3lIMEYvNUt3Lzd1R3RWRUtIcjZPU2VPRE5GN1FJREFRQUJBb0lCQUZ6aDFVNFJ0UHd4OURjSApxSEdIcDhFMEJPYnF5M3laUCt1dm5qUktDbVRWYzlUWGVWMWhaemduaWNSRE1TdXZ0Y09VSDVtN0MyYVZMNEM2ClU1OVFySmpPTjNuWEpndlQwNy9PRXQrdE5uSkh6RHFXL2xpZHl1K2xZeTdOdUdTUjNUS29zaS8vZFI2UDJBOUMKVDF2aENIb01hMHJiRXZFR2JPYlZKUzZGVm5KT28zUW5FdUY1SndEYmFFZFBMK3YzZ2p5Nnk4bG9sWnJmNWIxNwoxK2Y4UytTNkx3ZFFKMHJ0bU5DK1BOZkJtc3kxQ1VuZ2tkbGpSSzIvaE9yTmh5MlNXem1UdUhnYzhPbERrT2hSCkZnTGlWVWkxMUhPTk1hM2FGOFhYNElDREk1MnFpVWF3c3VVVTFpeEMwczNnYmo5USszYlM2aUt0aWZZdVRRTE0KcTF4SGEwVUNnWUVBeUwwL3RMbmNqL1pDczBmdXAzU0JiUWJxYW9zQWFjOG5MaWlPNm9Sai9ML0dxM3NUR0lZMAo0NFpINHVNYVByOEV2cHpCQ3lWbTRNejVrdVhoU1c4ZmQrVTVHbERDK0x0TWR3WTMyckVINzNYWmQ2aWZUNzNpCm9qRzhnNVN1KzZkUnovSkloNkJERlpVd2I5K1lnUHJ5ZjNhc0h3RHFFOTR1UlJBZ01lVElycE1DZ1lFQXlqVVoKL2t0czB6dXhUNDlmbng1S0xwY1MvZWZPZmZLRDJ3K0FSbGlTQkQxSmh3QnFEaHd4U1BnUktLNnBLVTNsa2ppSgpxdFRQUGJZbjZBdHR5Umd1V3JkbUhqNmQ1cVJQUXUzUDh3eS9lZlBrcCtQdm12WVhtU3hrd24rekc2WWVpSnQ3CjRjbEd3RTg3MFJZNUp5U1pGa3ZGQzVQQ09jT00rZlY1NUNyb2lYOENnWUFiaVVwWjRqME5Tbnl2MXlnM3RGV2sKdlJRZTlWNWpKVlY4a1hlNVY5dlhhZjg0dXJOTjQrc1JZdlF0ZlhXMk1jSFcyKzNuTjRRN1JpTGVNY2FMcWtDbwowN3JYajBpUGtqSFZDZmRUZW9GYUtkSmhCYktFMzhsYzhuR25veGUxMGFmNVhJVHloZHR0OUg4bWVZZVQrZGlWCi81TncxVkZHMUcySWI4UGExRVZySFFLQmdRREpYSzRBNVQxKzhPKzJpZEV3VkdxTkVOYlIwRGg2aGJtMnVTNEYKWDRndy9wTXRCRVdZdll4NjNNWEJuSVZLWTQ4YzJINkhoeHJGbXBNTTZleXZHQXg1UEM5T0tRNzNNbUxZQkpoVApzanN2aDZnSlpOd2psYk9VVG5nY2xDeFplVWpvd3VWUHlDOVRyTk9sZUpyN2x0OTRLNFlTN0ZhN1RUZ2pac2UyClp1Qmdvd0tCZ1FDUlVndTgrWWoxMWZ2WXNxY3RiV1NjWHJKTXVVNWFWeEdpb3I3NHdWN2xrRkNkQWFWOWtmT0oKNHNWbU9zWk9keStyZGFjcmZ5cFVuckVYTWxoZllnT0pGampxbTAydHA1engvV1JHRGxIT2dvWmJhR1JOem5jMAp6TGlvTGxtN0d0Z0xDcnhqbjBMTk9BbndLT0lQTGZDblJzNVJRK1NOa0tLenQ3dGE5RlRNeEE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU9pQWZLeTZwdXJ1VDVNM21oZXZ1eUl3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN5T1ZvWERUSTNNRFl4TVRFNQpNamN5T1Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFubzczMUswMUp0eXVYZytxdFRyVU9wSjlCYStjU3VjSDYrS3k5aGxzZ1MwSTlSZkMKb1ozSDdqcEF6TzgyV0dMM1dMaFV3SkhHYVNLZGg1anBXSHVUTmdaV01hUjRtNnoyNGMvT2V1VmpUbnJpc2hwcwovd3dnWS9qbHJvaVptUkluOGprRTNhTGhBMHM2ZXlhOVo5alI0aERNcnVJb2g3aU9YSnZTd3JCb1pUeXpHWGhBCjI0Zkt2VTFKU0VaOUhTaEZYWDBDRFhDMXdTaHpFckFUN2JUTFlFbDdlZVBFQXdWaCswK1JIdUxTL2ExalcyQXEKMmVYZnlNZ2hZajYzRDZPMi9kWjBSZUNUYzB2TlYvc0VKYStEa3FQQ0ZVRXVITXM1blEvNDFLM2VvTDc5bWNOaAowTkJ0VmNoaDUreUgwRi81S3cvN3VHdFZFS0hyNk9TZU9ETkY3UUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGTm9iclFnUUNxUnJwYWxqUFhyWkw3blZiMGxsTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQXU1UnVNbTJHRVFtY0RsTnhBbEpxQVlqUHRpckNvREI0SjlVajhWTm1WZ3pSaVFTdFkzdGNxCis5cTJHTEFEZWVhUnVGWStDODBmZTkyeDJmZ05XcXV5RUpoRFZMS1lGNENSNU0yc1I4Yk95K3VJeFpiL3RrbU4KdnFTaTM0ZVdxQWNuMExhajgrQXVoa09oT3lFMlQvSy9FeVRyQ09hd2g1UVA5VEZjMW4rbzJJTDdiVy9kTHVRcAovWlg3VWhtWW1ub3NlU21nZEFaWjQrWGFsblIxTEZUalZ1KzYwanNOV1N5UFF4MDJEdzhFY3R4MEhYaEw4djFrCjQ4YU1WUVM2c2NrMVhHSklWQ2o2WWVOUVZhU1F3VnloMTlTbzhMckpuYlNJT000c29kZFltYk1oWWk2bHoxRHAKUkZFZm1ObHR3em9SRDIyRm5NZ1YxQjhibFpiVmZrMm8KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKekNDQWcrZ0F3SUJBZ0lRV1JlK3FPWDlPc2tNdXk0UDYxdkVOREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOekk1V2hjTk1qY3dOakV4TVRreQpOekk1V2pBVE1SRXdEd1lEVlFRREV3aGhaRzFwYmkxak9EQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQCkFEQ0NBUW9DZ2dFQkFNMGlCQnluN0x2MVV3aVI2Y21KdFh3OU0wWmJod0c5bkpSbm1BUjFIZ2d2WFZmdkxWM08KQTZBR3h2VmFJbVRuSVY3cVlGWXlkWTNUT0NYaHBxUVNuTVRWK1FBYkQzaThHQ1dVOW5GNmJkb1AvZklkU0RLRQpLM3llZTdWbmU4UTE3NlVoRmtoa2kzdUJVZGQ5SUNXSHgwQ1JwVG1lUUlYMVFhZkVmSEt5aW9ibXU1b24vVGRqCk1oSWY1SW9kdUNaUUlIRlFWNnQ1VW9Dd3IySW1MakNGVnB6TEt6bk8xQ05hbURxeVhtcnM3cVo0cFIzTzNOU0UKTkVpU014ZXVqUFhpdjJMeW1ac0czR1poUHVNRERQeGRmYmhMSjBKYUhab0FwZEE3cE42THhSd2Y3Z2MxRU1KVApsOUl3RHZ4bkhCdGxTcDJOZGJGOW5OSVJERUJNYzluY0l1TUNBd0VBQWFOMk1IUXdEZ1lEVlIwUEFRSC9CQVFECkFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUEKTUI4R0ExVWRJd1FZTUJhQUZOb2JyUWdRQ3FScnBhbGpQWHJaTDduVmIwbGxNQlFHQTFVZEVRUU5NQXVDQ1d4dgpZMkZzYUc5emREQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFZZXZNSjh6MnNwM25Nck1RNlc4NXFYeVhtamRHCk1pV1pYaVZXaUdFU2hhbm9jbUZzakRoZi9TUURubXd2UkhWUkRQaStLa2dITzVadllKdytxM1BjdlFscTNURVcKMWsrc0JZOTRyVFBJQjVadUxIN3R3eWErRG8rU3JVSXVmMnNueHAya2RJUlNSMm1LOVMxWmgyQkRVNjN5QXJJTQpCUDUwbU9GQkdvM3ZDaWRONlAxY1lTY01JMmpCSi9iOUF0VDRkV0lOcFZYOEpZYkVTcS9nekY0cHREWkhRQXc1ClF0Zk5MVDA1LzU5M1RBRDFTL0dJS0NJMjJ4K1J3NndoSHFLZVFZZHRCeHoyMlI1dklNMmJwRTRCZHdrRTR4TmwKQmFQMXdER0pwYnJxVmZYNWFwVG9ncVBpSGd6ckxrQ3RYcHhmUzFBcW1RS3RXa2FCSUlUQi9hR2ZRdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBelNJRUhLZnN1L1ZUQ0pIcHlZbTFmRDB6Umx1SEFiMmNsR2VZQkhVZUNDOWRWKzh0ClhjNERvQWJHOVZvaVpPY2hYdXBnVmpKMWpkTTRKZUdtcEJLY3hOWDVBQnNQZUx3WUpaVDJjWHB0MmcvOThoMUkKTW9RcmZKNTd0V2Q3eERYdnBTRVdTR1NMZTRGUjEzMGdKWWZIUUpHbE9aNUFoZlZCcDhSOGNyS0todWE3bWlmOQpOMk15RWgva2loMjRKbEFnY1ZCWHEzbFNnTEN2WWlZdU1JVlduTXNyT2M3VUkxcVlPckplYXV6dXBuaWxIYzdjCjFJUTBTSkl6RjY2TTllSy9ZdktabXdiY1ptRSs0d01NL0YxOXVFc25RbG9kbWdDbDBEdWszb3ZGSEIvdUJ6VVEKd2xPWDBqQU8vR2NjRzJWS25ZMTFzWDJjMGhFTVFFeHoyZHdpNHdJREFRQUJBb0lCQUJNR09wZGx3NERUQ2JaYgp3ZkRkQXFYWkR5NVJRcjRZbGJMMXdKVjVQeVhITHNMKy9aZ2JpUjZJUWw5eTBvbkZIY1V0dTIyREZIL292T1pXCmZSdnVWZmV6V0hwNENBRk1nSGpMemVkTVVXL04xK0ZpY2RXdGlGTHdaOHkxSWpkYVFUVnhVaDI0cFc3NDJWeEEKMElCcWpVSWh2ODhPTERIQVF5eUovbmlzc2tnOFoxWUJHUG10ZzVwRUdFOVJwR3cvN29ZMW5XTjJENTZrRENEOQpWTG9KNXhxa25aNnd1OEE5ZXJCN2Z3a2s1cFdmRVZUZG9RWldHSXFsU1NPUm9Nc0pXSE9MZTFLMTZMbnRPaG50Ck1xd3FycWVMeVlRNXNKOUgvUkM4ZU1sbWxGT1FvZmhwT1lXRWFtTG9pMHhmV0sxaCtwallGSGZ6Zm5BTU9ESzYKZE1KNjVNRUNnWUVBM1k5V0YzamtSaTMzY3d5S0F3RDVoeklYd0lzM3dPc0VOTTI3dXdSWXZLY1FqdTlOUTlkOQpTdWVtWFhmQVZxdlY4RGJxOElmOURjK1RZcnRNMDU3NUtuTFp3ZEJNUGlUdE1NeUtHRnRtd3k1QVVyRFZCNEc4CnBTV0gvNE5SZEE4M21vdktmRHczNGZvWEpkeHcvTTR2bWR6eGo3OEs0bjUzc1M3ZktVZ2VzZk1DZ1lFQTdRVDkKUFNhWCtITzJjZG9vSlhDaDRBQktDMm5uVGRQYkI3Z24xRk5uR1U0YlRoQWRONkwvelBKcTllTkJmd1hGQ1NTWQpzL0hzdEdJQmJ6SzhXVjA1ZGhHMS9yT3VGeVQ3bDlwYkhDbkxPaWFKMFIwNFpORVBBSTFTZElEb3M0VFNoeWtRCnMyaDFneWxEaHNlOG9La3JsU3Y3OVhJU0Z4ZVgvMkIvd3RKekYxRUNnWUIzRWpKdGVPNE5mV1N3TXZ2MDgxQW4KUlZlWWhmbFh0N1pSL29NMjFmWXVwUVowR3MyR2VVZi91cEVoU0Z0WStRNklBNnV0eXhmSGxWZ2JScGZhWDJSLwpXS3dJeWo0L1k2OEplOU4zbForYm83Nno4Zzc2OHRHRVc3QkVOTG5ReXVEU01QQ0laZ0NPZE01OTdZUFhpYVB4Clo5bDJySEJZR3ltT1VxZGlVejBUMndLQmdDM000UUtJQ3FXLzltbFp0cGhGZzRJOWpCRllqWkhFZG5hdlowTG8KT3V2dzQrWFp4MHVRKzgwbXF2U0l6WWMySGpUK0ZXUHdROFUzaXY5cDFtdU9VQ1E0bCtwMzNoUXEyVk1tcHFSeQpqd3JWbDV3SkFYUzUwU1JTS3JUSWxDN2NZN0lxaFVlbHo4OWdrZVBoaE5tbTF2MGtXck83THpPM0kyLzl2Ykp2CjZEMkJBb0dBRGZOZjdXWFc2eGNOLzU4YXBJTHF4aTEzQ0NtV1JCdWFQM3Y5Vk5rT0JOSis4cldFWmlQeW52QlUKR2ZuTVVTUEZJN0U0NVBHem9oYm1ScElJMkV0VHp0Q3JQc2UvN0JmR240V1gvYjRKbEJzZzQ5ZitydzBKeXNQMApNZFZCV2ZsUHpCVU9waHh3eUxOVUtudFpiWGF0d0xkckpCQytsdXJOOVA5Z2I3MU5JbmM9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU9pQWZLeTZwdXJ1VDVNM21oZXZ1eUl3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN5T1ZvWERUSTNNRFl4TVRFNQpNamN5T1Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFubzczMUswMUp0eXVYZytxdFRyVU9wSjlCYStjU3VjSDYrS3k5aGxzZ1MwSTlSZkMKb1ozSDdqcEF6TzgyV0dMM1dMaFV3SkhHYVNLZGg1anBXSHVUTmdaV01hUjRtNnoyNGMvT2V1VmpUbnJpc2hwcwovd3dnWS9qbHJvaVptUkluOGprRTNhTGhBMHM2ZXlhOVo5alI0aERNcnVJb2g3aU9YSnZTd3JCb1pUeXpHWGhBCjI0Zkt2VTFKU0VaOUhTaEZYWDBDRFhDMXdTaHpFckFUN2JUTFlFbDdlZVBFQXdWaCswK1JIdUxTL2ExalcyQXEKMmVYZnlNZ2hZajYzRDZPMi9kWjBSZUNUYzB2TlYvc0VKYStEa3FQQ0ZVRXVITXM1blEvNDFLM2VvTDc5bWNOaAowTkJ0VmNoaDUreUgwRi81S3cvN3VHdFZFS0hyNk9TZU9ETkY3UUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGTm9iclFnUUNxUnJwYWxqUFhyWkw3blZiMGxsTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQXU1UnVNbTJHRVFtY0RsTnhBbEpxQVlqUHRpckNvREI0SjlVajhWTm1WZ3pSaVFTdFkzdGNxCis5cTJHTEFEZWVhUnVGWStDODBmZTkyeDJmZ05XcXV5RUpoRFZMS1lGNENSNU0yc1I4Yk95K3VJeFpiL3RrbU4KdnFTaTM0ZVdxQWNuMExhajgrQXVoa09oT3lFMlQvSy9FeVRyQ09hd2g1UVA5VEZjMW4rbzJJTDdiVy9kTHVRcAovWlg3VWhtWW1ub3NlU21nZEFaWjQrWGFsblIxTEZUalZ1KzYwanNOV1N5UFF4MDJEdzhFY3R4MEhYaEw4djFrCjQ4YU1WUVM2c2NrMVhHSklWQ2o2WWVOUVZhU1F3VnloMTlTbzhMckpuYlNJT000c29kZFltYk1oWWk2bHoxRHAKUkZFZm1ObHR3em9SRDIyRm5NZ1YxQjhibFpiVmZrMm8KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lSQU1aNDNGQktUaCtmWi9tU3g4NlNxZjR3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN5T1ZvWERUSTNNRFl4TVRFNQpNamN5T1Zvd0VURVBNQTBHQTFVRUF4TUdjbVZ0YjNSbE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBCk1JSUJDZ0tDQVFFQXhxSjN6ZnR1UjRMVThPcUxlc3lXdEpzTCtVZTR2SCtWTzVicGVvLy8rYkd2ZSs5aGtveUQKYTZ6dzg4ZWhLUWVYQlMyaHFhWTFnWEIxZmpQVXRBdXBmeDZLazBjVnllYVMzaER5UEFwWjY5Ukc2WFRuck1EWQpFR1RiVDdkNDRtdjJEeHMrMUlFQytaY2hXcVN0WkZYZDl2N2NrK3YySm5walpCc3FZMldrc3drTWpRS3hVSW5oClU1M3F1T0JYNjErU2YzTUZSSk5tUXNHN2puMGxzNGg1blNvUjZ5SHNyS3NUZ3RqVzdWalkwOXFOYTZNd2lWU3MKM3ZHMWhFRTNpOFEwckxGTklmT2N5dDVqcWdpaHBGaXVKWVVNSDIxQVZxTkUzekZwcjZpWURJWVlmNFBocjMzcgp4NjBKQjI2ZzJoWlZEWHpVL3J2T3pic0c4N2lFOEkxOHN3SURBUUFCbzJBd1hqQU9CZ05WSFE4QkFmOEVCQU1DCkJhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXcKSHdZRFZSMGpCQmd3Rm9BVTJodXRDQkFLcEd1bHFXTTlldGt2dWRWdlNXVXdEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUlGbnRveFBvS29McmZ6T2hRSXVLZGlMVk1sK3JmTmlBeEJNaGZBb0FGUSt0Qlh2NllScENlSmlhUWc4CmRyTDNLQUNRSnlFSFpPemQzalNISUtsQ01DNUVnbGVmZStSK3l5V2E1cFZwUkNQOWxjRGlMRlRuVkhMcEVSWFQKZEM1b0Zncm9lc1lreHVvL2VhT1FvYkdtWFRYSWx2Q0V1bDYwQ2tHNzZUNEFzanp6dlE5aEhQUzZwcjgxK243OQpCc3VXQUR1VzNyaURoYkxOMndydjlLNG02dHFaeTFhRUY1Y3VqYTVjWlNJWkZRU1FmdUpTdjdzcmZoM1FaZFZWCmRFNHAvTW9wYWkzQWhnUjRPU0FvamVRdWFkdmlrYjJ5cXFqL1ozNVdZb2lkVC9mUUsrRUZ0Q1BUNU9JN2p4MWoKQkJPNGlVL1cvZWVVQnFnS00weUpJYzYxWXg0PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeHFKM3pmdHVSNExVOE9xTGVzeVd0SnNMK1VlNHZIK1ZPNWJwZW8vLytiR3ZlKzloCmtveURhNnp3ODhlaEtRZVhCUzJocWFZMWdYQjFmalBVdEF1cGZ4NktrMGNWeWVhUzNoRHlQQXBaNjlSRzZYVG4Kck1EWUVHVGJUN2Q0NG12MkR4cysxSUVDK1pjaFdxU3RaRlhkOXY3Y2srdjJKbnBqWkJzcVkyV2tzd2tNalFLeApVSW5oVTUzcXVPQlg2MStTZjNNRlJKTm1Rc0c3am4wbHM0aDVuU29SNnlIc3JLc1RndGpXN1ZqWTA5cU5hNk13CmlWU3MzdkcxaEVFM2k4UTByTEZOSWZPY3l0NWpxZ2locEZpdUpZVU1IMjFBVnFORTN6RnByNmlZRElZWWY0UGgKcjMzcng2MEpCMjZnMmhaVkRYelUvcnZPemJzRzg3aUU4STE4c3dJREFRQUJBb0lCQUJtblFmSElWeVhGTDlzdApiM1ljbGhvZExCNjF0SllqcEJKZUd5bEpEN1lmekpvbEFHVDg0THczU2FjeVVRNExmT1dlVHhLcDlKOFM5eG1sCmVBTUl2b3M4Vm9sTzFQR09aY2xvUnVDYU5hTFBkNWtQRUJ5dml6Z1N6b0F0SWQrY01kc2htYXU0UGJvZVdxQnEKUkRxQkhIbVowTU1KNW5CeHZnUmZ2Y200aHR6WVJCZHRVeFc3WGc4aVQxS0NGM2lzR0ZVQnlBQ0FHbDl1ZVJyUwoyS0d0L29zVVg1TVA1SU91RWhHR2x0akVUUGdKSFRFVk1UdEFxTDlNZE81ZUd1SjAwSVRQU2Y3RWxoVlhrekFUCkFIQU5PYUtUOUFDeDVSUHdnQXFRaUlwRXRPcVloaG8xbmRkcnJhcEgxL2wrM04vWDY0QVA3MVdPTlliYmZFZjEKMTExYk1BRUNnWUVBNGhScVJQYnlUMWdmSHdXQXQzTzlEZzZtTUV5RTZ0R0V4Y0JoZDBneEE0eEVGN2tHaGNEKwpCN3hHMmVTU3hiZ2V6cTd2cHlvcVZLcVdxYXZLWllEd1Nvcy9YQXJHUEx1d1ZuVlYvMmYzb1BDRlBrNWtnOEtMCnFRdXN1c09nV0xwMnJDdnhMSXErRDBBMWZMdGJqb1p3U3hiQXpHbXFReHh2aTFlNy9NdFJKRE1DZ1lFQTRPdzIKV2Q0OGVmTzl3T2lRTTcyeWRPdmxtbGdkSjd4MnhoazljN29GcTRJTTJvUG9YQ3FDU1Q5S21PRTg4c3V6WERERgoyeVNOYmZ1VUJiWURYV1hRNjhaNHdNR1FiejZ0RVZSek9TRlpmK2Vrb0MrMDE0Q1E5SWo1czI5QzAraWorQm1oCmQwbzFUWmJKUTZxMzVsUDh6YmIrV2JlQWc4dmhhQ1hYeGYzMXhZRUNnWUVBeFVQSzlpSURpL2Y0TDdrOWR0VW0KUVAzSFJKMS8zT1MwVlZobnN3enF0NDNNWEdhMXFqK2JhR1IvN2QvanNXSFdmOEZrbXhmUGw5REJaWXJnTDNFeQpPZGtHaitsV3orZDFGZnVMN2k5cGdxUmJudUlJRW0vT0xOSmpCUk5zOWY2OVRiMkowck84NHRIRDJmSWhFVnQ4CjRBZ2Fja0pBcmc1QnhmUG5zOHcwSU1FQ2dZRUFySCs4ZDFQZm9jL3pXWDJEQ291VHorUVRKVG9xc2d6eU1wK3MKNTVKbFF0SHN0Ykd3aE83OUdOdjNoQ1JLTUJOVnJZQ2lYWjA4OG5xZFhYdm9QTHNYYlp1N2hHbHZNa0lwVFQ4dApWMFZpZEp2ZFFCVVdacWh0ZzMyQnM4SEN5TzZFd29RMXQxMHNZQ01pbkVqVDNVdlFlSnk5bVdVSXBRdTZCYnZ3CkxpTEZXUUVDZ1lCRlZNdVZFa2lzS05jZE9VZ0p6Q01zMFRQSS8xUTFpK2xRWE1DT25CSlBNZDZ1VEEvU0VxZWgKcHBoVFRNdnhVbkVmV3hORTk1bHI0QWRIeVByU1dCNnVLYTN1V0RXK0lBbTg1ZElPeExuWW9pOTdWSE02OW5lZApUUjk2YmVhd2lFZkxDQlNyS0FUR040MUNqcTNLa0RBMWNReTBJeVFUSTByUjVtbG4vOVpKc0E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU9pQWZLeTZwdXJ1VDVNM21oZXZ1eUl3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN5T1ZvWERUSTNNRFl4TVRFNQpNamN5T1Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFubzczMUswMUp0eXVYZytxdFRyVU9wSjlCYStjU3VjSDYrS3k5aGxzZ1MwSTlSZkMKb1ozSDdqcEF6TzgyV0dMM1dMaFV3SkhHYVNLZGg1anBXSHVUTmdaV01hUjRtNnoyNGMvT2V1VmpUbnJpc2hwcwovd3dnWS9qbHJvaVptUkluOGprRTNhTGhBMHM2ZXlhOVo5alI0aERNcnVJb2g3aU9YSnZTd3JCb1pUeXpHWGhBCjI0Zkt2VTFKU0VaOUhTaEZYWDBDRFhDMXdTaHpFckFUN2JUTFlFbDdlZVBFQXdWaCswK1JIdUxTL2ExalcyQXEKMmVYZnlNZ2hZajYzRDZPMi9kWjBSZUNUYzB2TlYvc0VKYStEa3FQQ0ZVRXVITXM1blEvNDFLM2VvTDc5bWNOaAowTkJ0VmNoaDUreUgwRi81S3cvN3VHdFZFS0hyNk9TZU9ETkY3UUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGTm9iclFnUUNxUnJwYWxqUFhyWkw3blZiMGxsTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQXU1UnVNbTJHRVFtY0RsTnhBbEpxQVlqUHRpckNvREI0SjlVajhWTm1WZ3pSaVFTdFkzdGNxCis5cTJHTEFEZWVhUnVGWStDODBmZTkyeDJmZ05XcXV5RUpoRFZMS1lGNENSNU0yc1I4Yk95K3VJeFpiL3RrbU4KdnFTaTM0ZVdxQWNuMExhajgrQXVoa09oT3lFMlQvSy9FeVRyQ09hd2g1UVA5VEZjMW4rbzJJTDdiVy9kTHVRcAovWlg3VWhtWW1ub3NlU21nZEFaWjQrWGFsblIxTEZUalZ1KzYwanNOV1N5UFF4MDJEdzhFY3R4MEhYaEw4djFrCjQ4YU1WUVM2c2NrMVhHSklWQ2o2WWVOUVZhU1F3VnloMTlTbzhMckpuYlNJT000c29kZFltYk1oWWk2bHoxRHAKUkZFZm1ObHR3em9SRDIyRm5NZ1YxQjhibFpiVmZrMm8KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURwakNDQW82Z0F3SUJBZ0lQZDlZTVFRRGNDa1pucm93RHYxNHVNQTBHQ1NxR1NJYjNEUUVCQ3dVQU1CUXgKRWpBUUJnTlZCQU1UQ1VOcGJHbDFiU0JEUVRBZUZ3MHlOREEyTVRFeE9USTNNamxhRncweU56QTJNVEV4T1RJMwpNamxhTUNveEtEQW1CZ05WQkFNVEgyTnNkWE4wWlhKdFpYTm9MV0Z3YVhObGNuWmxjaTVqYVd4cGRXMHVhVzh3CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURSRE04UTU2Wkh3eUtGYUxicUc3YmUKUWZqN1NmVE1FN084NzBSaW9nN0x4MStlQVdkMlB0NUdSeVFHWGVtZENKZHdtQ2JPTlJCRTg5R0JkaEFidTRNYgpyb1RYNUFkM2pYTksvK2xwNldIUTJHUHlrbytnY1h2ZkFVUnVsbkp0bW56ZlBBcGNpdERMRGp4bGNnZTdDQnRjCjZsZlZrbGl2a1RBVDRuTHV0OHQydStQVnBZbUdLd0oyOWVkeDVtNVJVZXIxa2JtWUx3ZmtBcmRSbnF5bGlXVlYKQzNZcVNIVWVBdllrM1lSSE9OZGpnU0pkbGRneHA4MkxNRTZaK0FDT3dKb3JPSTh2SzdLeFFLaUdGUHhMUnNuYwpHQ1RrRFE5eEhpZXdQVkNQZE1Ud2JQVUdqTmswaER3cm5Pa0syNGRncWdaSkFQalRvUGJUa0VKNkNhWWZLblgzCkFnTUJBQUdqZ2Q0d2dkc3dEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUIKQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZEl3UVlNQmFBRk5vYnJRZ1FDcVJycGFsagpQWHJaTDduVmIwbGxNSHNHQTFVZEVRUjBNSEtDSDJOc2RYTjBaWEp0WlhOb0xXRndhWE5sY25abGNpNWphV3hwCmRXMHVhVytDRUNvdWJXVnphQzVqYVd4cGRXMHVhVytDSldOc2RYTjBaWEp0WlhOb0xXRndhWE5sY25abGNpNXIKZFdKbExYTjVjM1JsYlM1emRtT0hCSDhBQUFHSEVBQUFBQUFBQUFBQUFBQUFBQUFBQUFFd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBQWFLWEhBQ3U1bGZ5TWNDSXVjcW1ISnBTNndpQzRqSXVlNXR1dUx4VDA1MnV5aDBTZExXCjQ2dUtXa1BHeWFIM0lYaVQxZk83WEJKdHljTnZpMEs2ZFhTVkwyT3kreHozMElyRERFckZvS1ZUT05lSi9IY1kKMVFOZGU0bE5vWHEzVm41eVN5UkVlVUhzNFNtV05tWWJER0t6Y3dzK2tqVmFsL3l2WHRvdktTc0F6Y0hWTytNKwpJdmkxYUZEdlRLc2NHNm1WY1Z4a2d2bXJFd0swY1RlQk1RUmJPNDhEUDE4dzBoSFpDZEcwYi9rVlFaVXQ5bmlECjBWMkNSMEYzN3J0UExMVEorR1RBMUl1Q1BleU5wV0tZdDBVWVFVV0ZST0Z2em5veFJhQWxHN3ZJSFZLZEozZ3AKV29IcFljblhERldnd2VSZ1dlWG9DY2ZhSFZBdXZGbDlCaVU9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMFF6UEVPZW1SOE1paFdpMjZodTIza0g0KzBuMHpCT3p2TzlFWXFJT3k4ZGZuZ0ZuCmRqN2VSa2NrQmwzcG5RaVhjSmdtempVUVJQUFJnWFlRRzd1REc2NkUxK1FIZDQxelN2L3BhZWxoME5oajhwS1AKb0hGNzN3RkVicFp5YlpwODN6d0tYSXJReXc0OFpYSUh1d2diWE9wWDFaSllyNUV3RStKeTdyZkxkcnZqMWFXSgpoaXNDZHZYbmNlWnVVVkhxOVpHNW1DOEg1QUszVVo2c3BZbGxWUXQyS2toMUhnTDJKTjJFUnpqWFk0RWlYWlhZCk1hZk5pekJPbWZnQWpzQ2FLemlQTHl1eXNVQ29oaFQ4UzBiSjNCZ2s1QTBQY1I0bnNEMVFqM1RFOEd6MUJveloKTklROEs1enBDdHVIWUtvR1NRRDQwNkQyMDVCQ2VnbW1IeXAxOXdJREFRQUJBb0lCQVFDQnZTSlJTb0x1N0pMagpHdjdTUWdyMjJ4akwwN1ZDWmtQWlVPRXZHWVozUDYvKzNyNDRLNEpGT1dlSk1BV0pPTWpMenhIZVRoNWZ2TFhjClU4cGhlN2s5bDh6SU03UFNwWTNWRVFmcWZEWUJxQm8zZEhBQTBnMWZkR2prL1NmZEQ5REp0bmh6d0k4ZVJpS0QKandadk0vUFBjWHk3aGt6V0FSUkdjdmFEWXJ1NlhuZ3pHSUpBQU1tSDNMSzE3QTA1TC8vUUZuNjJNM1lYeENsbQpiNnhkQm02MFh1REUzeVJjUGVQeGRiZ2IvcWgwMG1UU1M3ZWs1M3hHK3l4TFNMRUlWQkVzVlJ0R2J3Y3ZLbW1ZClRNV0orSVBsTEd2Q3pQUmVqdFdDY2RDWmtmdE1NcnpxSVFoLzdSUmtiakpxbGFOMW9DWnBzMlF5SXdjWXBsQkMKa3FVM0ZoREpBb0dCQU9ONmFuMy9weU1VOVp1cGNtdmJyU2RYejQrUHFlR2dNenVEdVdJOEU2bE50Yko5ZHZjTgppalh5Tnh4RjNDY29NL3VBZnhCc1cwNmQ1dmg2MFhqdS9INkM2WXFpY2h6M3p4bUY1K05NdDA4V1pQa0tHbjJICnNYNHhyRVZFQ1NVM0JlRVl4cENIME10RDdrRVg3dyszdlZBNnFZZ1M4dlg1dnhabVA1VUI1TEMxQW9HQkFPdEMKNHd1RnNMdk1WUSsyNmJvdTBJNzR5Y0dTYmRqTHI1cGFJbE5xRnpGR3cyZ2ZaWTlKOUVJK2o0TFRoNllycjhoYQpkVExVVjBVcHVkUkQ0NmNvVEEwYVhNRUVVdFJyTVFvTlhDamVwaWJhM3dxbUNSdXE1MlB1STl3c3JzSDA2MkVRCldTOHIwYnVIN1NheDBzNWNCUHk5WG9KbDRzakE2S01jc0pWWHI3TjdBb0dCQUkvS0I1cVJpVUtoc3dhc08wbDIKV0tOdjNDR3crLzlFMWwyZVRBYU9WeGREcWNDamtobGtFNk01OGlBTEFMZzNyM1FncXpEa2JXcnFZTjljTXlDdwpZQ1pQOWZQTjd6ZmtaS0tMaENLbmtZK0tabFVOVCtWZGFwS01MNHF4RU43WFF2NGdQUk9LNWk0MlNGb1pHT0hrCmtPUXYwSTNVL0lNRFZRaUJwVnM1RVNlcEFvR0JBTEVRZFd1ZG9rZWw0VHRqa29RRGFnckJLckJhOGZ2aVNYY2wKY1lKUWJjWXptU3lMdk5kY2RNOUs0SjQ1Y0hYYm1ZQjB2SktXQ0Z6UXE4RWJtNEthcktxTDlkVjcySTl4WWNaTQpDZG5rd1M2ck9vVjhNNHkwVTFUOXpkV1BkN1FaRHZMTjZDRzluQ3ZGZ1BMSGtYNm8rVVB6anVjYm9kVXdnNmNJCkY4cys1TWx6QW9HQWZIb2IrVWd6ODlxMTduYUQ1ZmJIQzEvSWVHWWltY0hUNWNNMFhzUVFWeVdyaUxPaVRST2wKRFRVOFlXTWFUOU5MbkhMb1NsMTh0eUFDQVBVdGtqcVVLaUVuRjVHKzdYcHJFb2libFo0VlBCaDBPbmU0Z3RyVApEc1pjQ0dEUHZCWU9DQ1J5VUJTVzY3R2x2QWxEc3g5SHlZL2NwRDducGt5dkJOOCt3b1NFN3lnPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU9pQWZLeTZwdXJ1VDVNM21oZXZ1eUl3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN5T1ZvWERUSTNNRFl4TVRFNQpNamN5T1Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFubzczMUswMUp0eXVYZytxdFRyVU9wSjlCYStjU3VjSDYrS3k5aGxzZ1MwSTlSZkMKb1ozSDdqcEF6TzgyV0dMM1dMaFV3SkhHYVNLZGg1anBXSHVUTmdaV01hUjRtNnoyNGMvT2V1VmpUbnJpc2hwcwovd3dnWS9qbHJvaVptUkluOGprRTNhTGhBMHM2ZXlhOVo5alI0aERNcnVJb2g3aU9YSnZTd3JCb1pUeXpHWGhBCjI0Zkt2VTFKU0VaOUhTaEZYWDBDRFhDMXdTaHpFckFUN2JUTFlFbDdlZVBFQXdWaCswK1JIdUxTL2ExalcyQXEKMmVYZnlNZ2hZajYzRDZPMi9kWjBSZUNUYzB2TlYvc0VKYStEa3FQQ0ZVRXVITXM1blEvNDFLM2VvTDc5bWNOaAowTkJ0VmNoaDUreUgwRi81S3cvN3VHdFZFS0hyNk9TZU9ETkY3UUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGTm9iclFnUUNxUnJwYWxqUFhyWkw3blZiMGxsTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQXU1UnVNbTJHRVFtY0RsTnhBbEpxQVlqUHRpckNvREI0SjlVajhWTm1WZ3pSaVFTdFkzdGNxCis5cTJHTEFEZWVhUnVGWStDODBmZTkyeDJmZ05XcXV5RUpoRFZMS1lGNENSNU0yc1I4Yk95K3VJeFpiL3RrbU4KdnFTaTM0ZVdxQWNuMExhajgrQXVoa09oT3lFMlQvSy9FeVRyQ09hd2g1UVA5VEZjMW4rbzJJTDdiVy9kTHVRcAovWlg3VWhtWW1ub3NlU21nZEFaWjQrWGFsblIxTEZUalZ1KzYwanNOV1N5UFF4MDJEdzhFY3R4MEhYaEw4djFrCjQ4YU1WUVM2c2NrMVhHSklWQ2o2WWVOUVZhU1F3VnloMTlTbzhMckpuYlNJT000c29kZFltYk1oWWk2bHoxRHAKUkZFZm1ObHR3em9SRDIyRm5NZ1YxQjhibFpiVmZrMm8KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTVENDQWpHZ0F3SUJBZ0lSQUpBMElxcDlodDdoT3ZqalZzQmJYRTh3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN5T1ZvWERUSTNNRFl4TVRFNQpNamN5T1Zvd0l6RWhNQjhHQTFVRUF3d1lLaTVvZFdKaWJHVXRjbVZzWVhrdVkybHNhWFZ0TG1sdk1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTB6UHBTbExKRW94U3FVTUVGcXhKL0NXWlRENUMKbjE4R3JESUlNaDRWUW9VQW10cVpmeUV4YVMvbUY2TzJOMWF0MHA3TjRGb2F5WnViZ0krS2JhQnJxejRZT2RBVAo3NEF3S3RrWXphYTBFRFo0Mm5yRERLWEhuY2hxWlhEVkFuNHRjOHVKZWQ0S0J6UU1aUldGSHY0TmZUTGt3ZUNlCkM3R0dkRVZobmw1M1N0ZHVpSlJ4QWhtSnZJc0Q4R1VNR0l4dUpmYkVia095eVh4dG1ybFgrbGRXK2dBT29obSsKMW5vN2RyL2lmSXRtU2VyUEdGSldaaTkvZ1JDaEVvb3ZRR1I2S0R5cVhNczY3WkExYmJRWUpZK3kzR1dxckxKaQp0cU1EWlF0ZjFSblNLZGI5YmNKRmFqMGNuZlU2MnlXSFhrbFZBMUtTcXBkTlViL1NQazVlaFR0anV3SURBUUFCCm80R0dNSUdETUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUIKQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCVGFHNjBJRUFxa2E2V3BZejE2MlMrNQoxVzlKWlRBakJnTlZIUkVFSERBYWdoZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d0RRWUpLb1pJCmh2Y05BUUVMQlFBRGdnRUJBRUJuSXFudE92ZmRYcUFGaXpiN2JvaHk0QnFEV3R2RjBNL05BdzBzUHNzR3hQSnQKWFRiSS9IdFh0TTArMGNhaG8wdUZGU3B0Z2FKUk5OK2h2ZVJUL2k3V0hzVkRLT0QrN2lKOS9pRnVyNjhqWlp0eQozaUF2L2hHQUZ4cFVVUmpBbEJHZ2Z1N0QzWHhjeUdXOW5iKzNqbDlCalhqZWxaMDlOaDhROG9UdzBYY1doYmpHCnlBQ0dHbU13eUJsY3NlU1MxWi9DUUpVZWRGMmRjWi9aeGtsZk80WW9UTDg3TlAzNlAyckxvNWFCenF1cGhYdUQKQTFkUnVZRTl5TFM5UGc3eEIwYjNYY0tjelI3eGtpaU1UMWpyM0xnai9jMjJjNnoxM01GM0F6dW8rRjF1UVl1QwpIYm9YSnlUb3VLbzFFQmJTTlhCQ3JYeHNUdU9aRDF6QmZUaWRwWTg9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBMHpQcFNsTEpFb3hTcVVNRUZxeEovQ1daVEQ1Q24xOEdyRElJTWg0VlFvVUFtdHFaCmZ5RXhhUy9tRjZPMk4xYXQwcDdONEZvYXladWJnSStLYmFCcnF6NFlPZEFUNzRBd0t0a1l6YWEwRURaNDJuckQKREtYSG5jaHFaWERWQW40dGM4dUplZDRLQnpRTVpSV0ZIdjROZlRMa3dlQ2VDN0dHZEVWaG5sNTNTdGR1aUpSeApBaG1KdklzRDhHVU1HSXh1SmZiRWJrT3l5WHh0bXJsWCtsZFcrZ0FPb2htKzFubzdkci9pZkl0bVNlclBHRkpXClppOS9nUkNoRW9vdlFHUjZLRHlxWE1zNjdaQTFiYlFZSlkreTNHV3FyTEppdHFNRFpRdGYxUm5TS2RiOWJjSkYKYWowY25mVTYyeVdIWGtsVkExS1NxcGROVWIvU1BrNWVoVHRqdXdJREFRQUJBb0lCQUNyaGJVb3p5TE5GWGpzVAphaThZUitVejFRNFB6Z01Camg5RUFUbjd0YUZOMDdPZEVuRW5VaHJqS0xvLytPei9Za2RUQ3NXMFJhQU5RZU0yClFZckVlVmZKUWEzck8wRHpLOVJuUTR2dGZyMlQ4YkdhSHlQZ1BNa2lPY2Zpd3J6QTFZV2ZHNGhzdG1pRC9zZy8KT0VuMGx0U0drcjl5VldSV1pOQVNqaUZUV0xFTzhlVncvZFV4d2RNczlaTXdDb25MMGRZbVQrdm4xSU9qK2dYNwpwMUtJRnRNcW40bWR5MFpzL0wxM1lERllXNmxaOXNyaFhURlY5ZVY5cGxLdVIxeldBT3VqTGNXR2x5dFIxVi9NCmU2SkxWVWJlUGdTWXY2RmNMdXdVa1g0eG5MSERHUmRJVlN1S2Q3d1RKTSszNW0rdy9tRUQ1UDBvMDg5MnA5MkEKelE0RUNWRUNnWUVBN2paY2ozN1JXcERwQmRWclVwT2VCN0xIeXA3SUFhMXBOcjRUWTBpZUROdWZPMVlJTE51dApIYVd1RTBZRXpkaXhmamZvWDNEQmpHODRZeGVidmVDUWFmWHB1QlhYYWF5Slh4YlV0SHRIRXVDYitibUFFaXJZClg1eEVVSy9ZMHdKTDBKL3V3WHNiM2NHVHEzcTd4SWtCRUNBaUtHMHJSWnVpdUVVT0IyS3V2STBDZ1lFQTR2azgKNzRQN2c4UitpZ01Dc2c2M25RTjUrRVJqQk0rNU4vcURtNGo4YUxsRUx2emFmV09tc1M2Y0NEbU9GRm1SQzRWOApQYUdGK1o4bDI0dDhLT1dyakxpZEI1UzJGWHFTWXdaMFdodUNLTHZPaGNLeXlvOTlOdi9aeEtMQU1OZStFUEFmCk82eFdaaGxRa3VacjM5cWtUeWxBLzlOVzJSdWNxLzk0MnVqUFkyY0NnWUJIdmtPZVRCbU5aenRuTUdIRVd3VXIKV0dMbjJXNXZZdVRmUWR2ZytRdnczMnhUbUpPWnZ3ZWllRFczUkUxS0djdExNbGRmOXp1enFnT1hoSks1V3hyagpidGJYUkd5K1BPS2FxdXVnOThmdUhZdWNhSXZ6N01lQjlEUjNBSjhTM2d3clp4K25VZ2FRZ1M2U1pNS01iSjdQClZuNHpJcjMzbHVvcENWTXlVanhDT1FLQmdRQ2taRmJSTjZ1MHJWM2xRZmJ5MWh3QkdpSitRYkhpS3oyQW9PNHYKZWRFdlhIaFkvQVNYNnRReDRvdGFuYTBkYWgzVzFYQytCcjVOcFFvN2NGU1dIbnJZNm1HNXV1a0N0NHROTThDVAovdmFQNEM3ZHpMM0lYcE1YZ2NuTlZQK1VvTDNsOExUK2VIei9aL2htM1lObVdDckh0eDUvN0Njc0NvYTRRTW5jCjYrQkJvd0tCZ0F1cFg5eEtON2J6dVBqWW9MNWo4d3NKMEpSTEFFdWJ3TWg5TUg0RmNPdWM4eW5zUlJQSjBtd08KYzJpSUN1MHRGYnNkR1E3MlNEOW9WbGdVVk82UHZZbldKMjNtYlFYME1ZQVBYbWMwS0Nwc2sreERsUXpxVCs5MwpOVjZyREdDU0ZMbmhUdW9UOUpmV1FqV05kZWNnb3JmRmtKWjhMaG1Vai9OQjJuUUprSFZYCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU9pQWZLeTZwdXJ1VDVNM21oZXZ1eUl3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN5T1ZvWERUSTNNRFl4TVRFNQpNamN5T1Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFubzczMUswMUp0eXVYZytxdFRyVU9wSjlCYStjU3VjSDYrS3k5aGxzZ1MwSTlSZkMKb1ozSDdqcEF6TzgyV0dMM1dMaFV3SkhHYVNLZGg1anBXSHVUTmdaV01hUjRtNnoyNGMvT2V1VmpUbnJpc2hwcwovd3dnWS9qbHJvaVptUkluOGprRTNhTGhBMHM2ZXlhOVo5alI0aERNcnVJb2g3aU9YSnZTd3JCb1pUeXpHWGhBCjI0Zkt2VTFKU0VaOUhTaEZYWDBDRFhDMXdTaHpFckFUN2JUTFlFbDdlZVBFQXdWaCswK1JIdUxTL2ExalcyQXEKMmVYZnlNZ2hZajYzRDZPMi9kWjBSZUNUYzB2TlYvc0VKYStEa3FQQ0ZVRXVITXM1blEvNDFLM2VvTDc5bWNOaAowTkJ0VmNoaDUreUgwRi81S3cvN3VHdFZFS0hyNk9TZU9ETkY3UUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGTm9iclFnUUNxUnJwYWxqUFhyWkw3blZiMGxsTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQXU1UnVNbTJHRVFtY0RsTnhBbEpxQVlqUHRpckNvREI0SjlVajhWTm1WZ3pSaVFTdFkzdGNxCis5cTJHTEFEZWVhUnVGWStDODBmZTkyeDJmZ05XcXV5RUpoRFZMS1lGNENSNU0yc1I4Yk95K3VJeFpiL3RrbU4KdnFTaTM0ZVdxQWNuMExhajgrQXVoa09oT3lFMlQvSy9FeVRyQ09hd2g1UVA5VEZjMW4rbzJJTDdiVy9kTHVRcAovWlg3VWhtWW1ub3NlU21nZEFaWjQrWGFsblIxTEZUalZ1KzYwanNOV1N5UFF4MDJEdzhFY3R4MEhYaEw4djFrCjQ4YU1WUVM2c2NrMVhHSklWQ2o2WWVOUVZhU1F3VnloMTlTbzhMckpuYlNJT000c29kZFltYk1oWWk2bHoxRHAKUkZFZm1ObHR3em9SRDIyRm5NZ1YxQjhibFpiVmZrMm8KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQU9WNm95akJvSFBQeXRaLzJ6ekxISHd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN5T1ZvWERUSTNNRFl4TVRFNQpNamN5T1Zvd0pURWpNQ0VHQTFVRUF3d2FLaTVqT0M1b2RXSmliR1V0WjNKd1l5NWphV3hwZFcwdWFXOHdnZ0VpCk1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ3d5U2RVc1NwZ3hiQ0tFV1FVSlFkd093emMKTTB5TWZrSm1NQjc5MW10amdVSUF0c2xxWkdSeVZhZXNoeDI0YzhiVnNtL2JjZ2JrUndYK2lkL3BiZ1hZK3dBMworRlI0aGE4S1FzT3pZaGtYd1R5QmxvbFZnTTdrZVk1dytjU1UyMUtGNjBOWnJnUElISnRBWXh6VjF0aGZkMDVQCnhZRGJrY2lrMkdGbGlkZjA2cEZ0c0MzSUlzbTA5elZBMmRacXMyOXlVaVQrTjVNMXJTc2hUaFFaNVdhK3NTVkwKclJEbi81eE5VVm5SdU5mZFpTU0pNMlQ2UXBtR2FvanVWVFIyK1JFcGg0eUVMSWFQZVZrT2dwOXE2Umo1RkszQwpoU0dhNFRvOFhCRG5RdGczMG5BQWVRL1lFbFZvcm15UjVPVS96RXUwVkZRR3dYYkVXVnp6NitlZUxIV05BZ01CCkFBR2pnWWd3Z1lVd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGTm9iclFnUUNxUnJwYWxqUFhyWgpMN25WYjBsbE1DVUdBMVVkRVFRZU1CeUNHaW91WXpndWFIVmlZbXhsTFdkeWNHTXVZMmxzYVhWdExtbHZNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFBRlNucTVrNHpWblh5NGJManVmbENzdFYvM0EvY1Nxa0pRV3JnWk13OVQKY2NBWitHdGoxVWZtclJ4ZkRzcmhqdXlhT3Ezd1lrR3M1eUNvZkN6Y1cxcGJNVEZVcXVOQjVORkpuT0VGL1NGUApnUGRvRTB1em02ZXQrcGJsTUFGdVlHN1ErZGg0K2dCcUcwMzZ3SHF6Ykc3ZDk5d2tPZ3BuYTN2VWFKWHhTL3BBCkJrS0E2RjR6elBDbjVvRVlWRGNhUEJMNnNFM2hOZm5JUUxxNlE1UTA0YXVWYmlRQVN5M3JobmREbnI0b3ZnWkEKN1pySGFSOXBzbDlPRzUzeThLdHl4UzU3L0paS3l4NmRSSnhmZlZlOFdBWnpUSU1SRkhnVklGNVFsZU1PZndGYwpnQWNjYUZrdVh2aEZxOHg1QVRZb1R0R0JXVlVuU1Bwa2RuN0ZNdmR5UENyLwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcGdJQkFBS0NBUUVBc01rblZMRXFZTVd3aWhGa0ZDVUhjRHNNM0ROTWpINUNaakFlL2Raclk0RkNBTGJKCmFtUmtjbFduckljZHVIUEcxYkp2MjNJRzVFY0Yvb25mNlc0RjJQc0FOL2hVZUlXdkNrTERzMklaRjhFOGdaYUoKVllETzVIbU9jUG5FbE50U2hldERXYTREeUJ5YlFHTWMxZGJZWDNkT1Q4V0EyNUhJcE5oaFpZblg5T3FSYmJBdAp5Q0xKdFBjMVFObldhck52Y2xJay9qZVROYTBySVU0VUdlVm12ckVsUzYwUTUvK2NUVkZaMGJqWDNXVWtpVE5rCitrS1pobXFJN2xVMGR2a1JLWWVNaEN5R2ozbFpEb0tmYXVrWStSU3R3b1VobXVFNlBGd1E1MExZTjlKd0FIa1AKMkJKVmFLNXNrZVRsUDh4THRGUlVCc0YyeEZsYzgrdm5uaXgxalFJREFRQUJBb0lCQVFDQm91QStrTFFjeHByUQpoRFE1T1hZYzdKQmZvUmFQSjc4VkpGQjFuNWljSFJzRFh3YVFDQkpJYlZ0SmZzTmlrVFBMWE0vOXdiNGdBNXozCnJLOFBnK2l4MWsyd3ZWOWtDZFB6MkVXZDgxK25OY0ppM0xyVWdtSTAxSmFKYmY2amtia1FEeGNTV2pMWHVYSjMKWXJhd2NKMjJVOHlQWHF0QlY4UWtiYS91UDRpblJXb2Zrc0dzZ3hMOHE0RzNuTlVjM2NWVzV3WGpLZVN0ODJtbgpPM3NkUUhpNVprZjFDRWtWVXQwRkd3eDcrOE1qbzJpSUg4S1VON2M4cjVRUFFPcFdFUjJmVU5MYUVzVjFxbkFBCnN5QzVpeUlNNHhEQ1IrM0E2cmd3aFhBWVJRSU9jTWMyM0E4YnNIZlRTVXFsQmY3OTVPOC9qZHBkUnVmUWo4MUgKaklEVUd4K1pBb0dCQU9pL0RUcFgvbjNDT3ZWc3RXRnNIcVVNd1JPcWptQ2hSeFBaRHRWbk8xa0lXdU9FN3hjegpBTmJiNzhNRk5pNHU5ZGs5M1o4SUlTekVhNTQvbVFGNVlQM0xXQVZlRUkxNXcrek5SQjA5ckR2NkFEdTdISm0zCjhXSXVLMGx1dlN2V2ZFSWVkandRVWNBd1RKTkFVeFZRRU5KRkRHeEEyMmxrcXJmTzh0a0kvbk1uQW9HQkFNSnkKek5YQ3J2S2ppRXlqcExiVGF3RmQ0aU9MTmdKMUUzNkRsK0h6NWsvQmZIR05OZGN6a3IxdWNMMnVBZHoyRnRodApkU1VZVCt1L3RpVzRzUFlzYTU1NDRiWXpyeWhhZFVudTFNQlpRbzMzYWZHcU5Jeis3QUN4YTFiOVZrNExON05ZClNGMWdGOWNOSktka3JkZWhDelkvei9jajlFZW5JT3NrcjdiWWNySXJBb0dCQUt1RVg1TW5WWHdIcnJzK0tVeHEKQ1F0SW91Q0RSL2tkNE90WGdmN3gzR0o0TGNLTkxFVEVhVkh0TW50ZFU5Z2s4emZzeDIxeTZEKzlZREYyWEtNaApkOENRSVlXVEZFK3Q5QnlHQ0RRa1J0RE1JMi9oSytwOEMzNTIxNTk5NUJweUxZL3NNdVdBZ1Q1SVdhWUtPUy96Cm1QSGJ3SlBtRjh0TFRDTzRkbTVLbW5qeEFvR0JBSTgxVTR6ZmZFK3hoekhDbUE0YWVVV2hhbXA1SGNjRGlONzEKZGdmd3hKL2F4WmN2eEFhQnNrSVhzNnJQSEFvcnFEbXZxOFl0T0xkTkU0NkdqclpQa3RjOCtpZGh1MUFDQnozegpTdmQ3QmR4ZTZzVVVjTzJpMWhmUWsxaVc3bGcrUk1DdWRXVm4zMGNBSkEyd3hhUDR0TFE0blNiTWNSM1FoaHNJCmd1MHNUcFRQQW9HQkFPSno5WE5hZEYzcldLY2FOMDZJbFVZMWF2WkhvaTRxNVcwQSt6SGZ1dnlXclFQeGRNMWsKSGcwOUt1YStUbDlPOUJzMVU5U3FhWEdZMkdFUTFpTEo0QTVQcWlCWXlnRnFVVXNjRG5acDZUUW1JUEZ0WmJjYgpzTWdFLzZUalpFQXN4NE1FRUxRM2EzMEhtWm5TVGxnNFFRblNHaGJ4R1hSZmFNWmJoT0JVY21URgotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  skip-cnp-status-startup-clean: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  policy-cidr-match-mode: ""
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"
  # If you want metrics enabled in cilium-operator, set the port for
  # which the Cilium Operator will have their metrics exposed.
  # NOTE that this will open the port on the nodes where Cilium operator pod
  # is scheduled.
  operator-prometheus-serve-addr: ":9963"
  enable-metrics: "true"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: c8
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "18"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  # Default case
  routing-mode: "tunnel"
  tunnel-protocol: "vxlan"
  service-no-backend-response: "reject"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-masquerade-to-route-source: "false"
  enable-wireguard: "true"
  wireguard-persistent-keepalive: "0s"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-local-redirect-policy: "false"

  kube-proxy-replacement: "false"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  enable-host-port: "false"
  enable-external-ips: "false"
  enable-node-port: "false"
  enable-health-check-nodeport: "true"
  enable-health-check-loadbalancer-ip: "false"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  bpf-lb-acceleration: "disabled"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  hubble-export-file-max-size-mb: "10"
  hubble-export-file-max-backups: "5"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  ipam-cilium-node-update-rate: "15s"
  cluster-pool-ipv4-cidr: "10.8.0.0/17"
  cluster-pool-ipv4-mask-size: "24"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "true"
  bgp-secrets-namespace: "kube-system"
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"

  k8s-client-qps: "5"
  k8s-client-burst: "10"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  # default DNS proxy to transparent mode in non-chaining modes
  dnsproxy-enable-transparent-mode: "true"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-xff-num-trusted-hops-ingress: "0"
  proxy-xff-num-trusted-hops-egress: "0"
  proxy-connect-timeout: "2"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"
  proxy-idle-timeout-seconds: "60"

  external-envoy-proxy: "false"
  max-connected-clusters: "255"

# Extra config allows adding arbitrary properties to the cilium config.
# By putting it at the end of the ConfigMap, it's also possible to override existing properties.
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: c8
    peer-service: "hubble-peer.kube-system.svc.cluster.local:443"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-hubble-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-hubble-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n\n        # Liveness probe\n        location /healthz {\n            access_log off;\n            add_header Content-Type text/plain;\n            return 200 'ok';\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumbgpnodeconfigs
  - ciliumbgpadvertisements
  - ciliumbgppeerconfigs
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  - ciliumbgpnodeconfigs/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumbgppeerconfigs
  - ciliumbgpadvertisements
  - ciliumbgpnodeconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumbgpclusterconfigs.cilium.io
  - ciliumbgppeerconfigs.cilium.io
  - ciliumbgpadvertisements.cilium.io
  - ciliumbgpnodeconfigs.cilium.io
  - ciliumbgpnodeconfigoverrides.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  - ciliumbgpclusterconfigs
  - ciliumbgpnodeconfigoverrides
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumendpoints
  - ciliumidentities
  verbs:
  - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumexternalworkloads/status
  - ciliumnodes
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumendpoints/status
  verbs:
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumexternalworkloads
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-bgp-control-plane-secrets
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: etcd-metrics
    port: 9963
    protocol: TCP
    targetPort: etcd-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: NodePort
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
    nodePort: 32379
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-agent: "unconfined"
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: "unconfined"
        container.apparmor.security.beta.kubernetes.io/mount-cgroup: "unconfined"
        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: "unconfined"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
          initialDelaySeconds: 5
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.memory
              divisor: '1'
        lifecycle:
          postStart:
            exec:
              command:
              - "bash"
              - "-c"
              - |
                    set -o errexit
                    set -o pipefail
                    set -o nounset
                    
                    # When running in AWS ENI mode, it's likely that 'aws-node' has
                    # had a chance to install SNAT iptables rules. These can result
                    # in dropped traffic, so we should attempt to remove them.
                    # We do it using a 'postStart' hook since this may need to run
                    # for nodes which might have already been init'ed but may still
                    # have dangling rules. This is safe because there are no
                    # dependencies on anything that is part of the startup script
                    # itself, and can be safely run multiple times per node (e.g. in
                    # case of a restart).
                    if [[ "$(iptables-save | grep -E -c 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN')" != "0" ]];
                    then
                        echo 'Deleting iptables rules created by the AWS CNI VPC plugin'
                        iptables-save | grep -E -v 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN' | iptables-restore
                    fi
                    echo 'Done!'
                    
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - CHOWN
              - KILL
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
              - DAC_OVERRIDE
              - FOWNER
              - SETGID
              - SETUID
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Unprivileged containers need to mount /proc/sys/net from the host
        # to have write access
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        # Unprivileged containers need to mount /proc/sys/kernel from the host
        # to have write access
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Unprivileged containers can't set mount propagation to bidirectional
          # in this case we will mount the bpf fs from an init container that
          # is privileged and set the mount propagation from host to container
          # in Cilium.
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-dbg
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      # Mount the bpf fs if it is not mounted. We will perform this task
      # from a privileged container because the mount propagation bidirectional
      # only works from privileged containers.
      - name: mount-bpf-fs
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        args:
        - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
        command:
        - /bin/bash
        - -c
        - --
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        - name: WRITE_CNI_CONF_WHEN_READY
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: write-cni-conf-when-ready
              optional: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
            drop:
              - ALL
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
      - name: host-proc-sys-net
        hostPath:
          path: /proc/sys/net
          type: Directory
      - name: host-proc-sys-kernel
        hostPath:
          path: /proc/sys/kernel
          type: Directory
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              - key: ca.crt
                path: client-ca.crt
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/port: "9963"
        prometheus.io/scrape: "true"
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.15.6@sha256:5789f0935eef96ad571e4f5565a8800d3a8fbb05265cf6909300cd82fd513c3d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        ports:
        - name: prometheus
          containerPort: 9963
          hostPort: 9963
          protocol: TCP
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      initContainers:
      - name: etcd-init
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - etcdinit
        # These need to match the equivalent arguments to etcd in the main container.
        - --etcd-cluster-name=clustermesh-apiserver
        - --etcd-initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --etcd-data-dir=/var/run/etcd
        env:
          # The Cilium cluster name (specified via the `CILIUM_CLUSTER_NAME` environment variable) and the etcd cluster
          # name (specified via the `--etcd-cluster-name` argument) are very different concepts. The Cilium cluster name
          # is the name of the overall Cilium cluster, and is used to set the admin account username. The etcd cluster
          # name is a concept that's only relevant for etcd itself. The etcd cluster name must be the same for both this
          # command and the actual invocation of etcd in the main containers of this Pod, but it's otherwise not
          # relevant to Cilium.
        - name: CILIUM_CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        # The clustermesh-apiserver container image includes an etcd binary.
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --auto-compaction-retention=1
        - --listen-metrics-urls=http://[$(HOSTNAME_IP)]:9963
        - --metrics=basic
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        - name: etcd-metrics
          containerPort: 9963
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - clustermesh
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt
        - etcd.config=/var/lib/cilium/etcd-config.yaml
        - --max-connected-clusters=255
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        - --controller-group-metrics=all
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: IDENTITY_ALLOCATION_MODE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: identity-allocation-mode
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        ports:
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir: {}
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "clustermesh-apiserver"
      serviceAccountName: "clustermesh-apiserver"
      terminationGracePeriodSeconds: 30
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: clustermesh-apiserver
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.15.6@sha256:a0863dd70d081b273b87b9b7ce7e2d3f99171c2f5e202cd57bc6691e51283e0c"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 3
          livenessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 3
          startupProbe:
            # give the relay one minute to start up
            grpc:
              port: 4222
            timeoutSeconds: 3
            failureThreshold: 20
            periodSeconds: 3
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          - name: tls
            mountPath: /var/lib/hubble-relay/tls
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Always
      priorityClassName: 
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 1001
        runAsGroup: 1001
        runAsUser: 1001
      priorityClassName: 
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.13.0@sha256:7d663dc16538dd6e29061abd1047013a645e6e69c115e008bee9ea9fef9a6666"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
        readinessProbe:
          httpGet:
            path: /
            port: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.13.0@sha256:1e7657d997c5a48253bb8dc91ecee75b63018d16ff5e5797e5af367336bc8803"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
