---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRRXRTb0dmc1JlQ0dEdlVtdUk5YjdMakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEUxV2hjTk1qWXhNVEl4TWpFMQpOVEUxV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRG1DOURCVEFrNWRyS0dTU01KZHVEcEkra2g0T29RcWtBMFdZZUtJZFUvTlAvcnBzbU4KYjNLdHREV1FDOUJBQzcyQXlQOWtmWjJCa2IyampWcnNlbmp5dElsaFpnQThDN3NOQXhLcnlkK1ZLb3Y5QXJyUQpSSXVTQWhsZk1rWDg4MGN6cW9rMlV3NEp5RjAzZHdRU3ZhbGU3eElCSGxnYytvbVBCN3VEWndMcmtXT25jQ2Z1Ck10QUE1ek1TY3dydS9ockdUL1ErTnZ6aVorUWxsaG51Zy9lNjJqOFBnSU5mZ0lDcXN2NGpWbjNlTmZDZDViN2EKN0FUMk1yTzdRQndvajNNcTF1Y1ZKQnFoSEIyc2JBR2NmN3lwQy9zM0YvTHkzdlFSZkVMRytxdXdXQmVuTjRidgpIdTJFSGhRcnQrbVpZbTJ2UzYyRmVtZndHZVVaaHVXZjBMQ1ZBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVWZ1ZHR2JCZjN1eExjUkFETGFOMHlXM0RTSE13RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFETzVYK0NtZm1UR2JiVUgzOGk0elhKZW9pd2NRNFVTOEZ6OVNuREFFeHVpUy95Tis2U3Zmem1BCnRMMTNsYkRGdnlSY0IwNXFONk4xTlNURElXcCtmRmhhNXpBQzlNZklydTA2RVdXL3MyRWtZYVFpdFdxNG9BREQKM0NmQ016SHBkYWNUcExsaHB3TnE3NWVkUUNZNXpuTHl6TjZ5U25Qa3JOYnIyMWpjVVJDai9udU9JbGJocXJISwo2cWhFYktNTjkvcWhoblY4YWZ0c0cxVE1WZnp4cmxtd2hMTmdTZ1VzSjk5d3l5L1M3UkFnWkI4cmhTWGlFZkJxCkRnSmNSOE5EMEdZSGFWQmx1a2RDaExuMDNYaUN5czlxa25LaFdQdGE5Zk41bXlmcUJ2NnNyRWhveEF0NEt5RFMKbFpOQzJBTVN0bW9FTFR2cm95USsxTFFEdXpmZkZTVT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBNWd2UXdVd0pPWGF5aGtrakNYYmc2U1BwSWVEcUVLcEFORm1IaWlIVlB6VC82NmJKCmpXOXlyYlExa0F2UVFBdTlnTWovWkgyZGdaRzlvNDFhN0hwNDhyU0pZV1lBUEF1N0RRTVNxOG5mbFNxTC9RSzYKMEVTTGtnSVpYekpGL1BOSE02cUpObE1PQ2NoZE4zY0VFcjJwWHU4U0FSNVlIUHFKandlN2cyY0M2NUZqcDNBbgo3akxRQU9jekVuTUs3djRheGsvMFBqYjg0bWZrSlpZWjdvUDN1dG8vRDRDRFg0Q0FxckwrSTFaOTNqWHduZVcrCjJ1d0U5akt6dTBBY0tJOXpLdGJuRlNRYW9Sd2RyR3dCbkgrOHFRdjdOeGZ5OHQ3MEVYeEN4dnFyc0ZnWHB6ZUcKN3g3dGhCNFVLN2ZwbVdKdHIwdXRoWHBuOEJubEdZYmxuOUN3bFFJREFRQUJBb0lCQUhwTktjeTZPZVU4LzZoNAoxWkhBaTg0bTgxaTVsSGNMckZxb2huQ2ZrQm1zZWFxMDMwNjhRNEdwM3hnWHo3MWRBSUNwVzIzM2duZFNIam9ICmVxRmljMDdGUUl4eGlBcGtTaXVleUp4Z0ZPZmUyTkhJVTcxSjA5SHFIOGNHbVVManE2VUNNelNZYjB3d0k2N0wKTFhVeE5BeHVtV25TMGhHRitQLzdvbXMzcHN2Slc0VEZnK3FQam80K2xVWVUyVzNYNEl5UitjSitGRVJsWHN4SQpDQVlVWUFDUzFlL3NzQXl4bTlPNFBaeUt0MkZBN0hnNlFYWE5meG0zcFJHRGtzN3B2TThzZU5hSzBKRVVoTFljCjRJLzUzbXJCQ2lCVmNkZFAvTFRYQlA5OE12WEdQQkRkM0lKSWJQb0xneHg1TWMzRmFCNFNCeVlOMjM5T1cxRU4KUmFwVzFnRUNnWUVBLy9NSm1IVVVDRDAvdi93NDlPbjJKTmRySmF6ZVl0ejNXWW5FeElnM3hvTStTam1IcEFUWApDOWlnc0g0b1JvRXhYVENDa0h1NWdLVUNwaDVzYXlVYktkMWFIWmdSZTd6Y2Q2VXBZV0hyYWlSck1UK092akJjCi90anN4UjYvV1dHVktVT0F5WUgvN0R2RDFYVGdwVkFOcW5mZUJ6RlBBRlV1ZndsUk56d0c5c0VDZ1lFQTVoZDMKVW9EZVNuWlYrRWJPcnowR0YyOHRMVW1tbklCT2NNTkwvV0JVSExtOXZIbXJPWXFWcE0zdFVqV29rUSt3NTdWMQo2MkNaM0FsdFQzczZ5ZCtyQ3FiTzhqcm5kQjJReEJicDBkRmdGLytWbVlINjF5MVRnZFNYMHZVWGpRT1dsVWxECmRvV3k1bWIxV3g2ZE5JTC83ZjlLN20ra1FrbEdrM1hTRnFydjR0VUNnWUVBeTdIaldCY05PMFZyZitJK2ZnUFkKNWhjZTZkdjdISmtZcllTc09YRGpXclJHbFpIVmRsNTN1ckRMcWNxdFNQYzJqeUMxT0VHUEwyZWpoUXMvWThJagpMUjFCdzcyclpGdTQ1ZXRtMUY2Mm1VR2tvWXdna1JJeVlJdkpXMU9PRzVkQ3U1VkNZSng2VGNwK24xbW1FMHB6CnBkQkJ2bDJxcnV3YjFmUlhVMnNOYThFQ2dZRUEzc1pubkRUemhNcndUOU5XdUNwd1pHNGJJcGNGdnM4bm8xd2oKamU0ZllqU2dOUVRrT0hFcWxBZGh1TkFGSm5ZM3hSQlhYSThLU1JYRGhVbjkwSWxEbEt1UEFNN3hXK1pvVE1NVwpualNIUXBVT1pqT0lCNkIyRXVVZ0hudDQwdXBmZUtrWHJZQ2poeHEyZ2dPeEY2K2lWZTl3d0V6TmovUmNaZGVVCmtxZnNYUVVDZ1lFQXowdkw4N1FOZmNYUnZmUmVOdE56UFBlQXhraDM2NlNLMFFuV1VSOFFyKzVrNlc5Q1hPYlcKK3BGdXZ1ejdvTUFhT0RMMFhKVVUwUnpvcGdhMVBWOXhnT1lDem1JYTBIT1c5U3Fhb2l3LzB4SkpCRGFJN1dHWQowVWorK28rWjliaXB6UmtCSllFTlJkNnhJeWxieTY1Y3E1d25vcVE0blZKZ2Nla0JTck1sdVZVPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRRXRTb0dmc1JlQ0dEdlVtdUk5YjdMakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEUxV2hjTk1qWXhNVEl4TWpFMQpOVEUxV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRG1DOURCVEFrNWRyS0dTU01KZHVEcEkra2g0T29RcWtBMFdZZUtJZFUvTlAvcnBzbU4KYjNLdHREV1FDOUJBQzcyQXlQOWtmWjJCa2IyampWcnNlbmp5dElsaFpnQThDN3NOQXhLcnlkK1ZLb3Y5QXJyUQpSSXVTQWhsZk1rWDg4MGN6cW9rMlV3NEp5RjAzZHdRU3ZhbGU3eElCSGxnYytvbVBCN3VEWndMcmtXT25jQ2Z1Ck10QUE1ek1TY3dydS9ockdUL1ErTnZ6aVorUWxsaG51Zy9lNjJqOFBnSU5mZ0lDcXN2NGpWbjNlTmZDZDViN2EKN0FUMk1yTzdRQndvajNNcTF1Y1ZKQnFoSEIyc2JBR2NmN3lwQy9zM0YvTHkzdlFSZkVMRytxdXdXQmVuTjRidgpIdTJFSGhRcnQrbVpZbTJ2UzYyRmVtZndHZVVaaHVXZjBMQ1ZBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVWZ1ZHR2JCZjN1eExjUkFETGFOMHlXM0RTSE13RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFETzVYK0NtZm1UR2JiVUgzOGk0elhKZW9pd2NRNFVTOEZ6OVNuREFFeHVpUy95Tis2U3Zmem1BCnRMMTNsYkRGdnlSY0IwNXFONk4xTlNURElXcCtmRmhhNXpBQzlNZklydTA2RVdXL3MyRWtZYVFpdFdxNG9BREQKM0NmQ016SHBkYWNUcExsaHB3TnE3NWVkUUNZNXpuTHl6TjZ5U25Qa3JOYnIyMWpjVVJDai9udU9JbGJocXJISwo2cWhFYktNTjkvcWhoblY4YWZ0c0cxVE1WZnp4cmxtd2hMTmdTZ1VzSjk5d3l5L1M3UkFnWkI4cmhTWGlFZkJxCkRnSmNSOE5EMEdZSGFWQmx1a2RDaExuMDNYaUN5czlxa25LaFdQdGE5Zk41bXlmcUJ2NnNyRWhveEF0NEt5RFMKbFpOQzJBTVN0bW9FTFR2cm95USsxTFFEdXpmZkZTVT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLRENDQWhDZ0F3SUJBZ0lRZS9UdkxqSk5EV1VGdWM1S2FlNEg3VEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEUyV2hjTk1qWXhNVEl4TWpFMQpOVEUyV2pBVU1SSXdFQVlEVlFRREV3bGhaRzFwYmkxak1UTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ1piU0FLTkdkeHJiRGltWERaSWlDc0l6cW9zUDFocmt6ZXFzWS9TSWtlWGw5Q3ZGaisKMlQ2QkZSZGlkWUdaUDRyL2p4c2pnbkdrK2V3d0dPdFJoQzJXZ2hMMkVZekhsTU1EUWp3b0VaZ3VTbUY2SDNPWQo3K1ZMR2pxRk5VNGpOa2hrWWRxQVFack5LZ09hS29RNUF0WEgzZEZLVVZwbGFmNXhOMWltY0pDYmJiYlJadTlJCjhLRDRGNDdJUmU5UnhWM3lmbUJYOGk3K0djb1ZqUzNJOXdJVTBZM2svYUlSZ0lrLzg1U1kvbjV4UG9ibm9NV3kKTzVmWVlLeFdEOUwzbExneXpwdVAzNnFmeUVXYkh1cUJ2cEdsOUM3NWNNSjZId0p5aUkxR2I5Q3p3TmR0L0luRQpyU3VXVVZQMk9OZzk4VElGK0hHOEVoRFlZUnpjTHJid050enRBZ01CQUFHamRqQjBNQTRHQTFVZER3RUIvd1FFCkF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXcKQURBZkJnTlZIU01FR0RBV2dCUldCVVlac0YvZTdFdHhFQU10bzNUSmJjTkljekFVQmdOVkhSRUVEVEFMZ2dscwpiMk5oYkdodmMzUXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSjdrVThqSGJwSDlHMy9qWHFYUFVhYThpK2pqClRod1dOZVhrMGJqWUdGYWNsaUpXWTZGb1lBTG9Wc1JpV05iTTRRcExseW4zOWgzR0xpNnZuRFgraFhPM0RNaEYKbkNRVk1RcVdua3A4bklKS3dyZk44T3ppYWc3RyswTE91aHFacm5NMW91bitxK2tEZUlVQ3gvMGZZYlB2bUQrTQpQT2RBbkhTLzFTeDRDSjlGNEpZSHYwc1ZIT1M3aGNUU1NuTVRKWGFTd2dpVzdpUlI0VVBXbXVhdzhPWHBrUFpwCkIwTWJBOWZrdDEvK043SkJMUmEzeUxRTTk2QkhQYXR4NndrYWs5eDJNVUg3TzRrcVVrOStJSFJEYnZaMFZSYnkKOEZkMWZiZzBJN1o1OXh4a2dFYmVXN25jTG44S3NsNzNCcytDRXl4aVkwMk0za0t6cFo0VnpSUnZwSnc9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBbVcwZ0NqUm5jYTJ3NHBsdzJTSWdyQ002cUxEOVlhNU0zcXJHUDBpSkhsNWZRcnhZCi90aytnUlVYWW5XQm1UK0svNDhiSTRKeHBQbnNNQmpyVVlRdGxvSVM5aEdNeDVUREEwSThLQkdZTGtwaGVoOXoKbU8vbFN4bzZoVFZPSXpaSVpHSGFnRUdhelNvRG1pcUVPUUxWeDkzUlNsRmFaV24rY1RkWXBuQ1FtMjIyMFdidgpTUENnK0JlT3lFWHZVY1ZkOG41Z1YvSXUvaG5LRlkwdHlQY0NGTkdONVAyaUVZQ0pQL09VbVA1K2NUNkc1NkRGCnNqdVgyR0NzVmcvUzk1UzRNczZiajkrcW44aEZteDdxZ2I2UnBmUXUrWERDZWg4Q2NvaU5SbS9RczhEWGJmeUoKeEswcmxsRlQ5ampZUGZFeUJmaHh2QklRMkdFYzNDNjI4RGJjN1FJREFRQUJBb0lCQUdqMWtHK3F2Z0cwMDBlUgp0UE8yTnlmTHlmdFJhV1lEdWE2eW9ZRDFmR2g4SXlzaWNyZVZvdjdua09IWWhWcHpjQUc0d3RZZURPVFIzTlJpCmw4bGlaVldMa3JFbi9Ha2t5ZXhXeVpTWHhNWVdPRzAxU3YyYlQvOTY2QUh0SDVGVE4xOEUybGZYaWJGRlJzV1cKeEhIRUVMLzBiWk1yNkcxc2Y1YXdTRU5FeW9pcERMYnhNTkQweUFPT2EvSzlzV2plMlhZQXAwMlFVSlZzeFFJOAoySC9XaXZGVHc0cTlINHFsNXpJNFVscFg3YTIxNE5YQUJvbWw5OVYxeWVRZ3p5ZXBBMHMrZHZTNkZFUjNaSGp3ClpRQXM1Zk5LRUpQWGZ4ekdFdzZnVlluUWxTZWh3OUdpL0ZuR3krU3Z3Q2c0Rk9nNWFLdlZPazIyQVZNQllpQm0KV1M4U2tia0NnWUVBeEoyNzhTRUtIVVpMWnFqaFdNMkFJbk1wWHI5ejk3bHJ6YlNBbmsrR01VUFpuTVZINVpWNQprVk5SbW9NN0lGZHUzS0NyTnRId1NJTU9MajV3Z05XL3dXeWZyM0xFVUxWSlF3a0hFc0VrYTFjb1owSHpqZEFjCjZjV29EZVBpSE91ajFaSHF1RVh4N3VrQk5hZEZ5UUtOZGdnNkNwNlNXNnB1RmlVSWdZMWVGNjhDZ1lFQXg4UDQKYTg4WEUrYzB0WExmM1c1YXFtbi92OHIrZU5UWkk2S044Wm9KMzBrNlBhc3FmZVN1c1lnR3I0NFBEdjlKQ0dRSApoUjB1cGgzTkFrME5WVFo5VW5sNko4OW1YOVFSd3dvejV0NTZLV20yYitYeDRKK2Ird1oxU1Y0enJITHFZczUvCmg0a1BVdHQvUVVQUVRXT0hXLzBHWHNqbUFGYnJmbm9xREVvSVlDTUNnWUVBbzNRS01ZenBEcXRJdGVEQjdvUncKK0xMS2VzVXBFSkdxaUlsOXY1NlhEYys5VW5KRHNoNVF3VHNHQlRFQjc0SWdYUFNKUWZySUNsQkJjcnBmNXd0TAo3ZTV5MW5YUHROVHhRZlI0VitRUGRka3djcDlHYmVmTWtaL0xkVGkwMnB3ZlNNYVUzbnJ2aFZGWnV4UURsUGMxClNTSFB0dEpiRkMrY2MzWjRHdE8rbkdzQ2dZQWM5cDdvRXFpSDdEZktMeE9pS1VQZi9XcGxSbXRLM2FGMTl6V1oKVi9vaWM1Mk1IMnNUd2JwS1p5eUErNW5YVk5BajlVelowZmRYZ202YzdNc0lGZFJweHM4ZFFvYlhVZ29aT3p0MwpONzZDanA4eTdpWDVxV3FXSk1PUWxhWHNWT1VDMm1uSEh1b24yMGRDRVREOFozZlNzSWJoNjBMZHZieDdJLzlBCnRPTXQvUUtCZ1FDV3o5dG1NY3VTb2F3VHg5TkdOeElZT1Q4WGNnNzA3YjlITHVKUS9uUkpicVdVdzZRZkZCSEkKUzlBZ1ZFOFpvTzFuQXZqaFpTb1VaZUVvbERWZ1ZPcXI5and4ekUvejI2RVBIMWkwZzRDcTVXcHNBeHJVZGJTVgpOc2pYeE9iVGY3SXZnaEtyQjMzdFkrNURBM0NwaWdVVS9PN1R2V1FhcFN6WnJTMVV3MDNDV1E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-ca-cert
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRRXRTb0dmc1JlQ0dEdlVtdUk5YjdMakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEUxV2hjTk1qWXhNVEl4TWpFMQpOVEUxV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRG1DOURCVEFrNWRyS0dTU01KZHVEcEkra2g0T29RcWtBMFdZZUtJZFUvTlAvcnBzbU4KYjNLdHREV1FDOUJBQzcyQXlQOWtmWjJCa2IyampWcnNlbmp5dElsaFpnQThDN3NOQXhLcnlkK1ZLb3Y5QXJyUQpSSXVTQWhsZk1rWDg4MGN6cW9rMlV3NEp5RjAzZHdRU3ZhbGU3eElCSGxnYytvbVBCN3VEWndMcmtXT25jQ2Z1Ck10QUE1ek1TY3dydS9ockdUL1ErTnZ6aVorUWxsaG51Zy9lNjJqOFBnSU5mZ0lDcXN2NGpWbjNlTmZDZDViN2EKN0FUMk1yTzdRQndvajNNcTF1Y1ZKQnFoSEIyc2JBR2NmN3lwQy9zM0YvTHkzdlFSZkVMRytxdXdXQmVuTjRidgpIdTJFSGhRcnQrbVpZbTJ2UzYyRmVtZndHZVVaaHVXZjBMQ1ZBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVWZ1ZHR2JCZjN1eExjUkFETGFOMHlXM0RTSE13RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFETzVYK0NtZm1UR2JiVUgzOGk0elhKZW9pd2NRNFVTOEZ6OVNuREFFeHVpUy95Tis2U3Zmem1BCnRMMTNsYkRGdnlSY0IwNXFONk4xTlNURElXcCtmRmhhNXpBQzlNZklydTA2RVdXL3MyRWtZYVFpdFdxNG9BREQKM0NmQ016SHBkYWNUcExsaHB3TnE3NWVkUUNZNXpuTHl6TjZ5U25Qa3JOYnIyMWpjVVJDai9udU9JbGJocXJISwo2cWhFYktNTjkvcWhoblY4YWZ0c0cxVE1WZnp4cmxtd2hMTmdTZ1VzSjk5d3l5L1M3UkFnWkI4cmhTWGlFZkJxCkRnSmNSOE5EMEdZSGFWQmx1a2RDaExuMDNYaUN5czlxa25LaFdQdGE5Zk41bXlmcUJ2NnNyRWhveEF0NEt5RFMKbFpOQzJBTVN0bW9FTFR2cm95USsxTFFEdXpmZkZTVT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBNWd2UXdVd0pPWGF5aGtrakNYYmc2U1BwSWVEcUVLcEFORm1IaWlIVlB6VC82NmJKCmpXOXlyYlExa0F2UVFBdTlnTWovWkgyZGdaRzlvNDFhN0hwNDhyU0pZV1lBUEF1N0RRTVNxOG5mbFNxTC9RSzYKMEVTTGtnSVpYekpGL1BOSE02cUpObE1PQ2NoZE4zY0VFcjJwWHU4U0FSNVlIUHFKandlN2cyY0M2NUZqcDNBbgo3akxRQU9jekVuTUs3djRheGsvMFBqYjg0bWZrSlpZWjdvUDN1dG8vRDRDRFg0Q0FxckwrSTFaOTNqWHduZVcrCjJ1d0U5akt6dTBBY0tJOXpLdGJuRlNRYW9Sd2RyR3dCbkgrOHFRdjdOeGZ5OHQ3MEVYeEN4dnFyc0ZnWHB6ZUcKN3g3dGhCNFVLN2ZwbVdKdHIwdXRoWHBuOEJubEdZYmxuOUN3bFFJREFRQUJBb0lCQUhwTktjeTZPZVU4LzZoNAoxWkhBaTg0bTgxaTVsSGNMckZxb2huQ2ZrQm1zZWFxMDMwNjhRNEdwM3hnWHo3MWRBSUNwVzIzM2duZFNIam9ICmVxRmljMDdGUUl4eGlBcGtTaXVleUp4Z0ZPZmUyTkhJVTcxSjA5SHFIOGNHbVVManE2VUNNelNZYjB3d0k2N0wKTFhVeE5BeHVtV25TMGhHRitQLzdvbXMzcHN2Slc0VEZnK3FQam80K2xVWVUyVzNYNEl5UitjSitGRVJsWHN4SQpDQVlVWUFDUzFlL3NzQXl4bTlPNFBaeUt0MkZBN0hnNlFYWE5meG0zcFJHRGtzN3B2TThzZU5hSzBKRVVoTFljCjRJLzUzbXJCQ2lCVmNkZFAvTFRYQlA5OE12WEdQQkRkM0lKSWJQb0xneHg1TWMzRmFCNFNCeVlOMjM5T1cxRU4KUmFwVzFnRUNnWUVBLy9NSm1IVVVDRDAvdi93NDlPbjJKTmRySmF6ZVl0ejNXWW5FeElnM3hvTStTam1IcEFUWApDOWlnc0g0b1JvRXhYVENDa0h1NWdLVUNwaDVzYXlVYktkMWFIWmdSZTd6Y2Q2VXBZV0hyYWlSck1UK092akJjCi90anN4UjYvV1dHVktVT0F5WUgvN0R2RDFYVGdwVkFOcW5mZUJ6RlBBRlV1ZndsUk56d0c5c0VDZ1lFQTVoZDMKVW9EZVNuWlYrRWJPcnowR0YyOHRMVW1tbklCT2NNTkwvV0JVSExtOXZIbXJPWXFWcE0zdFVqV29rUSt3NTdWMQo2MkNaM0FsdFQzczZ5ZCtyQ3FiTzhqcm5kQjJReEJicDBkRmdGLytWbVlINjF5MVRnZFNYMHZVWGpRT1dsVWxECmRvV3k1bWIxV3g2ZE5JTC83ZjlLN20ra1FrbEdrM1hTRnFydjR0VUNnWUVBeTdIaldCY05PMFZyZitJK2ZnUFkKNWhjZTZkdjdISmtZcllTc09YRGpXclJHbFpIVmRsNTN1ckRMcWNxdFNQYzJqeUMxT0VHUEwyZWpoUXMvWThJagpMUjFCdzcyclpGdTQ1ZXRtMUY2Mm1VR2tvWXdna1JJeVlJdkpXMU9PRzVkQ3U1VkNZSng2VGNwK24xbW1FMHB6CnBkQkJ2bDJxcnV3YjFmUlhVMnNOYThFQ2dZRUEzc1pubkRUemhNcndUOU5XdUNwd1pHNGJJcGNGdnM4bm8xd2oKamU0ZllqU2dOUVRrT0hFcWxBZGh1TkFGSm5ZM3hSQlhYSThLU1JYRGhVbjkwSWxEbEt1UEFNN3hXK1pvVE1NVwpualNIUXBVT1pqT0lCNkIyRXVVZ0hudDQwdXBmZUtrWHJZQ2poeHEyZ2dPeEY2K2lWZTl3d0V6TmovUmNaZGVVCmtxZnNYUVVDZ1lFQXowdkw4N1FOZmNYUnZmUmVOdE56UFBlQXhraDM2NlNLMFFuV1VSOFFyKzVrNlc5Q1hPYlcKK3BGdXZ1ejdvTUFhT0RMMFhKVVUwUnpvcGdhMVBWOXhnT1lDem1JYTBIT1c5U3Fhb2l3LzB4SkpCRGFJN1dHWQowVWorK28rWjliaXB6UmtCSllFTlJkNnhJeWxieTY1Y3E1d25vcVE0blZKZ2Nla0JTck1sdVZVPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRRXRTb0dmc1JlQ0dEdlVtdUk5YjdMakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEUxV2hjTk1qWXhNVEl4TWpFMQpOVEUxV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRG1DOURCVEFrNWRyS0dTU01KZHVEcEkra2g0T29RcWtBMFdZZUtJZFUvTlAvcnBzbU4KYjNLdHREV1FDOUJBQzcyQXlQOWtmWjJCa2IyampWcnNlbmp5dElsaFpnQThDN3NOQXhLcnlkK1ZLb3Y5QXJyUQpSSXVTQWhsZk1rWDg4MGN6cW9rMlV3NEp5RjAzZHdRU3ZhbGU3eElCSGxnYytvbVBCN3VEWndMcmtXT25jQ2Z1Ck10QUE1ek1TY3dydS9ockdUL1ErTnZ6aVorUWxsaG51Zy9lNjJqOFBnSU5mZ0lDcXN2NGpWbjNlTmZDZDViN2EKN0FUMk1yTzdRQndvajNNcTF1Y1ZKQnFoSEIyc2JBR2NmN3lwQy9zM0YvTHkzdlFSZkVMRytxdXdXQmVuTjRidgpIdTJFSGhRcnQrbVpZbTJ2UzYyRmVtZndHZVVaaHVXZjBMQ1ZBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVWZ1ZHR2JCZjN1eExjUkFETGFOMHlXM0RTSE13RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFETzVYK0NtZm1UR2JiVUgzOGk0elhKZW9pd2NRNFVTOEZ6OVNuREFFeHVpUy95Tis2U3Zmem1BCnRMMTNsYkRGdnlSY0IwNXFONk4xTlNURElXcCtmRmhhNXpBQzlNZklydTA2RVdXL3MyRWtZYVFpdFdxNG9BREQKM0NmQ016SHBkYWNUcExsaHB3TnE3NWVkUUNZNXpuTHl6TjZ5U25Qa3JOYnIyMWpjVVJDai9udU9JbGJocXJISwo2cWhFYktNTjkvcWhoblY4YWZ0c0cxVE1WZnp4cmxtd2hMTmdTZ1VzSjk5d3l5L1M3UkFnWkI4cmhTWGlFZkJxCkRnSmNSOE5EMEdZSGFWQmx1a2RDaExuMDNYaUN5czlxa25LaFdQdGE5Zk41bXlmcUJ2NnNyRWhveEF0NEt5RFMKbFpOQzJBTVN0bW9FTFR2cm95USsxTFFEdXpmZkZTVT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lSQUlWaHZLYWl6RTBnR3B4V1lTMjM4ME13RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV4TmxvWERUSTJNVEV5TVRJeApOVFV4Tmxvd0VURVBNQTBHQTFVRUF4TUdjbVZ0YjNSbE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBCk1JSUJDZ0tDQVFFQTBuSmVJWW9YTWxucG1WSWh1bFRkVzFGb0VjVmlqZVB3cU5EZTNaOVE2RnFjdlVXblhKeDkKVGxhVUp3bnFsZURWeFJ4SmR6cit2aGNadDdFQVZTVU9QMzNtQlExTDdJdEpNem1FL3oxK2h5ckNDWW1WeFJZNQpGL0U3cTBYNVJkME4rMjdYYXFyWHV0OVdwVkc5blJ3VmxPMDdTQ0ZDaEc1clN3b1YwVS80aFdLZWZQNVJ2SnF0ClZ1VE5Xb242K1hvR1ZnT294OC96cG1pS3BCU2loMU95UDlTY1JjTFZ5ejJ3RmtzdnNQdU5Wc1dzUW1JbmdpNzgKdUdaTDRXUVNvTkhLM0hCU1BvejBkTnordWNzSHdKdDBUVW5Qc2tBU1E5OER5WjltS08zOWZKZ0VEMW9aZEFiZQp2Rm5FUVkrZmVrNFZQNkFwbE9TUkdEenE2SWJOalg0SGl3SURBUUFCbzJBd1hqQU9CZ05WSFE4QkFmOEVCQU1DCkJhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXcKSHdZRFZSMGpCQmd3Rm9BVVZnVkdHYkJmM3V4TGNSQURMYU4weVczRFNITXdEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUdsdVRzNVJrNWliNGJNejNyMWd1bjI4Qkp5Yy9ES2UvL3lvUUJaU1pYNVF5SHhsL2RpS1gvckhyRExZClh0eFVmQTZHbksrR1U2dDJaRDBCNFJVcVl6eHhubTliWHRYRCtqRU5hTEhrbHJOSGoxdlQ3R0FMYUdkZWJiZmsKcHM1YmJ0M2RyZ1lha0tGMnh5ZzhpbVR6VHp3cGd1bFpMU2FpczlBZmFJYWZpK3Rnbnd3enVGTGpBTzRzdWR4MApudlRUOXdqWDczUlFOdElWMTJHQk9hK0pBMmhyWjNZZEhqcHYxQXdjWmtuSlJwaUYxREVmZys1WGFLSGJZYndrCmxRa1hORFZKTVBtUS9yU0h4V2xzVzlaZk11b1F6eFNGaUFVZWVoMG1EWjBKMVZjWGZEeTU2S3lXMFAzZldyOHcKQmt1UlZYZmJnUXRYV0ZsenVWcjNUSGNjYXU0PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMG5KZUlZb1hNbG5wbVZJaHVsVGRXMUZvRWNWaWplUHdxTkRlM1o5UTZGcWN2VVduClhKeDlUbGFVSnducWxlRFZ4UnhKZHpyK3ZoY1p0N0VBVlNVT1AzM21CUTFMN0l0Sk16bUUvejEraHlyQ0NZbVYKeFJZNUYvRTdxMFg1UmQwTisyN1hhcXJYdXQ5V3BWRzluUndWbE8wN1NDRkNoRzVyU3dvVjBVLzRoV0tlZlA1Ugp2SnF0VnVUTldvbjYrWG9HVmdPb3g4L3pwbWlLcEJTaWgxT3lQOVNjUmNMVnl6MndGa3N2c1B1TlZzV3NRbUluCmdpNzh1R1pMNFdRU29OSEszSEJTUG96MGROeit1Y3NId0p0MFRVblBza0FTUTk4RHlaOW1LTzM5ZkpnRUQxb1oKZEFiZXZGbkVRWStmZWs0VlA2QXBsT1NSR0R6cTZJYk5qWDRIaXdJREFRQUJBb0lCQVFDN3N3QWNJQU5paUdsZQpzNitiZHRmYisvYTdhdmJsSVRua0NDL1BNYXJESXhhTGhsV290M2JYNlViSXJ3S0pYWGl0RHZiRG5sM1pnOWNQClRKTEVYb0dmeFpYa1NhQy9RTmd3RlF4M2J3eXNXRW1xb2dsd09Nc0JmTXJBajIrdWpXUk1MdWQ1bnhrODlyaGMKU1ZTNmpYTCtXcjAyTDF3WnJEYU1QbG1KVUMrVUh1dGdjdkV6UytXaENNT29jaDJUQVc2cUFCNEpZSk8xbEg5Zwprdk8wdTlTbG9nNGlmT09zRWNxaXdsbm1WbkE1Qk5GUlh0bXpLRm0rTVpZd2tIL283K0VIZjVlZEVrZ1hxeDRsClpkSHJpOWlTcmc4WVEvU0JUYzVRTkNMbkRyUmFxOTByQUpVbUp4M0IraWRSOUI0Q3JkV3hPZW0vTWsxZGlITHQKSTI0QUJvRmhBb0dCQU5ZU291eUpHd09uRndGdGorK3drNDBUWWpaSDdhdkxqTlk5djNGZjNid0JFNU56TzVvTwo2U1ozUy9GM0JnTERGQWxBN2Z1SFhaZXZheExFZVh1TkdyZ2J5UFpKS3FWQjhmdFUxZ1Q0dmF5Q08vYkZjZlowCkJpazRGN2hQZjRUaFI5SDdkUTJQQjdzRWZPYmhDQ3dnZHJZSjZxUHM3MHRIanFiWG5aOWxpQWl4QW9HQkFQdXAKN09IaDhRdlo0WmtaZzRUc1FrUlNneEgrUVJPVE9ZdlpUTVRTY2o4UC83WTFOWUZTdHVabmsrc2NxYUNpaVVCSAp1M2QvTjQ3SFo0TFdtRDQ1OW9aYy9UaDBacmtvcWh2TXJ2REIwdEo3UURqc2xOOXhTbG82b05YQldySUxGNjZmCi83RHkvUDV4Y1pwZFVrSzZ5dnI5ejB2TUFIdGtNTDZ5UU5kczFpTDdBb0dCQUlZNWdUWldjVDNGRXNPdWNzV1QKTGJFVEtrMW1wRHRIa2JMelhJbzExYzMvenNweFFqbkNoNlc2dno5VHBjMHRpKzZSYTZaK3BjeHFEUFRqaEZoWApqUjFMTHFKZUZnTXdhZzF3a0JEbDllZW9jUGkxckZNZlJJMnJ3aE9xcFFZb1N1UDZpdFpKakV0UzhRM0NvMkVuCnFjZFNTSEVvS3BKRTk4amRBTlBrMFhyQkFvR0FZRG9xTkhpek5ZZmJKakpHUXJZZjVJWDBUaFg5QmlJZU4rWWYKMzRaa1hzNmNSU3gxUi95N3FML2tKRnN5VlJTeERGNGhSV0RrZW5pdWtLM0RTcy9ZL3FsaHZZdHNsOUgvc1YrRAphTldENmkxc2NoZXNHUC8xb1NpWHhRUUl6TmxHOWVPQjNrUWJEcU9MLzYwOVBmeTBqbUlzT0Z4SnR1U3BhdEUzCnorZHl2YThDZ1lFQXBFc1BPb3NJV1NjanVCcnp6SVFjd1BGTU4zK2RDTGlrNE5FbFFITHV2dVVTMmVUQXVaa28KYS9zUzNRNmJqQWREN1Z0b3BHMnYvSE1PNFgwU3MyZG9sZjRVbDJzaE5DMmJWTlVybUJIdTg1WVYzSzZiMmZGMApGaTBDcFNxVHAxT2tJT2xsV0l4bHdVRFVtQ0NEc3lNUFJNSVdPbnpXNXFzais5S0dyNHhMc2ZZPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRRXRTb0dmc1JlQ0dEdlVtdUk5YjdMakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEUxV2hjTk1qWXhNVEl4TWpFMQpOVEUxV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRG1DOURCVEFrNWRyS0dTU01KZHVEcEkra2g0T29RcWtBMFdZZUtJZFUvTlAvcnBzbU4KYjNLdHREV1FDOUJBQzcyQXlQOWtmWjJCa2IyampWcnNlbmp5dElsaFpnQThDN3NOQXhLcnlkK1ZLb3Y5QXJyUQpSSXVTQWhsZk1rWDg4MGN6cW9rMlV3NEp5RjAzZHdRU3ZhbGU3eElCSGxnYytvbVBCN3VEWndMcmtXT25jQ2Z1Ck10QUE1ek1TY3dydS9ockdUL1ErTnZ6aVorUWxsaG51Zy9lNjJqOFBnSU5mZ0lDcXN2NGpWbjNlTmZDZDViN2EKN0FUMk1yTzdRQndvajNNcTF1Y1ZKQnFoSEIyc2JBR2NmN3lwQy9zM0YvTHkzdlFSZkVMRytxdXdXQmVuTjRidgpIdTJFSGhRcnQrbVpZbTJ2UzYyRmVtZndHZVVaaHVXZjBMQ1ZBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVWZ1ZHR2JCZjN1eExjUkFETGFOMHlXM0RTSE13RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFETzVYK0NtZm1UR2JiVUgzOGk0elhKZW9pd2NRNFVTOEZ6OVNuREFFeHVpUy95Tis2U3Zmem1BCnRMMTNsYkRGdnlSY0IwNXFONk4xTlNURElXcCtmRmhhNXpBQzlNZklydTA2RVdXL3MyRWtZYVFpdFdxNG9BREQKM0NmQ016SHBkYWNUcExsaHB3TnE3NWVkUUNZNXpuTHl6TjZ5U25Qa3JOYnIyMWpjVVJDai9udU9JbGJocXJISwo2cWhFYktNTjkvcWhoblY4YWZ0c0cxVE1WZnp4cmxtd2hMTmdTZ1VzSjk5d3l5L1M3UkFnWkI4cmhTWGlFZkJxCkRnSmNSOE5EMEdZSGFWQmx1a2RDaExuMDNYaUN5czlxa25LaFdQdGE5Zk41bXlmcUJ2NnNyRWhveEF0NEt5RFMKbFpOQzJBTVN0bW9FTFR2cm95USsxTFFEdXpmZkZTVT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURxRENDQXBDZ0F3SUJBZ0lSQUpRTzdSZDRRYWQxMFZPa2JUZHplZFl3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV4TmxvWERUSTJNVEV5TVRJeApOVFV4Tmxvd0tqRW9NQ1lHQTFVRUF4TWZZMngxYzNSbGNtMWxjMmd0WVhCcGMyVnlkbVZ5TG1OcGJHbDFiUzVwCmJ6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUtzNVYxcTE1RVFBcFhic2t0Ym8KM1dyc3NCQnVLUWRFdVNKQkxiUUxpRnhqT3BhMkpnemE1UFppVWRYMTFWUzh0WnBnQnRaZFhKSWhMbWN3Q2VGcAozR0ZDZ0VnRGhTQmpVQTQ2cXQvSm4vZmdOOEtUUEFlVHZVVVo4ZUxyQUc4L0E4djVwWndoRUsxb1RWdGZ3YU5hCnF4N1dSL2M2UG1wZHBTTTBMSVJWTHpTWlVhU2pCUzUvZzN0NXBseTBkazdzd2Vuei8veS9vTjBacmt0YVJvek0KRFp3a0Z4TjN6a3UrS2d3cTl5K3dZZXkrVFQvM0tVWHVlSVRFUzRmalFSa3U4amJVQUhRT2h1T0FWOUd0MjZuNwpQWW91ajliRUhpMTlEaE5rR3N4L1FnNjQydmVPdDljN3cxeXdOUE9Zb0R6aGViVDhQbmc5Vk82Qk5SNU00dnlPCjNhMENBd0VBQWFPQjNqQ0IyekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUgKQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3SHdZRFZSMGpCQmd3Rm9BVVZnVkdHYkJmM3V4TApjUkFETGFOMHlXM0RTSE13ZXdZRFZSMFJCSFF3Y29JZlkyeDFjM1JsY20xbGMyZ3RZWEJwYzJWeWRtVnlMbU5wCmJHbDFiUzVwYjRJUUtpNXRaWE5vTG1OcGJHbDFiUzVwYjRJbFkyeDFjM1JsY20xbGMyZ3RZWEJwYzJWeWRtVnkKTG10MVltVXRjM2x6ZEdWdExuTjJZNGNFZndBQUFZY1FBQUFBQUFBQUFBQUFBQUFBQUFBQUFUQU5CZ2txaGtpRwo5dzBCQVFzRkFBT0NBUUVBM09lQWJUTzB5SFVzOXNqVHdnOVFzREMzaXlMTkdsYW84Wm45aXFldm1VMWlNZXZYClk4Sm02ODA2aVcrc0FGazg1U2h4RUpWSVVxN3E4Y3NmNGRMSjhyek5wNjlqM3ZHUjgvZVgzNjdiMlg4V0ZNRWkKS3pNZFBNV2tad2UxNFR6Y3BMaGxMK2hwM0tLbGZ1WDhLa0ZWYmtJWFBWQ2lWNk5SN2NDa1RRZzNuaENaSm14egovc1p4KytOVVAvWXdCVis1UTlHbVpQR3FkSWVvOU9GMUJ1NlBFTUNTalFzY0daek1yeUJESFVTeWw0akdSNVZHCmFEQkFvd3lmQ3BlWjhKM2FZeUczMDdGd0tMcDI0RkMrbFZoTDcxWTNRVitEU3ROZldTOU1xNXFVRllzV3k5TGQKclB0S0FRQWwxUTluOGtqSFFvQmhYbXo3ZGlZdkJOaUZnWE1aUlE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBcXpsWFdyWGtSQUNsZHV5UzF1amRhdXl3RUc0cEIwUzVJa0V0dEF1SVhHTTZsclltCkROcms5bUpSMWZYVlZMeTFtbUFHMWwxY2tpRXVaekFKNFduY1lVS0FTQU9GSUdOUURqcXEzOG1mOStBM3dwTTgKQjVPOVJSbng0dXNBYno4RHkvbWxuQ0VRcldoTlcxL0JvMXFySHRaSDl6bythbDJsSXpRc2hGVXZOSmxScEtNRgpMbitEZTNtbVhMUjJUdXpCNmZQLy9MK2czUm11UzFwR2pNd05uQ1FYRTNmT1M3NHFEQ3IzTDdCaDdMNU5QL2NwClJlNTRoTVJMaCtOQkdTN3lOdFFBZEE2RzQ0QlgwYTNicWZzOWlpNlAxc1FlTFgwT0UyUWF6SDlDRHJqYTk0NjMKMXp2RFhMQTA4NWlnUE9GNXRQdytlRDFVN29FMUhremkvSTdkclFJREFRQUJBb0lCQUY2VHhkU3RNL0Q4Q21tdQpNMDNTUXJ1VkVZdUJ6ZGZkOWdVZHk0anY5ZHBTVlVKNlNuby9Uc2xwZFpxaHQ3eWVvQkV0aVpsTzZKc3ZDTnFtCmhrNmtrcjZHWlNWaURGN2ZmSkRmaHhNbDQ5NmZVeTErOW1HWkVhcmhzZUtOdkNlMnZ2b2tZMzNpSmJ3aktOZVkKQlBXZVYzY3BGWWRSL0xmMEVndG4vazc2WHFER1IrWkRlUlkrV0FydHZGVUN0Z0ZtRGxPMTBFWklnOWp4Y0dLeApUQkVBZ1dCQjhUVjZJOFMxQ0JtQXJZZkV3bW1ab3RIcnR3bHYxVUNJalBhUnJlT2FJenJ2aFR0Rmt2aWVVWkVKCm44NzllZXlCZHFqMGp5VFNFRjNEd1NIN0NDMUxMUkh2eFlaS3FFMzNKWUFIK1R1aVNLaExkODlXVEYrNzB3dVQKZVhiM3hHRUNnWUVBeHpBKzRhRG9mOXJIRWFSV0pTa2dNVy9LWWtFUzJXaGJkcnUvZE5Za0x1NjJ4U2JqUUMzLwpXbkJwNnJRelMwaXBzaWZTSFEyS1FtWmlKc3NOK3RxUlZTTzBzY0liUC9nOWFBS2VyRi93VjAzLzdOTktuYWhzCjhVbk5TOENhQ252Q3VtV3M4WVNuTXRuU2dXeGVwci9LQ3FRK2FXTWxEVG44Y1BoTHlnTFhyTGNDZ1lFQTNBOUUKdnB5a2pEQ1ZIRjNiR1dTQzluZjd3emFNb1RPSUgxRmNYcC9oWTYzTXNjUCtIVkNMTGxNYldVQTlKTXZTNURoWQpsSlhOMkcyM2EwcllURUsrMU1QSkI2eWN5WE1JQnZQUGEwOStNU0ExMng1VEpNMTRTVUdjZVZvYnk5cVBwMmhTCmF5TlcyZjlIQk1ad0tnRU9JQkdzazR5WC85QVJySUVvQ3JPTjdMc0NnWUVBaGtsaGEwM0cwVU9XaDY5S0lIMXMKWmNmZklvU0toNlhTVytiUmVaeFJBbzhQQ3pWZmFjcFk2QWozYnpNVGpjS3NIUjY1aWJxeUpuZk4zaWR4QWxqTwpPQjc5V0FYcnh5RzlqRnlQeXRoWE9SU3Q0R1RHWGluSllKYUg0SFUxcExHeEkyY2V4Q2pSYS9mcjhqTTBVS2ptCk5teHFZelJqSzFxWGRUWUFLbTNtSjFzQ2dZRUF2ZmxNYm9XS0pDQll5YmxZeVc0VkJUT0ZtL3crb1hkOFB4VWMKK2U5cVE0UXAzeGtGQ2tlYkwrMjlBV3JNbmpSN3BsdmlWTHVTamhJQnMxVlVyMWs3cHpBeUh6YnJ6NWxIeDhDNQpRcm5JaGg1NWYrV0kvNCtHRlMvWUpvY2MwZnFuNDJ6VElmekxJTDBaa1V6Q1RmREZRZmdnRk96ZDE1REhnVFdxCjNMb3ZmcnNDZ1lFQXJOUFlHNE1WeE9mNllIa2xzSHpEWnF3UmNtZG5WL0FyTVRTUnNtYnRna0sxTGROSGpiN28KSFRRUVRJM0FBRkxBWnk5VEtydFFsakVmaS9BMjVWdXJNeXNobDAwQmxxQ0U2L21HeTFTRUNST2w5ci9aL1FaawpnUElXbWdUcG5HMDhtNml2bEY3NHRJc3BicktTSXJ5R1F6bVZCU0ZGbjhPOC9WZENmSXNieVkwPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRRXRTb0dmc1JlQ0dEdlVtdUk5YjdMakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEUxV2hjTk1qWXhNVEl4TWpFMQpOVEUxV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRG1DOURCVEFrNWRyS0dTU01KZHVEcEkra2g0T29RcWtBMFdZZUtJZFUvTlAvcnBzbU4KYjNLdHREV1FDOUJBQzcyQXlQOWtmWjJCa2IyampWcnNlbmp5dElsaFpnQThDN3NOQXhLcnlkK1ZLb3Y5QXJyUQpSSXVTQWhsZk1rWDg4MGN6cW9rMlV3NEp5RjAzZHdRU3ZhbGU3eElCSGxnYytvbVBCN3VEWndMcmtXT25jQ2Z1Ck10QUE1ek1TY3dydS9ockdUL1ErTnZ6aVorUWxsaG51Zy9lNjJqOFBnSU5mZ0lDcXN2NGpWbjNlTmZDZDViN2EKN0FUMk1yTzdRQndvajNNcTF1Y1ZKQnFoSEIyc2JBR2NmN3lwQy9zM0YvTHkzdlFSZkVMRytxdXdXQmVuTjRidgpIdTJFSGhRcnQrbVpZbTJ2UzYyRmVtZndHZVVaaHVXZjBMQ1ZBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVWZ1ZHR2JCZjN1eExjUkFETGFOMHlXM0RTSE13RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFETzVYK0NtZm1UR2JiVUgzOGk0elhKZW9pd2NRNFVTOEZ6OVNuREFFeHVpUy95Tis2U3Zmem1BCnRMMTNsYkRGdnlSY0IwNXFONk4xTlNURElXcCtmRmhhNXpBQzlNZklydTA2RVdXL3MyRWtZYVFpdFdxNG9BREQKM0NmQ016SHBkYWNUcExsaHB3TnE3NWVkUUNZNXpuTHl6TjZ5U25Qa3JOYnIyMWpjVVJDai9udU9JbGJocXJISwo2cWhFYktNTjkvcWhoblY4YWZ0c0cxVE1WZnp4cmxtd2hMTmdTZ1VzSjk5d3l5L1M3UkFnWkI4cmhTWGlFZkJxCkRnSmNSOE5EMEdZSGFWQmx1a2RDaExuMDNYaUN5czlxa25LaFdQdGE5Zk41bXlmcUJ2NnNyRWhveEF0NEt5RFMKbFpOQzJBTVN0bW9FTFR2cm95USsxTFFEdXpmZkZTVT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTVENDQWpHZ0F3SUJBZ0lSQVBHOGNSOHYvWmZjUzRCTnhLVktiVU13RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV4TmxvWERUSTJNVEV5TVRJeApOVFV4Tmxvd0l6RWhNQjhHQTFVRUF3d1lLaTVvZFdKaWJHVXRjbVZzWVhrdVkybHNhWFZ0TG1sdk1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXV6b1BmNXRONm1XSEE4aWR2SVd0WmR6OEMyVlQKc0pzRlYwZjhtd2tleEpVQ0RTa2dMMDFUcmxNSi8xeWZGb3E4QjNrL2dRNmRkY0REQ2ZBQ2tlQ2k0a0Z3Q0lGRwpDSDg5UzJ2d1RUZy93eW55QWNOUUdoZFpUVEc0bkNGd0orSlU1a3RRTDI2VFN3OURienpobFZzbWlMR0xza3phClliRVRjT2orbmpnUUVIL3VOZlZXYS80MDJ5Q2NUa1kvMlAvQ0V4ZS84TGpibC9TWG5xWk0zN1d5c1N0cFRlQ3AKejRSdFhtd01WNTZBVWFyNGZoQy9ONCtycjRHdXlnWnRXWEpNdVRnNGhmZDkzVXVlVCtoblAvZ0VjSjg3WjE2egpGR3FzR0FyT0ozZldOREpML21pY1hMYXZrZGt6NGdybW1VYWdjMW55b3Y3TWZWQm5RZEhqRmJmRmp3SURBUUFCCm80R0dNSUdETUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUIKQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCUldCVVlac0YvZTdFdHhFQU10bzNUSgpiY05JY3pBakJnTlZIUkVFSERBYWdoZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d0RRWUpLb1pJCmh2Y05BUUVMQlFBRGdnRUJBSUVDRk5vM1hkekNpbTduck9MU1EwSytmR2xFYTgvYlFldVcreVhnZG5xTU9kN1AKeXFCRkhNdE9WcUZWVFZuSzM5VCtEeTMxeGpjNStwWGFjNmFLY0ovdW5YSzJyeUI3RHNIeFFTT3d5bDdUSWdvbgpHL3gxMmtSaWp6RVh4QzAwL3I1ZnQvSE9Jb29QRTlXQnlXOXJHWVRyVUpjdFNITUpQUmRxNnpuUy83RDlraUxkCkZSbWcvMElKWUxkV05qc1dBRlk2a1BLZ2l1SUZSRTNjTW44WTlCZXVjNE9qaGgyUUJpNUdXQlV6NFBpY3grL1EKZjJHMENDNC9JQWsrMDNiS1JRVmRrR1ZRUkdIT29TVEY0aklrajlhaEVSVklHNlBtdjRNMG5ieVlkQVoxVVUwLwprRzZkOWpDbHpSR0E1NWQvSkQ0Z3VRMk1ZQk41YU94dVpVcFp0YXM9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdXpvUGY1dE42bVdIQThpZHZJV3RaZHo4QzJWVHNKc0ZWMGY4bXdrZXhKVUNEU2tnCkwwMVRybE1KLzF5ZkZvcThCM2svZ1E2ZGRjRERDZkFDa2VDaTRrRndDSUZHQ0g4OVMydndUVGcvd3lueUFjTlEKR2hkWlRURzRuQ0Z3SitKVTVrdFFMMjZUU3c5RGJ6emhsVnNtaUxHTHNremFZYkVUY09qK25qZ1FFSC91TmZWVwphLzQwMnlDY1RrWS8yUC9DRXhlLzhMamJsL1NYbnFaTTM3V3lzU3RwVGVDcHo0UnRYbXdNVjU2QVVhcjRmaEMvCk40K3JyNEd1eWdadFdYSk11VGc0aGZkOTNVdWVUK2huUC9nRWNKODdaMTZ6Rkdxc0dBck9KM2ZXTkRKTC9taWMKWExhdmtka3o0Z3JtbVVhZ2MxbnlvdjdNZlZCblFkSGpGYmZGandJREFRQUJBb0lCQVFDbldLUVZ1T2tSdzZIRQpmZ0tQU1NUTjBaSHZWYWhTU0oyamdCS0hPTVdwakU2REdPbE5ubDVYaUoxOUJIcW1HV2NyZnZLR0Zsd2pyaUltCnRjSjJSVVVSMnMrYXFvSEFnb3AwNll1bVdjcVVWTitkTjhoWEtkdUdKaFVPYU16b3VXS05YVy9VbFk5T0hkeDIKaHdKVEQyQUgram9WS3FCZmhYa05DUlRjc3R1WkFsaEhlQXRER1JudTBJR0hxcFg1WFJ5U3luNXcyNDd1a1ZVZwpxMTgzcVY2K1VSSHQzZFJIckhuaDJLTjdwb3R4UmtuYlN4eCtRNGFBZVpJVnc5UVBuSmUzcWdmSXplcGFtc29WCnIyUDhiNk54RGF2b3V4M1JUMVdUQ29mN3JndVhsS3YwZ3ozbk1lbGkxUnExTWpJV1dyVnpLZVNVN29ld2xMdGIKb0JVZjZHMVJBb0dCQU9XUDF1bHd2MmY2eldKbHpSMkVTZGxud1RxRGU0NnExZ1ZYQUg0SzZ6bjV1U3JadUhEZgp0cEtZTTNPaVl4S1FzMit1Y3dLbERpOHQyMlhCSitTNWo3dWIxRHdiN0taZmtoSHNOOWNjbDlpemViQnlSQSthCkV3Q3JyaXFpSjlubGQwL3RjR3k1dDJqeXBla090K3ZlTzlmWmEwRkVva05vdzF3YWFKWnQwTXlWQW9HQkFOREsKRHV6Mm5Id3F3ZE9uQmlEZkdBbmR0cVRGM2pJN2RZN2FoVVNDTU5hYnRHMENuRTNhMlpHYk56Tnl2QU9SQWxMdgp2ZS8reXFRT245NEpXKzhrNVJRTHprcEhqLzA5TGhtSFZlODFqSHhTdFh4UXZCdWRMVTh6YUk1cFhEbTJDSFFjCmxKR295TUFNMXIzSGJLVUU0TlNEMzlGUitLbjd2Q0Q2TlQ4Z0toeVRBb0dCQU9EYmpnVkcvUldhb3djWTlGdFAKTXc4VEJFQ09mYjUzTkFBekFqWno5NGpvUlNubDdUWVN5OEMzK04zeFY5M2Rnd1dIK1B2RU5TcWRYbVJEV1JJLwplTHlwbksvc0lsZXRFV1VnM21tRWhuQXJESzE2bjVRd3RTQlpDZGFVMHpncC9qNTZNejhzZ3F6MzBPK0NEVUdxCmd5K2d0ZUJPbkNvdk9mekRtV0tQMnBBcEFvR0FlZ1g5WHlScUpHOWd4SEFUTnRicjE2aEtmRlpnRy8rQUh6TTcKTytUUzRqb3g0cHZwK2Q1ejFaTmZXYVF1bWU3LzZyVE96eHFjRi9Hc0lUcGJEcE1EaHdtM1VOWXVJeFRFZ29zRQpBRC9Oa1VOTmFoQk5QOTVHZ3NsS3pDQnJsQmI5TGM4ZVRWclZxTmhZRUtZaXF2Y0U1MjhET2ZTc1hid1FJVDNhCkxNQ0JuQjBDZ1lCV09NNEVXSVlDdTg5RjkrenRCY080bVV1RHA3cTBsenViZklzMlZ5REJCbjVJVzc1QUxUZG8KV0F5c3UzRDZvRjJVcEYwK3RSNWNDaWV0U3NEN29aS2NHaEtwL2xUdlR6L3g0UVlla0dWYVo0YmxjUUVYbkxNcQp5cFpFTDZNNWFEajQxM3hDaHRLSFhncTlscUJiOUVUREhrRktIODNCZXA1c2xZUGthT3Roa1E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRRXRTb0dmc1JlQ0dEdlVtdUk5YjdMakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRJeU1qRTFOVEUxV2hjTk1qWXhNVEl4TWpFMQpOVEUxV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRG1DOURCVEFrNWRyS0dTU01KZHVEcEkra2g0T29RcWtBMFdZZUtJZFUvTlAvcnBzbU4KYjNLdHREV1FDOUJBQzcyQXlQOWtmWjJCa2IyampWcnNlbmp5dElsaFpnQThDN3NOQXhLcnlkK1ZLb3Y5QXJyUQpSSXVTQWhsZk1rWDg4MGN6cW9rMlV3NEp5RjAzZHdRU3ZhbGU3eElCSGxnYytvbVBCN3VEWndMcmtXT25jQ2Z1Ck10QUE1ek1TY3dydS9ockdUL1ErTnZ6aVorUWxsaG51Zy9lNjJqOFBnSU5mZ0lDcXN2NGpWbjNlTmZDZDViN2EKN0FUMk1yTzdRQndvajNNcTF1Y1ZKQnFoSEIyc2JBR2NmN3lwQy9zM0YvTHkzdlFSZkVMRytxdXdXQmVuTjRidgpIdTJFSGhRcnQrbVpZbTJ2UzYyRmVtZndHZVVaaHVXZjBMQ1ZBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVWZ1ZHR2JCZjN1eExjUkFETGFOMHlXM0RTSE13RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFETzVYK0NtZm1UR2JiVUgzOGk0elhKZW9pd2NRNFVTOEZ6OVNuREFFeHVpUy95Tis2U3Zmem1BCnRMMTNsYkRGdnlSY0IwNXFONk4xTlNURElXcCtmRmhhNXpBQzlNZklydTA2RVdXL3MyRWtZYVFpdFdxNG9BREQKM0NmQ016SHBkYWNUcExsaHB3TnE3NWVkUUNZNXpuTHl6TjZ5U25Qa3JOYnIyMWpjVVJDai9udU9JbGJocXJISwo2cWhFYktNTjkvcWhoblY4YWZ0c0cxVE1WZnp4cmxtd2hMTmdTZ1VzSjk5d3l5L1M3UkFnWkI4cmhTWGlFZkJxCkRnSmNSOE5EMEdZSGFWQmx1a2RDaExuMDNYaUN5czlxa25LaFdQdGE5Zk41bXlmcUJ2NnNyRWhveEF0NEt5RFMKbFpOQzJBTVN0bW9FTFR2cm95USsxTFFEdXpmZkZTVT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUekNDQWplZ0F3SUJBZ0lSQVBNR0RBckFKY3ZFd2JyZWdxRE1MblF3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFeU1qSXhOVFV4TlZvWERUSTJNVEV5TVRJeApOVFV4TlZvd0pqRWtNQ0lHQTFVRUF3d2JLaTVqTVRNdWFIVmlZbXhsTFdkeWNHTXVZMmxzYVhWdExtbHZNSUlCCklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUE5blZGaW5iVXNWTXVBTmpOS2c0dFJYWjAKVS9ZTFp2elE1Yy9LZjhBQVNvRVAvYVZ1V005aStuUjgvZWYxMnJDNEF0YTZsczdBYWtleGFsV01xNFRsbzQxaApwdHQ0VFdTdGhBeGYvK1dZZXNwbFJ3d25JYWxNU3ZpQVhKTnRLQkx4RVp3aWNtVGNINHphVzc4bnZ6T2JZcStXCklDTFcvdW1iaFhlMFlmbFVnczdpQ3hUYnFUY3RVcFJYRnVrUUpGMkdBTVU3Tnd3VVhoOXdPNTF4MGFOL2p2cXgKWXhTbnZzQ0lIaXhDNG0zdDc2VDNjWnlNOG1RcEtzcEhuK2kvODVaeERmaVZ4WGczOEtBZzhraHEzZUdOdUM0KwpkS0hTSzVCZGtJUDJjS2FrVWlwMFlIZWdyWkZXT3FhS241ZFJnOGJLNjJ6K0Y4YUEzRVBxYnhzUDRYeCtXd0lECkFRQUJvNEdKTUlHR01BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWZCZ05WSFNNRUdEQVdnQlJXQlVZWnNGL2U3RXR4RUFNdApvM1RKYmNOSWN6QW1CZ05WSFJFRUh6QWRnaHNxTG1NeE15NW9kV0ppYkdVdFozSndZeTVqYVd4cGRXMHVhVzh3CkRRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFFZXR5WlMvbXZ5bjEvWFlvMUd4UDU2UWdGRk9uWUVNelFtSStNY3MKNHA0LzJ2b3VoSDNOaWgzS3lSdzV1QitZcE1yb1VXa1hUbk5xcFd4Y3UyczJSRGJTRjlGcHkzb0lFdUFraisyWgpQbHBVMWVmSlNUSlAzR2FjSHVGbTNoQmVNVERqZ2Q4bTlXQy8rTzJkZ2huMldENm9Ta21laVZLLytDQzZZejU1CnlsMFRkdk1Xa2VmeThTNEVQYnZKMUVKN1Y3RkZMSHZtWnRNdk0vaGlKb3A3ZzZPOXdZRlVhMnhoRFEyaUFad3MKRHQ2NGdGeG5vc1hVdUR0eTRiRGRqVTR4NlhkRWY4NTZucVpwRXZOWkVLRnhMVXgvR05tN3hDRCtMTms1SHFLWAo5ZmtWYWZzZGdtTmVsTHZjSlpmaDViampsQ2tCK1M5TW5FaHhqdHhhNzA1U041WT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBOW5WRmluYlVzVk11QU5qTktnNHRSWFowVS9ZTFp2elE1Yy9LZjhBQVNvRVAvYVZ1CldNOWkrblI4L2VmMTJyQzRBdGE2bHM3QWFrZXhhbFdNcTRUbG80MWhwdHQ0VFdTdGhBeGYvK1dZZXNwbFJ3d24KSWFsTVN2aUFYSk50S0JMeEVad2ljbVRjSDR6YVc3OG52ek9iWXErV0lDTFcvdW1iaFhlMFlmbFVnczdpQ3hUYgpxVGN0VXBSWEZ1a1FKRjJHQU1VN053d1VYaDl3TzUxeDBhTi9qdnF4WXhTbnZzQ0lIaXhDNG0zdDc2VDNjWnlNCjhtUXBLc3BIbitpLzg1WnhEZmlWeFhnMzhLQWc4a2hxM2VHTnVDNCtkS0hTSzVCZGtJUDJjS2FrVWlwMFlIZWcKclpGV09xYUtuNWRSZzhiSzYyeitGOGFBM0VQcWJ4c1A0WHgrV3dJREFRQUJBb0lCQUh4QjhBZTVsYzY1azA0VwpBSXFkanpHZ1lWSWJrUEFoc3VqSzlOdW4zLzJ3U0hHbndKVENLckwvbkMwZmtCTHNXam9FTFJydnJvOW5DZ29FCmkrSEdKVWxxZEx0OWw0L2RuS1lnM3gzVGtpY0dlRDF6NFI3VmpvT1YrcEd5T3F5anNDc2l2ek5ScXJHMWdEb1YKakdLWUVGV1hGV2VxYVI4b2hLS3NFYVA3NHlIM1V6S3VmR3dTcS93dnlBZFF5QTlVV29uRkxteDNUQmp0NnptagpkTVM5M2VWWGVabkE2ekpQUU51SGRkZk1tNmEwa3gzbTVJb0x6bWxSRUxHT29VV2V4dE9jRHltc0lHelVkaS84Cm42Yk9CRGFPVWNGM0J3a3d5WGovSWxOa283S01CMDg3djhoTkJ2NVptRENJTytDQmhhQ2lMZ09IWERxeWhxTzgKUDJjQldFRUNnWUVBK2Z2aDlPWnY2UmJIbUVsck1OZjR4eCtpQ1h5OUZMVG13enNGZVR3dWxkUko4aEJwVUYzSQplVlZnR1FIZVdUM25udFJwRmFDSmx2WnFwNGZ1bEZJSnRVWnBBRWhyQjNJQ2VuOHlqKyt3L1RtcjJhdnhXckpRCkYzS0VTUXUweFdkL3g2Z05JbzlLdGVFWXAwTXMyaHRGdWZ2U2R0NjZJbEJYa2d4NWZrZUFPZXNDZ1lFQS9HT3EKdUJHY1ZBaERpQmhuNDVyendRUlFkSFF0cmR2Z05oQVZjeXFvUW9vcDRpR3pJTTlTN2UyUTBpbk41R2g1dWJoaApSR1Q4NjhKc21FOWs1WU1sdDJnbURkZjBCaXRPTm5YcUxTZFM3T2VNZXBKNjhReVJSMk8xUGhZb2w1ajJINEF3CnU3cExDRlE0SWRwajlJY3dsUFN3QitZdkFPUkpyZXNEMlBMQXdWRUNnWUVBblkyMEh0N3huNDI4NUcwNWdzSkwKeUd4V2V2WkVVWDJtaDF0Mm1xOWtpUWdRUnVFekR2VGN1aVFsK2Z6a2Y0aDFwL1FsK3Z5QVcwWVplRmRDOWZZeQpxaTZqVlF0UGNaVFluUTMzOXlIUmdmZk1LTmVtdVV2ekVLUWJYZEpqNzVySXZUUmNldkNtM0xUdkRkUlh1MnMrCjZmWWQ4czl6cnRiR0tvVjBPVE9sVEZzQ2dZRUFzTGNjTHB0dUNNeHNkRnNhU3B3UTllR09iNnQwM0ZtcWlGQUUKcE1tR1hHaWU0TTFWdmJCTVVYbFlRRDZ6QWExQkpZOTYwMGVlYTNpTFRxMndhSjdHQnIvdWZSenFxSE1qNVMvMAprajhKYWdUS01IeGxobWVWUlJZRUxmK1gxbVZzVnl3TGN6WUNHVWZXc2FWVy9UeTNBR1MrNkJqOGFqUnRmaytpCk53SHBnckVDZ1lFQXhSVFJLYm1MNzVsMHdCRytPY3RKYjA1UkNWbkFhc2lGVUFVL0JvamQyU3JFWE5EemdnKzIKaVpYZlFqTHZ4NlMzRDdMbjVsMTF2UElaNUJ0QVJhd3RYZHdEMUp6MllEMUJuZExSMkdNSGVRVlRoV3ZUYlBndwpNd1BqaFJvalNqWkd5eGhoSzJrRE5DdGVFOFBPVGV6M2x4Uy9MTXlCK252OHhlNHJIQnBMTXk0PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  skip-cnp-status-startup-clean: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: c13
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "113"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  # Default case
  routing-mode: "tunnel"
  tunnel-protocol: "vxlan"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-wireguard: "true"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-local-redirect-policy: "false"

  kube-proxy-replacement: "false"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  enable-host-port: "false"
  enable-external-ips: "false"
  enable-node-port: "false"
  enable-health-check-nodeport: "true"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  ipam-cilium-node-update-rate: "15s"
  cluster-pool-ipv4-cidr: "10.13.0.0/17"
  cluster-pool-ipv4-mask-size: "24"
  disable-cnp-status-updates: "true"
  cnp-node-status-gc-interval: "0s"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "true"
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"
  k8s-client-qps: "5"
  k8s-client-burst: "10"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-connect-timeout: "2"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"

  external-envoy-proxy: "false"
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: c13
    peer-service: "hubble-peer.kube-system.svc.cluster.local:443"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-hubble-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-hubble-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumendpoints
  - ciliumidentities
  verbs:
  - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumexternalworkloads/status
  - ciliumnodes
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumendpoints/status
  verbs:
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumexternalworkloads
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: kvmesh-metrics
    port: 9964
    protocol: TCP
    targetPort: kvmesh-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: NodePort
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
    nodePort: 32379
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-agent: "unconfined"
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: "unconfined"
        container.apparmor.security.beta.kubernetes.io/mount-cgroup: "unconfined"
        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: "unconfined"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        lifecycle:
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - CHOWN
              - KILL
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
              - DAC_OVERRIDE
              - FOWNER
              - SETGID
              - SETUID
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Unprivileged containers need to mount /proc/sys/net from the host
        # to have write access
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        # Unprivileged containers need to mount /proc/sys/kernel from the host
        # to have write access
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Unprivileged containers can't set mount propagation to bidirectional
          # in this case we will mount the bpf fs from an init container that
          # is privileged and set the mount propagation from host to container
          # in Cilium.
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - cilium
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      # Mount the bpf fs if it is not mounted. We will perform this task
      # from a privileged container because the mount propagation bidirectional
      # only works from privileged containers.
      - name: mount-bpf-fs
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        args:
        - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
        command:
        - /bin/bash
        - -c
        - --
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
            drop:
              - ALL
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        resources:
          requests:
            cpu: 100m
            memory: 100Mi # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
      - name: host-proc-sys-net
        hostPath:
          path: /proc/sys/net
          type: Directory
      - name: host-proc-sys-kernel
        hostPath:
          path: /proc/sys/kernel
          type: Directory
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              - key: ca.crt
                path: client-ca.crt
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.14.2@sha256:52f70250dea22e506959439a7c4ea31b10fe8375db62f5c27ab746e3a2af866d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      initContainers:
      - name: etcd-init
        image: "quay.io/coreos/etcd:v3.5.4@sha256:795d8660c48c439a7c3764c2330ed9222ab5db5bb524d8d0607cac76f7ba82a3"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
        - |
          rm -rf /var/run/etcd/*;
          /usr/local/bin/etcd --data-dir=/var/run/etcd --name=clustermesh-apiserver --listen-client-urls=http://127.0.0.1:2379 --advertise-client-urls=http://127.0.0.1:2379 --initial-cluster-token=clustermesh-apiserver --initial-cluster-state=new --auto-compaction-retention=1 &

          # The following key needs to be created before that the cilium agents
          # have the possibility of connecting to etcd.
          etcdctl put cilium/.has-cluster-config true

          etcdctl user add root --no-password;
          etcdctl user grant-role root root;
          etcdctl user add admin-c13 --no-password;
          etcdctl user grant-role admin-c13 root;
          etcdctl user add externalworkload --no-password;
          etcdctl role add externalworkload;
          etcdctl role grant-permission externalworkload --from-key read '';
          etcdctl role grant-permission externalworkload readwrite --prefix cilium/state/noderegister/v1/;
          etcdctl role grant-permission externalworkload readwrite --prefix cilium/.initlock/;
          etcdctl user grant-role externalworkload externalworkload;
          etcdctl user add remote --no-password;
          etcdctl role add remote;
          etcdctl role grant-permission remote --from-key read '';
          etcdctl user grant-role remote remote;
          etcdctl auth enable;
          exit
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        image: "quay.io/coreos/etcd:v3.5.4@sha256:795d8660c48c439a7c3764c2330ed9222ab5db5bb524d8d0607cac76f7ba82a3"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/local/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=clustermesh-apiserver
        - --auto-compaction-retention=1
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.14.2@sha256:0650beac6633a483261640b6539c9609f5a761f4ab4504fd1e6ffe7f2bb82e9a"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt
        - etcd.config=/var/lib/cilium/etcd-config.yaml
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: IDENTITY_ALLOCATION_MODE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: identity-allocation-mode
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        ports:
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir: {}
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "clustermesh-apiserver"
      serviceAccountName: "clustermesh-apiserver"
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: clustermesh-apiserver
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.14.2@sha256:a89030b31f333e8fb1c10d2473250399a1a537c27d022cd8becc1a65d1bef1d6"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            tcpSocket:
              port: grpc
          livenessProbe:
            tcpSocket:
              port: grpc
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          - name: tls
            mountPath: /var/lib/hubble-relay/tls
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Always
      priorityClassName: 
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      priorityClassName: 
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.12.0@sha256:1c876cfa1d5e35bc91e1025c9314f922041592a88b03313c22c1f97a5d2ba88f"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.12.0@sha256:8a79a1aad4fc9c2aa2b3e4379af0af872a89fcec9d99e117188190671c66fc2e"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
---
# Source: cilium/templates/cilium-secrets-namespace.yaml
# Only create the namespace if it's different from Ingress secret namespace or Ingress is not enabled.

# Only create the namespace if it's different from Ingress and Gateway API secret namespaces (if enabled).
