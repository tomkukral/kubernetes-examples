---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRQWtyalRHbldmVGtoa0JCaURGQXkxakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek0xV2hjTk1qY3dOakV4TVRreQpOek0xV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzZqaTU5Tkh4YjdRYlRZMFZPeWowdUJ2Rk9BeWtJQTNJVzhZd2RFN1NNUnVSZm1ERnUKRFB4ZnlvTHYwZUR3bE10di9vaVBOZDdJdWlxRXcxRkdKQ0lmTzgvVlByTENYVFhLRk5oOXo5c3RiZWk4VnRaSQp0MnBlL3E1L2hzMFNzQlBlbVQzaVczZWdWSmpqSUM4Z3VrLzU5bTgySjdHanhLUDcyd1NmVDhNVHBDVkRpczdRCm1Ydm9mSHBiRDQ3emROQW1CbHVDYzJKaGVwbkk4aDhua09WRUtCTjdIM3ZnTWdpWXB1V1pyTXNSL2FVQ3dyVUoKb05zNFQrdEM3cEx0ZFJwa0s2eE9PenF1aG4zQktoL2J5eHIzSms3NzliSGloempvcFdneG9pMVhGeEVQSHVuNgpWSGFEQnIxT1BoTDV6ZWtpUUxOYlErZi91UHlqNFpDeCtBbDFBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVmV3p0WnZ5UndETHB0SjFPY1orZW1EWHNHaGd3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFEL2lNaDZQVHBvMzJNazA4dnRtWTZGL0xMdmIrazREZ1VmK09iSm9QYitIai9INHFJQUdFa0tyCmE5Y3BnS0VtQkNrZVdkMWlOVlZKOGxyblJrdVRoRU9GZ3NZT2FUaXVXcGVZblZmeGxVTC9xNG83aXp1YmxOcEgKR1ZSS0RwQmgzbExJR2dyeEJVMFM4QWFoSTJGMjIxb1V4QU5qWVBiNS9MVVE4QVd0WW1hZ2tnMlRSUjV4T1JpVgpSbWs2S3FueGFUa2dMTjEzYWZaazMvTlhiZWV5dGRodUVaTHBibGRuT1NtRFVrbHJwSHR4RFpzejVjeks3ZXptCjU4MFlieGwySmI0cXY2NWYrMytLRnVFaE1acWlpNm5YemprUEhIVUlEdjhwb3Z5UTlRNFNUaFpZOG1mSUJWVnMKVnZ4Y0xGOUo5ZEhaUG5HZVh6a2ExdVdtcXc4SU5sbz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdW80dWZUUjhXKzBHMDJORlRzbzlMZ2J4VGdNcENBTnlGdkdNSFJPMGpFYmtYNWd4CmJnejhYOHFDNzlIZzhKVExiLzZJanpYZXlMb3FoTU5SUmlRaUh6dlAxVDZ5d2wwMXloVFlmYy9iTFczb3ZGYlcKU0xkcVh2NnVmNGJORXJBVDNwazk0bHQzb0ZTWTR5QXZJTHBQK2Zadk5pZXhvOFNqKzlzRW4wL0RFNlFsUTRyTwowSmw3Nkh4Nld3K084M1RRSmdaYmduTmlZWHFaeVBJZko1RGxSQ2dUZXg5NzRESUltS2JsbWF6TEVmMmxBc0sxCkNhRGJPRS9yUXU2UzdYVWFaQ3VzVGpzNnJvWjl3U29mMjhzYTl5Wk8rL1d4NG9jNDZLVm9NYUl0VnhjUkR4N3AKK2xSMmd3YTlUajRTK2MzcElrQ3pXMFBuLzdqOG8rR1FzZmdKZFFJREFRQUJBb0lCQUFMUCtldHhTeDZucUI2dgp0Ry9IcEx4NDVsSml3YytaSGJNeTJRWG5NaVdiTy80azhUblRnRXFCWncvdWZoR2liSjYzbTU5dEZIcTZNOEhrCm4ra0t5bWptSWUvNURnRFlIdU41QlBxQWs3RlBvdDZVQUk4QUZONXh3SGV6dEl1L2s4MGJTaytMU1habFVCaTgKZDNscTFhSFRFVUlqdnczVS9SUGk3V0xwZE90cTIzMm1ueW8zcFVWNVNLU3N1b3FncmpsRkU5NmtwRXpkbEVwYQptTERuUGs5R0dyaEhwVzdZMFVZaXZ4RWwzamVwVnlOcHJTZ3hOQXJnY01DWVNFcERaYlVRNkVGbWFHOHpIZFhECktZWWhjOHZDSmg0cHlJVWZ5OXlOeXNRd1lXazVxQXZIcE5LVSsrVTlNMjZRTDI5bGVJblRpSm5GM04rOUtaQ0IKZ29IQy9BRUNnWUVBMVdSbHVGRlIxQmpLTk91c3JYbnZ3bzM0ZFI2MDZzR3dKaFZ3VEtqYm0xN1E2d1pJem4yZQpLcHQ1VXBrQ3llV09aSXFLbmw1V2VtN0NVNDZ2cGt2eUd2MlFQeG5ZVnF3R2ErQXN0QVBsM0MvUmZlL1NQYTRQCkk0TWtPTUo5RVdzV1hXSHVQeWRaLy85L1g0M0IzRmh0cmVnUDFRYVZmcFgxdGZkQ0lXTS9hVFVDZ1lFQTM4NEQKdGVRZlhlOHA4d3lSdVRocy9wUVc3c0RrRFlSYlFPN2ZXVnlGMFFSVGlEb3ZYZmhISTdPVjhWaUUyM2NzTWNPcQovRVlsQVdvVFk1MHRFMXNkYnpkS1BmZVZNMllkVnhlcHA1OG9IVXlISGFtejNDRzdNbE4wN0piQUtQckJKbGxSCnJWdFI2dzRnbGNmVzV1N2Z1dVFsNEJDc3NJTWxabDhoUHNpaVowRUNnWUJxT09yRm9IMDZOZ2paNVFMMDY4RGsKdU9VWDcrd2crNzlpaGNONzlZWXp4alA2K2dyZDl2djN1NkxkOGRySWc2T28rcW5jQVp2TW9Edk5lamFIY2tDWApIT2RqOGNxV0FsWEQ5emhwZDVOQlV2QldYejNwaEM1Mi8vM1UzME9BbXl6cjJTYk9leGs2N0lVTUhMV0dxT0lYCjhtK0hIQnJvZzE5bmNDaVVGQ0pwalFLQmdDKzA2SkdUU1NScTROUlFiNWU5OFczcS8yQnhlYXR2OVV2SUg1QWEKNnVOOU9wa2xYZ2QzN3lJckcrRlFiekdoRzZpWC94QzdteFBNR3NuM0xTNmRFNDhyaUFYaGlzcGtFQWtLb0QxOAo3YjRoSEFRMHNvUlFKR2s3NVFheHM5Q0ljemZMZmwrbndiU0xWR0xaTUhRVm8xZGhYcmwrbEhFajQ0c0k2RHRMCjVXS0JBb0dCQUtuUjB5UU5sVm1FYXNlWW02TTlVd083VjdkYXZYMG82TFlsdDBmUEVlZE14UGxFWXhBMUNEUVgKaHR5anR1VHA0Q0NON1M5WXNnZmc5MExtUDB6MmhHVDJjUFVpMWZ2ZndhUGhtN3JWSWRONWlHWkF4emM0Z3hLbgovZEFmTjNITlAzeVRjQzc5QWVVb2NVN0NqbHFRRElXTVdqWUNBK0d3ejRvNWxDK1FZVmF6Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRQWtyalRHbldmVGtoa0JCaURGQXkxakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek0xV2hjTk1qY3dOakV4TVRreQpOek0xV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzZqaTU5Tkh4YjdRYlRZMFZPeWowdUJ2Rk9BeWtJQTNJVzhZd2RFN1NNUnVSZm1ERnUKRFB4ZnlvTHYwZUR3bE10di9vaVBOZDdJdWlxRXcxRkdKQ0lmTzgvVlByTENYVFhLRk5oOXo5c3RiZWk4VnRaSQp0MnBlL3E1L2hzMFNzQlBlbVQzaVczZWdWSmpqSUM4Z3VrLzU5bTgySjdHanhLUDcyd1NmVDhNVHBDVkRpczdRCm1Ydm9mSHBiRDQ3emROQW1CbHVDYzJKaGVwbkk4aDhua09WRUtCTjdIM3ZnTWdpWXB1V1pyTXNSL2FVQ3dyVUoKb05zNFQrdEM3cEx0ZFJwa0s2eE9PenF1aG4zQktoL2J5eHIzSms3NzliSGloempvcFdneG9pMVhGeEVQSHVuNgpWSGFEQnIxT1BoTDV6ZWtpUUxOYlErZi91UHlqNFpDeCtBbDFBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVmV3p0WnZ5UndETHB0SjFPY1orZW1EWHNHaGd3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFEL2lNaDZQVHBvMzJNazA4dnRtWTZGL0xMdmIrazREZ1VmK09iSm9QYitIai9INHFJQUdFa0tyCmE5Y3BnS0VtQkNrZVdkMWlOVlZKOGxyblJrdVRoRU9GZ3NZT2FUaXVXcGVZblZmeGxVTC9xNG83aXp1YmxOcEgKR1ZSS0RwQmgzbExJR2dyeEJVMFM4QWFoSTJGMjIxb1V4QU5qWVBiNS9MVVE4QVd0WW1hZ2tnMlRSUjV4T1JpVgpSbWs2S3FueGFUa2dMTjEzYWZaazMvTlhiZWV5dGRodUVaTHBibGRuT1NtRFVrbHJwSHR4RFpzejVjeks3ZXptCjU4MFlieGwySmI0cXY2NWYrMytLRnVFaE1acWlpNm5YemprUEhIVUlEdjhwb3Z5UTlRNFNUaFpZOG1mSUJWVnMKVnZ4Y0xGOUo5ZEhaUG5HZVh6a2ExdVdtcXc4SU5sbz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLRENDQWhDZ0F3SUJBZ0lRVFRVbjF1K2NNYVpIamVEZXpOKzR4ekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek0xV2hjTk1qY3dOakV4TVRreQpOek0xV2pBVU1SSXdFQVlEVlFRREV3bGhaRzFwYmkxak1UTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ1dzNzdFcUVXU0t3T0gydUpiVjlsR2JhTDh2Z0p2QzRHNlhJMUtKT210dWxsdlQ3SzgKbUhRY2xJazNEMS9ITnpkdVI0Yk41MndYcDFkbWliQWVSSEdQdWJMZ3JON3o5TjVnSWQvdUJMdjc1dGVtbmRvOAp4MEtNOWNiRXVvSVB5anZ4bzdUOWtJR1Nxb3FmU2lZbWdBQTZWK0QvR2M5NDRaVmVVajV5TmJlbVlCeDh6QnNoClkrVkNEd1AxUUU3cVlLS2NvQWxoVm56NThzaVVBOWlyZnYzY1o2VzZRMkl1SnlDTVlaOTF5SXphTThaS0Q0bmcKL05yMTNuUWxRVkVZSVZtbzNHRTE5RTJlcUJ2SzBIZ0plY0xDODYyM2xhajV4TEowNExNQ0dybkdDQnlQR3BpSApXOXpJcjlCdk5VQ0RSd0VMTWg4SGRaTElpUGRGMVFnYm84dlpBZ01CQUFHamRqQjBNQTRHQTFVZER3RUIvd1FFCkF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXcKQURBZkJnTlZIU01FR0RBV2dCUjliTzFtL0pIQU11bTBuVTV4bjU2WU5ld2FHREFVQmdOVkhSRUVEVEFMZ2dscwpiMk5oYkdodmMzUXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSXRsanV6YTBCUUxkalhrRVNpMnYwZVJ3NGdDCnhMSXl5YjNJRHNBcDFBcVo1emUvc0JuZEFZM2lxQ2Q0dDdkVXpvcHVhRU01bFFtMmxzNjVvZTMvZGozckZFVFAKWllzSGtINDMrNHRFQU5pWTZvekxSeVUwbExEWEVQWkxSY29GQjZyYlVKSWxyRmc1dUdhcUJQb1hobWNVeCtwWApVWTdrbVNxWkRaa2w5a3hOUmxtS0lvekVFQ1RvL2NkTXhYK1BnSTlpZlcxMCtXbFp0aVJ6TFRPQjdxalNSWGZyCkk0NitWbm0xV3JpTE52QlNLUytMb0RjQ3lpcFU4K1NBYnRCb2RIYndnRG5GQy9vYWJXeVNMbjVVTk9RdFFaNWkKR2hpSTJVN3d5RVZDWTFNN3c1UktNQWF0VGxUbE5HUnJ6QVFTc1l0NE5BOXFiSkYwbEdtN2pmQkNKZEE9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBbHJPK3hLaEZraXNEaDlyaVcxZlpSbTJpL0w0Q2J3dUJ1bHlOU2lUcHJicFpiMCt5CnZKaDBISlNKTnc5Znh6YzNia2VHemVkc0Y2ZFhab213SGtSeGo3bXk0S3plOC9UZVlDSGY3Z1M3KytiWHBwM2EKUE1kQ2pQWEd4THFDRDhvNzhhTzAvWkNCa3FxS24wb21Kb0FBT2xmZy94blBlT0dWWGxJK2NqVzNwbUFjZk13YgpJV1BsUWc4RDlVQk82bUNpbktBSllWWjgrZkxJbEFQWXEzNzkzR2VsdWtOaUxpY2dqR0dmZGNpTTJqUEdTZytKCjRQemE5ZDUwSlVGUkdDRlpxTnhoTmZSTm5xZ2J5dEI0Q1huQ3d2T3R0NVdvK2NTeWRPQ3pBaHE1eGdnY2p4cVkKaDF2Y3lLL1FielZBZzBjQkN6SWZCM1dTeUlqM1JkVUlHNlBMMlFJREFRQUJBb0lCQUdHdGsyS0g1ci84M1ViNwpHbWcySW9CQm83akp0MjRlT1RGL3Q1eHRISUVjSGNmR0VvV25FdXRMWXp5cTNGdVZjSG9zSmpYalgrNWM2b3R0Cmh4ZTNLUndOTXVIcGFvRVpIK0dUVXo5RkZrc0pycEV5RXpmOXR5Y0NUcGxJZ2ZDV0ZoQmpHWGFZYVVPVkFsQ0kKa1AyM1RXNkRjelFsbUpJek5NdHo1MEhEaTR0c0ZhdFdNVGVCa05YVk5qQm9yUXhGdEZTb2V2VGNFV09DVXVUYgpQMEFwWUw0Umo5Rjl1YXdQYytLaGltaW5kVGlwSk9aeHRRSFc0VWhZNE0wUHk5dzQ1QzBFemR4ZHl4WWo2NFg4CjJSYzZNQjdOWGhUYktvVDhwKzBzRkxtQjB3eUZJZ05CZDh2S29MRUxVdnVkWENOQjN0VDRQcnFBOG0zLzRrQk4Kd3RHazlGa0NnWUVBdzVZc0FEdlgvbUF5eXlLUHp2WlhCTFlDcjBDR2ZtU0VCbEg5cFZNa2twRWs1bkJPYXJ3UQpYSEJOclZpYi9UQnRiTDZHZzV4OHNJb2dPZVRFRURPcEUvWWY5TnJvTGJtaTU5SWp3TEVMMTUySVFXUjg0ZTdrCnRySUYvUFYvU25na3JIVzkxZHNLaE5ONyttYnV0ODUrZkQzNCtaUk1TbTZpcmo3a1VlSCtuYzhDZ1lFQXhVQmcKQnNIbWNiYzlUNmQ4TjBRanBmWlo4OHkxMzV2NnRRMXNPeWpEVTFqd2UvRFdhcURXUHIxTFV3dWdFWlhBaDlzMwpTRVl3VkhlcHJvcmc3Yitxby8zZTBXMTBiK2VoUENmNE5paGdrVUk5L1Nyd2trdmI5dFVYUjVJNkNuQ3ZhYUxiCmdhK3FmN2svMFI3NFJmL2dFZ05XQng2R1k0TjdSa28xckl6S1RkY0NnWUVBbmJQNWVKcklOekNENUN6Uy9kSzkKS1d4RXorQmNVWTlrc04vdGdCK0JEcmovb3RzTkw1ekNLSGJZK3h2R2N5bFlJZVdoK243MFB6aXdjVjNYQlNWUwpnR2psTFg1UTFZV29KL25Wb0NwaFhSS0ZhZ3pIY1RrNXEySHgyQnh1N2JIZ0NEckx2YUxuWVdCUXgvKzFIZm5mCkhQaXZSelpmS1dqNXZUdXl4NTlNdVJzQ2dZQUpoUmpkV3FCZm5xTmo0OFozK0Y3c0ZKNjB5STJDbEVtZVVWNkcKNEduRTdRYjJSR0prMVF4aURNckU0RXZDYllMVVM3MDRUTUxxWUxnY3gzRWhxRjE0K3JpMVRONFF4Sklna0NGSApvOTA5UllBdVp0TWpqR3U2VndCL29Nd1NVdXYwWWpyTDRJbVBEb2JJOWdDdmlERHRUYUhxU0F2ZVk2c2djbFp5CjFIeXpFd0tCZ0VmdnFOSERJWmhxKzhqUzdKYXFhRDNPNGYrMitBRllQQkE0S3RTcVFkY1M4WGV1MDVPWGxGK3AKVHRxMHRjdDl4SHAyWFNKaG5YNXU1cmp5UEhyaWFKNEtDZnlMRlRXQ3pIZGlBV1ZITi8wQ2hiSXVDU1BhSFIxYQowc0NnZTdSWHdjTWJsUENDRG82V294d0c2ZlhUd3VpMENvczBWUTFUZloxNGp2dEhBRExaCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRQWtyalRHbldmVGtoa0JCaURGQXkxakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek0xV2hjTk1qY3dOakV4TVRreQpOek0xV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzZqaTU5Tkh4YjdRYlRZMFZPeWowdUJ2Rk9BeWtJQTNJVzhZd2RFN1NNUnVSZm1ERnUKRFB4ZnlvTHYwZUR3bE10di9vaVBOZDdJdWlxRXcxRkdKQ0lmTzgvVlByTENYVFhLRk5oOXo5c3RiZWk4VnRaSQp0MnBlL3E1L2hzMFNzQlBlbVQzaVczZWdWSmpqSUM4Z3VrLzU5bTgySjdHanhLUDcyd1NmVDhNVHBDVkRpczdRCm1Ydm9mSHBiRDQ3emROQW1CbHVDYzJKaGVwbkk4aDhua09WRUtCTjdIM3ZnTWdpWXB1V1pyTXNSL2FVQ3dyVUoKb05zNFQrdEM3cEx0ZFJwa0s2eE9PenF1aG4zQktoL2J5eHIzSms3NzliSGloempvcFdneG9pMVhGeEVQSHVuNgpWSGFEQnIxT1BoTDV6ZWtpUUxOYlErZi91UHlqNFpDeCtBbDFBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVmV3p0WnZ5UndETHB0SjFPY1orZW1EWHNHaGd3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFEL2lNaDZQVHBvMzJNazA4dnRtWTZGL0xMdmIrazREZ1VmK09iSm9QYitIai9INHFJQUdFa0tyCmE5Y3BnS0VtQkNrZVdkMWlOVlZKOGxyblJrdVRoRU9GZ3NZT2FUaXVXcGVZblZmeGxVTC9xNG83aXp1YmxOcEgKR1ZSS0RwQmgzbExJR2dyeEJVMFM4QWFoSTJGMjIxb1V4QU5qWVBiNS9MVVE4QVd0WW1hZ2tnMlRSUjV4T1JpVgpSbWs2S3FueGFUa2dMTjEzYWZaazMvTlhiZWV5dGRodUVaTHBibGRuT1NtRFVrbHJwSHR4RFpzejVjeks3ZXptCjU4MFlieGwySmI0cXY2NWYrMytLRnVFaE1acWlpNm5YemprUEhIVUlEdjhwb3Z5UTlRNFNUaFpZOG1mSUJWVnMKVnZ4Y0xGOUo5ZEhaUG5HZVh6a2ExdVdtcXc4SU5sbz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lSQU16LzA4aFMwZUVVdExWSWZoSzJiZ0V3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN6TlZvWERUSTNNRFl4TVRFNQpNamN6TlZvd0VURVBNQTBHQTFVRUF4TUdjbVZ0YjNSbE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBCk1JSUJDZ0tDQVFFQXY1Z1JKRXllaVhuam9EUmR6WkhyM3h6ZkxZa2RyWmtBblY1d3hidkt5ako0ZjhsWmQvNXIKb2ZQTHVCRDMvU0J6MkUvdU1LVkdTUElQQmU2Y2FNNHdmT0VLNEtNZDhwaHo1UXpjQzIvcnZsRFREaDNtTmpPWAphY1B3N1hWdnYraXFEVTlNL2FZWE96b24xTXQxdXFwY3BGOWdaYjNaWHBKZDV3dDNnOUtUSm1ERnI4QUREaytxCkJYd0dWWUppVDNtOWx2c1NEYnJzaER4cXorcVExYktmemI3UUpKL1YvSlNWYlBSaHprckJ6SDJqKzRNZDlETlgKNmQva08wVVd6Q2tVaVhBZzMvTm5QZFowWFhPS0tzUGUrVE1zaWR4QlM1UldJNmRLMDVvTDA1ZGo3QU02VVQxVgpUdGdicDY0Wnl2TFpCRnJFdmZSREJZYmhUQnl3Ry9KTWlRSURBUUFCbzJBd1hqQU9CZ05WSFE4QkFmOEVCQU1DCkJhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXcKSHdZRFZSMGpCQmd3Rm9BVWZXenRadnlSd0RMcHRKMU9jWitlbURYc0doZ3dEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQURwb3VqTW5MMCtnVExJUVJ3L1Z5ZlREMU1aWDZVVVJ4TlRXbExWZno1aUtkK24vUzV6UWFyQU92NFJYCkJIVWdqTjFSOCtxWmJidmZGc1pHYWN0Q05lbjNqQUhBSHJwbm1nZ1NwZmZtbjJkNzZtTjF5ZW8yRHV6Vkl5UDEKTE9PdDB1OTVDZFd5eW9wbStSbjdyalVtNzNhNkx6ajBqLzNkbld0T0NoMEtrVUNKeEh5RmgyTHdtWU9JZWtOeQpBaVhsSTlNc2IyVk5aQWZyTlhLcHh3RWxodG5nWlhGSXF3ZTBISThBZ2M0bGROZ2llNEV0Z0VUOGJwSitpbzZOCjZsRWl1YU5ua2lUb0FZM3pHWUs4a3Mvc1NDVGFYbDVsNmROeC9MSlM2Qng4VWNDdGtCRHE3R2pMeERQdlFESmUKSTg3SXRMc3dCKzFBTWI4S0RlSFRhTlhvU09RPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdjVnUkpFeWVpWG5qb0RSZHpaSHIzeHpmTFlrZHJaa0FuVjV3eGJ2S3lqSjRmOGxaCmQvNXJvZlBMdUJEMy9TQnoyRS91TUtWR1NQSVBCZTZjYU00d2ZPRUs0S01kOHBoejVRemNDMi9ydmxEVERoM20KTmpPWGFjUHc3WFZ2ditpcURVOU0vYVlYT3pvbjFNdDF1cXBjcEY5Z1piM1pYcEpkNXd0M2c5S1RKbURGcjhBRApEaytxQlh3R1ZZSmlUM205bHZzU0RicnNoRHhxeitxUTFiS2Z6YjdRSkovVi9KU1ZiUFJoemtyQnpIMmorNE1kCjlETlg2ZC9rTzBVV3pDa1VpWEFnMy9OblBkWjBYWE9LS3NQZStUTXNpZHhCUzVSV0k2ZEswNW9MMDVkajdBTTYKVVQxVlR0Z2JwNjRaeXZMWkJGckV2ZlJEQlliaFRCeXdHL0pNaVFJREFRQUJBb0lCQUM2SjBvZ2RzRmkyYWNzdApUU2UwN1RWcHZ2QkJvUnJjMG1Cbll6ODBpV0twOWNrY2NJWU1IN3JjRER6dXFqNHJGdGlST2N0SktoUm43NnhDCk5HM2t2N1JsdVkydE1ZWU83Ly9RS3RjQVhhUUIzL0pLNHZPQmZxTHJQR2VCb2g1Y2RvbjdIRGwwa2FvS1MwaU8KRDAvRE4vT1pVMElEWm54cFV6UGUvaTNnQld4Sm84R2RZWlM1Y2xBeEo1ejRuT2NaRVM4ZUlwNDJaS2R0ejIxcAoyK3NyaE81RXM0SWdEQTJoUCtwVHU0bmdKMHQ1TU9pVWFSaVE2VFdrUGVJMVQxamwrT0c0bDNVSXhtQUs3bG9yClZNY3VDVEtzY1g3OUEyZ1Fvc0xtRG1MZEFjeTAxRldXeExYK0lHOTJ6blZwK2FTcVZZVENKMXpBa21IM0RGY1EKcUtTT2dQRUNnWUVBMnFjWkRIdy9xUFlmTzlRZDZuQks3Z0FoTkl1UWR4WUc5OG5JSUFPNUNidWx3dkFrR1RyRwprdys2MlRhdDR1cUkxa1Y4YkFLSjltcGNBbHlnNlFLU2VtYnR0bXdQc0xKQ05WUFl4M1BRZDFUK0t0ZW1jR3RGCnRaQmdyV0xEKzNlQWkvZ2pRODZPSng1NXRMKzVGakNmYmdWdEtweGV4WXJUMVgxVm40M2lhNTBDZ1lFQTRGSEoKeXRmdmtUeFZxNHYwVFd2cGFrSGZLUW1KL0FUSnBFOVZIN3k5alh5VUxLbTlkWTNDcWI4TnV0NTQ4U2c1WnBXcQpTK2htRFRUZncxY0dEcmIrTjltakR1aEFPUXgvdERSL3JpdWorUUdJZzhGeWZCZi9FMGFCa0p2dGxKSFN2UFlYCnFnUGFVZW1POC9mN3VCY2VNNXdsTVk0bWp2TisvRlhvNDNtckh0MENnWUVBb2RNNS9ydVdnZjVtYjJrMkd1U3gKRUNTWWJzTThVR2JGRVc4TjVtUGE5eEVpUlh4bHV5WjlBU3FMSjJnSW1nRHE5V3JJQTBoOXd4cEVycHJQbktTQwp0SVNwT25JUHlyNmpzY1EwbEtscWlHY25GWjQxV002TDhTekI0SkZRYXpTdXR1a1hjSC9YUmF5UWR1M09sbFcyCktUOXE1RGFIRGIwSnV0L2dGdzV6blNFQ2dZQSs3WkxQYmE1T0x2L1ZoUWgrNDZQeVpCSkhmOTZPcllVbnEvMjAKVG8xYWNMVmNwaTE1R2RDZkwvS1pGcW9VOVBUTlczVVBvRjFvblFtYzBmL29CdHZnTFJTNkxOcy9aY3M1Y1hUVQpGbmdFZGJLblM1QmpVWlFFQTBaN205S1ZXQ2NuVFY0c0dyS1hRZzhSVCtMMHJMK1RPTjJTUGsrQTBMd3g2NlBPCmxLWTFuUUtCZ1FDa01aZXNxcTlSV1Vod3FmQVl2czZmaGhPT3lBUFJIL1ZKNkJoZ0twTlpiRFN1WGZEaCt5N3EKbkg2ckRPR3R6ZWFEZ2NUUkhRVGk2NWo0dVB3dk5TVHloNy8vZkllaUVTa3NHY29UU3cvMWU4NzJNL1liNi9VRQo0UHluak0yWTdkbGVXdzQxdmNNRC94N0lDWUVNa1YrdU1sLzlnKzNFRHowdnE5ZTRXcmVXalE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRQWtyalRHbldmVGtoa0JCaURGQXkxakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek0xV2hjTk1qY3dOakV4TVRreQpOek0xV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzZqaTU5Tkh4YjdRYlRZMFZPeWowdUJ2Rk9BeWtJQTNJVzhZd2RFN1NNUnVSZm1ERnUKRFB4ZnlvTHYwZUR3bE10di9vaVBOZDdJdWlxRXcxRkdKQ0lmTzgvVlByTENYVFhLRk5oOXo5c3RiZWk4VnRaSQp0MnBlL3E1L2hzMFNzQlBlbVQzaVczZWdWSmpqSUM4Z3VrLzU5bTgySjdHanhLUDcyd1NmVDhNVHBDVkRpczdRCm1Ydm9mSHBiRDQ3emROQW1CbHVDYzJKaGVwbkk4aDhua09WRUtCTjdIM3ZnTWdpWXB1V1pyTXNSL2FVQ3dyVUoKb05zNFQrdEM3cEx0ZFJwa0s2eE9PenF1aG4zQktoL2J5eHIzSms3NzliSGloempvcFdneG9pMVhGeEVQSHVuNgpWSGFEQnIxT1BoTDV6ZWtpUUxOYlErZi91UHlqNFpDeCtBbDFBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVmV3p0WnZ5UndETHB0SjFPY1orZW1EWHNHaGd3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFEL2lNaDZQVHBvMzJNazA4dnRtWTZGL0xMdmIrazREZ1VmK09iSm9QYitIai9INHFJQUdFa0tyCmE5Y3BnS0VtQkNrZVdkMWlOVlZKOGxyblJrdVRoRU9GZ3NZT2FUaXVXcGVZblZmeGxVTC9xNG83aXp1YmxOcEgKR1ZSS0RwQmgzbExJR2dyeEJVMFM4QWFoSTJGMjIxb1V4QU5qWVBiNS9MVVE4QVd0WW1hZ2tnMlRSUjV4T1JpVgpSbWs2S3FueGFUa2dMTjEzYWZaazMvTlhiZWV5dGRodUVaTHBibGRuT1NtRFVrbHJwSHR4RFpzejVjeks3ZXptCjU4MFlieGwySmI0cXY2NWYrMytLRnVFaE1acWlpNm5YemprUEhIVUlEdjhwb3Z5UTlRNFNUaFpZOG1mSUJWVnMKVnZ4Y0xGOUo5ZEhaUG5HZVh6a2ExdVdtcXc4SU5sbz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURxRENDQXBDZ0F3SUJBZ0lSQU9qSFVsNjVJa3AvTDdEaHhJMnpycUV3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN6TlZvWERUSTNNRFl4TVRFNQpNamN6TlZvd0tqRW9NQ1lHQTFVRUF4TWZZMngxYzNSbGNtMWxjMmd0WVhCcGMyVnlkbVZ5TG1OcGJHbDFiUzVwCmJ6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUw5ZGxrbDJuOW01VEt0YW1xWmUKeHRsY1FNZkY5WnFRc1hBaEMvZHFxNFIvbnRwN1dKOUxxaGdrcFVyd09hVmZYUUVZNm1ZZVRVN2FoT2tGcW00eQp4U01UVmZrMy9DT1JCbmhnbUIyRHZaNXdtZXM4REJpUXZYWVlJcTFXQUlVTWhERjJRQlI0NE11T2ZTMUdkaUlKClF5Z2IyQ2d2aTB2VE5JR0wvMXVBWU1BTTJDd2dNVFhoait4Mnp2UFNoSFRIcXQ0WExRVWwxVjE2M2NPUnpwK2wKd1NxbnlkRGxNOE9HY2N6aXJYdkJoS29PNkNzaTVhSHE5WUtydjRmU3YxZkpFMWQrZUVhc1NBbW9MWHR4QWwrUApuakVkSU5DTGtKRDdoYURJY2sxSDZQTUJvR2x3QWZid3FYTUh6YUJSanRIT203Q25oNXlsQ3lUNlJtZ254UG8wClZXMENBd0VBQWFPQjNqQ0IyekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUgKQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3SHdZRFZSMGpCQmd3Rm9BVWZXenRadnlSd0RMcAp0SjFPY1orZW1EWHNHaGd3ZXdZRFZSMFJCSFF3Y29JZlkyeDFjM1JsY20xbGMyZ3RZWEJwYzJWeWRtVnlMbU5wCmJHbDFiUzVwYjRJUUtpNXRaWE5vTG1OcGJHbDFiUzVwYjRJbFkyeDFjM1JsY20xbGMyZ3RZWEJwYzJWeWRtVnkKTG10MVltVXRjM2x6ZEdWdExuTjJZNGNFZndBQUFZY1FBQUFBQUFBQUFBQUFBQUFBQUFBQUFUQU5CZ2txaGtpRwo5dzBCQVFzRkFBT0NBUUVBYWozUHhlUDdSVFM5QWVyR2xRN2pZdXFZSkdCZjlXVzg4V3FwQTdZbllTVUdyakNnCklPS2tHbllhTWo3bGNNZWtxTi9aNTkweFRJaGM3YjFCdGlyRStXcW9tMlhFL01RWWM0QWI1QVJOVlJ5RFZZV00KSEo2akwvV3VqUjhsTUVrak56eXJlMzRZYWNWam9sTHpHRm8zT2VOZ3BkeGJ6bDIrSXVCMFlCb2RaU1ZDKzBQRwpIcmh4ZnBYSWlpM0RaN0NkTFQ2alpweTN2RmxvbERCbVhPOSsyL056T252dkgrL1VZeWI3YTJmZGFiN1JQSWZKCmQ1VFh2VlducXhiZ3doV1JweWhnZFdmMFl4cW9PNWZHT3NEa0FlSFd6bTJkOHo1SWRaZm83YTQ5bndvUFZ3cmgKN2FlN2owMzg1SnNoT3ZMYVVBSlJwdlZoZ2IycFdqeUVCS0tuREE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdjEyV1NYYWYyYmxNcTFxYXBsN0cyVnhBeDhYMW1wQ3hjQ0VMOTJxcmhIK2UybnRZCm4wdXFHQ1NsU3ZBNXBWOWRBUmpxWmg1TlR0cUU2UVdxYmpMRkl4TlYrVGY4STVFR2VHQ1lIWU85bm5DWjZ6d00KR0pDOWRoZ2lyVllBaFF5RU1YWkFGSGpneTQ1OUxVWjJJZ2xES0J2WUtDK0xTOU0wZ1l2L1c0Qmd3QXpZTENBeApOZUdQN0hiTzg5S0VkTWVxM2hjdEJTWFZYWHJkdzVIT242WEJLcWZKME9Venc0Wnh6T0t0ZThHRXFnN29LeUxsCm9lcjFncXUvaDlLL1Y4a1RWMzU0UnF4SUNhZ3RlM0VDWDQrZU1SMGcwSXVRa1B1Rm9NaHlUVWZvOHdHZ2FYQUIKOXZDcGN3Zk5vRkdPMGM2YnNLZUhuS1VMSlBwR2FDZkUralJWYlFJREFRQUJBb0lCQUJNRWlQZjZDdjdITklCZQorN21HOTdvSU9nUGdmMzBCM2pCbmlGbnBSdXhmQm5sdUFxdXFDRmhuNCtsam9FYjRDRFVndGNLNlJqS004dUo1CmhxdDI3aktETEdzZERqaTJvKzc0b29Wa1gwYk1wKzlCdzIzNWpHcWRFVzBxZTlpOUdySVRyMkNaZHJXa0RucWUKWXdVVTZKQ20yNzk2b2h4Qi9Calh3ZVBsQ1Roc29oakV6OVZic2U3dHU5dWQrN0NqY3pUNG94UlRaNWtyU3BXeAp0Zm16M09Ha0JrYUFYZlZSaFNmY1JmcUhzVDdmOVVocDc3MVlhVlFrQi9JOVB5N3JBVVdUMVg3VEMrUWJONHRpCnlpUlErWFhndkdJdVg0LzZhRDhCSm5Vc0sxVjJGY1NFVVdHQnpFL1JGRVZnNVRUUkhjKzB3QUZOR0VoKzVoZ1UKUnpVNzBkMENnWUVBeGtxdjM1azgwMHhNWUF5QlJDc3B0M2pJUnlITElxb1BwbG15NllpeERYWCtTT2wxVFp3MQpIeVpCSmdqSXFRWHZ6bTFYKzNDcXBjUmR3S244SXlTMHB6TmFvS0NhNUw4K0daQnhjaFFqbVJBbWI4QnhHVXNuCm1vOXJ6bVJ3Ynp5VktueVNlTGpRejdZZ1dLeXZCZ2xXYnZpZWROU1dGNkYvOUtXQVlPbWlGNE1DZ1lFQTl3N2gKVE1WRDRCZ3VHTmxVcUo3ZHdCL0lNY0FKMlR6TU1henFSRzRHWi9GNDRxTXROODMwMFRPR3NINEhyMlpJL3BzSgptaE5mYWxUelVDNFg5WjA4NW5CRmhsYUgwL21ZMDR6aTk2cE5WTENlanF4a3c2dDViVS9OdEpvV1RrdENVTXYyCmY5cjgxZ1RicVY0djJ3L1dJWEh1Unl5amR6UnRJUEZ6NDRPVVhFOENnWUVBbDBYeEtFYlNKV3lHczV1Mm5oZkQKcW9tRldPYkovcmI0VzNNQXo3S05SL1NsT21DSU1kNGlsSkh0ajZPUjJZaUM2dHQyRElkbVdESVhSOTBtVW5VMQpNSDAzL1dTbzVpdVRwNU1QU1BWZU51NGdOSTcrZVVwaGUwTkEvbUtYZC9VaTR4Zkg4anNrYWVIS2lYdXJ4cEluCkUxK3VHdmozVEMzVDNRTEpqcVdPR0JzQ2dZRUE2M2hNTmY2QjdkRStCa01GbEYwdVh4SXJuWGM2SzhudG1KOEUKL1VtY1kyOWIxeTdOUnpYT1U2SDNpcm5rRzBHeTZxL2IyL1VBNlBpa210UUQwLzRVY0ZHcmdobHhCaEVMbnYzVgp5VldRdE5wTmxSQXNUZTVlSWxpQVo5VEEwOGlaSVNiMC92RTZMOFdia3ZhSlNCSDA5aFYvbEdpd09FcEloTEI4CjB1aXkrN01DZ1lCSnUvd01LYTQ3SGI3TDlVVWZoeThpQXc0MGJJVlhzdW9pN2xHZGNOdFU4Y096QmZCSmdXNy8KcmxvQ3prVGVsOUlXZlZDRGgyWDI0YmIrcEE3L3JIcElQRWpSQnJvWWtudmw1K1RSK2Fqc2tBU1BXaS9naEdMVApqT2ZxV05iQmIzWnREQmN0ZnU5YXZGZE5EcTJuMzUrT3hscFF0Z010cGovejBKWStjdm5lRUE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRQWtyalRHbldmVGtoa0JCaURGQXkxakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek0xV2hjTk1qY3dOakV4TVRreQpOek0xV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzZqaTU5Tkh4YjdRYlRZMFZPeWowdUJ2Rk9BeWtJQTNJVzhZd2RFN1NNUnVSZm1ERnUKRFB4ZnlvTHYwZUR3bE10di9vaVBOZDdJdWlxRXcxRkdKQ0lmTzgvVlByTENYVFhLRk5oOXo5c3RiZWk4VnRaSQp0MnBlL3E1L2hzMFNzQlBlbVQzaVczZWdWSmpqSUM4Z3VrLzU5bTgySjdHanhLUDcyd1NmVDhNVHBDVkRpczdRCm1Ydm9mSHBiRDQ3emROQW1CbHVDYzJKaGVwbkk4aDhua09WRUtCTjdIM3ZnTWdpWXB1V1pyTXNSL2FVQ3dyVUoKb05zNFQrdEM3cEx0ZFJwa0s2eE9PenF1aG4zQktoL2J5eHIzSms3NzliSGloempvcFdneG9pMVhGeEVQSHVuNgpWSGFEQnIxT1BoTDV6ZWtpUUxOYlErZi91UHlqNFpDeCtBbDFBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVmV3p0WnZ5UndETHB0SjFPY1orZW1EWHNHaGd3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFEL2lNaDZQVHBvMzJNazA4dnRtWTZGL0xMdmIrazREZ1VmK09iSm9QYitIai9INHFJQUdFa0tyCmE5Y3BnS0VtQkNrZVdkMWlOVlZKOGxyblJrdVRoRU9GZ3NZT2FUaXVXcGVZblZmeGxVTC9xNG83aXp1YmxOcEgKR1ZSS0RwQmgzbExJR2dyeEJVMFM4QWFoSTJGMjIxb1V4QU5qWVBiNS9MVVE4QVd0WW1hZ2tnMlRSUjV4T1JpVgpSbWs2S3FueGFUa2dMTjEzYWZaazMvTlhiZWV5dGRodUVaTHBibGRuT1NtRFVrbHJwSHR4RFpzejVjeks3ZXptCjU4MFlieGwySmI0cXY2NWYrMytLRnVFaE1acWlpNm5YemprUEhIVUlEdjhwb3Z5UTlRNFNUaFpZOG1mSUJWVnMKVnZ4Y0xGOUo5ZEhaUG5HZVh6a2ExdVdtcXc4SU5sbz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTRENDQWpDZ0F3SUJBZ0lRRW1aT3E3d0lRaVlZOVhUWncrYVZIREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek0xV2hjTk1qY3dOakV4TVRreQpOek0xV2pBak1TRXdId1lEVlFRRERCZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFETmYrMlZJZjVtRkgrQUsyTitsYU1UNDJXbnJEbmUKbFFZeWxEVEt0N1dMNjRpT2VweERwWnUrQWtYa1VYSm92MTYvTzVXU3BweUhsUE83Y1VJQ2xpMkpyd1pIREwrVgpYdjJHK1VnZWlCYnN5alFWS1lnaTNhN001d1FJbS9adnE5ZXBPUEtqSktnck5vMnZiL01wR09tWFlKMlVCZjZNClFsUUcvcXpEZ0RBcW5yUzlIWDJoMXFrTUhqbFVMZnZFOHhGYWN0TTZZWFdhcjlSaU1GWXpST2d1QkFReDNFdFUKT1ROdU51a0JEeWRWK2k5RlBzZk9wN2h5TFZoUEpWWVZHeTdrNDBVMTZ0VE5jV05mSktGNW40bURNUFUzbm5LNApWUFUwaHQvcmRkNmVUYUllZzNCc1J4RnpSTlhaNDJuc2tvY2NmUytlZlovblFscFpPYlJmY1JvQkFnTUJBQUdqCmdZWXdnWU13RGdZRFZSMFBBUUgvQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUYKQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUI4R0ExVWRJd1FZTUJhQUZIMXM3V2I4a2NBeTZiU2RUbkdmbnBnMQo3Qm9ZTUNNR0ExVWRFUVFjTUJxQ0dDb3VhSFZpWW14bExYSmxiR0Y1TG1OcGJHbDFiUzVwYnpBTkJna3Foa2lHCjl3MEJBUXNGQUFPQ0FRRUFtV2tNZEg0bUJXWjJEN0Z0REVIRXlZYTg5WENhRDdqVDYzRHBqVlBUUWxMQ0hLWnUKWGRCSkM2M2pzN1lBRWZxN1pucTVITHR5a0h6STh3YytpS2ZpNHA5N0tCVkZIUCtFNDF2anhVdEJBUnZsOHpqZQpub3RqV3N3cTVOaWtFR1hmczlOQ2lTYUVHOW03U0laamtCdzhKWndjQ0JtcHRiN0Y0eDkrZk9PVk9YcGloeU8yCmU1ZnZCVmRSVThOK0JRZU1uVFp1NW93WXNFdW1SWjFQakwzczhXc245YTdvZDJ1bHlhdmduNjBDYWU5LzU0TloKTkVOWHlqL2xCTDdhZWphRlMzZm04MjU4Mjd2OGNPdmRXdEdsUlJvemZZWURHbWdHN1AyY2VxaVFxZlpuSGtVcgppM0E3OC9jVENzdTV0OE5mNG5FRy9GSkxpbTJnV0xOSlJaK1U2QT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBelgvdGxTSCtaaFIvZ0N0amZwV2pFK05scDZ3NTNwVUdNcFEweXJlMWkrdUlqbnFjClE2V2J2Z0pGNUZGeWFMOWV2enVWa3FhY2g1VHp1M0ZDQXBZdGlhOEdSd3kvbFY3OWh2bElIb2dXN01vMEZTbUkKSXQydXpPY0VDSnYyYjZ2WHFUanlveVNvS3phTnIyL3pLUmpwbDJDZGxBWCtqRUpVQnY2c3c0QXdLcDYwdlIxOQpvZGFwREI0NVZDMzd4UE1SV25MVE9tRjFtcS9VWWpCV00wVG9MZ1FFTWR4TFZEa3piamJwQVE4blZmb3ZSVDdICnpxZTRjaTFZVHlWV0ZSc3U1T05GTmVyVXpYRmpYeVNoZVorSmd6RDFONTV5dUZUMU5JYmY2M1hlbmsyaUhvTncKYkVjUmMwVFYyZU5wN0pLSEhIMHZubjJmNTBKYVdUbTBYM0VhQVFJREFRQUJBb0lCQUFXeHZjdWNIWWlHbU9IYwpVZTE0Q0FUTkVFd05JYTFoUThLekNLTjFZN3AwMUZ2ZVdlWWwrS0xUUFV5T1ZUVkIyRVpFU0dpLzVTWjhvaVJYCmh4UzdSSmZFR2RCdU1nRFptUHpjZTNzZEdrV0ZkTndCUXB4MHVCdEZhMzh4a3lxVkFHelgveUUyS3RMSHVEVmMKVE1pZXdCcEp1eFFXOW02OGg4ZUoxdyt6eGFIb3B5OXMwTmxBa2JkbWVMWVhtT1EwMVQ5eXREbWU4RCtEeWtNVwp2bXlZOW0rWGFxZE5JUERCZVhVWGlCNG92WGRXTFAxSFFxTjM3M0dkSHlNTnR5b01LZWhScDRwRjZTaCtabkxhCjVPckM0a3JjUythSGFNdzFzRmlYbDBkWUF5Y20vL0RMVUVHTUU2VzVZdU5VaU1XRW5uNnRwUCtPYjd3QlJZOFcKTnVuR0wrRUNnWUVBMmx4OVZtUTZrQmtRR1lNVEtVZEhOQjFicWVJMFBIZmJPNVZhL1Vza1BJMGpHZWthckNCeQpUSm8xOW9ZUXI4SnQxZXhqWHc3eFNiamptYk02ajQ0Q0ZtRVVpUmRMTGpVNnNvb0tZNkRVOXNGZGh1RjhHdDFwCkVKSlhTeGJHWHpFd0tTc3lPYnM3RjlmT0thd25MeWJ2U0cva1NGOHIyUTYzMGc3VU56NlNFYnNDZ1lFQThPdm4KS2NTOWd2WnBkT0g2UXJya0RBQXkxbWlsb1J0K294dWlZcFhqV0JpNUlKamJockNkL1pYV2ZHUlJhT2VkeUlIOApJREFnQitFK1hIaEZ6NVZLS015Y0FYeVdKU0M3Nml2QURhOFhyUU52UEZFb0U2NEdVU1BpNlkvK0ZxbTEyTmFxCktIa3RFMHF1K1ZRcEN4MzRZMnpjRE51WHpDUDFjdEFSTUhGWnVYTUNnWUIxQzZpZmUwQXM1MUpLNm9pRjB0QW0KN2ltcEtUZ294WEk5UVBTeDJ1cEVqcjZtNzkwOU1ITXovbUU0a0dvM1cvZTErR3pYa2xIaDIzb2NkQWJLMWlybQpSZ2xVNXFpRXowRjBYQ3Z2ZFZGU0p4bno1NyszUXNGRGdiM0s0UjFaL3lxNmxvM29oaVRKeGdLYk1jMGJLRHFRCjBIRkVIY2VLSktxQnJUTXhuWmQ4YXdLQmdRRERtalJIaERWOVU4VFJJZnZIRytlMUdxQXIxakRMZWdBNk8yQisKL0VUbHJNVDVnMEdRdkdxNWpXTGtBYXJiS2xtL2hsR0diS3hFMllxQkZ5Rk81VjJkZkdvWkJ1YjhZL1JOcnBHeQpTbnRGZkNsZTVtRk1nUmtkM2E0SWhXRDlVM0tTQjgrRkpzVURDYnJBTWFWVklsTWRuaStXdk44azNma1U2M3RaClFsNWZvd0tCZ0V6V3FBZ2hUNnlCN2NFOXlUM0xBUis3cmhSUlBUdW1pU0o1ZVVEMDJvSjFjWmhoaTlpeDVwQW8KRTNZblN1VXdLVnVKVEtrMkhOOFNKUXBReEVyOThTKzdYZlI0WG9aSzFzeXdEVjlCeThLNnVnc0tUcUNObVNVNQpKMVZLUU9kRC9vL29JbXRPekRLSGdhZmpVZWZSR1pxOE4yYVBJR1R5NmdtbXBPaHV3S1R5Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRQWtyalRHbldmVGtoa0JCaURGQXkxakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TmpFeE1Ua3lOek0xV2hjTk1qY3dOakV4TVRreQpOek0xV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzZqaTU5Tkh4YjdRYlRZMFZPeWowdUJ2Rk9BeWtJQTNJVzhZd2RFN1NNUnVSZm1ERnUKRFB4ZnlvTHYwZUR3bE10di9vaVBOZDdJdWlxRXcxRkdKQ0lmTzgvVlByTENYVFhLRk5oOXo5c3RiZWk4VnRaSQp0MnBlL3E1L2hzMFNzQlBlbVQzaVczZWdWSmpqSUM4Z3VrLzU5bTgySjdHanhLUDcyd1NmVDhNVHBDVkRpczdRCm1Ydm9mSHBiRDQ3emROQW1CbHVDYzJKaGVwbkk4aDhua09WRUtCTjdIM3ZnTWdpWXB1V1pyTXNSL2FVQ3dyVUoKb05zNFQrdEM3cEx0ZFJwa0s2eE9PenF1aG4zQktoL2J5eHIzSms3NzliSGloempvcFdneG9pMVhGeEVQSHVuNgpWSGFEQnIxT1BoTDV6ZWtpUUxOYlErZi91UHlqNFpDeCtBbDFBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVmV3p0WnZ5UndETHB0SjFPY1orZW1EWHNHaGd3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFEL2lNaDZQVHBvMzJNazA4dnRtWTZGL0xMdmIrazREZ1VmK09iSm9QYitIai9INHFJQUdFa0tyCmE5Y3BnS0VtQkNrZVdkMWlOVlZKOGxyblJrdVRoRU9GZ3NZT2FUaXVXcGVZblZmeGxVTC9xNG83aXp1YmxOcEgKR1ZSS0RwQmgzbExJR2dyeEJVMFM4QWFoSTJGMjIxb1V4QU5qWVBiNS9MVVE4QVd0WW1hZ2tnMlRSUjV4T1JpVgpSbWs2S3FueGFUa2dMTjEzYWZaazMvTlhiZWV5dGRodUVaTHBibGRuT1NtRFVrbHJwSHR4RFpzejVjeks3ZXptCjU4MFlieGwySmI0cXY2NWYrMytLRnVFaE1acWlpNm5YemprUEhIVUlEdjhwb3Z5UTlRNFNUaFpZOG1mSUJWVnMKVnZ4Y0xGOUo5ZEhaUG5HZVh6a2ExdVdtcXc4SU5sbz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUekNDQWplZ0F3SUJBZ0lSQU1LbHlxQlhudlpsOFJmRGZQa3RYR1l3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURZeE1URTVNamN6TlZvWERUSTNNRFl4TVRFNQpNamN6TlZvd0pqRWtNQ0lHQTFVRUF3d2JLaTVqTVRNdWFIVmlZbXhsTFdkeWNHTXVZMmxzYVhWdExtbHZNSUlCCklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF3OWV6LzExbGxLWDZqc0RTRmltS0REQUEKRXNNZVZMMGQzSGRiaTNjQTNGbzlkZGRXZTkvSkZ1bkx2c25Ka3JtZXFZdGEzd2xrK2ZoWE1xZFUyUDhTZE1GVApJblk5SzkrQ3I3MkxCVnlBaVpGK3VnS0pob0l6cGtjWU5odDkrNVhXQW5zNjR6YXpNRXhNMGlYMG9heTNEZVZJCmQxSTRvTU5zUHltU0t0YTRqT3hSZEE3aXNNMlRRQ1dmMWpmVnpIT1o0N2E5UEhUYkhRbnY3Q3FMY1d5bG9wb3IKLzgrNlNLblRKL3ZpZ3VkZUV0TDZhbHZINTMxWGJOTnFCWjNMd093OFZjVUZaRTY5NTlzVllCQjlNNjVPZ3F2WgpueXoxYlp5cjhxb1JqdEdobnNPY2VLeHdoRVdEaWdVdEcyckwzLzBZTjlhMjVKVlhFTU9hWWNibHprOHdHUUlECkFRQUJvNEdKTUlHR01BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWZCZ05WSFNNRUdEQVdnQlI5Yk8xbS9KSEFNdW0wblU1eApuNTZZTmV3YUdEQW1CZ05WSFJFRUh6QWRnaHNxTG1NeE15NW9kV0ppYkdVdFozSndZeTVqYVd4cGRXMHVhVzh3CkRRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFBS29RODNWbE9zajh6RE5FZHFnRE1VWmxWSk5VTWRqeUxyRGV0TkIKSW5YSHJNZEhGZ1lNNERId3hRUVpQa05xT0d5SEMvcnU4UGY5Q0NHb1FaUHdUWm9CMWZYeVdRV1NaVmhndUtDeQpyaXhDMG5YVjYxemp6L2t3UTFkSkhsOUhHRjJVOGJoYzRlazBFSElUT054dHY5eEZSdkloSVhSWWJTNGpHTGJvCkVKMnhJdk8zQUhxdjhXQ2p2UzRxdnM2UVBMQk14MG53MlloTXRhTW4vRXNRTjlMWnFKL1pvdHYrQTA1VUR3emkKdXhXYkc0Z1RQRnI1aFlRdlFNZGlWNHl2K0JZNms3cnllL2xpRFV5andWY1VLRnBXWWNxZFNoVDNod1ptR2xsSgpPL0hhYUt0dFpKYVVJTFd6VjlPK1IvRDRxdk5PMUxvQkdyVWx5V2pQUGhmMndxMD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdzllei8xMWxsS1g2anNEU0ZpbUtEREFBRXNNZVZMMGQzSGRiaTNjQTNGbzlkZGRXCmU5L0pGdW5MdnNuSmtybWVxWXRhM3dsaytmaFhNcWRVMlA4U2RNRlRJblk5SzkrQ3I3MkxCVnlBaVpGK3VnS0oKaG9JenBrY1lOaHQ5KzVYV0FuczY0emF6TUV4TTBpWDBvYXkzRGVWSWQxSTRvTU5zUHltU0t0YTRqT3hSZEE3aQpzTTJUUUNXZjFqZlZ6SE9aNDdhOVBIVGJIUW52N0NxTGNXeWxvcG9yLzgrNlNLblRKL3ZpZ3VkZUV0TDZhbHZICjUzMVhiTk5xQlozTHdPdzhWY1VGWkU2OTU5c1ZZQkI5TTY1T2dxdlpueXoxYlp5cjhxb1JqdEdobnNPY2VLeHcKaEVXRGlnVXRHMnJMMy8wWU45YTI1SlZYRU1PYVljYmx6azh3R1FJREFRQUJBb0lCQUhYRldvNGZxVDJhRHJJWQpESDZkWGxIejc2ZFl4UDJxZUxHaTZWOVdJaU5nOVFMUGkwZVZEUVdGZFN2M2h3dUFLb1RFczlIYWdXbTlTUnJCCis4aytvdWVwZG9nTDJMOXdldE9hUldiaytMdEJ6cGFuZmZKd2pBVGJUaGtEc1dCQSsrQ2tJSWFRMTNNYy96bUUKNzdibCtYTVd4ZHhUaXBCSzFPYXE1aVp5MTZxT1J5RlppQWhhZzUyTjRtL2ZyY2xkMXVpUkxHY0JvWTl1UWV1Nwp3b3NxTXZwSldSVGpRcVdmV3Rld2phWloyY09SQ0FoYmIzN0F5eERtM3N2TnVOU0ZWdmtwWmFYYm55UFpSa2xCCmlqSDAzWjlRUmt5ZTgrejVoK2ROUk8ybTkzV0RYVEdQTzZEZkZ6RGNpUEhtaVE0SmRiOG5PRTZNeDdjcTA2RkoKKy9PMTcrMENnWUVBL1B6RUZNUXNscW5CSTZBbml5dWZNY2hkSnJmMWFjRUM5b2Z6QUZxMU9qMFJsS3pCTHAxeAo1UkR1N3ltVjVFdG9BZkFvLzFMb3JKa2k0SERLQ1pRdStYMmFUOVV3YWt6NnFINklmdVpwY2ZvTmhZaGdLckMwCisyYVZtd1l0aERHWUp2WGJYMWRabjhES05QWXRLdE83ajZqK3BpcUVqWUY2RWFuTk9YNW90Rk1DZ1lFQXhpeTcKR1VMNDBpNzFoU1R2RVlmOGZWR28xM0MralFSK09ic2VLYnVCbWlZdDdDWkxCNUwydGZEOWNYbThHNFkvazJjTAowU3hENXMyZmdmOGVYUWVKb1dlZ2wrNUZmcytjdFJIMndyOGExbHlVSWdCMXRTM29LSG80NXZFRGlyTWFZa1Y1CnViS3BoRkEyTWo4SUpwVHFJc2xqdGxrTmNMdG9uZmNWUUlaNlBHTUNnWUJmSVoyS1FZcVN6UnEzanMzUDQ0TmwKY1BhMlRJNllTZUFYWEYvZ1RqdS92cDhSelRTSGx1VHhRa0RXNWtoYkpJL2p5cTlmODRsUy9mTERleVkrRzk3ZQpLb0VRYkJaY29yM1BCbVhGY2xkTWFMOFU2NGRlQmp6SUhIYzlhRUZOYUdqU25iajBUU0NDbGpoeldlNzZIOHh6CjVSUjgzNWdncmdOOUNPRUhNYVdseVFLQmdRQ05HWEFscmwrSEYxUk1kbDJaZDk4NFF4b2FPdllSWmErUjN6NjgKcS9xOURJNEo0OEhzSktGd0xhUG1WYXl2VkVpVDVQeXU4L3RzcTk3MEtmY3VlWjF1eEYrOWpUTUI5VVE0VUJBSAozUlY0cHZYNXQ2WVhXQlpDSzdPMENzcGd5T0R5TTFGVi9IVmg5ZEtBdUF4UG5CdVFwUjlQeDl3ZjllK28rVEd5CmZZMHV6UUtCZ1FDZWFNWVljUU9jaXJNWGtmZDB0RFZlYmU4QjBiNkhMODd6ZlBnTjRXVmFtTDAvSkR4WXdPeXIKR2kraVVmaTFxU0twLzN2d3FrYitTYWxVQ2c1cGVXR2xlaGJMb0FIYTUzQjNvU0ZVRXRvRmR3cnVHQkVENVl4NQp5YUNVYWg3NjAzb1FEcW9pTVR3N0NuMUdOUnVoL2l6dExodStJdXNyR2ZZcWxEQWMxVG11K3c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  skip-cnp-status-startup-clean: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  policy-cidr-match-mode: ""
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"
  # If you want metrics enabled in cilium-operator, set the port for
  # which the Cilium Operator will have their metrics exposed.
  # NOTE that this will open the port on the nodes where Cilium operator pod
  # is scheduled.
  operator-prometheus-serve-addr: ":9963"
  enable-metrics: "true"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: c13
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "113"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  # Default case
  routing-mode: "tunnel"
  tunnel-protocol: "vxlan"
  service-no-backend-response: "reject"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-masquerade-to-route-source: "false"
  enable-wireguard: "true"
  wireguard-persistent-keepalive: "0s"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-local-redirect-policy: "false"

  kube-proxy-replacement: "false"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  enable-host-port: "false"
  enable-external-ips: "false"
  enable-node-port: "false"
  enable-health-check-nodeport: "true"
  enable-health-check-loadbalancer-ip: "false"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  bpf-lb-acceleration: "disabled"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  hubble-export-file-max-size-mb: "10"
  hubble-export-file-max-backups: "5"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  ipam-cilium-node-update-rate: "15s"
  cluster-pool-ipv4-cidr: "10.13.0.0/17"
  cluster-pool-ipv4-mask-size: "24"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "true"
  bgp-secrets-namespace: "kube-system"
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"

  k8s-client-qps: "5"
  k8s-client-burst: "10"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  # default DNS proxy to transparent mode in non-chaining modes
  dnsproxy-enable-transparent-mode: "true"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-xff-num-trusted-hops-ingress: "0"
  proxy-xff-num-trusted-hops-egress: "0"
  proxy-connect-timeout: "2"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"
  proxy-idle-timeout-seconds: "60"

  external-envoy-proxy: "false"
  max-connected-clusters: "255"

# Extra config allows adding arbitrary properties to the cilium config.
# By putting it at the end of the ConfigMap, it's also possible to override existing properties.
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: c13
    peer-service: "hubble-peer.kube-system.svc.cluster.local:443"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-hubble-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-hubble-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n\n        # Liveness probe\n        location /healthz {\n            access_log off;\n            add_header Content-Type text/plain;\n            return 200 'ok';\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumbgpnodeconfigs
  - ciliumbgpadvertisements
  - ciliumbgppeerconfigs
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  - ciliumbgpnodeconfigs/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumbgppeerconfigs
  - ciliumbgpadvertisements
  - ciliumbgpnodeconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumbgpclusterconfigs.cilium.io
  - ciliumbgppeerconfigs.cilium.io
  - ciliumbgpadvertisements.cilium.io
  - ciliumbgpnodeconfigs.cilium.io
  - ciliumbgpnodeconfigoverrides.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  - ciliumbgpclusterconfigs
  - ciliumbgpnodeconfigoverrides
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumendpoints
  - ciliumidentities
  verbs:
  - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumexternalworkloads/status
  - ciliumnodes
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumendpoints/status
  verbs:
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumexternalworkloads
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-bgp-control-plane-secrets
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: etcd-metrics
    port: 9963
    protocol: TCP
    targetPort: etcd-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: NodePort
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
    nodePort: 32379
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-agent: "unconfined"
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: "unconfined"
        container.apparmor.security.beta.kubernetes.io/mount-cgroup: "unconfined"
        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: "unconfined"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
          initialDelaySeconds: 5
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.memory
              divisor: '1'
        lifecycle:
          postStart:
            exec:
              command:
              - "bash"
              - "-c"
              - |
                    set -o errexit
                    set -o pipefail
                    set -o nounset
                    
                    # When running in AWS ENI mode, it's likely that 'aws-node' has
                    # had a chance to install SNAT iptables rules. These can result
                    # in dropped traffic, so we should attempt to remove them.
                    # We do it using a 'postStart' hook since this may need to run
                    # for nodes which might have already been init'ed but may still
                    # have dangling rules. This is safe because there are no
                    # dependencies on anything that is part of the startup script
                    # itself, and can be safely run multiple times per node (e.g. in
                    # case of a restart).
                    if [[ "$(iptables-save | grep -E -c 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN')" != "0" ]];
                    then
                        echo 'Deleting iptables rules created by the AWS CNI VPC plugin'
                        iptables-save | grep -E -v 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN' | iptables-restore
                    fi
                    echo 'Done!'
                    
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - CHOWN
              - KILL
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
              - DAC_OVERRIDE
              - FOWNER
              - SETGID
              - SETUID
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Unprivileged containers need to mount /proc/sys/net from the host
        # to have write access
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        # Unprivileged containers need to mount /proc/sys/kernel from the host
        # to have write access
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Unprivileged containers can't set mount propagation to bidirectional
          # in this case we will mount the bpf fs from an init container that
          # is privileged and set the mount propagation from host to container
          # in Cilium.
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-dbg
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      # Mount the bpf fs if it is not mounted. We will perform this task
      # from a privileged container because the mount propagation bidirectional
      # only works from privileged containers.
      - name: mount-bpf-fs
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        args:
        - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
        command:
        - /bin/bash
        - -c
        - --
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        - name: WRITE_CNI_CONF_WHEN_READY
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: write-cni-conf-when-ready
              optional: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
            drop:
              - ALL
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.15.6@sha256:6aa840986a3a9722cd967ef63248d675a87add7e1704740902d5d3162f0c0def"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
      - name: host-proc-sys-net
        hostPath:
          path: /proc/sys/net
          type: Directory
      - name: host-proc-sys-kernel
        hostPath:
          path: /proc/sys/kernel
          type: Directory
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              - key: ca.crt
                path: client-ca.crt
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/port: "9963"
        prometheus.io/scrape: "true"
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.15.6@sha256:5789f0935eef96ad571e4f5565a8800d3a8fbb05265cf6909300cd82fd513c3d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        ports:
        - name: prometheus
          containerPort: 9963
          hostPort: 9963
          protocol: TCP
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      initContainers:
      - name: etcd-init
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - etcdinit
        # These need to match the equivalent arguments to etcd in the main container.
        - --etcd-cluster-name=clustermesh-apiserver
        - --etcd-initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --etcd-data-dir=/var/run/etcd
        env:
          # The Cilium cluster name (specified via the `CILIUM_CLUSTER_NAME` environment variable) and the etcd cluster
          # name (specified via the `--etcd-cluster-name` argument) are very different concepts. The Cilium cluster name
          # is the name of the overall Cilium cluster, and is used to set the admin account username. The etcd cluster
          # name is a concept that's only relevant for etcd itself. The etcd cluster name must be the same for both this
          # command and the actual invocation of etcd in the main containers of this Pod, but it's otherwise not
          # relevant to Cilium.
        - name: CILIUM_CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        # The clustermesh-apiserver container image includes an etcd binary.
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --auto-compaction-retention=1
        - --listen-metrics-urls=http://[$(HOSTNAME_IP)]:9963
        - --metrics=basic
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        - name: etcd-metrics
          containerPort: 9963
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.15.6@sha256:6365c2fe8a038fc7adcdeb7ffb8d7a8a2cd3ee524687f35fff9df76fafeeb029"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - clustermesh
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt
        - etcd.config=/var/lib/cilium/etcd-config.yaml
        - --max-connected-clusters=255
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        - --controller-group-metrics=all
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: IDENTITY_ALLOCATION_MODE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: identity-allocation-mode
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        ports:
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir: {}
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "clustermesh-apiserver"
      serviceAccountName: "clustermesh-apiserver"
      terminationGracePeriodSeconds: 30
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: clustermesh-apiserver
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.15.6@sha256:a0863dd70d081b273b87b9b7ce7e2d3f99171c2f5e202cd57bc6691e51283e0c"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 3
          livenessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 3
          startupProbe:
            # give the relay one minute to start up
            grpc:
              port: 4222
            timeoutSeconds: 3
            failureThreshold: 20
            periodSeconds: 3
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          - name: tls
            mountPath: /var/lib/hubble-relay/tls
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Always
      priorityClassName: 
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 1001
        runAsGroup: 1001
        runAsUser: 1001
      priorityClassName: 
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.13.0@sha256:7d663dc16538dd6e29061abd1047013a645e6e69c115e008bee9ea9fef9a6666"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
        readinessProbe:
          httpGet:
            path: /
            port: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.13.0@sha256:1e7657d997c5a48253bb8dc91ecee75b63018d16ff5e5797e5af367336bc8803"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
